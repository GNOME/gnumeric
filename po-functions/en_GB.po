# gnumeric en_GB.po
# Copyright (C) 1999 Free Software Foundation, Inc.
# Karl Eichwalder <ke@suse.de>, 2001.
# Robert Brady <rwb197@zepler.org>, 2001.
# Bruce Cowan <bruce@bcowan.me.uk>, 2010.
# Chris Leonard <cjlhomeaddress@gmail.com>, 2012.
msgid ""
msgstr ""
"Project-Id-Version: gnumeric 1.2\n"
"Report-Msgid-Bugs-To: http://bugzilla.gnome.org/enter_bug.cgi?"
"product=gnumeric&keywords=I18N+L10N&component=general\n"
"POT-Creation-Date: 2012-09-23 02:01+0000\n"
"PO-Revision-Date: 2012-09-24 00:50-0400\n"
"Last-Translator: Chris Leonard <cjlhomeaddress@gmail.com>\n"
"Language-Team: Sugar Labs\n"
"Language: en_GB\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Virtaal 0.7.1\n"
"X-Project-Style: gnome\n"

#: ../plugins/fn-christian-date/functions.c:140
msgid ""
"EASTERSUNDAY:Easter Sunday in the Gregorian calendar according to the Roman "
"rite of the Christian Church"
msgstr ""
"EASTERSUNDAY:Easter Sunday in the Gregorian calendar according to the Roman "
"rite of the Christian Church"

#: ../plugins/fn-christian-date/functions.c:142
msgid ""
"year:year between 1582 and 9956, defaults to the year of the next Easter "
"Sunday"
msgstr ""
"year:year between 1582 and 9956, defaults to the year of the next Easter "
"Sunday"

#: ../plugins/fn-christian-date/functions.c:143
#: ../plugins/fn-christian-date/functions.c:166
#: ../plugins/fn-christian-date/functions.c:186
#: ../plugins/fn-christian-date/functions.c:205
#: ../plugins/fn-christian-date/functions.c:224
msgid ""
"Two digit years are adjusted as elsewhere in Gnumeric. Dates before 1904 may "
"also be prohibited."
msgstr ""
"Two digit years are adjusted as elsewhere in Gnumeric. Dates before 1904 may "
"also be prohibited."

#: ../plugins/fn-christian-date/functions.c:146
msgid ""
"The 1-argument version of EASTERSUNDAY is compatible with OpenOffice for "
"years after 1904. This function is not specified in ODF/OpenFormula."
msgstr ""
"The 1-argument version of EASTERSUNDAY is compatible with OpenOffice for "
"years after 1904. This function is not specified in ODF/OpenFormula."

#: ../plugins/fn-christian-date/functions.c:163
msgid ""
"ASHWEDNESDAY:Ash Wednesday in the Gregorian calendar according to the Roman "
"rite of the Christian Church"
msgstr ""
"ASHWEDNESDAY:Ash Wednesday in the Gregorian calendar according to the Roman "
"rite of the Christian Church"

#: ../plugins/fn-christian-date/functions.c:165
msgid ""
"year:year between 1582 and 9956, defaults to the year of the next Ash "
"Wednesday"
msgstr ""
"year:year between 1582 and 9956, defaults to the year of the next Ash "
"Wednesday"

#: ../plugins/fn-christian-date/functions.c:183
msgid ""
"PENTECOSTSUNDAY:Pentecost Sunday in the Gregorian calendar according to the "
"Roman rite of the Christian Church"
msgstr ""
"PENTECOSTSUNDAY:Pentecost Sunday in the Gregorian calendar according to the "
"Roman rite of the Christian Church"

#: ../plugins/fn-christian-date/functions.c:185
msgid ""
"year:year between 1582 and 9956, defaults to the year of the next Pentecost "
"Sunday"
msgstr ""
"year:year between 1582 and 9956, defaults to the year of the next Pentecost "
"Sunday"

#: ../plugins/fn-christian-date/functions.c:202
msgid ""
"GOODFRIDAY:Good Friday in the Gregorian calendar according to the Roman rite "
"of the Christian Church"
msgstr ""
"GOODFRIDAY:Good Friday in the Gregorian calendar according to the Roman rite "
"of the Christian Church"

#: ../plugins/fn-christian-date/functions.c:204
msgid ""
"year:year between 1582 and 9956, defaults to the year of the next Good Friday"
msgstr ""
"year:year between 1582 and 9956, defaults to the year of the next Good Friday"

#: ../plugins/fn-christian-date/functions.c:221
msgid ""
"ASCENSIONTHURSDAY:Ascension Thursday in the Gregorian calendar according to "
"the Roman rite of the Christian Church"
msgstr ""
"ASCENSIONTHURSDAY:Ascension Thursday in the Gregorian calendar according to "
"the Roman rite of the Christian Church"

#: ../plugins/fn-christian-date/functions.c:223
msgid ""
"year:year between 1582 and 9956, defaults to the year of the next Ascension "
"Thursday"
msgstr ""
"year:year between 1582 and 9956, defaults to the year of the next Ascension "
"Thursday"

#: ../plugins/fn-complex/functions.c:81
msgid "COMPLEX:a complex number of the form @{x} + @{y}@{i}"
msgstr "COMPLEX:a complex number of the form @{x} + @{y}@{i}"

#: ../plugins/fn-complex/functions.c:82
msgid "x:real part"
msgstr "x:real part"

#: ../plugins/fn-complex/functions.c:83
msgid "y:imaginary part"
msgstr "y:imaginary part"

#: ../plugins/fn-complex/functions.c:84
msgid ""
"i:the suffix for the complex number, either \"i\" or \"j\"; defaults to \"i\""
msgstr ""
"i:the suffix for the complex number, either \"i\" or \"j\"; defaults to \"i\""

#: ../plugins/fn-complex/functions.c:85
msgid "If @{i} is neither \"i\" nor \"j\", COMPLEX returns #VALUE!"
msgstr "If @{i} is neither \"i\" nor \"j\", COMPLEX returns #VALUE!"

#: ../plugins/fn-complex/functions.c:86 ../plugins/fn-complex/functions.c:114
#: ../plugins/fn-complex/functions.c:141 ../plugins/fn-complex/functions.c:165
#: ../plugins/fn-complex/functions.c:192 ../plugins/fn-complex/functions.c:263
#: ../plugins/fn-complex/functions.c:289 ../plugins/fn-complex/functions.c:395
#: ../plugins/fn-complex/functions.c:423 ../plugins/fn-complex/functions.c:449
#: ../plugins/fn-complex/functions.c:474 ../plugins/fn-complex/functions.c:501
#: ../plugins/fn-complex/functions.c:528 ../plugins/fn-complex/functions.c:563
#: ../plugins/fn-complex/functions.c:595
#: ../plugins/fn-complex/functions.c:1078
#: ../plugins/fn-complex/functions.c:1105
#: ../plugins/fn-complex/functions.c:1135
#: ../plugins/fn-complex/functions.c:1204 ../plugins/fn-date/functions.c:84
#: ../plugins/fn-date/functions.c:197 ../plugins/fn-date/functions.c:219
#: ../plugins/fn-date/functions.c:354 ../plugins/fn-date/functions.c:389
#: ../plugins/fn-date/functions.c:406 ../plugins/fn-date/functions.c:431
#: ../plugins/fn-date/functions.c:492 ../plugins/fn-date/functions.c:511
#: ../plugins/fn-date/functions.c:534 ../plugins/fn-date/functions.c:557
#: ../plugins/fn-date/functions.c:579 ../plugins/fn-date/functions.c:603
#: ../plugins/fn-date/functions.c:627 ../plugins/fn-date/functions.c:655
#: ../plugins/fn-date/functions.c:696 ../plugins/fn-date/functions.c:734
#: ../plugins/fn-eng/functions.c:238 ../plugins/fn-eng/functions.c:263
#: ../plugins/fn-eng/functions.c:287 ../plugins/fn-eng/functions.c:316
#: ../plugins/fn-eng/functions.c:342 ../plugins/fn-eng/functions.c:365
#: ../plugins/fn-eng/functions.c:409 ../plugins/fn-eng/functions.c:436
#: ../plugins/fn-eng/functions.c:459 ../plugins/fn-eng/functions.c:482
#: ../plugins/fn-eng/functions.c:505 ../plugins/fn-eng/functions.c:525
#: ../plugins/fn-eng/functions.c:614 ../plugins/fn-eng/functions.c:643
#: ../plugins/fn-eng/functions.c:1133 ../plugins/fn-eng/functions.c:1156
#: ../plugins/fn-info/functions.c:97 ../plugins/fn-info/functions.c:1285
#: ../plugins/fn-info/functions.c:1351 ../plugins/fn-info/functions.c:1440
#: ../plugins/fn-info/functions.c:1458 ../plugins/fn-info/functions.c:1480
#: ../plugins/fn-info/functions.c:1507 ../plugins/fn-info/functions.c:1534
#: ../plugins/fn-info/functions.c:1571 ../plugins/fn-info/functions.c:1587
#: ../plugins/fn-info/functions.c:1609 ../plugins/fn-info/functions.c:1626
#: ../plugins/fn-info/functions.c:1644 ../plugins/fn-info/functions.c:1661
#: ../plugins/fn-info/functions.c:1683 ../plugins/fn-info/functions.c:1703
#: ../plugins/fn-info/functions.c:1722 ../plugins/fn-info/functions.c:1759
#: ../plugins/fn-logical/functions.c:52 ../plugins/fn-logical/functions.c:103
#: ../plugins/fn-logical/functions.c:131 ../plugins/fn-logical/functions.c:269
#: ../plugins/fn-logical/functions.c:287 ../plugins/fn-math/functions.c:64
#: ../plugins/fn-math/functions.c:127 ../plugins/fn-math/functions.c:228
#: ../plugins/fn-math/functions.c:246 ../plugins/fn-math/functions.c:268
#: ../plugins/fn-math/functions.c:328 ../plugins/fn-math/functions.c:354
#: ../plugins/fn-math/functions.c:378 ../plugins/fn-math/functions.c:397
#: ../plugins/fn-math/functions.c:432 ../plugins/fn-math/functions.c:478
#: ../plugins/fn-math/functions.c:557 ../plugins/fn-math/functions.c:669
#: ../plugins/fn-math/functions.c:737 ../plugins/fn-math/functions.c:766
#: ../plugins/fn-math/functions.c:786 ../plugins/fn-math/functions.c:840
#: ../plugins/fn-math/functions.c:859 ../plugins/fn-math/functions.c:893
#: ../plugins/fn-math/functions.c:954 ../plugins/fn-math/functions.c:1032
#: ../plugins/fn-math/functions.c:1089 ../plugins/fn-math/functions.c:1122
#: ../plugins/fn-math/functions.c:1144 ../plugins/fn-math/functions.c:1172
#: ../plugins/fn-math/functions.c:1196 ../plugins/fn-math/functions.c:1222
#: ../plugins/fn-math/functions.c:1296 ../plugins/fn-math/functions.c:1339
#: ../plugins/fn-math/functions.c:1357 ../plugins/fn-math/functions.c:1454
#: ../plugins/fn-math/functions.c:1472 ../plugins/fn-math/functions.c:1519
#: ../plugins/fn-math/functions.c:1543 ../plugins/fn-math/functions.c:1589
#: ../plugins/fn-math/functions.c:1606 ../plugins/fn-math/functions.c:1643
#: ../plugins/fn-math/functions.c:1678 ../plugins/fn-math/functions.c:1713
#: ../plugins/fn-math/functions.c:1750 ../plugins/fn-math/functions.c:1829
#: ../plugins/fn-math/functions.c:1854 ../plugins/fn-math/functions.c:1881
#: ../plugins/fn-math/functions.c:1907 ../plugins/fn-math/functions.c:1931
#: ../plugins/fn-math/functions.c:1972 ../plugins/fn-math/functions.c:2017
#: ../plugins/fn-math/functions.c:2144 ../plugins/fn-math/functions.c:2392
#: ../plugins/fn-math/functions.c:2436 ../plugins/fn-math/functions.c:2479
#: ../plugins/fn-math/functions.c:2522 ../plugins/fn-math/functions.c:2579
#: ../plugins/fn-math/functions.c:2836 ../plugins/fn-math/functions.c:2903
#: ../plugins/fn-math/functions.c:2952 ../plugins/fn-random/functions.c:48
#: ../plugins/fn-random/functions.c:249 ../plugins/fn-stat/functions.c:83
#: ../plugins/fn-stat/functions.c:111 ../plugins/fn-stat/functions.c:138
#: ../plugins/fn-stat/functions.c:166 ../plugins/fn-stat/functions.c:276
#: ../plugins/fn-stat/functions.c:324 ../plugins/fn-stat/functions.c:354
#: ../plugins/fn-stat/functions.c:384 ../plugins/fn-stat/functions.c:417
#: ../plugins/fn-stat/functions.c:441 ../plugins/fn-stat/functions.c:466
#: ../plugins/fn-stat/functions.c:497 ../plugins/fn-stat/functions.c:526
#: ../plugins/fn-stat/functions.c:555 ../plugins/fn-stat/functions.c:575
#: ../plugins/fn-stat/functions.c:602 ../plugins/fn-stat/functions.c:629
#: ../plugins/fn-stat/functions.c:655 ../plugins/fn-stat/functions.c:691
#: ../plugins/fn-stat/functions.c:725 ../plugins/fn-stat/functions.c:751
#: ../plugins/fn-stat/functions.c:786 ../plugins/fn-stat/functions.c:826
#: ../plugins/fn-stat/functions.c:880 ../plugins/fn-stat/functions.c:948
#: ../plugins/fn-stat/functions.c:980 ../plugins/fn-stat/functions.c:1010
#: ../plugins/fn-stat/functions.c:1037 ../plugins/fn-stat/functions.c:1067
#: ../plugins/fn-stat/functions.c:1155 ../plugins/fn-stat/functions.c:1192
#: ../plugins/fn-stat/functions.c:1275 ../plugins/fn-stat/functions.c:1312
#: ../plugins/fn-stat/functions.c:1478 ../plugins/fn-stat/functions.c:1510
#: ../plugins/fn-stat/functions.c:1606 ../plugins/fn-stat/functions.c:1633
#: ../plugins/fn-stat/functions.c:1663 ../plugins/fn-stat/functions.c:1698
#: ../plugins/fn-stat/functions.c:1725 ../plugins/fn-stat/functions.c:1757
#: ../plugins/fn-stat/functions.c:1789 ../plugins/fn-stat/functions.c:1821
#: ../plugins/fn-stat/functions.c:1854 ../plugins/fn-stat/functions.c:1904
#: ../plugins/fn-stat/functions.c:1929 ../plugins/fn-stat/functions.c:1954
#: ../plugins/fn-stat/functions.c:1986 ../plugins/fn-stat/functions.c:2015
#: ../plugins/fn-stat/functions.c:2034 ../plugins/fn-stat/functions.c:2060
#: ../plugins/fn-stat/functions.c:2192 ../plugins/fn-stat/functions.c:2235
#: ../plugins/fn-stat/functions.c:2284 ../plugins/fn-stat/functions.c:2364
#: ../plugins/fn-stat/functions.c:2422 ../plugins/fn-stat/functions.c:2481
#: ../plugins/fn-stat/functions.c:2506 ../plugins/fn-stat/functions.c:2533
#: ../plugins/fn-stat/functions.c:2565 ../plugins/fn-stat/functions.c:2592
#: ../plugins/fn-stat/functions.c:2622 ../plugins/fn-stat/functions.c:2649
#: ../plugins/fn-stat/functions.c:2773 ../plugins/fn-stat/functions.c:2816
#: ../plugins/fn-stat/functions.c:2857 ../plugins/fn-stat/functions.c:2923
#: ../plugins/fn-stat/functions.c:3092 ../plugins/fn-stat/functions.c:3959
#: ../plugins/fn-stat/functions.c:4016 ../plugins/fn-stat/functions.c:4064
#: ../plugins/fn-stat/functions.c:4129 ../plugins/fn-string/functions.c:68
#: ../plugins/fn-string/functions.c:140 ../plugins/fn-string/functions.c:247
#: ../plugins/fn-string/functions.c:266 ../plugins/fn-string/functions.c:283
#: ../plugins/fn-string/functions.c:303 ../plugins/fn-string/functions.c:367
#: ../plugins/fn-string/functions.c:387 ../plugins/fn-string/functions.c:514
#: ../plugins/fn-string/functions.c:583 ../plugins/fn-string/functions.c:603
#: ../plugins/fn-string/functions.c:625 ../plugins/fn-string/functions.c:669
#: ../plugins/fn-string/functions.c:700 ../plugins/fn-string/functions.c:738
#: ../plugins/fn-string/functions.c:795 ../plugins/fn-string/functions.c:841
#: ../plugins/fn-string/functions.c:942 ../plugins/fn-string/functions.c:966
#: ../plugins/fn-string/functions.c:1019 ../plugins/fn-string/functions.c:1066
#: ../plugins/fn-string/functions.c:1162 ../plugins/fn-string/functions.c:1233
#: ../plugins/fn-string/functions.c:1316
msgid "This function is Excel compatible."
msgstr "This function is Excel compatible."

#: ../plugins/fn-complex/functions.c:111
msgid "IMAGINARY:the imaginary part of the complex number @{z}"
msgstr "IMAGINARY:the imaginary part of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:112 ../plugins/fn-complex/functions.c:139
#: ../plugins/fn-complex/functions.c:163 ../plugins/fn-complex/functions.c:190
#: ../plugins/fn-complex/functions.c:215 ../plugins/fn-complex/functions.c:238
#: ../plugins/fn-complex/functions.c:261 ../plugins/fn-complex/functions.c:287
#: ../plugins/fn-complex/functions.c:313 ../plugins/fn-complex/functions.c:340
#: ../plugins/fn-complex/functions.c:366 ../plugins/fn-complex/functions.c:393
#: ../plugins/fn-complex/functions.c:420 ../plugins/fn-complex/functions.c:444
#: ../plugins/fn-complex/functions.c:472 ../plugins/fn-complex/functions.c:499
#: ../plugins/fn-complex/functions.c:593 ../plugins/fn-complex/functions.c:618
#: ../plugins/fn-complex/functions.c:642 ../plugins/fn-complex/functions.c:667
#: ../plugins/fn-complex/functions.c:692 ../plugins/fn-complex/functions.c:716
#: ../plugins/fn-complex/functions.c:741 ../plugins/fn-complex/functions.c:765
#: ../plugins/fn-complex/functions.c:792 ../plugins/fn-complex/functions.c:819
#: ../plugins/fn-complex/functions.c:846 ../plugins/fn-complex/functions.c:870
#: ../plugins/fn-complex/functions.c:895 ../plugins/fn-complex/functions.c:919
#: ../plugins/fn-complex/functions.c:946 ../plugins/fn-complex/functions.c:974
#: ../plugins/fn-complex/functions.c:1002
#: ../plugins/fn-complex/functions.c:1026
#: ../plugins/fn-complex/functions.c:1051
#: ../plugins/fn-complex/functions.c:1076
msgid "z:a complex number"
msgstr "z:a complex number"

#: ../plugins/fn-complex/functions.c:113 ../plugins/fn-complex/functions.c:140
#: ../plugins/fn-complex/functions.c:164 ../plugins/fn-complex/functions.c:191
#: ../plugins/fn-complex/functions.c:216 ../plugins/fn-complex/functions.c:239
#: ../plugins/fn-complex/functions.c:262 ../plugins/fn-complex/functions.c:288
#: ../plugins/fn-complex/functions.c:315 ../plugins/fn-complex/functions.c:342
#: ../plugins/fn-complex/functions.c:368 ../plugins/fn-complex/functions.c:394
#: ../plugins/fn-complex/functions.c:422 ../plugins/fn-complex/functions.c:448
#: ../plugins/fn-complex/functions.c:473 ../plugins/fn-complex/functions.c:500
#: ../plugins/fn-complex/functions.c:594 ../plugins/fn-complex/functions.c:619
#: ../plugins/fn-complex/functions.c:643 ../plugins/fn-complex/functions.c:668
#: ../plugins/fn-complex/functions.c:693 ../plugins/fn-complex/functions.c:717
#: ../plugins/fn-complex/functions.c:742 ../plugins/fn-complex/functions.c:768
#: ../plugins/fn-complex/functions.c:795 ../plugins/fn-complex/functions.c:822
#: ../plugins/fn-complex/functions.c:847 ../plugins/fn-complex/functions.c:871
#: ../plugins/fn-complex/functions.c:896 ../plugins/fn-complex/functions.c:922
#: ../plugins/fn-complex/functions.c:950 ../plugins/fn-complex/functions.c:978
#: ../plugins/fn-complex/functions.c:1003
#: ../plugins/fn-complex/functions.c:1027
#: ../plugins/fn-complex/functions.c:1052
#: ../plugins/fn-complex/functions.c:1077
msgid "If @{z} is not a valid complex number, #VALUE! is returned."
msgstr "If @{z} is not a valid complex number, #VALUE! is returned."

#: ../plugins/fn-complex/functions.c:138
msgid "IMABS:the absolute value of the complex number @{z}"
msgstr "IMABS:the absolute value of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:162
msgid "IMREAL:the real part of the complex number @{z}"
msgstr "IMREAL:the real part of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:189
msgid "IMCONJUGATE:the complex conjugate of the complex number @{z}"
msgstr "IMCONJUGATE:the complex conjugate of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:214
msgid "IMINV:the reciprocal, or inverse, of the complex number @{z}"
msgstr "IMINV:the reciprocal, or inverse, of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:237
msgid "IMNEG:the negative of the complex number @{z}"
msgstr "IMNEG:the negative of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:260
msgid "IMCOS:the cosine of the complex number @{z}"
msgstr "IMCOS:the cosine of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:286
msgid "IMTAN:the tangent of the complex number @{z}"
msgstr "IMTAN:the tangent of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:312
msgid "IMSEC:the secant of the complex number @{z}"
msgstr "IMSEC:the secant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:314
msgid "IMSEC(@{z}) = 1/IMCOS(@{z})."
msgstr "IMSEC(@{z}) = 1/IMCOS(@{z})."

#: ../plugins/fn-complex/functions.c:339
msgid "IMCSC:the cosecant of the complex number @{z}"
msgstr "IMCSC:the cosecant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:341
msgid "IMCSC(@{z}) = 1/IMSIN(@{z})."
msgstr "IMCSC(@{z}) = 1/IMSIN(@{z})."

#: ../plugins/fn-complex/functions.c:365
msgid "IMCOT:the cotangent of the complex number @{z}"
msgstr "IMCOT:the cotangent of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:367
msgid "IMCOT(@{z}) = IMCOS(@{z})/IMSIN(@{z})."
msgstr "IMCOT(@{z}) = IMCOS(@{z})/IMSIN(@{z})."

#: ../plugins/fn-complex/functions.c:392
msgid "IMEXP:the exponential of the complex number @{z}"
msgstr "IMEXP:the exponential of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:419
msgid "IMARGUMENT:the argument theta of the complex number @{z} "
msgstr "IMARGUMENT:the argument theta of the complex number @{z} "

#: ../plugins/fn-complex/functions.c:421
msgid ""
"The argument theta of a complex number is its angle in radians from the real "
"axis."
msgstr ""
"The argument theta of a complex number is its angle in radians from the real "
"axis."

#: ../plugins/fn-complex/functions.c:443
msgid "IMLN:the natural logarithm of the complex number @{z}"
msgstr "IMLN:the natural logarithm of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:445
msgid ""
"The result will have an imaginary part between -π and +π.\n"
"The natural logarithm is not uniquely defined on complex numbers. You may "
"need to add or subtract an even multiple of π to the imaginary part."
msgstr ""
"The result will have an imaginary part between -π and +π.\n"
"The natural logarithm is not uniquely defined on complex numbers. You may "
"need to add or subtract an even multiple of π to the imaginary part."

#: ../plugins/fn-complex/functions.c:471
msgid "IMLOG2:the base-2 logarithm of the complex number @{z}"
msgstr "IMLOG2:the base-2 logarithm of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:498
msgid "IMLOG10:the base-10 logarithm of the complex number @{z}"
msgstr "IMLOG10:the base-10 logarithm of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:524
msgid "IMPOWER:the complex number @{z1} raised to the @{z2}th power"
msgstr "IMPOWER:the complex number @{z1} raised to the @{z2}th power"

#: ../plugins/fn-complex/functions.c:525 ../plugins/fn-complex/functions.c:560
#: ../plugins/fn-complex/functions.c:1102
#: ../plugins/fn-complex/functions.c:1132
#: ../plugins/fn-complex/functions.c:1201
msgid "z1:a complex number"
msgstr "z1:a complex number"

#: ../plugins/fn-complex/functions.c:526 ../plugins/fn-complex/functions.c:561
#: ../plugins/fn-complex/functions.c:1103
#: ../plugins/fn-complex/functions.c:1133
#: ../plugins/fn-complex/functions.c:1202
msgid "z2:a complex number"
msgstr "z2:a complex number"

#: ../plugins/fn-complex/functions.c:527 ../plugins/fn-complex/functions.c:562
#: ../plugins/fn-complex/functions.c:1104
msgid "If @{z1} or @{z2} is not a valid complex number, #VALUE! is returned."
msgstr "If @{z1} or @{z2} is not a valid complex number, #VALUE! is returned."

#: ../plugins/fn-complex/functions.c:559
msgid "IMDIV:the quotient of two complex numbers @{z1}/@{z2}"
msgstr "IMDIV:the quotient of two complex numbers @{z1}/@{z2}"

#: ../plugins/fn-complex/functions.c:592
msgid "IMSIN:the sine of the complex number @{z}"
msgstr "IMSIN:the sine of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:617
msgid "IMSINH:the hyperbolic sine of the complex number @{z}"
msgstr "IMSINH:the hyperbolic sine of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:641
msgid "IMCOSH:the hyperbolic cosine of the complex number @{z}"
msgstr "IMCOSH:the hyperbolic cosine of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:666
msgid "IMTANH:the hyperbolic tangent of the complex number @{z}"
msgstr "IMTANH:the hyperbolic tangent of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:691
msgid "IMSECH:the hyperbolic secant of the complex number @{z}"
msgstr "IMSECH:the hyperbolic secant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:715
msgid "IMCSCH:the hyperbolic cosecant of the complex number @{z}"
msgstr "IMCSCH:the hyperbolic cosecant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:740
msgid "IMCOTH:the hyperbolic cotangent of the complex number @{z}"
msgstr "IMCOTH:the hyperbolic cotangent of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:764
msgid "IMARCSIN:the complex arcsine of the complex number @{z}"
msgstr "IMARCSIN:the complex arcsine of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:766
msgid ""
"IMARCSIN returns the complex arcsine of the complex number @{z}. The branch "
"cuts are on the real axis, less than -1 and greater than 1."
msgstr ""
"IMARCSIN returns the complex arcsine of the complex number @{z}. The branch "
"cuts are on the real axis, less than -1 and greater than 1."

#: ../plugins/fn-complex/functions.c:791
msgid "IMARCCOS:the complex arccosine of the complex number "
msgstr "IMARCCOS:the complex arccosine of the complex number "

#: ../plugins/fn-complex/functions.c:793
msgid ""
"IMARCCOS returns the complex arccosine of the complex number @{z}. The "
"branch cuts are on the real axis, less than -1 and greater than 1."
msgstr ""
"IMARCCOS returns the complex arccosine of the complex number @{z}. The "
"branch cuts are on the real axis, less than -1 and greater than 1."

#: ../plugins/fn-complex/functions.c:818
msgid "IMARCTAN:the complex arctangent of the complex number "
msgstr "IMARCTAN:the complex arctangent of the complex number "

#: ../plugins/fn-complex/functions.c:820
msgid ""
"IMARCTAN returns the complex arctangent of the complex number @{z}. The "
"branch cuts are on the imaginary axis, below -i and above i."
msgstr ""
"IMARCTAN returns the complex arctangent of the complex number @{z}. The "
"branch cuts are on the imaginary axis, below -i and above i."

#: ../plugins/fn-complex/functions.c:845
msgid "IMARCSEC:the complex arcsecant of the complex number @{z}"
msgstr "IMARCSEC:the complex arcsecant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:869
msgid "IMARCCSC:the complex arccosecant of the complex number @{z}"
msgstr "IMARCCSC:the complex arccosecant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:894
msgid "IMARCCOT:the complex arccotangent of the complex number @{z}"
msgstr "IMARCCOT:the complex arccotangent of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:918
msgid "IMARCSINH:the complex hyperbolic arcsine of the complex number @{z}"
msgstr "IMARCSINH:the complex hyperbolic arcsine of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:920
msgid ""
"IMARCSINH returns the complex hyperbolic arcsine of the complex number @"
"{z}.  The branch cuts are on the imaginary axis, below -i and above i."
msgstr ""
"IMARCSINH returns the complex hyperbolic arcsine of the complex number @"
"{z}.  The branch cuts are on the imaginary axis, below -i and above i."

#: ../plugins/fn-complex/functions.c:945
msgid "IMARCCOSH:the complex hyperbolic arccosine of the complex number @{z}"
msgstr "IMARCCOSH:the complex hyperbolic arccosine of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:947
msgid ""
"IMARCCOSH returns the complex hyperbolic arccosine of the complex number @"
"{z}. The branch cut is on the real axis, less than 1."
msgstr ""
"IMARCCOSH returns the complex hyperbolic arccosine of the complex number @"
"{z}. The branch cut is on the real axis, less than 1."

#: ../plugins/fn-complex/functions.c:973
msgid "IMARCTANH:the complex hyperbolic arctangent of the complex number @{z}"
msgstr "IMARCTANH:the complex hyperbolic arctangent of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:975
msgid ""
"IMARCTANH returns the complex hyperbolic arctangent of the complex number @"
"{z}. The branch cuts are on the real axis, less than -1 and greater than 1."
msgstr ""
"IMARCTANH returns the complex hyperbolic arctangent of the complex number @"
"{z}. The branch cuts are on the real axis, less than -1 and greater than 1."

#: ../plugins/fn-complex/functions.c:1001
msgid "IMARCSECH:the complex hyperbolic arcsecant of the complex number @{z}"
msgstr "IMARCSECH:the complex hyperbolic arcsecant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:1025
msgid "IMARCCSCH:the complex hyperbolic arccosecant of the complex number @{z}"
msgstr ""
"IMARCCSCH:the complex hyperbolic arccosecant of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:1050
msgid ""
"IMARCCOTH:the complex hyperbolic arccotangent of the complex number @{z}"
msgstr ""
"IMARCCOTH:the complex hyperbolic arccotangent of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:1075
msgid "IMSQRT:the square root of the complex number @{z}"
msgstr "IMSQRT:the square root of the complex number @{z}"

#: ../plugins/fn-complex/functions.c:1101
msgid "IMSUB:the difference of two complex numbers"
msgstr "IMSUB:the difference of two complex numbers"

#: ../plugins/fn-complex/functions.c:1131
msgid "IMPRODUCT:the product of the given complex numbers"
msgstr "IMPRODUCT:the product of the given complex numbers"

#: ../plugins/fn-complex/functions.c:1134
#: ../plugins/fn-complex/functions.c:1203
msgid ""
"If any of @{z1}, @{z2},... is not a valid complex number, #VALUE! is "
"returned."
msgstr ""
"If any of @{z1}, @{z2},... is not a valid complex number, #VALUE! is "
"returned."

#: ../plugins/fn-complex/functions.c:1200
msgid "IMSUM:the sum of the given complex numbers"
msgstr "IMSUM:the sum of the given complex numbers"

#: ../plugins/fn-database/functions.c:45
msgid ""
"database:a range in which rows of related information are records and "
"columns of data are fields"
msgstr ""
"database:a range in which rows of related information are records and "
"columns of data are fields"

#: ../plugins/fn-database/functions.c:48
msgid "field:a string or integer specifying which field is to be used"
msgstr "field:a string or integer specifying which field is to be used"

#: ../plugins/fn-database/functions.c:50
msgid "criteria:a range containing conditions"
msgstr "criteria:a range containing conditions"

#: ../plugins/fn-database/functions.c:52
msgid ""
"@{database} is a range in which rows of related information are records and "
"columns of data are fields. The first row of a database contains labels for "
"each column."
msgstr ""
"@{database} is a range in which rows of related information are records and "
"columns of data are fields. The first row of a database contains labels for "
"each column."

#: ../plugins/fn-database/functions.c:57
msgid ""
"@{field} is a string or integer specifying which field is to be used. If @"
"{field} is an integer n then the nth column will be used. If @{field} is a "
"string, then the column with the matching label will be used."
msgstr ""
"@{field} is a string or integer specifying which field is to be used. If @"
"{field} is an integer n then the nth column will be used. If @{field} is a "
"string, then the column with the matching label will be used."

#: ../plugins/fn-database/functions.c:62
msgid ""
"@{criteria} is a range containing conditions. The first row of a @{criteria} "
"should contain labels. Each label specifies to which field the conditions "
"given in that column apply. Each cell below the label specifies a condition "
"such as \">3\" or \"<9\". An equality condition can be given by simply "
"specifying a value, e. g. \"3\" or \"Jody\". For a record to be considered "
"it must satisfy all conditions in at least one of the rows of @{criteria}."
msgstr ""
"@{criteria} is a range containing conditions. The first row of a @{criteria} "
"should contain labels. Each label specifies to which field the conditions "
"given in that column apply. Each cell below the label specifies a condition "
"such as \">3\" or \"<9\". An equality condition can be given by simply "
"specifying a value, e. g. \"3\" or \"Jody\". For a record to be considered "
"it must satisfy all conditions in at least one of the rows of @{criteria}."

#: ../plugins/fn-database/functions.c:73
msgid ""
"Let us assume that the range A1:C7 contain the following values:\n"
"\n"
"Name    \tAge     \tSalary\n"
"John    \t34      \t54342\n"
"Bill    \t35      \t22343\n"
"Clark   \t29      \t34323\n"
"Bob     \t43      \t47242\n"
"Susan   \t37      \t42932\n"
"Jill    \t\t45      \t45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     \tSalary\n"
"<30\n"
">40     \t>46000\n"
msgstr ""
"Let us assume that the range A1:C7 contain the following values:\n"
"\n"
"Name    \tAge     \tSalary\n"
"John    \t34      \t54342\n"
"Bill    \t35      \t22343\n"
"Clark   \t29      \t34323\n"
"Bob     \t43      \t47242\n"
"Susan   \t37      \t42932\n"
"Jill    \t\t45      \t45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     \tSalary\n"
"<30\n"
">40     \t>46000\n"

#: ../plugins/fn-database/functions.c:322
msgid ""
"DAVERAGE:average of the values in @{field} in @{database} belonging to "
"records that match @{criteria}"
msgstr ""
"DAVERAGE:average of the values in @{field} in @{database} belonging to "
"records that match @{criteria}"

#: ../plugins/fn-database/functions.c:331
msgid "DAVERAGE(A1:C7, \"Salary\", A9:A11) equals 42296.3333."
msgstr "DAVERAGE(A1:C7, \"Salary\", A9:A11) equals 42296.3333."

#: ../plugins/fn-database/functions.c:332
msgid "DAVERAGE(A1:C7, \"Age\", A9:A11) equals 39."
msgstr "DAVERAGE(A1:C7, \"Age\", A9:A11) equals 39."

#: ../plugins/fn-database/functions.c:333
msgid "DAVERAGE(A1:C7, \"Salary\", A9:B11) equals 40782.5."
msgstr "DAVERAGE(A1:C7, \"Salary\", A9:B11) equals 40782.5."

#: ../plugins/fn-database/functions.c:334
msgid "DAVERAGE(A1:C7, \"Age\", A9:B11) equals 36."
msgstr "DAVERAGE(A1:C7, \"Age\", A9:B11) equals 36."

#: ../plugins/fn-database/functions.c:358
msgid ""
"DCOUNT:count of numbers in @{field} in @{database} belonging to records that "
"match @{criteria}"
msgstr ""
"DCOUNT:count of numbers in @{field} in @{database} belonging to records that "
"match @{criteria}"

#: ../plugins/fn-database/functions.c:367
msgid "DCOUNT(A1:C7, \"Salary\", A9:A11) equals 3."
msgstr "DCOUNT(A1:C7, \"Salary\", A9:A11) equals 3."

#: ../plugins/fn-database/functions.c:368
msgid "DCOUNT(A1:C7, \"Salary\", A9:B11) equals 2."
msgstr "DCOUNT(A1:C7, \"Salary\", A9:B11) equals 2."

#: ../plugins/fn-database/functions.c:369
msgid "DCOUNT(A1:C7, \"Name\", A9:B11) equals 0."
msgstr "DCOUNT(A1:C7, \"Name\", A9:B11) equals 0."

#: ../plugins/fn-database/functions.c:393
msgid ""
"DCOUNTA:count of cells with data in @{field} in @{database} belonging to "
"records that match @{criteria}"
msgstr ""
"DCOUNTA:count of cells with data in @{field} in @{database} belonging to "
"records that match @{criteria}"

#: ../plugins/fn-database/functions.c:402
msgid "DCOUNTA(A1:C7, \"Salary\", A9:A11) equals 3."
msgstr "DCOUNTA(A1:C7, \"Salary\", A9:A11) equals 3."

#: ../plugins/fn-database/functions.c:403
msgid "DCOUNTA(A1:C7, \"Salary\", A9:B11) equals 2."
msgstr "DCOUNTA(A1:C7, \"Salary\", A9:B11) equals 2."

#: ../plugins/fn-database/functions.c:404
msgid "DCOUNTA(A1:C7, \"Name\", A9:B11) equals 2."
msgstr "DCOUNTA(A1:C7, \"Name\", A9:B11) equals 2."

#: ../plugins/fn-database/functions.c:425
msgid ""
"DGET:a value from @{field} in @{database} belonging to records that match @"
"{criteria}"
msgstr ""
"DGET:a value from @{field} in @{database} belonging to records that match @"
"{criteria}"

#: ../plugins/fn-database/functions.c:434
msgid "If none of the records match the conditions, DGET returns #VALUE!"
msgstr "If none of the records match the conditions, DGET returns #VALUE!"

#: ../plugins/fn-database/functions.c:435
msgid "If more than one record match the conditions, DGET returns #NUM!"
msgstr "If more than one record match the conditions, DGET returns #NUM!"

#: ../plugins/fn-database/functions.c:436
msgid "DGET(A1:C7, \"Salary\", A9:A10) equals 34323."
msgstr "DGET(A1:C7, \"Salary\", A9:A10) equals 34323."

#: ../plugins/fn-database/functions.c:437
msgid "DGET(A1:C7, \"Name\", A9:A10) equals \"Clark\"."
msgstr "DGET(A1:C7, \"Name\", A9:A10) equals \"Clark\"."

#: ../plugins/fn-database/functions.c:466
msgid ""
"DMAX:largest number in @{field} in @{database} belonging to a record that "
"match @{criteria}"
msgstr ""
"DMAX:largest number in @{field} in @{database} belonging to a record that "
"match @{criteria}"

#: ../plugins/fn-database/functions.c:475
msgid "DMAX(A1:C7, \"Salary\", A9:A11) equals 47242."
msgstr "DMAX(A1:C7, \"Salary\", A9:A11) equals 47242."

#: ../plugins/fn-database/functions.c:476
msgid "DMAX(A1:C7, \"Age\", A9:A11) equals 45."
msgstr "DMAX(A1:C7, \"Age\", A9:A11) equals 45."

#: ../plugins/fn-database/functions.c:477
msgid "DMAX(A1:C7, \"Age\", A9:B11) equals 43."
msgstr "DMAX(A1:C7, \"Age\", A9:B11) equals 43."

#: ../plugins/fn-database/functions.c:502
msgid ""
"DMIN:smallest number in @{field} in @{database} belonging to a record that "
"match @{criteria}"
msgstr ""
"DMIN:smallest number in @{field} in @{database} belonging to a record that "
"match @{criteria}"

#: ../plugins/fn-database/functions.c:511
msgid "DMIN(A1:C7, \"Salary\", A9:B11) equals 34323."
msgstr "DMIN(A1:C7, \"Salary\", A9:B11) equals 34323."

#: ../plugins/fn-database/functions.c:512
msgid "DMIN(A1:C7, \"Age\", A9:B11) equals 29."
msgstr "DMIN(A1:C7, \"Age\", A9:B11) equals 29."

#: ../plugins/fn-database/functions.c:535
msgid ""
"DPRODUCT:product of all values in @{field} in @{database} belonging to "
"records that match @{criteria}"
msgstr ""
"DPRODUCT:product of all values in @{field} in @{database} belonging to "
"records that match @{criteria}"

#: ../plugins/fn-database/functions.c:544
msgid "DPRODUCT(A1:C7, \"Age\", A9:B11) equals 1247."
msgstr "DPRODUCT(A1:C7, \"Age\", A9:B11) equals 1247."

#: ../plugins/fn-database/functions.c:568
msgid ""
"DSTDEV:sample standard deviation of the values in @{field} in @{database} "
"belonging to records that match @{criteria}"
msgstr ""
"DSTDEV:sample standard deviation of the values in @{field} in @{database} "
"belonging to records that match @{criteria}"

#: ../plugins/fn-database/functions.c:577
msgid "DSTDEV(A1:C7, \"Age\", A9:B11) equals 9.89949."
msgstr "DSTDEV(A1:C7, \"Age\", A9:B11) equals 9.89949."

#: ../plugins/fn-database/functions.c:578
msgid "DSTDEV(A1:C7, \"Salary\", A9:B11) equals 9135.112506."
msgstr "DSTDEV(A1:C7, \"Salary\", A9:B11) equals 9135.112506."

#: ../plugins/fn-database/functions.c:601
msgid ""
"DSTDEVP:standard deviation of the population of values in @{field} in @"
"{database} belonging to records that match @{criteria}"
msgstr ""
"DSTDEVP:standard deviation of the population of values in @{field} in @"
"{database} belonging to records that match @{criteria}"

#: ../plugins/fn-database/functions.c:611
msgid "DSTDEVP(A1:C7, \"Age\", A9:B11) equals 7."
msgstr "DSTDEVP(A1:C7, \"Age\", A9:B11) equals 7."

#: ../plugins/fn-database/functions.c:612
msgid "DSTDEVP(A1:C7, \"Salary\", A9:B11) equals 6459.5."
msgstr "DSTDEVP(A1:C7, \"Salary\", A9:B11) equals 6459.5."

#: ../plugins/fn-database/functions.c:635
msgid ""
"DSUM:sum of the values in @{field} in @{database} belonging to records that "
"match @{criteria}"
msgstr ""
"DSUM:sum of the values in @{field} in @{database} belonging to records that "
"match @{criteria}"

#: ../plugins/fn-database/functions.c:644
msgid "DSUM(A1:C7, \"Age\", A9:B11) equals 72."
msgstr "DSUM(A1:C7, \"Age\", A9:B11) equals 72."

#: ../plugins/fn-database/functions.c:645
msgid "DSUM(A1:C7, \"Salary\", A9:B11) equals 81565."
msgstr "DSUM(A1:C7, \"Salary\", A9:B11) equals 81565."

#: ../plugins/fn-database/functions.c:669
msgid ""
"DVAR:sample variance of the values in @{field} in @{database} belonging to "
"records that match @{criteria}"
msgstr ""
"DVAR:sample variance of the values in @{field} in @{database} belonging to "
"records that match @{criteria}"

#: ../plugins/fn-database/functions.c:678
msgid "DVAR(A1:C7, \"Age\", A9:B11) equals 98."
msgstr "DVAR(A1:C7, \"Age\", A9:B11) equals 98."

#: ../plugins/fn-database/functions.c:679
msgid "DVAR(A1:C7, \"Salary\", A9:B11) equals 83450280.5."
msgstr "DVAR(A1:C7, \"Salary\", A9:B11) equals 83450280.5."

#: ../plugins/fn-database/functions.c:702
msgid ""
"DVARP:variance of the population of values in @{field} in @{database} "
"belonging to records that match @{criteria}"
msgstr ""
"DVARP:variance of the population of values in @{field} in @{database} "
"belonging to records that match @{criteria}"

#: ../plugins/fn-database/functions.c:712
msgid "DVARP(A1:C7, \"Age\", A9:B11) equals 49."
msgstr "DVARP(A1:C7, \"Age\", A9:B11) equals 49."

#: ../plugins/fn-database/functions.c:713
msgid "DVARP(A1:C7, \"Salary\", A9:B11) equals 41725140.25."
msgstr "DVARP(A1:C7, \"Salary\", A9:B11) equals 41725140.25."

#: ../plugins/fn-database/functions.c:736
msgid "GETPIVOTDATA:summary data from a pivot table"
msgstr "GETPIVOTDATA:summary data from a pivot table"

#: ../plugins/fn-database/functions.c:737
msgid "pivot_table:cell range containing the pivot table"
msgstr "pivot_table:cell range containing the pivot table"

#: ../plugins/fn-database/functions.c:738
msgid "field_name:name of the field for which the summary data is requested"
msgstr "field_name:name of the field for which the summary data is requested"

#: ../plugins/fn-database/functions.c:739
msgid "If the summary data is unavailable, GETPIVOTDATA returns #REF!"
msgstr "If the summary data is unavailable, GETPIVOTDATA returns #REF!"

#: ../plugins/fn-date/functions.c:74
msgid "DATE:create a date serial value"
msgstr "DATE:create a date serial value"

#: ../plugins/fn-date/functions.c:75
msgid "year:year of date"
msgstr "year:year of date"

#: ../plugins/fn-date/functions.c:76
msgid "month:month of year"
msgstr "month:month of year"

#: ../plugins/fn-date/functions.c:77
msgid "day:day of month"
msgstr "day:day of month"

#: ../plugins/fn-date/functions.c:78
msgid ""
"The DATE function creates date serial values.  1-Jan-1900 is serial value 1, "
"2-Jan-1900 is serial value 2, and so on.  For compatibility reasons, a "
"serial value is reserved for the non-existing date 29-Feb-1900."
msgstr ""
"The DATE function creates date serial values.  1-Jan-1900 is serial value 1, "
"2-Jan-1900 is serial value 2, and so on.  For compatibility reasons, a "
"serial value is reserved for the non-existing date 29-Feb-1900."

#: ../plugins/fn-date/functions.c:79
msgid ""
"If @{month} or @{day} is less than 1 or too big, then the year and/or month "
"will be adjusted."
msgstr ""
"If @{month} or @{day} is less than 1 or too big, then the year and/or month "
"will be adjusted."

#: ../plugins/fn-date/functions.c:80
msgid ""
"For spreadsheets created with the Mac version of Excel, serial 1 is 1-"
"Jan-1904."
msgstr ""
"For spreadsheets created with the Mac version of Excel, serial 1 is 1-"
"Jan-1904."

#: ../plugins/fn-date/functions.c:137
msgid "UNIX2DATE:date value corresponding to the Unix timestamp @{t}"
msgstr "UNIX2DATE:date value corresponding to the Unix timestamp @{t}"

#: ../plugins/fn-date/functions.c:138
msgid "t:Unix time stamp"
msgstr "t:Unix time stamp"

#: ../plugins/fn-date/functions.c:139
msgid ""
"The UNIX2DATE function translates Unix timestamps into the corresponding "
"date.  A Unix timestamp is the number of seconds since midnight (0:00) of "
"January 1st, 1970 GMT."
msgstr ""
"The UNIX2DATE function translates Unix timestamps into the corresponding "
"date.  A Unix timestamp is the number of seconds since midnight (0:00) of "
"January 1st, 1970 GMT."

#: ../plugins/fn-date/functions.c:167
msgid "DATE2UNIX:the Unix timestamp corresponding to a date @{d}"
msgstr "DATE2UNIX:the Unix timestamp corresponding to a date @{d}"

#: ../plugins/fn-date/functions.c:168
msgid "d:date"
msgstr "d:date"

#: ../plugins/fn-date/functions.c:169
msgid ""
"The DATE2UNIX function translates a date into a Unix timestamp. A Unix "
"timestamp is the number of seconds since midnight (0:00) of January 1st, "
"1970 GMT."
msgstr ""
"The DATE2UNIX function translates a date into a Unix timestamp. A Unix "
"timestamp is the number of seconds since midnight (0:00) of January 1st, "
"1970 GMT."

#: ../plugins/fn-date/functions.c:193
msgid "DATEVALUE:the date part of a date and time serial value"
msgstr "DATEVALUE:the date part of a date and time serial value"

#: ../plugins/fn-date/functions.c:194 ../plugins/fn-date/functions.c:489
msgid "serial:date and time serial value"
msgstr "serial:date and time serial value"

#: ../plugins/fn-date/functions.c:195
msgid ""
"DATEVALUE returns the date serial value part of a date and time serial value."
msgstr ""
"DATEVALUE returns the date serial value part of a date and time serial value."

#: ../plugins/fn-date/functions.c:211
msgid "DATEDIF:difference between dates"
msgstr "DATEDIF:difference between dates"

#: ../plugins/fn-date/functions.c:212 ../plugins/fn-date/functions.c:689
#: ../plugins/fn-date/functions.c:994 ../plugins/fn-date/functions.c:1260
#: ../plugins/fn-date/functions.c:1289
msgid "start_date:starting date serial value"
msgstr "start_date:starting date serial value"

#: ../plugins/fn-date/functions.c:213 ../plugins/fn-date/functions.c:690
#: ../plugins/fn-date/functions.c:995 ../plugins/fn-date/functions.c:1261
#: ../plugins/fn-date/functions.c:1290
msgid "end_date:ending date serial value"
msgstr "end_date:ending date serial value"

#: ../plugins/fn-date/functions.c:214
msgid "interval:counting unit"
msgstr "interval:counting unit"

#: ../plugins/fn-date/functions.c:215
msgid ""
"DATEDIF returns the distance from @{start_date} to @{end_date} according to "
"the unit specified by @{interval}."
msgstr ""
"DATEDIF returns the distance from @{start_date} to @{end_date} according to "
"the unit specified by @{interval}."

#: ../plugins/fn-date/functions.c:216
msgid ""
"If @{interval} is \"y\", \"m\", or \"d\" then the distance is measured in "
"complete years, months, or days respectively."
msgstr ""
"If @{interval} is \"y\", \"m\", or \"d\" then the distance is measured in "
"complete years, months, or days respectively."

#: ../plugins/fn-date/functions.c:217
msgid ""
"If @{interval} is \"ym\" or \"yd\" then the distance is measured in complete "
"months or days, respectively, but excluding any difference in years."
msgstr ""
"If @{interval} is \"ym\" or \"yd\" then the distance is measured in complete "
"months or days, respectively, but excluding any difference in years."

#: ../plugins/fn-date/functions.c:218
msgid ""
"If @{interval} is \"md\" then the distance is measured in complete days but "
"excluding any difference in months."
msgstr ""
"If @{interval} is \"md\" then the distance is measured in complete days but "
"excluding any difference in months."

#: ../plugins/fn-date/functions.c:350
msgid "EDATE:adjust a date by a number of months"
msgstr "EDATE:adjust a date by a number of months"

#: ../plugins/fn-date/functions.c:351 ../plugins/fn-date/functions.c:577
#: ../plugins/fn-date/functions.c:601 ../plugins/fn-date/functions.c:625
#: ../plugins/fn-date/functions.c:649 ../plugins/fn-date/functions.c:731
#: ../plugins/fn-date/functions.c:771 ../plugins/fn-date/functions.c:1161
#: ../plugins/fn-date/functions.c:1185 ../plugins/fn-date/functions.c:1221
msgid "date:date serial value"
msgstr "date:date serial value"

#: ../plugins/fn-date/functions.c:352 ../plugins/fn-date/functions.c:732
msgid "months:signed number of months"
msgstr "months:signed number of months"

#: ../plugins/fn-date/functions.c:353
msgid ""
"EDATE returns @{date} moved forward or backward the number of months "
"specified by @{months}."
msgstr ""
"EDATE returns @{date} moved forward or backward the number of months "
"specified by @{months}."

#: ../plugins/fn-date/functions.c:387
msgid "TODAY:the date serial value of today"
msgstr "TODAY:the date serial value of today"

#: ../plugins/fn-date/functions.c:388
msgid ""
"The TODAY function returns the date serial value of the day it is computed.  "
"Recomputing on a later date will produce a different value."
msgstr ""
"The TODAY function returns the date serial value of the day it is computed.  "
"Recomputing on a later date will produce a different value."

#: ../plugins/fn-date/functions.c:404
msgid "NOW:the date and time serial value of the current time"
msgstr "NOW:the date and time serial value of the current time"

#: ../plugins/fn-date/functions.c:405
msgid ""
"The NOW function returns the date and time serial value of the moment it is "
"computed.  Recomputing later will produce a different value."
msgstr ""
"The NOW function returns the date and time serial value of the moment it is "
"computed.  Recomputing later will produce a different value."

#: ../plugins/fn-date/functions.c:421
msgid "TIME:create a time serial value"
msgstr "TIME:create a time serial value"

#: ../plugins/fn-date/functions.c:422
msgid "hour:hour of the day"
msgstr "hour:hour of the day"

#: ../plugins/fn-date/functions.c:423
msgid "minute:minute within the hour"
msgstr "minute:minute within the hour"

#: ../plugins/fn-date/functions.c:424
msgid "second:second within the minute"
msgstr "second:second within the minute"

#: ../plugins/fn-date/functions.c:425
msgid ""
"The TIME function computes the fractional day after midnight at the time "
"given by @{hour}, @{minute}, and @{second}."
msgstr ""
"The TIME function computes the fractional day after midnight at the time "
"given by @{hour}, @{minute}, and @{second}."

#: ../plugins/fn-date/functions.c:426
msgid ""
"While the return value is automatically formatted to look like a time "
"between 0:00 and 24:00, the underlying serial time value is a number between "
"0 and 1."
msgstr ""
"While the return value is automatically formatted to look like a time "
"between 0:00 and 24:00, the underlying serial time value is a number between "
"0 and 1."

#: ../plugins/fn-date/functions.c:428
msgid ""
"If any of @{hour}, @{minute}, and @{second} is negative, #NUM! is returned"
msgstr ""
"If any of @{hour}, @{minute}, and @{second} is negative, #NUM! is returned"

#: ../plugins/fn-date/functions.c:458
msgid "ODF.TIME:create a time serial value"
msgstr "ODF.TIME:create a time serial value"

#: ../plugins/fn-date/functions.c:459
msgid "hour:hour"
msgstr "hour:hour"

#: ../plugins/fn-date/functions.c:460
msgid "minute:minute"
msgstr "minute:minute"

#: ../plugins/fn-date/functions.c:461
msgid "second:second"
msgstr "second:second"

#: ../plugins/fn-date/functions.c:462
msgid ""
"The ODF.TIME function computes the time given by @{hour}, @{minute}, and @"
"{second} as a fraction of a day."
msgstr ""
"The ODF.TIME function computes the time given by @{hour}, @{minute}, and @"
"{second} as a fraction of a day."

#: ../plugins/fn-date/functions.c:463
msgid ""
"While the return value is automatically formatted to look like a time "
"between 0:00 and 24:00, the underlying serial time value can be any number."
msgstr ""
"While the return value is automatically formatted to look like a time "
"between 0:00 and 24:00, the underlying serial time value can be any number."

#: ../plugins/fn-date/functions.c:467 ../plugins/fn-date/functions.c:780
#: ../plugins/fn-date/functions.c:1002 ../plugins/fn-date/functions.c:1292
#: ../plugins/fn-eng/functions.c:213 ../plugins/fn-eng/functions.c:317
#: ../plugins/fn-eng/functions.c:386 ../plugins/fn-eng/functions.c:754
#: ../plugins/fn-financial/functions.c:1312 ../plugins/fn-math/functions.c:433
#: ../plugins/fn-math/functions.c:1033 ../plugins/fn-math/functions.c:1060
#: ../plugins/fn-math/functions.c:1377 ../plugins/fn-math/functions.c:1397
#: ../plugins/fn-math/functions.c:2065 ../plugins/fn-math/functions.c:2798
#: ../plugins/fn-math/functions.c:2969 ../plugins/fn-stat/functions.c:1545
#: ../plugins/fn-stat/functions.c:2423 ../plugins/fn-stat/functions.c:4555
#: ../plugins/fn-string/functions.c:304 ../plugins/fn-string/functions.c:388
#: ../plugins/fn-string/functions.c:515 ../plugins/fn-string/functions.c:1103
#: ../plugins/fn-string/functions.c:1445 ../plugins/fn-string/functions.c:1575
msgid "This function is OpenFormula compatible."
msgstr "This function is OpenFormula compatible."

#: ../plugins/fn-date/functions.c:488
msgid "TIMEVALUE:the time part of a date and time serial value"
msgstr "TIMEVALUE:the time part of a date and time serial value"

#: ../plugins/fn-date/functions.c:490
msgid "TIMEVALUE returns the time-of-day part of a date and time serial value."
msgstr ""
"TIMEVALUE returns the time-of-day part of a date and time serial value."

#: ../plugins/fn-date/functions.c:507
msgid "HOUR:compute hour part of fractional day"
msgstr "HOUR:compute hour part of fractional day"

#: ../plugins/fn-date/functions.c:508 ../plugins/fn-date/functions.c:531
#: ../plugins/fn-date/functions.c:554
msgid "time:time of day as fractional day"
msgstr "time:time of day as fractional day"

#: ../plugins/fn-date/functions.c:509
msgid ""
"The HOUR function computes the hour part of the fractional day given by @"
"{time}."
msgstr ""
"The HOUR function computes the hour part of the fractional day given by @"
"{time}."

#: ../plugins/fn-date/functions.c:530
msgid "MINUTE:compute minute part of fractional day"
msgstr "MINUTE:compute minute part of fractional day"

#: ../plugins/fn-date/functions.c:532
msgid ""
"The MINUTE function computes the minute part of the fractional day given by @"
"{time}."
msgstr ""
"The MINUTE function computes the minute part of the fractional day given by @"
"{time}."

#: ../plugins/fn-date/functions.c:553
msgid "SECOND:compute seconds part of fractional day"
msgstr "SECOND:compute seconds part of fractional day"

#: ../plugins/fn-date/functions.c:555
msgid ""
"The SECOND function computes the seconds part of the fractional day given by "
"@{time}."
msgstr ""
"The SECOND function computes the seconds part of the fractional day given by "
"@{time}."

#: ../plugins/fn-date/functions.c:576
msgid "YEAR:the year part of a date serial value"
msgstr "YEAR:the year part of a date serial value"

#: ../plugins/fn-date/functions.c:578
msgid "The YEAR function returns the year part of @{date}."
msgstr "The YEAR function returns the year part of @{date}."

#: ../plugins/fn-date/functions.c:600
msgid "MONTH:the month part of a date serial value"
msgstr "MONTH:the month part of a date serial value"

#: ../plugins/fn-date/functions.c:602
msgid "The MONTH function returns the month part of @{date}."
msgstr "The MONTH function returns the month part of @{date}."

#: ../plugins/fn-date/functions.c:624
msgid "DAY:the day-of-month part of a date serial value"
msgstr "DAY:the day-of-month part of a date serial value"

#: ../plugins/fn-date/functions.c:626
msgid "The DAY function returns the day-of-month part of @{date}."
msgstr "The DAY function returns the day-of-month part of @{date}."

#: ../plugins/fn-date/functions.c:648
msgid "WEEKDAY:day-of-week"
msgstr "WEEKDAY:day-of-week"

#: ../plugins/fn-date/functions.c:650 ../plugins/fn-date/functions.c:1222
msgid "method:numbering system, defaults to 1"
msgstr "method:numbering system, defaults to 1"

#: ../plugins/fn-date/functions.c:651
msgid ""
"The WEEKDAY function returns the day-of-week of @{date}.  The value of @"
"{method} determines how days are numbered; it defaults to 1. "
msgstr ""
"The WEEKDAY function returns the day-of-week of @{date}.  The value of @"
"{method} determines how days are numbered; it defaults to 1. "

#: ../plugins/fn-date/functions.c:652
msgid "If @{method} is 1, then Sunday is 1, Monday is 2, etc."
msgstr "If @{method} is 1, then Sunday is 1, Monday is 2, etc."

#: ../plugins/fn-date/functions.c:653
msgid "If @{method} is 2, then Monday is 1, Tuesday is 2, etc."
msgstr "If @{method} is 2, then Monday is 1, Tuesday is 2, etc."

#: ../plugins/fn-date/functions.c:654
msgid "If @{method} is 3, then Monday is 0, Tuesday is 1, etc."
msgstr "If @{method} is 3, then Monday is 0, Tuesday is 1, etc."

#: ../plugins/fn-date/functions.c:688
msgid "DAYS360:days between dates"
msgstr "DAYS360:days between dates"

#: ../plugins/fn-date/functions.c:691
msgid "method:counting method"
msgstr "method:counting method"

#: ../plugins/fn-date/functions.c:692
msgid "DAYS360 returns the number of days from @{start_date} to @{end_date}."
msgstr "DAYS360 returns the number of days from @{start_date} to @{end_date}."

#: ../plugins/fn-date/functions.c:693
msgid ""
"If @{method} is 0, the default, the MS Excel (tm) US method will be used. "
"This is a somewhat complicated industry standard method where the last day "
"of February is considered to be the 30th day of the month, but only for @"
"{start_date}."
msgstr ""
"If @{method} is 0, the default, the MS Excel (tm) US method will be used. "
"This is a somewhat complicated industry standard method where the last day "
"of February is considered to be the 30th day of the month, but only for @"
"{start_date}."

#: ../plugins/fn-date/functions.c:694
msgid ""
"If @{method} is 1, the European method will be used.  In this case, if the "
"day of the month is 31 it will be considered as 30"
msgstr ""
"If @{method} is 1, the European method will be used.  In this case, if the "
"day of the month is 31 it will be considered as 30"

#: ../plugins/fn-date/functions.c:695
msgid ""
"If @{method} is 2, a saner version of the US method is used in which both "
"dates get the same February treatment."
msgstr ""
"If @{method} is 2, a saner version of the US method is used in which both "
"dates get the same February treatment."

#: ../plugins/fn-date/functions.c:730
msgid "EOMONTH:end of month"
msgstr "EOMONTH:end of month"

#: ../plugins/fn-date/functions.c:733
msgid ""
"EOMONTH returns the date serial value of the end of the month specified by @"
"{date} adjusted forward or backward the number of months specified by @"
"{months}."
msgstr ""
"EOMONTH returns the date serial value of the end of the month specified by @"
"{date} adjusted forward or backward the number of months specified by @"
"{months}."

#: ../plugins/fn-date/functions.c:770
msgid "WORKDAY:add working days"
msgstr "WORKDAY:add working days"

#: ../plugins/fn-date/functions.c:772
msgid "days:number of days to add"
msgstr "days:number of days to add"

#: ../plugins/fn-date/functions.c:773 ../plugins/fn-date/functions.c:996
msgid "holidays:array of holidays"
msgstr "holidays:array of holidays"

#: ../plugins/fn-date/functions.c:774 ../plugins/fn-date/functions.c:997
msgid ""
"weekend:array of 0s and 1s, indicating whether a weekday (S, M, T, W, T, F, "
"S) is on the weekend, defaults to {1,0,0,0,0,0,1}"
msgstr ""
"weekend:array of 0s and 1s, indicating whether a weekday (S, M, T, W, T, F, "
"S) is on the weekend, defaults to {1,0,0,0,0,0,1}"

#: ../plugins/fn-date/functions.c:776
msgid ""
"WORKDAY adjusts @{date} by @{days} skipping over weekends and @{holidays} in "
"the process."
msgstr ""
"WORKDAY adjusts @{date} by @{days} skipping over weekends and @{holidays} in "
"the process."

#: ../plugins/fn-date/functions.c:777
msgid "@{days} may be negative."
msgstr "@{days} may be negative."

#: ../plugins/fn-date/functions.c:778 ../plugins/fn-date/functions.c:1000
msgid ""
"If an entry of @{weekend} is non-zero, the corresponding weekday is not a "
"work day."
msgstr ""
"If an entry of @{weekend} is non-zero, the corresponding weekday is not a "
"work day."

#: ../plugins/fn-date/functions.c:779 ../plugins/fn-date/functions.c:1001
msgid "This function is Excel compatible if the last argument is omitted."
msgstr "This function is Excel compatible if the last argument is omitted."

#: ../plugins/fn-date/functions.c:993
msgid "NETWORKDAYS:number of workdays in range"
msgstr "NETWORKDAYS:number of workdays in range"

#: ../plugins/fn-date/functions.c:999
msgid ""
"NETWORKDAYS calculates the number of days from @{start_date} to @{end_date} "
"skipping weekends and @{holidays} in the process."
msgstr ""
"NETWORKDAYS calculates the number of days from @{start_date} to @{end_date} "
"skipping weekends and @{holidays} in the process."

#: ../plugins/fn-date/functions.c:1160
msgid "ISOWEEKNUM:ISO week number"
msgstr "ISOWEEKNUM:ISO week number"

#: ../plugins/fn-date/functions.c:1162
msgid ""
"ISOWEEKNUM calculates the week number according to the ISO 8601 standard.  "
"Weeks start on Mondays and week 1 contains the first Thursday of the year."
msgstr ""
"ISOWEEKNUM calculates the week number according to the ISO 8601 standard.  "
"Weeks start on Mondays and week 1 contains the first Thursday of the year."

#: ../plugins/fn-date/functions.c:1163 ../plugins/fn-date/functions.c:1187
msgid ""
"January 1 of a year is sometimes in week 52 or 53 of the previous year.  "
"Similarly, December 31 is sometimes in week 1 of the following year."
msgstr ""
"January 1 of a year is sometimes in week 52 or 53 of the previous year.  "
"Similarly, December 31 is sometimes in week 1 of the following year."

#: ../plugins/fn-date/functions.c:1184
msgid "ISOYEAR:year corresponding to the ISO week number"
msgstr "ISOYEAR:year corresponding to the ISO week number"

#: ../plugins/fn-date/functions.c:1186
msgid ""
"ISOYEAR calculates the year to go with week number according to the ISO 8601 "
"standard."
msgstr ""
"ISOYEAR calculates the year to go with week number according to the ISO 8601 "
"standard."

#: ../plugins/fn-date/functions.c:1220
msgid "WEEKNUM:week number"
msgstr "WEEKNUM:week number"

#: ../plugins/fn-date/functions.c:1223
msgid ""
"WEEKNUM calculates the week number according to @{method} which defaults to "
"1."
msgstr ""
"WEEKNUM calculates the week number according to @{method} which defaults to "
"1."

#: ../plugins/fn-date/functions.c:1224
msgid ""
"If @{method} is 1, then weeks start on Sundays and January 1 is in week 1."
msgstr ""
"If @{method} is 1, then weeks start on Sundays and January 1 is in week 1."

#: ../plugins/fn-date/functions.c:1225
msgid ""
"If @{method} is 2, then weeks start on Mondays and January 1 is in week 1."
msgstr ""
"If @{method} is 2, then weeks start on Mondays and January 1 is in week 1."

#: ../plugins/fn-date/functions.c:1226
msgid "If @{method} is 150, then the ISO 8601 numbering is used."
msgstr "If @{method} is 150, then the ISO 8601 numbering is used."

#: ../plugins/fn-date/functions.c:1259
msgid "YEARFRAC:fractional number of years between dates"
msgstr "YEARFRAC:fractional number of years between dates"

#: ../plugins/fn-date/functions.c:1262 ../plugins/fn-financial/functions.c:454
#: ../plugins/fn-financial/functions.c:492
#: ../plugins/fn-financial/functions.c:530
#: ../plugins/fn-financial/functions.c:571
#: ../plugins/fn-financial/functions.c:608
#: ../plugins/fn-financial/functions.c:652
#: ../plugins/fn-financial/functions.c:1895
#: ../plugins/fn-financial/functions.c:2261
#: ../plugins/fn-financial/functions.c:2311
#: ../plugins/fn-financial/functions.c:2418
#: ../plugins/fn-financial/functions.c:2464
#: ../plugins/fn-financial/functions.c:2506
#: ../plugins/fn-financial/functions.c:2656
#: ../plugins/fn-financial/functions.c:2751
#: ../plugins/fn-financial/functions.c:2829
#: ../plugins/fn-financial/functions.c:2906
#: ../plugins/fn-financial/functions.c:2962
#: ../plugins/fn-financial/functions.c:3005
#: ../plugins/fn-financial/functions.c:3029
#: ../plugins/fn-financial/functions.c:3053
#: ../plugins/fn-financial/functions.c:3077
#: ../plugins/fn-financial/functions.c:3103
#: ../plugins/fn-financial/functions.c:3129
#: ../plugins/fn-financial/functions.c:3243
msgid "basis:calendar basis"
msgstr "basis:calendar basis"

#: ../plugins/fn-date/functions.c:1263
msgid ""
"YEARFRAC calculates the number of days from @{start_date} to @{end_date} "
"according to the calendar specified by @{basis}, which defaults to 0, and "
"expresses the result as a fractional number of years."
msgstr ""
"YEARFRAC calculates the number of days from @{start_date} to @{end_date} "
"according to the calendar specified by @{basis}, which defaults to 0, and "
"expresses the result as a fractional number of years."

#: ../plugins/fn-date/functions.c:1288
msgid "DAYS:difference between dates in days"
msgstr "DAYS:difference between dates in days"

#: ../plugins/fn-date/functions.c:1291
msgid ""
"DAYS returns the positive or negative number of days from @{start_date} to @"
"{end_date}."
msgstr ""
"DAYS returns the positive or negative number of days from @{start_date} to @"
"{end_date}."

#. Some common decriptors
#: ../plugins/fn-derivatives/options.c:46
msgid "call_put_flag:'c' for a call and 'p' for a put"
msgstr "call_put_flag:'c' for a call and 'p' for a put"

#: ../plugins/fn-derivatives/options.c:47
msgid "spot:spot price"
msgstr "spot:spot price"

#: ../plugins/fn-derivatives/options.c:48
msgid "strike:strike price"
msgstr "strike:strike price"

#: ../plugins/fn-derivatives/options.c:49
msgid "time:time to maturity in years"
msgstr "time:time to maturity in years"

#: ../plugins/fn-derivatives/options.c:50
msgid "time:time to maturity in days"
msgstr "time:time to maturity in days"

#: ../plugins/fn-derivatives/options.c:51
msgid "time_payout:time to dividend payout"
msgstr "time_payout:time to dividend payout"

#: ../plugins/fn-derivatives/options.c:52
msgid "time_exp:time to expiration"
msgstr "time_exp:time to expiration"

#: ../plugins/fn-derivatives/options.c:53
msgid "rate:risk-free interest rate to the exercise date in percent"
msgstr "rate:risk-free interest rate to the exercise date in percent"

#: ../plugins/fn-derivatives/options.c:54
msgid "rate:annualized interest rate"
msgstr "rate:annualised interest rate"

#: ../plugins/fn-derivatives/options.c:55
msgid "rate:annualized risk-free interest rate"
msgstr "rate:annualised risk-free interest rate"

#: ../plugins/fn-derivatives/options.c:56
msgid ""
"volatility:annualized volatility of the asset in percent for the period "
"through to the exercise date"
msgstr ""
"volatility:annualised volatility of the asset in percent for the period "
"through to the exercise date"

#: ../plugins/fn-derivatives/options.c:57
msgid "volatility:annualized volatility of the asset"
msgstr "volatility:annualised volatility of the asset"

#: ../plugins/fn-derivatives/options.c:58
msgid "d:amount of the dividend to be paid expressed in currency"
msgstr "d:amount of the dividend to be paid expressed in currency"

#: ../plugins/fn-derivatives/options.c:59
msgid ""
"cost_of_carry:net cost of holding the underlying asset (for common stocks, "
"the risk free rate less the dividend yield), defaults to 0"
msgstr ""
"cost_of_carry:net cost of holding the underlying asset (for common stocks, "
"the risk free rate less the dividend yield), defaults to 0"

#: ../plugins/fn-derivatives/options.c:60
msgid "cost_of_carry:net cost of holding the underlying asset"
msgstr "cost_of_carry:net cost of holding the underlying asset"

#: ../plugins/fn-derivatives/options.c:62
msgid ""
"The returned value will be expressed in the same units as @{strike} and @"
"{spot}."
msgstr ""
"The returned value will be expressed in the same units as @{strike} and @"
"{spot}."

#: ../plugins/fn-derivatives/options.c:192
msgid "CUM_BIV_NORM_DIST:cumulative bivariate normal distribution"
msgstr "CUM_BIV_NORM_DIST:cumulative bivariate normal distribution"

#: ../plugins/fn-derivatives/options.c:193
msgid "a:limit for first random variable"
msgstr "a:limit for first random variable"

#: ../plugins/fn-derivatives/options.c:194
msgid "b:limit for second random variable"
msgstr "b:limit for second random variable"

#: ../plugins/fn-derivatives/options.c:195
msgid "rho:correlation of the two random variables"
msgstr "rho:correlation of the two random variables"

#: ../plugins/fn-derivatives/options.c:196
msgid ""
"CUM_BIV_NORM_DIST calculates the probability that two standard normal "
"distributed random variables with correlation @{rho} are respectively each "
"less than @{a} and @{b}."
msgstr ""
"CUM_BIV_NORM_DIST calculates the probability that two standard normal "
"distributed random variables with correlation @{rho} are respectively each "
"less than @{a} and @{b}."

#: ../plugins/fn-derivatives/options.c:245
msgid "OPT_BS:price of a European option"
msgstr "OPT_BS:price of a European option"

#: ../plugins/fn-derivatives/options.c:253
msgid ""
"OPT_BS uses the Black-Scholes model to calculate the price of a European "
"option struck at @{strike} on an asset with spot price @{spot}."
msgstr ""
"OPT_BS uses the Black-Scholes model to calculate the price of a European "
"option struck at @{strike} on an asset with spot price @{spot}."

#: ../plugins/fn-derivatives/options.c:302
msgid "OPT_BS_DELTA:delta of a European option"
msgstr "OPT_BS_DELTA:delta of a European option"

#: ../plugins/fn-derivatives/options.c:310
msgid ""
"OPT_BS_DELTA uses the Black-Scholes model to calculate the 'delta' of a "
"European option struck at @{strike} on an asset with spot price @{spot}."
msgstr ""
"OPT_BS_DELTA uses the Black-Scholes model to calculate the 'delta' of a "
"European option struck at @{strike} on an asset with spot price @{spot}."

#: ../plugins/fn-derivatives/options.c:344
msgid "OPT_BS_GAMMA:gamma of a European option"
msgstr "OPT_BS_GAMMA:gamma of a European option"

#: ../plugins/fn-derivatives/options.c:351
msgid ""
"OPT_BS_GAMMA uses the Black-Scholes model to calculate the 'gamma' of a "
"European option struck at @{strike} on an asset with spot price @{spot}. The "
"gamma of an option is the second derivative of its price with respect to the "
"price of the underlying asset."
msgstr ""
"OPT_BS_GAMMA uses the Black-Scholes model to calculate the 'gamma' of a "
"European option struck at @{strike} on an asset with spot price @{spot}. The "
"gamma of an option is the second derivative of its price with respect to the "
"price of the underlying asset."

#: ../plugins/fn-derivatives/options.c:356
msgid ""
"Gamma is expressed as the rate of change of delta per unit change in @{spot}."
msgstr ""
"Gamma is expressed as the rate of change of delta per unit change in @{spot}."

#: ../plugins/fn-derivatives/options.c:358
msgid "Gamma is the same for calls and puts."
msgstr "Gamma is the same for calls and puts."

#: ../plugins/fn-derivatives/options.c:401
msgid "OPT_BS_THETA:theta of a European option"
msgstr "OPT_BS_THETA:theta of a European option"

#: ../plugins/fn-derivatives/options.c:409
msgid ""
"OPT_BS_THETA uses the Black-Scholes model to calculate the 'theta' of a "
"European option struck at @{strike} on an asset with spot price @{spot}. The "
"theta of an option is the rate of change of its price with respect to time "
"to expiry."
msgstr ""
"OPT_BS_THETA uses the Black-Scholes model to calculate the 'theta' of a "
"European option struck at @{strike} on an asset with spot price @{spot}. The "
"theta of an option is the rate of change of its price with respect to time "
"to expiry."

#: ../plugins/fn-derivatives/options.c:414
msgid ""
"Theta is expressed as the negative of the rate of change of the option "
"value, per 365.25 days."
msgstr ""
"Theta is expressed as the negative of the rate of change of the option "
"value, per 365.25 days."

#: ../plugins/fn-derivatives/options.c:445
msgid "OPT_BS_VEGA:vega of a European option"
msgstr "OPT_BS_VEGA:vega of a European option"

#: ../plugins/fn-derivatives/options.c:452
msgid ""
"OPT_BS_VEGA uses the Black-Scholes model to calculate the 'vega' of a "
"European option struck at @{strike} on an asset with spot price @{spot}. The "
"vega of an option is the rate of change of its price with respect to "
"volatility."
msgstr ""
"OPT_BS_VEGA uses the Black-Scholes model to calculate the 'vega' of a "
"European option struck at @{strike} on an asset with spot price @{spot}. The "
"vega of an option is the rate of change of its price with respect to "
"volatility."

#: ../plugins/fn-derivatives/options.c:457
msgid "Vega is the same for calls and puts."
msgstr "Vega is the same for calls and puts."

#: ../plugins/fn-derivatives/options.c:459
#, no-c-format
msgid ""
"Vega is expressed as the rate of change of option value, per 100% volatility."
msgstr ""
"Vega is expressed as the rate of change of option value, per 100% volatility."

#: ../plugins/fn-derivatives/options.c:510
msgid "OPT_BS_RHO:rho of a European option"
msgstr "OPT_BS_RHO:rho of a European option"

#: ../plugins/fn-derivatives/options.c:518
msgid ""
"OPT_BS_RHO uses the Black-Scholes model to calculate the 'rho' of a European "
"option struck at @{strike} on an asset with spot price @{spot}. The rho of "
"an option is the rate of change of its price with respect to the risk free "
"interest rate."
msgstr ""
"OPT_BS_RHO uses the Black-Scholes model to calculate the 'rho' of a European "
"option struck at @{strike} on an asset with spot price @{spot}. The rho of "
"an option is the rate of change of its price with respect to the risk free "
"interest rate."

#: ../plugins/fn-derivatives/options.c:524
#, no-c-format
msgid ""
"Rho is expressed as the rate of change of the option value, per 100% change "
"in @{rate}."
msgstr ""
"Rho is expressed as the rate of change of the option value, per 100% change "
"in @{rate}."

#: ../plugins/fn-derivatives/options.c:566
msgid "OPT_BS_CARRYCOST:elasticity of a European option"
msgstr "OPT_BS_CARRYCOST:elasticity of a European option"

#: ../plugins/fn-derivatives/options.c:574
msgid ""
"OPT_BS_CARRYCOST uses the Black-Scholes model to calculate the 'elasticity' "
"of a European option struck at @{strike} on an asset with spot price @"
"{spot}. The elasticity of an option is the rate of change of its price with "
"respect to its @{cost_of_carry}."
msgstr ""
"OPT_BS_CARRYCOST uses the Black-Scholes model to calculate the 'elasticity' "
"of a European option struck at @{strike} on an asset with spot price @"
"{spot}. The elasticity of an option is the rate of change of its price with "
"respect to its @{cost_of_carry}."

#: ../plugins/fn-derivatives/options.c:580
#, no-c-format
msgid ""
"Elasticity is expressed as the rate of change of the option value, per 100% "
"volatility."
msgstr ""
"Elasticity is expressed as the rate of change of the option value, per 100% "
"volatility."

#: ../plugins/fn-derivatives/options.c:624
msgid "OPT_GARMAN_KOHLHAGEN:theoretical price of a European currency option"
msgstr "OPT_GARMAN_KOHLHAGEN:theoretical price of a European currency option"

#: ../plugins/fn-derivatives/options.c:628
msgid "time:number of days to exercise"
msgstr "time:number of days to exercise"

#: ../plugins/fn-derivatives/options.c:629
msgid ""
"domestic_rate:domestic risk-free interest rate to the exercise date in "
"percent"
msgstr ""
"domestic_rate:domestic risk-free interest rate to the exercise date in "
"percent"

#: ../plugins/fn-derivatives/options.c:630
msgid ""
"foreign_rate:foreign risk-free interest rate to the exercise date in percent"
msgstr ""
"foreign_rate:foreign risk-free interest rate to the exercise date in percent"

#: ../plugins/fn-derivatives/options.c:632
msgid ""
"OPT_GARMAN_KOHLHAGEN values the theoretical price of a European currency "
"option struck at @{strike} on an asset with spot price @{spot}."
msgstr ""
"OPT_GARMAN_KOHLHAGEN values the theoretical price of a European currency "
"option struck at @{strike} on an asset with spot price @{spot}."

#: ../plugins/fn-derivatives/options.c:678
msgid ""
"OPT_FRENCH:theoretical price of a European option adjusted for trading day "
"volatility"
msgstr ""
"OPT_FRENCH:theoretical price of a European option adjusted for trading day "
"volatility"

#: ../plugins/fn-derivatives/options.c:682
msgid ""
"time:ratio of the number of calendar days to exercise and the number of "
"calendar days in the year"
msgstr ""
"time:ratio of the number of calendar days to exercise and the number of "
"calendar days in the year"

#: ../plugins/fn-derivatives/options.c:683
msgid ""
"ttime:ratio of the number of trading days to exercise and the number of "
"trading days in the year"
msgstr ""
"ttime:ratio of the number of trading days to exercise and the number of "
"trading days in the year"

#: ../plugins/fn-derivatives/options.c:687
msgid ""
"OPT_FRENCH values the theoretical price of a European option adjusted for "
"trading day volatility, struck at @{strike} on an asset with spot price @"
"{spot}."
msgstr ""
"OPT_FRENCH values the theoretical price of a European option adjusted for "
"trading day volatility, struck at @{strike} on an asset with spot price @"
"{spot}."

#: ../plugins/fn-derivatives/options.c:731
msgid ""
"OPT_JUMP_DIFF:theoretical price of an option according to the Jump Diffusion "
"process"
msgstr ""
"OPT_JUMP_DIFF:theoretical price of an option according to the Jump Diffusion "
"process"

#: ../plugins/fn-derivatives/options.c:736
msgid "rate:the annualized rate of interest"
msgstr "rate:the annualised rate of interest"

#: ../plugins/fn-derivatives/options.c:738
msgid "lambda:expected number of 'jumps' per year"
msgstr "lambda:expected number of 'jumps' per year"

#: ../plugins/fn-derivatives/options.c:739
msgid "gamma:proportion of volatility explained by the 'jumps'"
msgstr "gamma:proportion of volatility explained by the 'jumps'"

#: ../plugins/fn-derivatives/options.c:740
msgid ""
"OPT_JUMP_DIFF models the theoretical price of an option according to the "
"Jump Diffusion process (Merton)."
msgstr ""
"OPT_JUMP_DIFF models the theoretical price of an option according to the "
"Jump Diffusion process (Merton)."

#: ../plugins/fn-derivatives/options.c:818
msgid ""
"OPT_MILTERSEN_SCHWARTZ:theoretical price of options on commodities futures "
"according to Miltersen & Schwartz"
msgstr ""
"OPT_MILTERSEN_SCHWARTZ:theoretical price of options on commodities futures "
"according to Miltersen & Schwartz"

#: ../plugins/fn-derivatives/options.c:820
msgid "p_t:zero coupon bond with expiry at option maturity"
msgstr "p_t:zero coupon bond with expiry at option maturity"

#: ../plugins/fn-derivatives/options.c:821
msgid "f_t:futures price"
msgstr "f_t:futures price"

#: ../plugins/fn-derivatives/options.c:823
msgid "t1:time to maturity of the option"
msgstr "t1:time to maturity of the option"

#: ../plugins/fn-derivatives/options.c:824
msgid "t2:time to maturity of the underlying commodity futures contract"
msgstr "t2:time to maturity of the underlying commodity futures contract"

#: ../plugins/fn-derivatives/options.c:825
msgid "v_s:volatility of the spot commodity price"
msgstr "v_s:volatility of the spot commodity price"

#: ../plugins/fn-derivatives/options.c:826
msgid "v_e:volatility of the future convenience yield"
msgstr "v_e:volatility of the future convenience yield"

#: ../plugins/fn-derivatives/options.c:827
msgid "v_f:volatility of the forward rate of interest"
msgstr "v_f:volatility of the forward rate of interest"

#: ../plugins/fn-derivatives/options.c:828
msgid ""
"rho_se:correlation between the spot commodity price and the convenience yield"
msgstr ""
"rho_se:correlation between the spot commodity price and the convenience yield"

#: ../plugins/fn-derivatives/options.c:829
msgid ""
"rho_sf:correlation between the spot commodity price and the forward interest "
"rate"
msgstr ""
"rho_sf:correlation between the spot commodity price and the forward interest "
"rate"

#: ../plugins/fn-derivatives/options.c:830
msgid ""
"rho_ef:correlation between the forward interest rate and the convenience "
"yield"
msgstr ""
"rho_ef:correlation between the forward interest rate and the convenience "
"yield"

#: ../plugins/fn-derivatives/options.c:831
msgid "kappa_e:speed of mean reversion of the convenience yield"
msgstr "kappa_e:speed of mean reversion of the convenience yield"

#: ../plugins/fn-derivatives/options.c:832
msgid "kappa_f:speed of mean reversion of the forward interest rate"
msgstr "kappa_f:speed of mean reversion of the forward interest rate"

#: ../plugins/fn-derivatives/options.c:915
msgid ""
"OPT_RGW:theoretical price of an American option according to the Roll-Geske-"
"Whaley approximation"
msgstr ""
"OPT_RGW:theoretical price of an American option according to the Roll-Geske-"
"Whaley approximation"

#: ../plugins/fn-derivatives/options.c:958
msgid ""
"OPT_BAW_AMER:theoretical price of an option according to the Barone Adesie & "
"Whaley approximation"
msgstr ""
"OPT_BAW_AMER:theoretical price of an option according to the Barone Adesie & "
"Whaley approximation"

#: ../plugins/fn-derivatives/options.c:1130
msgid ""
"OPT_BJER_STENS:theoretical price of American options according to the "
"Bjerksund & Stensland approximation technique"
msgstr ""
"OPT_BJER_STENS:theoretical price of American options according to the "
"Bjerksund & Stensland approximation technique"

#: ../plugins/fn-derivatives/options.c:1204
msgid "OPT_EXEC:theoretical price of executive stock options"
msgstr "OPT_EXEC:theoretical price of executive stock options"

#: ../plugins/fn-derivatives/options.c:1212
msgid "lambda:jump rate for executives"
msgstr "lambda:jump rate for executives"

#: ../plugins/fn-derivatives/options.c:1213
msgid ""
"The model assumes executives forfeit their options if they leave the company."
msgstr ""
"The model assumes executives forfeit their options if they leave the company."

#: ../plugins/fn-derivatives/options.c:1242
msgid "OPT_FORWARD_START:theoretical price of forward start options"
msgstr "OPT_FORWARD_START:theoretical price of forward start options"

#: ../plugins/fn-derivatives/options.c:1245
msgid ""
"alpha:fraction setting the strike price at the future date @{time_start}"
msgstr ""
"alpha:fraction setting the strike price at the future date @{time_start}"

#: ../plugins/fn-derivatives/options.c:1246
msgid "time_start:time until the option starts in days"
msgstr "time_start:time until the option starts in days"

#: ../plugins/fn-derivatives/options.c:1294
msgid "OPT_TIME_SWITCH:theoretical price of time switch options"
msgstr "OPT_TIME_SWITCH:theoretical price of time switch options"

#: ../plugins/fn-derivatives/options.c:1298
msgid "a:amount received for each time period"
msgstr "a:amount received for each time period"

#: ../plugins/fn-derivatives/options.c:1300
msgid "m:number of time units the option has already met the condition"
msgstr "m:number of time units the option has already met the condition"

#: ../plugins/fn-derivatives/options.c:1301
msgid "dt:agreed upon discrete time period expressed as a fraction of a year"
msgstr "dt:agreed upon discrete time period expressed as a fraction of a year"

#: ../plugins/fn-derivatives/options.c:1306
msgid ""
"OPT_TIME_SWITCH models the theoretical price of time switch options. (Pechtl "
"1995). The holder receives @{a} * @{dt} for each period that the asset price "
"was greater than @{strike} (for a call) or below it (for a put)."
msgstr ""
"OPT_TIME_SWITCH models the theoretical price of time switch options. (Pechtl "
"1995). The holder receives @{a} * @{dt} for each period that the asset price "
"was greater than @{strike} (for a call) or below it (for a put)."

#: ../plugins/fn-derivatives/options.c:1336
msgid "OPT_SIMPLE_CHOOSER:theoretical price of a simple chooser option"
msgstr "OPT_SIMPLE_CHOOSER:theoretical price of a simple chooser option"

#: ../plugins/fn-derivatives/options.c:1340
msgid "time1:time in years until the holder chooses a put or a call option"
msgstr "time1:time in years until the holder chooses a put or a call option"

#: ../plugins/fn-derivatives/options.c:1341
msgid "time2:time in years until the chosen option expires"
msgstr "time2:time in years until the chosen option expires"

#: ../plugins/fn-derivatives/options.c:1385
msgid "OPT_COMPLEX_CHOOSER:theoretical price of a complex chooser option"
msgstr "OPT_COMPLEX_CHOOSER:theoretical price of a complex chooser option"

#: ../plugins/fn-derivatives/options.c:1387
msgid "strike_call:strike price, if exercised as a call option"
msgstr "strike_call:strike price, if exercised as a call option"

#: ../plugins/fn-derivatives/options.c:1388
msgid "strike_put:strike price, if exercised as a put option"
msgstr "strike_put:strike price, if exercised as a put option"

#: ../plugins/fn-derivatives/options.c:1389
msgid "time:time in years until the holder chooses a put or a call option"
msgstr "time:time in years until the holder chooses a put or a call option"

#: ../plugins/fn-derivatives/options.c:1390
msgid "time_call:time in years to maturity of the call option if chosen"
msgstr "time_call:time in years to maturity of the call option if chosen"

#: ../plugins/fn-derivatives/options.c:1391
msgid "time_put:time in years  to maturity of the put option if chosen"
msgstr "time_put:time in years  to maturity of the put option if chosen"

#: ../plugins/fn-derivatives/options.c:1486
msgid "OPT_ON_OPTIONS:theoretical price of options on options"
msgstr "OPT_ON_OPTIONS:theoretical price of options on options"

#: ../plugins/fn-derivatives/options.c:1487
msgid ""
"type_flag:'cc' for calls on calls, 'cp' for calls on puts, and so on for "
"'pc', and 'pp'"
msgstr ""
"type_flag:'cc' for calls on calls, 'cp' for calls on puts, and so on for "
"'pc', and 'pp'"

#: ../plugins/fn-derivatives/options.c:1489
msgid "strike1:strike price at which the option being valued is struck"
msgstr "strike1:strike price at which the option being valued is struck"

#: ../plugins/fn-derivatives/options.c:1490
msgid "strike2:strike price at which the underlying option is struck"
msgstr "strike2:strike price at which the underlying option is struck"

#: ../plugins/fn-derivatives/options.c:1491
msgid "time1:time in years to maturity of the option"
msgstr "time1:time in years to maturity of the option"

#: ../plugins/fn-derivatives/options.c:1492
msgid "time2:time in years to the maturity of the underlying option"
msgstr "time2:time in years to the maturity of the underlying option"

#: ../plugins/fn-derivatives/options.c:1494
msgid ""
"cost_of_carry:net cost of holding the underlying asset of the underlying "
"option"
msgstr ""
"cost_of_carry:net cost of holding the underlying asset of the underlying "
"option"

#: ../plugins/fn-derivatives/options.c:1495
msgid ""
"volatility:annualized volatility in price of the underlying asset of the "
"underlying option"
msgstr ""
"volatility:annualised volatility in price of the underlying asset of the "
"underlying option"

#: ../plugins/fn-derivatives/options.c:1496
msgid ""
"For common stocks, @{cost_of_carry} is the risk free rate less the dividend "
"yield."
msgstr ""
"For common stocks, @{cost_of_carry} is the risk free rate less the dividend "
"yield."

#: ../plugins/fn-derivatives/options.c:1497
msgid "@{time2} ≥ @{time1}"
msgstr "@{time2} ≥ @{time1}"

#: ../plugins/fn-derivatives/options.c:1563
msgid "OPT_EXTENDIBLE_WRITER:theoretical price of extendible writer options"
msgstr "OPT_EXTENDIBLE_WRITER:theoretical price of extendible writer options"

#: ../plugins/fn-derivatives/options.c:1566
msgid "strike1:strike price at which the option is struck"
msgstr "strike1:strike price at which the option is struck"

#: ../plugins/fn-derivatives/options.c:1567
msgid ""
"strike2:strike price at which the option is re-struck if out of the money at "
"@{time1}"
msgstr ""
"strike2:strike price at which the option is re-struck if out of the money at "
"@{time1}"

#: ../plugins/fn-derivatives/options.c:1568
msgid "time1:initial maturity of the option in years"
msgstr "time1:initial maturity of the option in years"

#: ../plugins/fn-derivatives/options.c:1569
msgid "time2:extended maturity in years if chosen"
msgstr "time2:extended maturity in years if chosen"

#: ../plugins/fn-derivatives/options.c:1573
msgid ""
"OPT_EXTENDIBLE_WRITER models the theoretical price of extendible writer "
"options. These are options that have their maturity extended to @{time2} if "
"the option is out of the money at @{time1}."
msgstr ""
"OPT_EXTENDIBLE_WRITER models the theoretical price of extendible writer "
"options. These are options that have their maturity extended to @{time2} if "
"the option is out of the money at @{time1}."

#: ../plugins/fn-derivatives/options.c:1615
msgid ""
"OPT_2_ASSET_CORRELATION:theoretical price of options on 2 assets with "
"correlation @{rho}"
msgstr ""
"OPT_2_ASSET_CORRELATION:theoretical price of options on 2 assets with "
"correlation @{rho}"

#: ../plugins/fn-derivatives/options.c:1617
msgid "spot1:spot price of the underlying asset of the first option"
msgstr "spot1:spot price of the underlying asset of the first option"

#: ../plugins/fn-derivatives/options.c:1618
msgid "spot2:spot price of the underlying asset of the second option"
msgstr "spot2:spot price of the underlying asset of the second option"

#: ../plugins/fn-derivatives/options.c:1619
msgid "strike1:strike prices of the first option"
msgstr "strike1:strike prices of the first option"

#: ../plugins/fn-derivatives/options.c:1620
msgid "strike2:strike prices of the second option"
msgstr "strike2:strike prices of the second option"

#: ../plugins/fn-derivatives/options.c:1622
msgid ""
"cost_of_carry1:net cost of holding the underlying asset of the first option "
"(for common stocks, the risk free rate less the dividend yield)"
msgstr ""
"cost_of_carry1:net cost of holding the underlying asset of the first option "
"(for common stocks, the risk free rate less the dividend yield)"

#: ../plugins/fn-derivatives/options.c:1624
msgid ""
"cost_of_carry2:net cost of holding the underlying asset of the second option "
"(for common stocks, the risk free rate less the dividend yield)"
msgstr ""
"cost_of_carry2:net cost of holding the underlying asset of the second option "
"(for common stocks, the risk free rate less the dividend yield)"

#: ../plugins/fn-derivatives/options.c:1627
msgid ""
"volatility1:annualized volatility in price of the underlying asset of the "
"first option"
msgstr ""
"volatility1:annualised volatility in price of the underlying asset of the "
"first option"

#: ../plugins/fn-derivatives/options.c:1628
msgid ""
"volatility2:annualized volatility in price of the underlying asset of the "
"second option"
msgstr ""
"volatility2:annualised volatility in price of the underlying asset of the "
"second option"

#: ../plugins/fn-derivatives/options.c:1629
msgid "rho:correlation between the two underlying assets"
msgstr "rho:correlation between the two underlying assets"

#: ../plugins/fn-derivatives/options.c:1630
msgid ""
"OPT_2_ASSET_CORRELATION models the theoretical price of options on 2 assets "
"with correlation @{rho}. The payoff for a call is max(@{spot2} - @"
"{strike2},0) if @{spot1} > @{strike1} or 0 otherwise. The payoff for a put "
"is max (@{strike2} - @{spot2}, 0) if @{spot1} < @{strike1} or 0 otherwise."
msgstr ""
"OPT_2_ASSET_CORRELATION models the theoretical price of options on 2 assets "
"with correlation @{rho}. The payoff for a call is max(@{spot2} - @"
"{strike2},0) if @{spot1} > @{strike1} or 0 otherwise. The payoff for a put "
"is max (@{strike2} - @{spot2}, 0) if @{spot1} < @{strike1} or 0 otherwise."

#: ../plugins/fn-derivatives/options.c:1665
msgid ""
"OPT_EURO_EXCHANGE:theoretical price of a European option to exchange assets"
msgstr ""
"OPT_EURO_EXCHANGE:theoretical price of a European option to exchange assets"

#: ../plugins/fn-derivatives/options.c:1666
#: ../plugins/fn-derivatives/options.c:1710
msgid "spot1:spot price of asset 1"
msgstr "spot1:spot price of asset 1"

#: ../plugins/fn-derivatives/options.c:1667
#: ../plugins/fn-derivatives/options.c:1711
msgid "spot2:spot price of asset 2"
msgstr "spot2:spot price of asset 2"

#: ../plugins/fn-derivatives/options.c:1668
#: ../plugins/fn-derivatives/options.c:1712
msgid "qty1:quantity of asset 1"
msgstr "qty1:quantity of asset 1"

#: ../plugins/fn-derivatives/options.c:1669
#: ../plugins/fn-derivatives/options.c:1713
msgid "qty2:quantity of asset 2"
msgstr "qty2:quantity of asset 2"

#: ../plugins/fn-derivatives/options.c:1672
#: ../plugins/fn-derivatives/options.c:1716
msgid ""
"cost_of_carry1:net cost of holding asset 1 (for common stocks, the risk free "
"rate less the dividend yield)"
msgstr ""
"cost_of_carry1:net cost of holding asset 1 (for common stocks, the risk free "
"rate less the dividend yield)"

#: ../plugins/fn-derivatives/options.c:1674
#: ../plugins/fn-derivatives/options.c:1718
msgid ""
"cost_of_carry2:net cost of holding asset 2 (for common stocks, the risk free "
"rate less the dividend yield)"
msgstr ""
"cost_of_carry2:net cost of holding asset 2 (for common stocks, the risk free "
"rate less the dividend yield)"

#: ../plugins/fn-derivatives/options.c:1676
#: ../plugins/fn-derivatives/options.c:1720
msgid "volatility1:annualized volatility in price of asset 1"
msgstr "volatility1:annualised volatility in price of asset 1"

#: ../plugins/fn-derivatives/options.c:1677
#: ../plugins/fn-derivatives/options.c:1721
msgid "volatility2:annualized volatility in price of asset 2"
msgstr "volatility2:annualised volatility in price of asset 2"

#: ../plugins/fn-derivatives/options.c:1678
#: ../plugins/fn-derivatives/options.c:1722
msgid "rho:correlation between the prices of the two assets"
msgstr "rho:correlation between the prices of the two assets"

#: ../plugins/fn-derivatives/options.c:1679
msgid ""
"OPT_EURO_EXCHANGE models the theoretical price of a European option to "
"exchange one asset with quantity @{qty2} and spot price @{spot2} for another "
"with quantity @{qty1} and spot price @{spot1}."
msgstr ""
"OPT_EURO_EXCHANGE models the theoretical price of a European option to "
"exchange one asset with quantity @{qty2} and spot price @{spot2} for another "
"with quantity @{qty1} and spot price @{spot1}."

#: ../plugins/fn-derivatives/options.c:1709
msgid ""
"OPT_AMER_EXCHANGE:theoretical price of an American option to exchange assets"
msgstr ""
"OPT_AMER_EXCHANGE:theoretical price of an American option to exchange assets"

#: ../plugins/fn-derivatives/options.c:1723
msgid ""
"OPT_AMER_EXCHANGE models the theoretical price of an American option to "
"exchange one asset with quantity @{qty2} and spot price @{spot2} for another "
"with quantity @{qty1} and spot price @{spot1}."
msgstr ""
"OPT_AMER_EXCHANGE models the theoretical price of an American option to "
"exchange one asset with quantity @{qty2} and spot price @{spot2} for another "
"with quantity @{qty1} and spot price @{spot1}."

#: ../plugins/fn-derivatives/options.c:1753
msgid ""
"OPT_SPREAD_APPROX:theoretical price of a European option on the spread "
"between two futures contracts"
msgstr ""
"OPT_SPREAD_APPROX:theoretical price of a European option on the spread "
"between two futures contracts"

#: ../plugins/fn-derivatives/options.c:1755
msgid "fut_price1:price of the first futures contract"
msgstr "fut_price1:price of the first futures contract"

#: ../plugins/fn-derivatives/options.c:1756
msgid "fut_price2:price of the second futures contract"
msgstr "fut_price2:price of the second futures contract"

#: ../plugins/fn-derivatives/options.c:1760
msgid ""
"volatility1:annualized volatility in price of the first underlying futures "
"contract"
msgstr ""
"volatility1:annualised volatility in price of the first underlying futures "
"contract"

#: ../plugins/fn-derivatives/options.c:1761
msgid ""
"volatility2:annualized volatility in price of the second underlying futures "
"contract"
msgstr ""
"volatility2:annualised volatility in price of the second underlying futures "
"contract"

#: ../plugins/fn-derivatives/options.c:1762
msgid "rho:correlation between the two futures contracts"
msgstr "rho:correlation between the two futures contracts"

#: ../plugins/fn-derivatives/options.c:1808
msgid ""
"OPT_FLOAT_STRK_LKBK:theoretical price of floating-strike lookback option"
msgstr ""
"OPT_FLOAT_STRK_LKBK:theoretical price of floating-strike lookback option"

#: ../plugins/fn-derivatives/options.c:1811
#: ../plugins/fn-derivatives/options.c:1875
msgid "spot_min:minimum spot price of the underlying asset so far observed"
msgstr "spot_min:minimum spot price of the underlying asset so far observed"

#: ../plugins/fn-derivatives/options.c:1812
#: ../plugins/fn-derivatives/options.c:1876
msgid "spot_max:maximum spot price of the underlying asset so far observed"
msgstr "spot_max:maximum spot price of the underlying asset so far observed"

#: ../plugins/fn-derivatives/options.c:1817
msgid ""
"OPT_FLOAT_STRK_LKBK determines the theoretical price of a floating-strike "
"lookback option where the holder of the option may exercise on expiry at the "
"most favourable price observed during the options life of the underlying "
"asset."
msgstr ""
"OPT_FLOAT_STRK_LKBK determines the theoretical price of a floating-strike "
"lookback option where the holder of the option may exercise on expiry at the "
"most favourable price observed during the options life of the underlying "
"asset."

#: ../plugins/fn-derivatives/options.c:1872
msgid "OPT_FIXED_STRK_LKBK:theoretical price of a fixed-strike lookback option"
msgstr ""
"OPT_FIXED_STRK_LKBK:theoretical price of a fixed-strike lookback option"

#: ../plugins/fn-derivatives/options.c:1882
msgid ""
"OPT_FIXED_STRK_LKBK determines the theoretical price of a fixed-strike "
"lookback option where the holder of the option may exercise on expiry at the "
"most favourable price observed during the options life of the underlying "
"asset."
msgstr ""
"OPT_FIXED_STRK_LKBK determines the theoretical price of a fixed-strike "
"lookback option where the holder of the option may exercise on expiry at the "
"most favourable price observed during the options life of the underlying "
"asset."

#: ../plugins/fn-derivatives/options.c:1956
msgid ""
"OPT_BINOMIAL:theoretical price of either an American or European style "
"option using a binomial tree"
msgstr ""
"OPT_BINOMIAL:theoretical price of either an American or European style "
"option using a binomial tree"

#: ../plugins/fn-derivatives/options.c:1957
msgid ""
"amer_euro_flag:'a' for an American style option or 'e' for a European style "
"option"
msgstr ""
"amer_euro_flag:'a' for an American style option or 'e' for a European style "
"option"

#: ../plugins/fn-derivatives/options.c:1959
msgid "num_time_steps:number of time steps used in the valuation"
msgstr "num_time_steps:number of time steps used in the valuation"

#: ../plugins/fn-derivatives/options.c:1966
msgid ""
"A larger @{num_time_steps} yields greater accuracy but  OPT_BINOMIAL is "
"slower to calculate."
msgstr ""
"A larger @{num_time_steps} yields greater accuracy but  OPT_BINOMIAL is "
"slower to calculate."

#: ../plugins/fn-eng/functions.c:207
msgid "BASE:string of digits representing the number @{n} in base @{b}"
msgstr "BASE:string of digits representing the number @{n} in base @{b}"

#: ../plugins/fn-eng/functions.c:208 ../plugins/fn-math/functions.c:1293
#: ../plugins/fn-numtheory/numtheory.c:578
#: ../plugins/fn-numtheory/numtheory.c:608
msgid "n:integer"
msgstr "n:integer"

#: ../plugins/fn-eng/functions.c:209
msgid "b:base (2 ≤ @{b} ≤ 36)"
msgstr "b:base (2 ≤ @{b} ≤ 36)"

#: ../plugins/fn-eng/functions.c:210
msgid "length:minimum length of the resulting string"
msgstr "length:minimum length of the resulting string"

#: ../plugins/fn-eng/functions.c:211
msgid ""
"BASE converts @{n} to its string representation in base @{b}. Leading zeroes "
"will be added to reach the minimum length given by @{length}."
msgstr ""
"BASE converts @{n} to its string representation in base @{b}. Leading zeroes "
"will be added to reach the minimum length given by @{length}."

#: ../plugins/fn-eng/functions.c:236
msgid "BIN2DEC:decimal representation of the binary number @{x}"
msgstr "BIN2DEC:decimal representation of the binary number @{x}"

#: ../plugins/fn-eng/functions.c:237 ../plugins/fn-eng/functions.c:259
#: ../plugins/fn-eng/functions.c:283
msgid ""
"x:a binary number, either as a string or as a number involving only the "
"digits 0 and 1"
msgstr ""
"x:a binary number, either as a string or as a number involving only the "
"digits 0 and 1"

#: ../plugins/fn-eng/functions.c:258
msgid "BIN2OCT:octal representation of the binary number @{x}"
msgstr "BIN2OCT:octal representation of the binary number @{x}"

#: ../plugins/fn-eng/functions.c:260 ../plugins/fn-eng/functions.c:284
#: ../plugins/fn-eng/functions.c:309 ../plugins/fn-eng/functions.c:339
#: ../plugins/fn-eng/functions.c:362 ../plugins/fn-eng/functions.c:433
#: ../plugins/fn-eng/functions.c:456 ../plugins/fn-eng/functions.c:479
#: ../plugins/fn-eng/functions.c:502
msgid "places:number of digits"
msgstr "places:number of digits"

#: ../plugins/fn-eng/functions.c:261
msgid ""
"If @{places} is given, BIN2OCT pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, BIN2OCT returns #NUM!"
msgstr ""
"If @{places} is given, BIN2OCT pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, BIN2OCT returns #NUM!"

#: ../plugins/fn-eng/functions.c:282
msgid "BIN2HEX:hexadecimal representation of the binary number @{x}"
msgstr "BIN2HEX:hexadecimal representation of the binary number @{x}"

#: ../plugins/fn-eng/functions.c:285
msgid ""
"If @{places} is given, BIN2HEX pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, BIN2HEX returns #NUM!"
msgstr ""
"If @{places} is given, BIN2HEX pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, BIN2HEX returns #NUM!"

#: ../plugins/fn-eng/functions.c:307
msgid "DEC2BIN:binary representation of the decimal number @{x}"
msgstr "DEC2BIN:binary representation of the decimal number @{x}"

#: ../plugins/fn-eng/functions.c:308
msgid "x:integer (− 513 < @{x} < 512)"
msgstr "x:integer (− 513 < @{x} < 512)"

#: ../plugins/fn-eng/functions.c:310
msgid ""
"If @{places} is given and @{x} is non-negative, DEC2BIN pads the result with "
"zeros to achieve exactly @{places} digits. If this is not possible, DEC2BIN "
"returns #NUM!"
msgstr ""
"If @{places} is given and @{x} is non-negative, DEC2BIN pads the result with "
"zeros to achieve exactly @{places} digits. If this is not possible, DEC2BIN "
"returns #NUM!"

#: ../plugins/fn-eng/functions.c:314
msgid "If @{places} is given and @{x} is negative, @{places} is ignored."
msgstr "If @{places} is given and @{x} is negative, @{places} is ignored."

#: ../plugins/fn-eng/functions.c:315
msgid "If @{x} < − 512 or @{x} > 511, DEC2BIN returns #NUM!"
msgstr "If @{x} < − 512 or @{x} > 511, DEC2BIN returns #NUM!"

#: ../plugins/fn-eng/functions.c:337
msgid "DEC2OCT:octal representation of the decimal number @{x}"
msgstr "DEC2OCT:octal representation of the decimal number @{x}"

#: ../plugins/fn-eng/functions.c:338 ../plugins/fn-eng/functions.c:361
#: ../plugins/fn-math/functions.c:1292
msgid "x:integer"
msgstr "x:integer"

#: ../plugins/fn-eng/functions.c:340
msgid ""
"If @{places} is given, DEC2OCT pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, DEC2OCT returns #NUM!"
msgstr ""
"If @{places} is given, DEC2OCT pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, DEC2OCT returns #NUM!"

#: ../plugins/fn-eng/functions.c:360
msgid "DEC2HEX:hexadecimal representation of the decimal number @{x}"
msgstr "DEC2HEX:hexadecimal representation of the decimal number @{x}"

#: ../plugins/fn-eng/functions.c:363
msgid ""
"If @{places} is given, DEC2HEX pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, DEC2HEX returns #NUM!"
msgstr ""
"If @{places} is given, DEC2HEX pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, DEC2HEX returns #NUM!"

#: ../plugins/fn-eng/functions.c:383
msgid "DECIMAL:decimal representation of @{x}"
msgstr "DECIMAL:decimal representation of @{x}"

#: ../plugins/fn-eng/functions.c:384
msgid "x:number in base @{base}"
msgstr "x:number in base @{base}"

#: ../plugins/fn-eng/functions.c:385
msgid "base:base of @{x}, (2 ≤ @{base} ≤ 36)"
msgstr "base:base of @{x}, (2 ≤ @{base} ≤ 36)"

#: ../plugins/fn-eng/functions.c:407
msgid "OCT2DEC:decimal representation of the octal number @{x}"
msgstr "OCT2DEC:decimal representation of the octal number @{x}"

#: ../plugins/fn-eng/functions.c:408 ../plugins/fn-eng/functions.c:432
#: ../plugins/fn-eng/functions.c:455
msgid "x:a octal number, either as a string or as a number"
msgstr "x:a octal number, either as a string or as a number"

#: ../plugins/fn-eng/functions.c:431
msgid "OCT2BIN:binary representation of the octal number @{x}"
msgstr "OCT2BIN:binary representation of the octal number @{x}"

#: ../plugins/fn-eng/functions.c:434
msgid ""
"If @{places} is given, OCT2BIN pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, OCT2BIN returns #NUM!"
msgstr ""
"If @{places} is given, OCT2BIN pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, OCT2BIN returns #NUM!"

#: ../plugins/fn-eng/functions.c:454
msgid "OCT2HEX:hexadecimal representation of the octal number @{x}"
msgstr "OCT2HEX:hexadecimal representation of the octal number @{x}"

#: ../plugins/fn-eng/functions.c:457
msgid ""
"If @{places} is given, OCT2HEX pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, OCT2HEX returns #NUM!"
msgstr ""
"If @{places} is given, OCT2HEX pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, OCT2HEX returns #NUM!"

#: ../plugins/fn-eng/functions.c:477
msgid "HEX2BIN:binary representation of the hexadecimal number @{x}"
msgstr "HEX2BIN:binary representation of the hexadecimal number @{x}"

#: ../plugins/fn-eng/functions.c:478 ../plugins/fn-eng/functions.c:501
#: ../plugins/fn-eng/functions.c:524
msgid ""
"x:a hexadecimal number, either as a string or as a number if no A to F are "
"needed"
msgstr ""
"x:a hexadecimal number, either as a string or as a number if no A to F are "
"needed"

#: ../plugins/fn-eng/functions.c:480
msgid ""
"If @{places} is given, HEX2BIN pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, HEX2BIN returns #NUM!"
msgstr ""
"If @{places} is given, HEX2BIN pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, HEX2BIN returns #NUM!"

#: ../plugins/fn-eng/functions.c:500
msgid "HEX2OCT:octal representation of the hexadecimal number @{x}"
msgstr "HEX2OCT:octal representation of the hexadecimal number @{x}"

#: ../plugins/fn-eng/functions.c:503
msgid ""
"If @{places} is given, HEX2OCT pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, HEX2OCT returns #NUM!"
msgstr ""
"If @{places} is given, HEX2OCT pads the result with zeros to achieve exactly "
"@{places} digits. If this is not possible, HEX2OCT returns #NUM!"

#: ../plugins/fn-eng/functions.c:523
msgid "HEX2DEC:decimal representation of the hexadecimal number @{x}"
msgstr "HEX2DEC:decimal representation of the hexadecimal number @{x}"

#: ../plugins/fn-eng/functions.c:546
msgid ""
"BESSELI:Modified Bessel function of the first kind of order @{α} at @{x}"
msgstr ""
"BESSELI:Modified Bessel function of the first kind of order @{α} at @{x}"

#: ../plugins/fn-eng/functions.c:547 ../plugins/fn-eng/functions.c:585
#: ../plugins/fn-eng/functions.c:609 ../plugins/fn-eng/functions.c:638
msgid "X:number"
msgstr "X:number"

#: ../plugins/fn-eng/functions.c:548 ../plugins/fn-eng/functions.c:586
msgid "α:order (any non-negative number)"
msgstr "α:order (any non-negative number)"

#: ../plugins/fn-eng/functions.c:549 ../plugins/fn-eng/functions.c:587
msgid ""
"If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is "
"returned."
msgstr ""
"If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is "
"returned."

#: ../plugins/fn-eng/functions.c:550 ../plugins/fn-eng/functions.c:588
msgid "This function is Excel compatible if only integer orders @{α} are used."
msgstr ""
"This function is Excel compatible if only integer orders @{α} are used."

#: ../plugins/fn-eng/functions.c:553 ../plugins/fn-eng/functions.c:591
#: ../plugins/fn-eng/functions.c:617
msgid "wiki:en:Bessel_function"
msgstr "wiki:en:Bessel_function"

#: ../plugins/fn-eng/functions.c:584
msgid ""
"BESSELK:Modified Bessel function of the second kind of order @{α} at @{x}"
msgstr ""
"BESSELK:Modified Bessel function of the second kind of order @{α} at @{x}"

#: ../plugins/fn-eng/functions.c:608
msgid "BESSELJ:Bessel function of the first kind of order @{α} at @{x}"
msgstr "BESSELJ:Bessel function of the first kind of order @{α} at @{x}"

#: ../plugins/fn-eng/functions.c:610 ../plugins/fn-eng/functions.c:639
msgid "α:order (any non-negative integer)"
msgstr "α:order (any non-negative integer)"

#: ../plugins/fn-eng/functions.c:611 ../plugins/fn-eng/functions.c:640
msgid ""
"If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is "
"returned. If @{α} is not an integer, it is truncated."
msgstr ""
"If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is "
"returned. If @{α} is not an integer, it is truncated."

#: ../plugins/fn-eng/functions.c:637
msgid "BESSELY:Bessel function of the second kind of order @{α} at @{x}"
msgstr "BESSELY:Bessel function of the second kind of order @{α} at @{x}"

#: ../plugins/fn-eng/functions.c:664
msgid "CONVERT:a converted measurement"
msgstr "CONVERT:a converted measurement"

#: ../plugins/fn-eng/functions.c:665 ../plugins/fn-eng/functions.c:1109
#: ../plugins/fn-eng/functions.c:1175 ../plugins/fn-math/functions.c:226
#: ../plugins/fn-math/functions.c:245 ../plugins/fn-math/functions.c:267
#: ../plugins/fn-math/functions.c:308 ../plugins/fn-math/functions.c:326
#: ../plugins/fn-math/functions.c:352 ../plugins/fn-math/functions.c:371
#: ../plugins/fn-math/functions.c:395 ../plugins/fn-math/functions.c:456
#: ../plugins/fn-math/functions.c:732 ../plugins/fn-math/functions.c:785
#: ../plugins/fn-math/functions.c:803 ../plugins/fn-math/functions.c:821
#: ../plugins/fn-math/functions.c:857 ../plugins/fn-math/functions.c:875
#: ../plugins/fn-math/functions.c:892 ../plugins/fn-math/functions.c:923
#: ../plugins/fn-math/functions.c:953 ../plugins/fn-math/functions.c:977
#: ../plugins/fn-math/functions.c:1001 ../plugins/fn-math/functions.c:1085
#: ../plugins/fn-math/functions.c:1121 ../plugins/fn-math/functions.c:1217
#: ../plugins/fn-math/functions.c:1395 ../plugins/fn-math/functions.c:1435
#: ../plugins/fn-math/functions.c:1453 ../plugins/fn-math/functions.c:1605
#: ../plugins/fn-math/functions.c:1640 ../plugins/fn-math/functions.c:1677
#: ../plugins/fn-math/functions.c:1712 ../plugins/fn-math/functions.c:1852
#: ../plugins/fn-math/functions.c:1902 ../plugins/fn-math/functions.c:1926
#: ../plugins/fn-math/functions.c:1967 ../plugins/fn-math/functions.c:2014
#: ../plugins/fn-stat/functions.c:440 ../plugins/fn-stat/functions.c:492
#: ../plugins/fn-stat/functions.c:553 ../plugins/fn-stat/functions.c:873
#: ../plugins/fn-stat/functions.c:942 ../plugins/fn-stat/functions.c:1005
#: ../plugins/fn-stat/functions.c:1147 ../plugins/fn-stat/functions.c:1219
#: ../plugins/fn-stat/functions.c:1306 ../plugins/fn-stat/functions.c:1336
#: ../plugins/fn-stat/functions.c:1569 ../plugins/fn-stat/functions.c:1748
#: ../plugins/fn-stat/functions.c:1784 ../plugins/fn-stat/functions.c:1951
#: ../plugins/fn-stat/functions.c:4355 ../plugins/fn-stat/functions.c:4386
#: ../plugins/fn-stat/functions.c:4420 ../plugins/fn-stat/functions.c:4455
#: ../plugins/fn-stat/functions.c:4494 ../plugins/fn-stat/functions.c:4527
msgid "x:number"
msgstr "x:number"

#: ../plugins/fn-eng/functions.c:666
msgid "from:unit (string)"
msgstr "from:unit (string)"

#: ../plugins/fn-eng/functions.c:667
msgid "to:unit (string)"
msgstr "to:unit (string)"

#: ../plugins/fn-eng/functions.c:668
msgid ""
"CONVERT returns a conversion from one measurement system to another. @{x} is "
"a value in @{from} units that is to be converted into @{to} units."
msgstr ""
"CONVERT returns a conversion from one measurement system to another. @{x} is "
"a value in @{from} units that is to be converted into @{to} units."

#: ../plugins/fn-eng/functions.c:670
msgid "If @{from} and @{to} are different types, CONVERT returns #N/A!"
msgstr "If @{from} and @{to} are different types, CONVERT returns #N/A!"

#: ../plugins/fn-eng/functions.c:671
msgid ""
"@{from} and @{to} can be any of the following:\n"
"\n"
"Weight and mass:\n"
"\t'g'  \t\t\tGram\n"
"\t'sg' \t\t\tSlug\n"
"\t'lbm'\t\tPound\n"
"\t'u'  \t\t\tU (atomic mass)\n"
"\t'ozm'\t\tOunce\n"
"\n"
"Distance:\n"
"\t'm'   \t\tMeter\n"
"\t'mi'  \t\tStatute mile\n"
"\t'Nmi' \t\tNautical mile\n"
"\t'in'  \t\t\tInch\n"
"\t'ft'  \t\t\tFoot\n"
"\t'yd'  \t\tYard\n"
"\t'ang' \t\tAngstrom\n"
"\t'Pica'\t\tPica Points\n"
"\t'picapt'\t\tPica Points\n"
"\t'pica'\t\tPica\n"
"\n"
"Time:\n"
"\t'yr'  \t\t\tYear\n"
"\t'day' \t\tDay\n"
"\t'hr'  \t\t\tHour\n"
"\t'mn'  \t\tMinute\n"
"\t'sec' \t\tSecond\n"
"\n"
"Pressure:\n"
"\t'Pa'  \t\tPascal\n"
"\t'atm' \t\tAtmosphere\n"
"\t'mmHg'\t\tmm of Mercury\n"
"\n"
"Force:\n"
"\t'N'   \t\t\tNewton\n"
"\t'dyn' \t\tDyne\n"
"\t'lbf' \t\t\tPound force\n"
"\n"
"Energy:\n"
"\t'J'    \t\t\tJoule\n"
"\t'e'    \t\tErg\n"
"\t'c'    \t\tThermodynamic calorie\n"
"\t'cal'  \t\tIT calorie\n"
"\t'eV'   \t\tElectron volt\n"
"\t'HPh'  \t\tHorsepower-hour\n"
"\t'Wh'   \t\tWatt-hour\n"
"\t'flb'  \t\tFoot-pound\n"
"\t'BTU'  \t\tBTU\n"
"\n"
"Power:\n"
"\t'HP'   \t\tHorsepower\n"
"\t'W'    \t\tWatt\n"
"\n"
"Magnetism:\n"
"\t'T'    \t\tTesla\n"
"\t'ga'   \t\tGauss\n"
"\n"
"Temperature:\n"
"\t'C'    \t\tDegree Celsius\n"
"\t'F'    \t\tDegree Fahrenheit\n"
"\t'K'    \t\tDegree Kelvin\n"
"\n"
"Liquid measure:\n"
"\t'tsp'  \t\tTeaspoon\n"
"\t'tbs'  \t\tTablespoon\n"
"\t'oz'   \t\tFluid ounce\n"
"\t'cup'  \t\tCup\n"
"\t'pt'   \t\tPint\n"
"\t'qt'   \t\tQuart\n"
"\t'gal'  \t\tGallon\n"
"\t'l'    \t\t\tLiter\n"
"\n"
"For metric units any of the following prefixes can be used:\n"
"\t'Y'  \tyotta \t\t1E+24\n"
"\t'Z'  \tzetta \t\t1E+21\n"
"\t'E'  \texa   \t\t1E+18\n"
"\t'P'  \tpeta  \t\t1E+15\n"
"\t'T'  \ttera  \t\t1E+12\n"
"\t'G'  \tgiga  \t\t1E+09\n"
"\t'M'  \tmega  \t\t1E+06\n"
"\t'k'  \tkilo  \t\t1E+03\n"
"\t'h'  \thecto \t\t1E+02\n"
"\t'e'  \tdeca (deka)\t1E+01\n"
"\t'd'  \tdeci  \t\t1E-01\n"
"\t'c'  \tcenti \t\t1E-02\n"
"\t'm'  \tmilli \t\t1E-03\n"
"\t'u'  \tmicro \t\t1E-06\n"
"\t'n'  \tnano  \t\t1E-09\n"
"\t'p'  \tpico  \t\t1E-12\n"
"\t'f'  \tfemto \t\t1E-15\n"
"\t'a'  \tatto  \t\t1E-18\n"
"\t'z'  \tzepto \t\t1E-21\n"
"\t'y'  \tyocto \t\t1E-24"
msgstr ""
"@{from} and @{to} can be any of the following:\n"
"\n"
"Weight and mass:\n"
"\t'g'  \t\t\tGram\n"
"\t'sg' \t\t\tSlug\n"
"\t'lbm'\t\tPound\n"
"\t'u'  \t\t\tU (atomic mass)\n"
"\t'ozm'\t\tOunce\n"
"\n"
"Distance:\n"
"\t'm'   \t\tMetre\n"
"\t'mi'  \t\tStatute mile\n"
"\t'Nmi' \t\tNautical mile\n"
"\t'in'  \t\t\tInch\n"
"\t'ft'  \t\t\tFoot\n"
"\t'yd'  \t\tYard\n"
"\t'ang' \t\tAngstrom\n"
"\t'Pica'\t\tPica Points\n"
"\t'picapt'\t\tPica Points\n"
"\t'pica'\t\tPica\n"
"\n"
"Time:\n"
"\t'yr'  \t\t\tYear\n"
"\t'day' \t\tDay\n"
"\t'hr'  \t\t\tHour\n"
"\t'mn'  \t\tMinute\n"
"\t'sec' \t\tSecond\n"
"\n"
"Pressure:\n"
"\t'Pa'  \t\tPascal\n"
"\t'atm' \t\tAtmosphere\n"
"\t'mmHg'\t\tmm of Mercury\n"
"\n"
"Force:\n"
"\t'N'   \t\t\tNewton\n"
"\t'dyn' \t\tDyne\n"
"\t'lbf' \t\t\tPound force\n"
"\n"
"Energy:\n"
"\t'J'    \t\t\tJoule\n"
"\t'e'    \t\tErg\n"
"\t'c'    \t\tThermodynamic calorie\n"
"\t'cal'  \t\tIT calorie\n"
"\t'eV'   \t\tElectron volt\n"
"\t'HPh'  \t\tHorsepower-hour\n"
"\t'Wh'   \t\tWatt-hour\n"
"\t'flb'  \t\tFoot-pound\n"
"\t'BTU'  \t\tBTU\n"
"\n"
"Power:\n"
"\t'HP'   \t\tHorsepower\n"
"\t'W'    \t\tWatt\n"
"\n"
"Magnetism:\n"
"\t'T'    \t\tTesla\n"
"\t'ga'   \t\tGauss\n"
"\n"
"Temperature:\n"
"\t'C'    \t\tDegree Celsius\n"
"\t'F'    \t\tDegree Fahrenheit\n"
"\t'K'    \t\tDegree Kelvin\n"
"\n"
"Liquid measure:\n"
"\t'tsp'  \t\tTeaspoon\n"
"\t'tbs'  \t\tTablespoon\n"
"\t'oz'   \t\tFluid ounce\n"
"\t'cup'  \t\tCup\n"
"\t'pt'   \t\tPint\n"
"\t'qt'   \t\tQuart\n"
"\t'gal'  \t\tGallon\n"
"\t'l'    \t\t\tLiter\n"
"\n"
"For metric units any of the following prefixes can be used:\n"
"\t'Y'  \tyotta \t\t1E+24\n"
"\t'Z'  \tzetta \t\t1E+21\n"
"\t'E'  \texa   \t\t1E+18\n"
"\t'P'  \tpeta  \t\t1E+15\n"
"\t'T'  \ttera  \t\t1E+12\n"
"\t'G'  \tgiga  \t\t1E+09\n"
"\t'M'  \tmega  \t\t1E+06\n"
"\t'k'  \tkilo  \t\t1E+03\n"
"\t'h'  \thecto \t\t1E+02\n"
"\t'e'  \tdeca (deka)\t1E+01\n"
"\t'd'  \tdeci  \t\t1E-01\n"
"\t'c'  \tcenti \t\t1E-02\n"
"\t'm'  \tmilli \t\t1E-03\n"
"\t'u'  \tmicro \t\t1E-06\n"
"\t'n'  \tnano  \t\t1E-09\n"
"\t'p'  \tpico  \t\t1E-12\n"
"\t'f'  \tfemto \t\t1E-15\n"
"\t'a'  \tatto  \t\t1E-18\n"
"\t'z'  \tzepto \t\t1E-21\n"
"\t'y'  \tyocto \t\t1E-24"

#: ../plugins/fn-eng/functions.c:753
msgid "This function is Excel compatible (except \"picapt\")."
msgstr "This function is Excel compatible (except \"picapt\")."

#: ../plugins/fn-eng/functions.c:1076
msgid "ERF:Gauss error function"
msgstr "ERF:Gauss error function"

#: ../plugins/fn-eng/functions.c:1077
msgid "lower:lower limit of the integral, defaults to 0"
msgstr "lower:lower limit of the integral, defaults to 0"

#: ../plugins/fn-eng/functions.c:1078
msgid "upper:upper limit of the integral"
msgstr "upper:upper limit of the integral"

#: ../plugins/fn-eng/functions.c:1079
msgid ""
"ERF returns 2/sqrt(π)* integral from @{lower} to @{upper} of exp(-t*t) dt"
msgstr ""
"ERF returns 2/sqrt(π)* integral from @{lower} to @{upper} of exp(-t*t) dt"

#: ../plugins/fn-eng/functions.c:1080
msgid ""
"This function is Excel compatible if two arguments are supplied and neither "
"is negative."
msgstr ""
"This function is Excel compatible if two arguments are supplied and neither "
"is negative."

#: ../plugins/fn-eng/functions.c:1084 ../plugins/fn-eng/functions.c:1113
msgid "wiki:en:Error_function"
msgstr "wiki:en:Error_function"

#: ../plugins/fn-eng/functions.c:1108
msgid "ERFC:Complementary Gauss error function"
msgstr "ERFC:Complementary Gauss error function"

#: ../plugins/fn-eng/functions.c:1110
msgid "ERFC returns 2/sqrt(π)* integral from @{x} to ∞ of exp(-t*t) dt"
msgstr "ERFC returns 2/sqrt(π)* integral from @{x} to ∞ of exp(-t*t) dt"

#: ../plugins/fn-eng/functions.c:1128
msgid "DELTA:Kronecker delta function"
msgstr "DELTA:Kronecker delta function"

#: ../plugins/fn-eng/functions.c:1129 ../plugins/fn-eng/functions.c:1152
msgid "x0:number"
msgstr "x0:number"

#: ../plugins/fn-eng/functions.c:1130 ../plugins/fn-eng/functions.c:1153
msgid "x1:number, defaults to 0"
msgstr "x1:number, defaults to 0"

#: ../plugins/fn-eng/functions.c:1131
msgid "DELTA  returns 1 if  @{x1} = @{x0} and 0 otherwise."
msgstr "DELTA  returns 1 if  @{x1} = @{x0} and 0 otherwise."

#: ../plugins/fn-eng/functions.c:1132 ../plugins/fn-eng/functions.c:1155
msgid "If either argument is non-numeric, #VALUE! is returned."
msgstr "If either argument is non-numeric, #VALUE! is returned."

#: ../plugins/fn-eng/functions.c:1151
msgid "GESTEP:step function with step at @{x1} evaluated at @{x0}"
msgstr "GESTEP:step function with step at @{x1} evaluated at @{x0}"

#: ../plugins/fn-eng/functions.c:1154
msgid "GESTEP returns 1 if  @{x1} ≤ @{x0} and 0 otherwise."
msgstr "GESTEP returns 1 if  @{x1} ≤ @{x0} and 0 otherwise."

#: ../plugins/fn-eng/functions.c:1174
msgid "HEXREP:hexadecimal representation of numeric value"
msgstr "HEXREP:hexadecimal representation of numeric value"

#: ../plugins/fn-eng/functions.c:1176
msgid "HEXREP returns a hexadecimal string representation of @{x}."
msgstr "HEXREP returns a hexadecimal string representation of @{x}."

#: ../plugins/fn-eng/functions.c:1177
msgid ""
"This is a function meant for debugging.  The layout of the result may change "
"and even depend on how Gnumeric was compiled."
msgstr ""
"This is a function meant for debugging.  The layout of the result may change "
"and even depend on how Gnumeric was compiled."

#: ../plugins/fn-eng/functions.c:1205
msgid "INVSUMINV:the reciprocal of the sum of reciprocals of the arguments"
msgstr "INVSUMINV:the reciprocal of the sum of reciprocals of the arguments"

#: ../plugins/fn-eng/functions.c:1206
msgid "x0:non-negative number"
msgstr "x0:non-negative number"

#: ../plugins/fn-eng/functions.c:1207
msgid "x1:non-negative number"
msgstr "x1:non-negative number"

#: ../plugins/fn-eng/functions.c:1208
msgid ""
"If any of the arguments is negative, #VALUE! is returned.\n"
"If any argument is zero, the result is zero."
msgstr ""
"If any of the arguments is negative, #VALUE! is returned.\n"
"If any argument is zero, the result is zero."

#: ../plugins/fn-eng/functions.c:1210
msgid ""
"INVSUMINV sum calculates the reciprocal (the inverse) of the sum of "
"reciprocals (inverses) of all its arguments."
msgstr ""
"INVSUMINV sum calculates the reciprocal (the inverse) of the sum of "
"reciprocals (inverses) of all its arguments."

#: ../plugins/fn-erlang/functions.c:105
msgid "PROBBLOCK:probability of blocking"
msgstr "PROBBLOCK:probability of blocking"

#: ../plugins/fn-erlang/functions.c:106 ../plugins/fn-erlang/functions.c:191
msgid "traffic:number of calls"
msgstr "traffic:number of calls"

#: ../plugins/fn-erlang/functions.c:107 ../plugins/fn-erlang/functions.c:132
#: ../plugins/fn-erlang/functions.c:229
msgid "circuits:number of circuits"
msgstr "circuits:number of circuits"

#: ../plugins/fn-erlang/functions.c:108
msgid ""
"PROBBLOCK returns probability of blocking when @{traffic} calls load into @"
"{circuits} circuits."
msgstr ""
"PROBBLOCK returns probability of blocking when @{traffic} calls load into @"
"{circuits} circuits."

#: ../plugins/fn-erlang/functions.c:110 ../plugins/fn-erlang/functions.c:134
msgid "@{traffic} cannot exceed @{circuits}."
msgstr "@{traffic} cannot exceed @{circuits}."

#: ../plugins/fn-erlang/functions.c:130
msgid "OFFTRAF:predicted number of offered calls"
msgstr "OFFTRAF:predicted number of offered calls"

#: ../plugins/fn-erlang/functions.c:131
msgid "traffic:number of carried calls"
msgstr "traffic:number of carried calls"

#: ../plugins/fn-erlang/functions.c:133
msgid ""
"OFFTRAF returns the predicted number of offered calls given @{traffic} "
"carried calls (taken from measurements) on @{circuits} circuits."
msgstr ""
"OFFTRAF returns the predicted number of offered calls given @{traffic} "
"carried calls (taken from measurements) on @{circuits} circuits."

#: ../plugins/fn-erlang/functions.c:190
msgid "DIMCIRC:number of circuits required"
msgstr "DIMCIRC:number of circuits required"

#: ../plugins/fn-erlang/functions.c:192 ../plugins/fn-erlang/functions.c:230
msgid "gos:grade of service"
msgstr "gos:grade of service"

#: ../plugins/fn-erlang/functions.c:193
msgid ""
"DIMCIRC returns the number of circuits required given @{traffic} calls with "
"grade of service @{gos}."
msgstr ""
"DIMCIRC returns the number of circuits required given @{traffic} calls with "
"grade of service @{gos}."

#: ../plugins/fn-erlang/functions.c:228
msgid "OFFCAP:traffic capacity"
msgstr "OFFCAP:traffic capacity"

#: ../plugins/fn-erlang/functions.c:231
msgid ""
"OFFCAP returns the traffic capacity given @{circuits} circuits with grade of "
"service @{gos}."
msgstr ""
"OFFCAP returns the traffic capacity given @{circuits} circuits with grade of "
"service @{gos}."

#. *************************************************************************
#: ../plugins/fn-financial/functions.c:53
msgid "@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly)."
msgstr "@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly)."

#: ../plugins/fn-financial/functions.c:56
msgid ""
"If @{type} is 0, the default, payment is at the end of each period.  If @"
"{type} is 1, payment is at the beginning of each period."
msgstr ""
"If @{type} is 0, the default, payment is at the end of each period.  If @"
"{type} is 1, payment is at the beginning of each period."

#: ../plugins/fn-financial/functions.c:362
msgid "ACCRINT:accrued interest"
msgstr "ACCRINT:accrued interest"

#: ../plugins/fn-financial/functions.c:363
#: ../plugins/fn-financial/functions.c:450
#: ../plugins/fn-financial/functions.c:605
#: ../plugins/fn-financial/functions.c:2461
#: ../plugins/fn-financial/functions.c:2500
#: ../plugins/fn-financial/functions.c:2650
msgid "issue:date of issue"
msgstr "issue:date of issue"

#: ../plugins/fn-financial/functions.c:364
msgid "first_interest:date of first interest payment"
msgstr "first_interest:date of first interest payment"

#: ../plugins/fn-financial/functions.c:365
#: ../plugins/fn-financial/functions.c:488
#: ../plugins/fn-financial/functions.c:526
#: ../plugins/fn-financial/functions.c:567
#: ../plugins/fn-financial/functions.c:603
#: ../plugins/fn-financial/functions.c:648
#: ../plugins/fn-financial/functions.c:1086
#: ../plugins/fn-financial/functions.c:1124
#: ../plugins/fn-financial/functions.c:1158
#: ../plugins/fn-financial/functions.c:1890
#: ../plugins/fn-financial/functions.c:2255
#: ../plugins/fn-financial/functions.c:2305
#: ../plugins/fn-financial/functions.c:2414
#: ../plugins/fn-financial/functions.c:2459
#: ../plugins/fn-financial/functions.c:2498
#: ../plugins/fn-financial/functions.c:2648
#: ../plugins/fn-financial/functions.c:2744
#: ../plugins/fn-financial/functions.c:2822
#: ../plugins/fn-financial/functions.c:3002
#: ../plugins/fn-financial/functions.c:3026
#: ../plugins/fn-financial/functions.c:3050
#: ../plugins/fn-financial/functions.c:3074
#: ../plugins/fn-financial/functions.c:3100
#: ../plugins/fn-financial/functions.c:3126
#: ../plugins/fn-financial/functions.c:3238
msgid "settlement:settlement date"
msgstr "settlement:settlement date"

#: ../plugins/fn-financial/functions.c:366
#: ../plugins/fn-financial/functions.c:452
#: ../plugins/fn-financial/functions.c:529
#: ../plugins/fn-financial/functions.c:686
#: ../plugins/fn-financial/functions.c:2257
#: ../plugins/fn-financial/functions.c:2307
#: ../plugins/fn-financial/functions.c:2462
#: ../plugins/fn-financial/functions.c:2502
#: ../plugins/fn-financial/functions.c:2652
#: ../plugins/fn-financial/functions.c:2747
#: ../plugins/fn-financial/functions.c:2825
msgid "rate:nominal annual interest rate"
msgstr "rate:nominal annual interest rate"

#: ../plugins/fn-financial/functions.c:367
msgid "par:par value, defaults to $1000"
msgstr "par:par value, defaults to $1000"

#: ../plugins/fn-financial/functions.c:368
#: ../plugins/fn-financial/functions.c:1894
#: ../plugins/fn-financial/functions.c:2260
#: ../plugins/fn-financial/functions.c:2310
#: ../plugins/fn-financial/functions.c:2505
#: ../plugins/fn-financial/functions.c:2655
#: ../plugins/fn-financial/functions.c:2750
#: ../plugins/fn-financial/functions.c:2828
#: ../plugins/fn-financial/functions.c:3004
#: ../plugins/fn-financial/functions.c:3028
#: ../plugins/fn-financial/functions.c:3052
#: ../plugins/fn-financial/functions.c:3076
#: ../plugins/fn-financial/functions.c:3102
#: ../plugins/fn-financial/functions.c:3128
#: ../plugins/fn-financial/functions.c:3242
msgid "frequency:number of interest payments per year"
msgstr "frequency:number of interest payments per year"

#: ../plugins/fn-financial/functions.c:369
msgid "basis:calendar basis, defaults to 0"
msgstr "basis:calendar basis, defaults to 0"

#: ../plugins/fn-financial/functions.c:370
msgid "calc_method:calculation method, defaults to TRUE"
msgstr "calc_method:calculation method, defaults to TRUE"

#: ../plugins/fn-financial/functions.c:372
msgid ""
"If @{first_interest} < @{settlement} and @{calc_method} is TRUE, then "
"ACCRINT returns the sum of the interest accrued in all coupon periods from @"
"{issue}  date until @{settlement} date."
msgstr ""
"If @{first_interest} < @{settlement} and @{calc_method} is TRUE, then "
"ACCRINT returns the sum of the interest accrued in all coupon periods from @"
"{issue}  date until @{settlement} date."

#: ../plugins/fn-financial/functions.c:377
msgid ""
"If @{first_interest} < @{settlement} and @{calc_method} is FALSE, then "
"ACCRINT returns the sum of the interest accrued in all coupon periods from @"
"{first_interest}  date until @{settlement} date."
msgstr ""
"If @{first_interest} < @{settlement} and @{calc_method} is FALSE, then "
"ACCRINT returns the sum of the interest accrued in all coupon periods from @"
"{first_interest}  date until @{settlement} date."

#: ../plugins/fn-financial/functions.c:382
msgid ""
"Otherwise ACCRINT returns the sum of the interest accrued in all coupon "
"periods from @{issue}  date until @{settlement} date."
msgstr ""
"Otherwise ACCRINT returns the sum of the interest accrued in all coupon "
"periods from @{issue}  date until @{settlement} date."

#: ../plugins/fn-financial/functions.c:385
msgid ""
"@{frequency} must be one of 1, 2 or 4, but the exact value does not affect "
"the result."
msgstr ""
"@{frequency} must be one of 1, 2 or 4, but the exact value does not affect "
"the result."

#: ../plugins/fn-financial/functions.c:387
msgid "@{issue} must precede both @{first_interest} and @{settlement}."
msgstr "@{issue} must precede both @{first_interest} and @{settlement}."

#: ../plugins/fn-financial/functions.c:449
msgid "ACCRINTM:accrued interest"
msgstr "ACCRINTM:accrued interest"

#: ../plugins/fn-financial/functions.c:451
#: ../plugins/fn-financial/functions.c:489
#: ../plugins/fn-financial/functions.c:527
#: ../plugins/fn-financial/functions.c:568
#: ../plugins/fn-financial/functions.c:604
#: ../plugins/fn-financial/functions.c:649
#: ../plugins/fn-financial/functions.c:1087
#: ../plugins/fn-financial/functions.c:1125
#: ../plugins/fn-financial/functions.c:1159
#: ../plugins/fn-financial/functions.c:1891
#: ../plugins/fn-financial/functions.c:2256
#: ../plugins/fn-financial/functions.c:2306
#: ../plugins/fn-financial/functions.c:2415
#: ../plugins/fn-financial/functions.c:2460
#: ../plugins/fn-financial/functions.c:2499
#: ../plugins/fn-financial/functions.c:2649
#: ../plugins/fn-financial/functions.c:2745
#: ../plugins/fn-financial/functions.c:2823
#: ../plugins/fn-financial/functions.c:3003
#: ../plugins/fn-financial/functions.c:3027
#: ../plugins/fn-financial/functions.c:3051
#: ../plugins/fn-financial/functions.c:3075
#: ../plugins/fn-financial/functions.c:3101
#: ../plugins/fn-financial/functions.c:3127
#: ../plugins/fn-financial/functions.c:3239
msgid "maturity:maturity date"
msgstr "maturity:maturity date"

#: ../plugins/fn-financial/functions.c:453
msgid "par:par value"
msgstr "par:par value"

#: ../plugins/fn-financial/functions.c:455
msgid "ACCRINTM calculates the accrued interest from @{issue} to @{maturity}."
msgstr "ACCRINTM calculates the accrued interest from @{issue} to @{maturity}."

#: ../plugins/fn-financial/functions.c:456
msgid "@{par} defaults to $1000."
msgstr "@{par} defaults to $1000."

#: ../plugins/fn-financial/functions.c:487
msgid "INTRATE:interest rate"
msgstr "INTRATE:interest rate"

#: ../plugins/fn-financial/functions.c:490
#: ../plugins/fn-financial/functions.c:528
msgid "investment:amount paid on settlement"
msgstr "investment:amount paid on settlement"

#: ../plugins/fn-financial/functions.c:491
#: ../plugins/fn-financial/functions.c:570
#: ../plugins/fn-financial/functions.c:651
#: ../plugins/fn-financial/functions.c:2259
#: ../plugins/fn-financial/functions.c:2309
#: ../plugins/fn-financial/functions.c:2417
#: ../plugins/fn-financial/functions.c:2504
#: ../plugins/fn-financial/functions.c:2654
#: ../plugins/fn-financial/functions.c:2749
#: ../plugins/fn-financial/functions.c:2827
msgid "redemption:amount received at maturity"
msgstr "redemption:amount received at maturity"

#: ../plugins/fn-financial/functions.c:493
msgid "INTRATE calculates the interest of a fully vested security."
msgstr "INTRATE calculates the interest of a fully vested security."

#: ../plugins/fn-financial/functions.c:525
msgid "RECEIVED:amount to be received at maturity"
msgstr "RECEIVED:amount to be received at maturity"

#: ../plugins/fn-financial/functions.c:531
msgid "RECEIVED calculates the amount to be received when a security matures."
msgstr "RECEIVED calculates the amount to be received when a security matures."

#: ../plugins/fn-financial/functions.c:566
msgid "PRICEDISC:discounted price"
msgstr "PRICEDISC:discounted price"

#: ../plugins/fn-financial/functions.c:569
#: ../plugins/fn-financial/functions.c:606
#: ../plugins/fn-financial/functions.c:1088
#: ../plugins/fn-financial/functions.c:1126
msgid "discount:annual rate at which to discount"
msgstr "discount:annual rate at which to discount"

#: ../plugins/fn-financial/functions.c:572
msgid ""
"PRICEDISC calculates the price per $100 face value of a bond that does not "
"pay interest at maturity."
msgstr ""
"PRICEDISC calculates the price per $100 face value of a bond that does not "
"pay interest at maturity."

#: ../plugins/fn-financial/functions.c:602
msgid "PRICEMAT:price at maturity"
msgstr "PRICEMAT:price at maturity"

#: ../plugins/fn-financial/functions.c:607
#: ../plugins/fn-financial/functions.c:1893
#: ../plugins/fn-financial/functions.c:2258
#: ../plugins/fn-financial/functions.c:2503
#: ../plugins/fn-financial/functions.c:2748
#: ../plugins/fn-financial/functions.c:3241
msgid "yield:annual yield of security"
msgstr "yield:annual yield of security"

#: ../plugins/fn-financial/functions.c:609
msgid ""
"PRICEMAT calculates the price per $100 face value of a bond that pays "
"interest at maturity."
msgstr ""
"PRICEMAT calculates the price per $100 face value of a bond that pays "
"interest at maturity."

#: ../plugins/fn-financial/functions.c:647
msgid "DISC:discount rate"
msgstr "DISC:discount rate"

#: ../plugins/fn-financial/functions.c:650
msgid "par:price per $100 face value"
msgstr "par:price per $100 face value"

#: ../plugins/fn-financial/functions.c:653
msgid "DISC calculates the discount rate for a security."
msgstr "DISC calculates the discount rate for a security."

#: ../plugins/fn-financial/functions.c:654
msgid "@{redemption} is the redemption value per $100 face value."
msgstr "@{redemption} is the redemption value per $100 face value."

#: ../plugins/fn-financial/functions.c:685
msgid "EFFECT:effective interest rate"
msgstr "EFFECT:effective interest rate"

#: ../plugins/fn-financial/functions.c:687
#: ../plugins/fn-financial/functions.c:712
msgid "nper:number of periods used for compounding"
msgstr "nper:number of periods used for compounding"

#: ../plugins/fn-financial/functions.c:688
msgid ""
"EFFECT calculates the effective interest rate using the formula (1+@{rate}/@"
"{nper})^@{nper}-1."
msgstr ""
"EFFECT calculates the effective interest rate using the formula (1+@{rate}/@"
"{nper})^@{nper}-1."

#: ../plugins/fn-financial/functions.c:710
msgid "NOMINAL:nominal interest rate"
msgstr "NOMINAL:nominal interest rate"

#: ../plugins/fn-financial/functions.c:711
#: ../plugins/fn-financial/functions.c:736
#: ../plugins/fn-financial/functions.c:1542
#: ../plugins/fn-financial/functions.c:1728
#: ../plugins/fn-financial/functions.c:1758
#: ../plugins/fn-financial/functions.c:1798
#: ../plugins/fn-financial/functions.c:1842
#: ../plugins/fn-financial/functions.c:1936
msgid "rate:effective annual interest rate"
msgstr "rate:effective annual interest rate"

#: ../plugins/fn-financial/functions.c:713
msgid "NOMINAL calculates the nominal interest rate from the effective rate."
msgstr "NOMINAL calculates the nominal interest rate from the effective rate."

#: ../plugins/fn-financial/functions.c:735
msgid "ISPMT:interest payment for period"
msgstr "ISPMT:interest payment for period"

#: ../plugins/fn-financial/functions.c:737
#: ../plugins/fn-financial/functions.c:1759
#: ../plugins/fn-financial/functions.c:1799
msgid "per:period number"
msgstr "per:period number"

#: ../plugins/fn-financial/functions.c:738
#: ../plugins/fn-financial/functions.c:1192
#: ../plugins/fn-financial/functions.c:1459
#: ../plugins/fn-financial/functions.c:1693
#: ../plugins/fn-financial/functions.c:1729
#: ../plugins/fn-financial/functions.c:1760
#: ../plugins/fn-financial/functions.c:1800
#: ../plugins/fn-financial/functions.c:3151
#: ../plugins/fn-financial/functions.c:3195
msgid "nper:number of periods"
msgstr "nper:number of periods"

#: ../plugins/fn-financial/functions.c:739
#: ../plugins/fn-financial/functions.c:1194
#: ../plugins/fn-financial/functions.c:1307
#: ../plugins/fn-financial/functions.c:1695
#: ../plugins/fn-financial/functions.c:1730
#: ../plugins/fn-financial/functions.c:1761
#: ../plugins/fn-financial/functions.c:1801
#: ../plugins/fn-financial/functions.c:1844
#: ../plugins/fn-financial/functions.c:1937
#: ../plugins/fn-financial/functions.c:3152
#: ../plugins/fn-financial/functions.c:3196
msgid "pv:present value"
msgstr "pv:present value"

#: ../plugins/fn-financial/functions.c:740
msgid "ISPMT calculates the interest payment for period number @{per}."
msgstr "ISPMT calculates the interest payment for period number @{per}."

#: ../plugins/fn-financial/functions.c:771
msgid "DB:depreciation of an asset"
msgstr "DB:depreciation of an asset"

#: ../plugins/fn-financial/functions.c:772
#: ../plugins/fn-financial/functions.c:822
#: ../plugins/fn-financial/functions.c:871
#: ../plugins/fn-financial/functions.c:901
#: ../plugins/fn-financial/functions.c:2900
#: ../plugins/fn-financial/functions.c:2956
#: ../plugins/fn-financial/functions.c:3285
msgid "cost:initial cost of asset"
msgstr "cost:initial cost of asset"

#: ../plugins/fn-financial/functions.c:773
#: ../plugins/fn-financial/functions.c:823
#: ../plugins/fn-financial/functions.c:872
#: ../plugins/fn-financial/functions.c:902
#: ../plugins/fn-financial/functions.c:2903
#: ../plugins/fn-financial/functions.c:2959
#: ../plugins/fn-financial/functions.c:3286
msgid "salvage:value after depreciation"
msgstr "salvage:value after depreciation"

#: ../plugins/fn-financial/functions.c:774
#: ../plugins/fn-financial/functions.c:824
#: ../plugins/fn-financial/functions.c:873
#: ../plugins/fn-financial/functions.c:903
#: ../plugins/fn-financial/functions.c:3287
msgid "life:number of periods"
msgstr "life:number of periods"

#: ../plugins/fn-financial/functions.c:775
#: ../plugins/fn-financial/functions.c:825
#: ../plugins/fn-financial/functions.c:904
#: ../plugins/fn-financial/functions.c:2904
#: ../plugins/fn-financial/functions.c:2960
msgid "period:subject period"
msgstr "period:subject period"

#: ../plugins/fn-financial/functions.c:776
msgid "month:number of months in first year of depreciation"
msgstr "month:number of months in first year of depreciation"

#: ../plugins/fn-financial/functions.c:777
msgid ""
"DB calculates the depreciation of an asset for a given period using the "
"fixed-declining balance method."
msgstr ""
"DB calculates the depreciation of an asset for a given period using the "
"fixed-declining balance method."

#: ../plugins/fn-financial/functions.c:821
msgid "DDB:depreciation of an asset"
msgstr "DDB:depreciation of an asset"

#: ../plugins/fn-financial/functions.c:826
#: ../plugins/fn-financial/functions.c:3290
msgid "factor:factor at which the balance declines"
msgstr "factor:factor at which the balance declines"

#: ../plugins/fn-financial/functions.c:827
msgid ""
"DDB calculates the depreciation of an asset for a given period using the "
"double-declining balance method."
msgstr ""
"DDB calculates the depreciation of an asset for a given period using the "
"double-declining balance method."

#: ../plugins/fn-financial/functions.c:870
msgid "SLN:depreciation of an asset"
msgstr "SLN:depreciation of an asset"

#: ../plugins/fn-financial/functions.c:874
msgid ""
"SLN calculates the depreciation of an asset using the straight-line method."
msgstr ""
"SLN calculates the depreciation of an asset using the straight-line method."

#: ../plugins/fn-financial/functions.c:900
msgid "SYD:sum-of-years depreciation"
msgstr "SYD:sum-of-years depreciation"

#: ../plugins/fn-financial/functions.c:905
msgid ""
"SYD calculates the depreciation of an asset using the sum-of-years method."
msgstr ""
"SYD calculates the depreciation of an asset using the sum-of-years method."

#: ../plugins/fn-financial/functions.c:933
msgid "DOLLARDE:convert to decimal dollar amount"
msgstr "DOLLARDE:convert to decimal dollar amount"

#: ../plugins/fn-financial/functions.c:934
msgid "fractional_dollar:amount to convert"
msgstr "fractional_dollar:amount to convert"

#: ../plugins/fn-financial/functions.c:935
#: ../plugins/fn-financial/functions.c:983
msgid "fraction:denominator"
msgstr "fraction:denominator"

#: ../plugins/fn-financial/functions.c:936
msgid ""
"DOLLARDE converts a fractional dollar amount into a decimal amount.  This is "
"the inverse of the DOLLARFR function."
msgstr ""
"DOLLARDE converts a fractional dollar amount into a decimal amount.  This is "
"the inverse of the DOLLARFR function."

#: ../plugins/fn-financial/functions.c:981
msgid "DOLLARFR:convert to dollar fraction"
msgstr "DOLLARFR:convert to dollar fraction"

#: ../plugins/fn-financial/functions.c:982
msgid "decimal_dollar:amount to convert"
msgstr "decimal_dollar:amount to convert"

#: ../plugins/fn-financial/functions.c:984
msgid ""
"DOLLARFR converts a decimal dollar amount into a fractional amount which is "
"represented as the digits after the decimal point.  For example, 2/8 would "
"be represented as .2 while 3/16 would be represented as .03. This is the "
"inverse of the DOLLARDE function."
msgstr ""
"DOLLARFR converts a decimal dollar amount into a fractional amount which is "
"represented as the digits after the decimal point.  For example, 2/8 would "
"be represented as .2 while 3/16 would be represented as .03. This is the "
"inverse of the DOLLARDE function."

#: ../plugins/fn-financial/functions.c:1027
msgid "MIRR:modified internal rate of return"
msgstr "MIRR:modified internal rate of return"

#: ../plugins/fn-financial/functions.c:1028
#: ../plugins/fn-financial/functions.c:1341
#: ../plugins/fn-financial/functions.c:1543
#: ../plugins/fn-financial/functions.c:1598
msgid "values:cash flow"
msgstr "values:cash flow"

#: ../plugins/fn-financial/functions.c:1029
msgid "finance_rate:interest rate for financing cost"
msgstr "finance_rate:interest rate for financing cost"

#: ../plugins/fn-financial/functions.c:1030
msgid "reinvest_rate:interest rate for reinvestments"
msgstr "reinvest_rate:interest rate for reinvestments"

#: ../plugins/fn-financial/functions.c:1031
msgid ""
"MIRR calculates the modified internal rate of return of a periodic cash flow."
msgstr ""
"MIRR calculates the modified internal rate of return of a periodic cash flow."

#: ../plugins/fn-financial/functions.c:1085
msgid "TBILLEQ:bond-equivalent yield for a treasury bill"
msgstr "TBILLEQ:bond-equivalent yield for a treasury bill"

#: ../plugins/fn-financial/functions.c:1089
msgid "TBILLEQ calculates the bond-equivalent yield for a treasury bill."
msgstr "TBILLEQ calculates the bond-equivalent yield for a treasury bill."

#: ../plugins/fn-financial/functions.c:1123
msgid "TBILLPRICE:price of a treasury bill"
msgstr "TBILLPRICE:price of a treasury bill"

#: ../plugins/fn-financial/functions.c:1127
msgid ""
"TBILLPRICE calculates the price per $100 face value for a treasury bill."
msgstr ""
"TBILLPRICE calculates the price per $100 face value for a treasury bill."

#: ../plugins/fn-financial/functions.c:1157
msgid "TBILLYIELD:yield of a treasury bill"
msgstr "TBILLYIELD:yield of a treasury bill"

#: ../plugins/fn-financial/functions.c:1160
msgid "price:price"
msgstr "price:price"

#: ../plugins/fn-financial/functions.c:1161
msgid "TBILLYIELD calculates the yield of a treasury bill."
msgstr "TBILLYIELD calculates the yield of a treasury bill."

#: ../plugins/fn-financial/functions.c:1191
msgid "RATE:rate of investment"
msgstr "RATE:rate of investment"

#: ../plugins/fn-financial/functions.c:1193
#: ../plugins/fn-financial/functions.c:1460
#: ../plugins/fn-financial/functions.c:1694
#: ../plugins/fn-financial/functions.c:1843
msgid "pmt:payment at each period"
msgstr "pmt:payment at each period"

#: ../plugins/fn-financial/functions.c:1195
#: ../plugins/fn-financial/functions.c:1308
#: ../plugins/fn-financial/functions.c:1461
#: ../plugins/fn-financial/functions.c:1731
#: ../plugins/fn-financial/functions.c:1762
#: ../plugins/fn-financial/functions.c:1802
#: ../plugins/fn-financial/functions.c:1845
#: ../plugins/fn-financial/functions.c:1938
msgid "fv:future value"
msgstr "fv:future value"

#: ../plugins/fn-financial/functions.c:1196
#: ../plugins/fn-financial/functions.c:1462
#: ../plugins/fn-financial/functions.c:1696
#: ../plugins/fn-financial/functions.c:1732
#: ../plugins/fn-financial/functions.c:1763
#: ../plugins/fn-financial/functions.c:1803
#: ../plugins/fn-financial/functions.c:1846
#: ../plugins/fn-financial/functions.c:3155
#: ../plugins/fn-financial/functions.c:3199
msgid "type:payment type"
msgstr "type:payment type"

#: ../plugins/fn-financial/functions.c:1197
#: ../plugins/fn-financial/functions.c:1342
#: ../plugins/fn-financial/functions.c:1600
msgid "guess:an estimate of what the result should be"
msgstr "guess:an estimate of what the result should be"

#: ../plugins/fn-financial/functions.c:1198
msgid "RATE calculates the rate of return."
msgstr "RATE calculates the rate of return."

#: ../plugins/fn-financial/functions.c:1200
#: ../plugins/fn-financial/functions.c:1345
#: ../plugins/fn-financial/functions.c:1602
msgid ""
"The optional @{guess} is needed because there can be more than one valid "
"result.  It defaults to 10%."
msgstr ""
"The optional @{guess} is needed because there can be more than one valid "
"result.  It defaults to 10%."

#: ../plugins/fn-financial/functions.c:1305
msgid "RRI:equivalent interest rate for an investment increasing in value"
msgstr "RRI:equivalent interest rate for an investment increasing in value"

#: ../plugins/fn-financial/functions.c:1306
msgid "p:number of periods"
msgstr "p:number of periods"

#: ../plugins/fn-financial/functions.c:1309
msgid ""
"RRI determines an equivalent interest rate for an investment that increases "
"in value. The interest is compounded after each complete period."
msgstr ""
"RRI determines an equivalent interest rate for an investment that increases "
"in value. The interest is compounded after each complete period."

#: ../plugins/fn-financial/functions.c:1311
msgid ""
"Note that @{p} need not be an integer but for fractional value the "
"calculated rate is only approximate."
msgstr ""
"Note that @{p} need not be an integer but for fractional value the "
"calculated rate is only approximate."

#: ../plugins/fn-financial/functions.c:1340
msgid "IRR:internal rate of return"
msgstr "IRR:internal rate of return"

#: ../plugins/fn-financial/functions.c:1343
msgid ""
"IRR calculates the internal rate of return of a cash flow with periodic "
"payments.  @{values} lists the payments (negative values) and receipts "
"(positive values) for each period."
msgstr ""
"IRR calculates the internal rate of return of a cash flow with periodic "
"payments.  @{values} lists the payments (negative values) and receipts "
"(positive values) for each period."

#: ../plugins/fn-financial/functions.c:1457
msgid "PV:present value"
msgstr "PV:present value"

#: ../plugins/fn-financial/functions.c:1458
#: ../plugins/fn-financial/functions.c:1498
#: ../plugins/fn-financial/functions.c:1692
msgid "rate:effective interest rate per period"
msgstr "rate:effective interest rate per period"

#: ../plugins/fn-financial/functions.c:1463
msgid ""
"PV calculates the present value of @{fv} which is @{nper} periods into the "
"future, assuming a periodic payment of @{pmt} and an interest rate of @"
"{rate} per period."
msgstr ""
"PV calculates the present value of @{fv} which is @{nper} periods into the "
"future, assuming a periodic payment of @{pmt} and an interest rate of @"
"{rate} per period."

#: ../plugins/fn-financial/functions.c:1497
msgid "NPV:net present value"
msgstr "NPV:net present value"

#: ../plugins/fn-financial/functions.c:1499
msgid "value1:cash flow for period 1"
msgstr "value1:cash flow for period 1"

#: ../plugins/fn-financial/functions.c:1500
msgid "value2:cash flow for period 2"
msgstr "value2:cash flow for period 2"

#: ../plugins/fn-financial/functions.c:1501
msgid "NPV calculates the net present value of a cash flow."
msgstr "NPV calculates the net present value of a cash flow."

#: ../plugins/fn-financial/functions.c:1541
msgid "XNPV:net present value"
msgstr "XNPV:net present value"

#: ../plugins/fn-financial/functions.c:1544
#: ../plugins/fn-financial/functions.c:1599
msgid "dates:dates of cash flow"
msgstr "dates:dates of cash flow"

#: ../plugins/fn-financial/functions.c:1545
msgid "XNPV calculates the net present value of a cash flow at irregular times"
msgstr ""
"XNPV calculates the net present value of a cash flow at irregular times"

#: ../plugins/fn-financial/functions.c:1597
msgid "XIRR:internal rate of return"
msgstr "XIRR:internal rate of return"

#: ../plugins/fn-financial/functions.c:1601
msgid ""
"XIRR calculates the annualized internal rate of return of a cash flow at "
"arbitrary points in time.  @{values} lists the payments (negative values) "
"and receipts (positive values) with one value for each entry in @{dates}."
msgstr ""
"XIRR calculates the annualised internal rate of return of a cash flow at "
"arbitrary points in time.  @{values} lists the payments (negative values) "
"and receipts (positive values) with one value for each entry in @{dates}."

#: ../plugins/fn-financial/functions.c:1691
msgid "FV:future value"
msgstr "FV:future value"

#: ../plugins/fn-financial/functions.c:1697
msgid ""
"FV calculates the future value of @{pv} moved @{nper} periods into the "
"future, assuming a periodic payment of @{pmt} and an interest rate of @"
"{rate} per period."
msgstr ""
"FV calculates the future value of @{pv} moved @{nper} periods into the "
"future, assuming a periodic payment of @{pmt} and an interest rate of @"
"{rate} per period."

#: ../plugins/fn-financial/functions.c:1727
msgid "PMT:payment for annuity"
msgstr "PMT:payment for annuity"

#: ../plugins/fn-financial/functions.c:1733
msgid "PMT calculates the payment amount for an annuity."
msgstr "PMT calculates the payment amount for an annuity."

#: ../plugins/fn-financial/functions.c:1757
msgid "IPMT:interest payment for period"
msgstr "IPMT:interest payment for period"

#: ../plugins/fn-financial/functions.c:1764
msgid ""
"IPMT calculates the interest part of an annuity's payment for period number @"
"{per}."
msgstr ""
"IPMT calculates the interest part of an annuity's payment for period number @"
"{per}."

#: ../plugins/fn-financial/functions.c:1797
msgid "PPMT:interest payment for period"
msgstr "PPMT:interest payment for period"

#: ../plugins/fn-financial/functions.c:1804
msgid ""
"PPMT calculates the principal part of an annuity's payment for period number "
"@{per}."
msgstr ""
"PPMT calculates the principal part of an annuity's payment for period number "
"@{per}."

#: ../plugins/fn-financial/functions.c:1841
msgid "NPER:number of periods"
msgstr "NPER:number of periods"

#: ../plugins/fn-financial/functions.c:1847
msgid ""
"NPER calculates the number of periods of an investment based on periodic "
"constant payments and a constant interest rate."
msgstr ""
"NPER calculates the number of periods of an investment based on periodic "
"constant payments and a constant interest rate."

#: ../plugins/fn-financial/functions.c:1889
msgid "DURATION:the (Macaulay) duration of a security"
msgstr "DURATION:the (Macaulay) duration of a security"

#: ../plugins/fn-financial/functions.c:1892
#: ../plugins/fn-financial/functions.c:3240
msgid "coupon:annual coupon rate"
msgstr "coupon:annual coupon rate"

#: ../plugins/fn-financial/functions.c:1896
msgid "DURATION calculates the (Macaulay) duration of a security."
msgstr "DURATION calculates the (Macaulay) duration of a security."

#: ../plugins/fn-financial/functions.c:1935
msgid "G_DURATION:the duration of a investment"
msgstr "G_DURATION:the duration of a investment"

#: ../plugins/fn-financial/functions.c:1939
msgid ""
"G_DURATION calculates the number of periods needed for an investment to "
"attain a desired value."
msgstr ""
"G_DURATION calculates the number of periods needed for an investment to "
"attain a desired value."

#: ../plugins/fn-financial/functions.c:1940
msgid "G_DURATION is the OpenFormula function PDURATION."
msgstr "G_DURATION is the OpenFormula function PDURATION."

#: ../plugins/fn-financial/functions.c:1969
msgid "FVSCHEDULE:future value"
msgstr "FVSCHEDULE:future value"

#: ../plugins/fn-financial/functions.c:1970
msgid "principal:initial value"
msgstr "principal:initial value"

#: ../plugins/fn-financial/functions.c:1971
msgid "schedule:range of interest rates"
msgstr "schedule:range of interest rates"

#: ../plugins/fn-financial/functions.c:1972
msgid ""
"FVSCHEDULE calculates the future value of @{principal} after applying a "
"range of interest rates with compounding."
msgstr ""
"FVSCHEDULE calculates the future value of @{principal} after applying a "
"range of interest rates with compounding."

#: ../plugins/fn-financial/functions.c:2005
msgid "EURO:equivalent of 1 EUR"
msgstr "EURO:equivalent of 1 EUR"

#: ../plugins/fn-financial/functions.c:2006
msgid "currency:three-letter currency code"
msgstr "currency:three-letter currency code"

#: ../plugins/fn-financial/functions.c:2007
msgid ""
"EURO calculates the national currency amount corresponding to 1 EUR for any "
"of the national currencies that were replaced by the Euro on its "
"introduction."
msgstr ""
"EURO calculates the national currency amount corresponding to 1 EUR for any "
"of the national currencies that were replaced by the Euro on its "
"introduction."

#: ../plugins/fn-financial/functions.c:2008
msgid ""
"@{currency} must be one of ATS (Austria), BEF (Belgium), CYP (Cyprus), DEM "
"(Germany), EEK (Estonia), ESP (Spain), EUR (Euro), FIM (Finland), FRF "
"(France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), MTL "
"(Malta), NLG (The Netherlands), PTE (Portugal), SIT (Slovenia), or SKK "
"(Slovakia)."
msgstr ""
"@{currency} must be one of ATS (Austria), BEF (Belgium), CYP (Cyprus), DEM "
"(Germany), EEK (Estonia), ESP (Spain), EUR (Euro), FIM (Finland), FRF "
"(France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), MTL "
"(Malta), NLG (The Netherlands), PTE (Portugal), SIT (Slovenia), or SKK "
"(Slovakia)."

#: ../plugins/fn-financial/functions.c:2027
#: ../plugins/fn-financial/functions.c:2211
msgid "This function is not likely to be useful anymore."
msgstr "This function is not likely to be useful anymore."

#: ../plugins/fn-financial/functions.c:2202
msgid "EUROCONVERT:pre-Euro amount from one currency to another"
msgstr "EUROCONVERT:pre-Euro amount from one currency to another"

#: ../plugins/fn-financial/functions.c:2203
msgid "n:amount"
msgstr "n:amount"

#: ../plugins/fn-financial/functions.c:2204
msgid "source:three-letter source currency code"
msgstr "source:three-letter source currency code"

#: ../plugins/fn-financial/functions.c:2205
msgid "target:three-letter target currency code"
msgstr "target:three-letter target currency code"

#: ../plugins/fn-financial/functions.c:2206
msgid "full_precision:whether to provide the full precision; defaults to false"
msgstr ""
"full_precision:whether to provide the full precision; defaults to false"

#: ../plugins/fn-financial/functions.c:2207
msgid ""
"triangulation_precision:number of digits (at least 3) to be rounded to after "
"conversion of the source currency to euro; defaults to no rounding"
msgstr ""
"triangulation_precision:number of digits (at least 3) to be rounded to after "
"conversion of the source currency to euro; defaults to no rounding"

#: ../plugins/fn-financial/functions.c:2208
msgid ""
"EUROCONVERT converts @{n} units of currency @{source} to currency @"
"{target}.  The rates used are the official ones used on the introduction of "
"the Euro."
msgstr ""
"EUROCONVERT converts @{n} units of currency @{source} to currency @"
"{target}.  The rates used are the official ones used on the introduction of "
"the Euro."

#: ../plugins/fn-financial/functions.c:2209
msgid ""
"If @{full_precision} is true, the result is not rounded; if it false the "
"result is rounded to 0 or 2 decimals depending on the target currency; "
"defaults to false."
msgstr ""
"If @{full_precision} is true, the result is not rounded; if it false the "
"result is rounded to 0 or 2 decimals depending on the target currency; "
"defaults to false."

#: ../plugins/fn-financial/functions.c:2210
msgid ""
"@{source} and @{target} must be one of the currencies listed for the EURO "
"function."
msgstr ""
"@{source} and @{target} must be one of the currencies listed for the EURO "
"function."

#: ../plugins/fn-financial/functions.c:2254
msgid "PRICE:price of a security"
msgstr "PRICE:price of a security"

#: ../plugins/fn-financial/functions.c:2262
msgid ""
"PRICE calculates the price per $100 face value of a security that pays "
"periodic interest."
msgstr ""
"PRICE calculates the price per $100 face value of a security that pays "
"periodic interest."

#: ../plugins/fn-financial/functions.c:2304
msgid "YIELD:yield of a security"
msgstr "YIELD:yield of a security"

#: ../plugins/fn-financial/functions.c:2308
#: ../plugins/fn-financial/functions.c:2416
#: ../plugins/fn-financial/functions.c:2463
#: ../plugins/fn-financial/functions.c:2653
#: ../plugins/fn-financial/functions.c:2826
msgid "price:price of security"
msgstr "price:price of security"

#: ../plugins/fn-financial/functions.c:2312
msgid "YIELD calculates the yield of a security that pays periodic interest."
msgstr "YIELD calculates the yield of a security that pays periodic interest."

#: ../plugins/fn-financial/functions.c:2413
msgid "YIELDDISC:yield of a discounted security"
msgstr "YIELDDISC:yield of a discounted security"

#: ../plugins/fn-financial/functions.c:2419
msgid "YIELDDISC calculates the yield of a discounted security."
msgstr "YIELDDISC calculates the yield of a discounted security."

#: ../plugins/fn-financial/functions.c:2458
msgid "YIELDMAT:yield of a security"
msgstr "YIELDMAT:yield of a security"

#: ../plugins/fn-financial/functions.c:2465
msgid ""
"YIELDMAT calculates the yield of a security for which the interest is paid "
"at maturity date."
msgstr ""
"YIELDMAT calculates the yield of a security for which the interest is paid "
"at maturity date."

#: ../plugins/fn-financial/functions.c:2497
msgid "ODDFPRICE:price of a security that has an odd first period"
msgstr "ODDFPRICE:price of a security that has an odd first period"

#: ../plugins/fn-financial/functions.c:2501
#: ../plugins/fn-financial/functions.c:2651
msgid "first_interest:first interest date"
msgstr "first_interest:first interest date"

#: ../plugins/fn-financial/functions.c:2507
msgid ""
"ODDFPRICE calculates the price per $100 face value of a security that pays "
"periodic interest, but has an odd first period."
msgstr ""
"ODDFPRICE calculates the price per $100 face value of a security that pays "
"periodic interest, but has an odd first period."

#: ../plugins/fn-financial/functions.c:2647
msgid "ODDFYIELD:yield of a security that has an odd first period"
msgstr "ODDFYIELD:yield of a security that has an odd first period"

#: ../plugins/fn-financial/functions.c:2657
msgid ""
"ODDFYIELD calculates the yield of a security that pays periodic interest, "
"but has an odd first period."
msgstr ""
"ODDFYIELD calculates the yield of a security that pays periodic interest, "
"but has an odd first period."

#: ../plugins/fn-financial/functions.c:2743
msgid "ODDLPRICE:price of a security that has an odd last period"
msgstr "ODDLPRICE:price of a security that has an odd last period"

#: ../plugins/fn-financial/functions.c:2746
#: ../plugins/fn-financial/functions.c:2824
msgid "last_interest:last interest date"
msgstr "last_interest:last interest date"

#: ../plugins/fn-financial/functions.c:2752
msgid ""
"ODDLPRICE calculates the price per $100 face value of a security that pays "
"periodic interest, but has an odd last period."
msgstr ""
"ODDLPRICE calculates the price per $100 face value of a security that pays "
"periodic interest, but has an odd last period."

#: ../plugins/fn-financial/functions.c:2821
msgid "ODDLYIELD:yield of a security that has an odd last period"
msgstr "ODDLYIELD:yield of a security that has an odd last period"

#: ../plugins/fn-financial/functions.c:2830
msgid ""
"ODDLYIELD calculates the yield of a security that pays periodic interest, "
"but has an odd last period."
msgstr ""
"ODDLYIELD calculates the yield of a security that pays periodic interest, "
"but has an odd last period."

#: ../plugins/fn-financial/functions.c:2899
msgid "AMORDEGRC:depreciation of an asset using French accounting conventions"
msgstr "AMORDEGRC:depreciation of an asset using French accounting conventions"

#: ../plugins/fn-financial/functions.c:2901
#: ../plugins/fn-financial/functions.c:2957
msgid "purchase_date:date of purchase"
msgstr "purchase_date:date of purchase"

#: ../plugins/fn-financial/functions.c:2902
#: ../plugins/fn-financial/functions.c:2958
msgid "first_period:end of first period"
msgstr "first_period:end of first period"

#: ../plugins/fn-financial/functions.c:2905
#: ../plugins/fn-financial/functions.c:2961
msgid "rate:depreciation rate"
msgstr "rate:depreciation rate"

#: ../plugins/fn-financial/functions.c:2908
msgid ""
"AMORDEGRC calculates the depreciation of an asset using French accounting "
"conventions. Assets purchased in the middle of a period take prorated "
"depreciation into account. This is similar to AMORLINC, except that a "
"depreciation coefficient is applied in the calculation depending on the life "
"of the assets."
msgstr ""
"AMORDEGRC calculates the depreciation of an asset using French accounting "
"conventions. Assets purchased in the middle of a period take prorated "
"depreciation into account. This is similar to AMORLINC, except that a "
"depreciation coefficient is applied in the calculation depending on the life "
"of the assets."

#: ../plugins/fn-financial/functions.c:2912
msgid ""
"The depreciation coefficient used is:\n"
"1.0 for an expected lifetime less than 3 years,\n"
"1.5 for an expected lifetime of at least 3 years but less than 5 years,\n"
"2.0 for an expected lifetime of at least 5 years but at most 6 years,\n"
"2.5 for an expected lifetime of more than 6 years."
msgstr ""
"The depreciation coefficient used is:\n"
"1.0 for an expected lifetime less than 3 years,\n"
"1.5 for an expected lifetime of at least 3 years but less than 5 years,\n"
"2.0 for an expected lifetime of at least 5 years but at most 6 years,\n"
"2.5 for an expected lifetime of more than 6 years."

#: ../plugins/fn-financial/functions.c:2917
msgid ""
"Special depreciation rules are applied for the last two periods resulting in "
"a possible total depreciation exceeding the difference of @{cost} - @"
"{salvage}."
msgstr ""
"Special depreciation rules are applied for the last two periods resulting in "
"a possible total depreciation exceeding the difference of @{cost} - @"
"{salvage}."

#: ../plugins/fn-financial/functions.c:2919
msgid "Named for AMORtissement DEGRessif Comptabilite."
msgstr "Named for AMORtissement DEGRessif Comptabilite."

#: ../plugins/fn-financial/functions.c:2955
msgid "AMORLINC:depreciation of an asset using French accounting conventions"
msgstr "AMORLINC:depreciation of an asset using French accounting conventions"

#: ../plugins/fn-financial/functions.c:2964
msgid ""
"AMORLINC calculates the depreciation of an asset using French accounting "
"conventions. Assets purchased in the middle of a period take prorated "
"depreciation into account. "
msgstr ""
"AMORLINC calculates the depreciation of an asset using French accounting "
"conventions. Assets purchased in the middle of a period take prorated "
"depreciation into account. "

#: ../plugins/fn-financial/functions.c:2966
msgid "Named for AMORtissement LINeaire Comptabilite."
msgstr "Named for AMORtissement LINeaire Comptabilite."

#: ../plugins/fn-financial/functions.c:3001
msgid "COUPDAYBS:number of days from coupon period to settlement"
msgstr "COUPDAYBS:number of days from coupon period to settlement"

#: ../plugins/fn-financial/functions.c:3006
#: ../plugins/fn-financial/functions.c:3030
#: ../plugins/fn-financial/functions.c:3054
#: ../plugins/fn-financial/functions.c:3078
#: ../plugins/fn-financial/functions.c:3104
#: ../plugins/fn-financial/functions.c:3130
msgid "eom:end-of-month flag"
msgstr "eom:end-of-month flag"

#: ../plugins/fn-financial/functions.c:3007
msgid ""
"COUPDAYBS calculates the number of days from the beginning of the coupon "
"period to the settlement date."
msgstr ""
"COUPDAYBS calculates the number of days from the beginning of the coupon "
"period to the settlement date."

#: ../plugins/fn-financial/functions.c:3025
msgid "COUPDAYS:number of days in the coupon period of the settlement date"
msgstr "COUPDAYS:number of days in the coupon period of the settlement date"

#: ../plugins/fn-financial/functions.c:3031
msgid ""
"COUPDAYS calculates the number of days in the coupon period of the "
"settlement date."
msgstr ""
"COUPDAYS calculates the number of days in the coupon period of the "
"settlement date."

#: ../plugins/fn-financial/functions.c:3049
msgid ""
"COUPDAYSNC:number of days from the settlement date to the next coupon period"
msgstr ""
"COUPDAYSNC:number of days from the settlement date to the next coupon period"

#: ../plugins/fn-financial/functions.c:3055
msgid ""
"COUPDAYSNC calculates number of days from the settlement date to the next "
"coupon period."
msgstr ""
"COUPDAYSNC calculates number of days from the settlement date to the next "
"coupon period."

#: ../plugins/fn-financial/functions.c:3073
msgid "COUPNCD:the next coupon date after settlement"
msgstr "COUPNCD:the next coupon date after settlement"

#: ../plugins/fn-financial/functions.c:3079
msgid "COUPNCD calculates the coupon date following settlement."
msgstr "COUPNCD calculates the coupon date following settlement."

#: ../plugins/fn-financial/functions.c:3099
msgid "COUPPCD:the last coupon date before settlement"
msgstr "COUPPCD:the last coupon date before settlement"

#: ../plugins/fn-financial/functions.c:3105
msgid "COUPPCD calculates the coupon date preceding settlement."
msgstr "COUPPCD calculates the coupon date preceding settlement."

#: ../plugins/fn-financial/functions.c:3125
msgid "COUPNUM:number of coupons"
msgstr "COUPNUM:number of coupons"

#: ../plugins/fn-financial/functions.c:3131
msgid ""
"COUPNUM calculates the number of coupons to be paid between the settlement "
"and maturity dates, rounded up."
msgstr ""
"COUPNUM calculates the number of coupons to be paid between the settlement "
"and maturity dates, rounded up."

#: ../plugins/fn-financial/functions.c:3149
msgid "CUMIPMT:cumulative interest payment"
msgstr "CUMIPMT:cumulative interest payment"

#: ../plugins/fn-financial/functions.c:3150
#: ../plugins/fn-financial/functions.c:3194
msgid "rate:interest rate per period"
msgstr "rate:interest rate per period"

#: ../plugins/fn-financial/functions.c:3153
#: ../plugins/fn-financial/functions.c:3197
#: ../plugins/fn-financial/functions.c:3288
msgid "start_period:first period to accumulate for"
msgstr "start_period:first period to accumulate for"

#: ../plugins/fn-financial/functions.c:3154
#: ../plugins/fn-financial/functions.c:3198
#: ../plugins/fn-financial/functions.c:3289
msgid "end_period:last period to accumulate for"
msgstr "end_period:last period to accumulate for"

#: ../plugins/fn-financial/functions.c:3156
msgid ""
"CUMIPMT calculates the cumulative interest paid on a loan from @"
"{start_period} to @{end_period}."
msgstr ""
"CUMIPMT calculates the cumulative interest paid on a loan from @"
"{start_period} to @{end_period}."

#: ../plugins/fn-financial/functions.c:3193
msgid "CUMPRINC:cumulative principal"
msgstr "CUMPRINC:cumulative principal"

#: ../plugins/fn-financial/functions.c:3200
msgid ""
"CUMPRINC calculates the cumulative principal paid on a loan from @"
"{start_period} to @{end_period}."
msgstr ""
"CUMPRINC calculates the cumulative principal paid on a loan from @"
"{start_period} to @{end_period}."

#: ../plugins/fn-financial/functions.c:3237
msgid "MDURATION:the modified (Macaulay) duration of a security"
msgstr "MDURATION:the modified (Macaulay) duration of a security"

#: ../plugins/fn-financial/functions.c:3244
msgid "MDURATION calculates the modified (Macaulay) duration of a security."
msgstr "MDURATION calculates the modified (Macaulay) duration of a security."

#: ../plugins/fn-financial/functions.c:3284
msgid "VDB:depreciation of an asset"
msgstr "VDB:depreciation of an asset"

#: ../plugins/fn-financial/functions.c:3291
msgid "no_switch:do not switch to straight-line depreciation"
msgstr "no_switch:do not switch to straight-line depreciation"

#: ../plugins/fn-financial/functions.c:3292
msgid ""
"VDB calculates the depreciation of an asset for a given period range using "
"the variable-rate declining balance method."
msgstr ""
"VDB calculates the depreciation of an asset for a given period range using "
"the variable-rate declining balance method."

#: ../plugins/fn-financial/functions.c:3293
msgid ""
"If @{no_switch} is FALSE, the calculation switches to straight-line "
"depreciation when depreciation is greater than the declining balance "
"calculation."
msgstr ""
"If @{no_switch} is FALSE, the calculation switches to straight-line "
"depreciation when depreciation is greater than the declining balance "
"calculation."

#: ../plugins/fn-hebrew-date/functions.c:92
msgid "HDATE:Hebrew date"
msgstr "HDATE:Hebrew date"

#: ../plugins/fn-hebrew-date/functions.c:93
#: ../plugins/fn-hebrew-date/functions.c:162
#: ../plugins/fn-hebrew-date/functions.c:235
#: ../plugins/fn-hebrew-date/functions.c:262
#: ../plugins/fn-hebrew-date/functions.c:289
#: ../plugins/fn-hebrew-date/functions.c:316
msgid "year:Gregorian year of date, defaults to the current year"
msgstr "year:Gregorian year of date, defaults to the current year"

#: ../plugins/fn-hebrew-date/functions.c:94
#: ../plugins/fn-hebrew-date/functions.c:163
#: ../plugins/fn-hebrew-date/functions.c:236
#: ../plugins/fn-hebrew-date/functions.c:263
#: ../plugins/fn-hebrew-date/functions.c:290
#: ../plugins/fn-hebrew-date/functions.c:317
msgid "month:Gregorian month of year, defaults to the current month"
msgstr "month:Gregorian month of year, defaults to the current month"

#: ../plugins/fn-hebrew-date/functions.c:95
#: ../plugins/fn-hebrew-date/functions.c:164
#: ../plugins/fn-hebrew-date/functions.c:237
#: ../plugins/fn-hebrew-date/functions.c:264
#: ../plugins/fn-hebrew-date/functions.c:291
#: ../plugins/fn-hebrew-date/functions.c:318
msgid "day:Gregorian day of month, defaults to the current day"
msgstr "day:Gregorian day of month, defaults to the current day"

#: ../plugins/fn-hebrew-date/functions.c:127
msgid "DATE2HDATE:Hebrew date"
msgstr "DATE2HDATE:Hebrew date"

#: ../plugins/fn-hebrew-date/functions.c:128
#: ../plugins/fn-hebrew-date/functions.c:203
#: ../plugins/fn-hebrew-date/functions.c:342
msgid "date:Gregorian date, defaults to today"
msgstr "date:Gregorian date, defaults to today"

#: ../plugins/fn-hebrew-date/functions.c:161
msgid "HDATE_HEB:Hebrew date in Hebrew"
msgstr "HDATE_HEB:Hebrew date in Hebrew"

#: ../plugins/fn-hebrew-date/functions.c:202
msgid "DATE2HDATE_HEB:Hebrew date in Hebrew"
msgstr "DATE2HDATE_HEB:Hebrew date in Hebrew"

#: ../plugins/fn-hebrew-date/functions.c:234
msgid "HDATE_MONTH:Hebrew month of Gregorian date"
msgstr "HDATE_MONTH:Hebrew month of Gregorian date"

#: ../plugins/fn-hebrew-date/functions.c:261
msgid "HDATE_DAY:Hebrew day of Gregorian date"
msgstr "HDATE_DAY:Hebrew day of Gregorian date"

#: ../plugins/fn-hebrew-date/functions.c:288
msgid "HDATE_YEAR:Hebrew year of Gregorian date"
msgstr "HDATE_YEAR:Hebrew year of Gregorian date"

#: ../plugins/fn-hebrew-date/functions.c:315
msgid "HDATE_JULIAN:Julian day number for given Gregorian date"
msgstr "HDATE_JULIAN:Julian day number for given Gregorian date"

#: ../plugins/fn-hebrew-date/functions.c:341
msgid "DATE2JULIAN:Julian day number for given Gregorian date"
msgstr "DATE2JULIAN:Julian day number for given Gregorian date"

#: ../plugins/fn-info/functions.c:68
msgid "CELL:information of @{type} about @{cell}"
msgstr "CELL:information of @{type} about @{cell}"

#: ../plugins/fn-info/functions.c:69
msgid "type:string specifying the type of information requested"
msgstr "type:string specifying the type of information requested"

#: ../plugins/fn-info/functions.c:70
msgid "cell:cell reference"
msgstr "cell:cell reference"

#: ../plugins/fn-info/functions.c:71
msgid ""
"@{type} specifies the type of information you want to obtain:\n"
"  address        \t\tReturns the given cell reference as text.\n"
"  col            \t\tReturns the number of the column in @{cell}.\n"
"  color          \t\tReturns 0.\n"
"  contents       \t\tReturns the contents of the cell in @{cell}.\n"
"  column         \t\tReturns the number of the column in @{cell}.\n"
"  columnwidth    \tReturns the column width.\n"
"  coord          \t\tReturns the absolute address of @{cell}.\n"
"  datatype       \tsame as type\n"
"  filename       \t\tReturns the name of the file of @{cell}.\n"
"  format         \t\tReturns the code of the format of the cell.\n"
"  formulatype    \tsame as type\n"
"  locked         \t\tReturns 1 if @{cell} is locked.\n"
"  parentheses    \tReturns 1 if @{cell} contains a negative value\n"
"                 \t\tand its format displays it with parentheses.\n"
"  prefix         \t\tReturns a character indicating the horizontal\n"
"                 \t\talignment of @{cell}.\n"
"  prefixcharacter  \tsame as prefix\n"
"  protect        \t\tReturns 1 if @{cell} is locked.\n"
"  row            \t\tReturns the number of the row in @{cell}.\n"
"  sheetname      \tReturns the name of the sheet of @{cell}.\n"
"  type           \t\tReturns \"l\" if @{cell} contains a string, \n"
"                 \t\t\"v\" if it contains some other value, and \n"
"                 \t\t\"b\" if @{cell} is blank.\n"
"  value          \t\tReturns the contents of the cell in @{cell}.\n"
"  width          \t\tReturns the column width."
msgstr ""
"@{type} specifies the type of information you want to obtain:\n"
"  address        \t\tReturns the given cell reference as text.\n"
"  col            \t\tReturns the number of the column in @{cell}.\n"
"  colour          \t\tReturns 0.\n"
"  contents       \t\tReturns the contents of the cell in @{cell}.\n"
"  column         \t\tReturns the number of the column in @{cell}.\n"
"  columnwidth    \tReturns the column width.\n"
"  coord          \t\tReturns the absolute address of @{cell}.\n"
"  datatype       \tsame as type\n"
"  filename       \t\tReturns the name of the file of @{cell}.\n"
"  format         \t\tReturns the code of the format of the cell.\n"
"  formulatype    \tsame as type\n"
"  locked         \t\tReturns 1 if @{cell} is locked.\n"
"  parentheses    \tReturns 1 if @{cell} contains a negative value\n"
"                 \t\tand its format displays it with parentheses.\n"
"  prefix         \t\tReturns a character indicating the horizontal\n"
"                 \t\talignment of @{cell}.\n"
"  prefixcharacter  \tsame as prefix\n"
"  protect        \t\tReturns 1 if @{cell} is locked.\n"
"  row            \t\tReturns the number of the row in @{cell}.\n"
"  sheetname      \tReturns the name of the sheet of @{cell}.\n"
"  type           \t\tReturns \"l\" if @{cell} contains a string, \n"
"                 \t\t\"v\" if it contains some other value, and \n"
"                 \t\t\"b\" if @{cell} is blank.\n"
"  value          \t\tReturns the contents of the cell in @{cell}.\n"
"  width          \t\tReturns the column width."

#: ../plugins/fn-info/functions.c:1173
msgid "EXPRESSION:expression in @{cell} as a string"
msgstr "EXPRESSION:expression in @{cell} as a string"

#: ../plugins/fn-info/functions.c:1174
msgid "cell:a cell reference"
msgstr "cell:a cell reference"

#: ../plugins/fn-info/functions.c:1175
msgid "If @{cell} contains no expression, EXPRESSION returns empty."
msgstr "If @{cell} contains no expression, EXPRESSION returns empty."

#: ../plugins/fn-info/functions.c:1210
msgid "GET.FORMULA:the formula in @{cell} as a string"
msgstr "GET.FORMULA:the formula in @{cell} as a string"

#: ../plugins/fn-info/functions.c:1211 ../plugins/fn-info/functions.c:1253
#: ../plugins/fn-info/functions.c:1816
msgid "cell:the referenced cell"
msgstr "cell:the referenced cell"

#: ../plugins/fn-info/functions.c:1212
msgid "GET.FORMULA is the OpenFormula function FORMULA."
msgstr "GET.FORMULA is the OpenFormula function FORMULA."

#: ../plugins/fn-info/functions.c:1213
msgid ""
"If A1 is empty and A2 contains =B1+B2, then\n"
"GET.FORMULA(A2) yields '=B1+B2' and\n"
"GET.FORMULA(A1) yields ''."
msgstr ""
"If A1 is empty and A2 contains =B1+B2, then\n"
"GET.FORMULA(A2) yields '=B1+B2' and\n"
"GET.FORMULA(A1) yields ''."

#: ../plugins/fn-info/functions.c:1252
msgid "ISFORMULA:TRUE if @{cell} contains a formula"
msgstr "ISFORMULA:TRUE if @{cell} contains a formula"

#: ../plugins/fn-info/functions.c:1254
msgid "ISFORMULA is OpenFormula compatible."
msgstr "ISFORMULA is OpenFormula compatible."

#: ../plugins/fn-info/functions.c:1283
msgid "COUNTBLANK:the number of blank cells in @{range}"
msgstr "COUNTBLANK:the number of blank cells in @{range}"

#: ../plugins/fn-info/functions.c:1284
msgid "range:a cell range"
msgstr "range:a cell range"

#: ../plugins/fn-info/functions.c:1286
msgid "COUNTBLANK(A1:A20) returns the number of blank cell in A1:A20."
msgstr "COUNTBLANK(A1:A20) returns the number of blank cell in A1:A20."

#: ../plugins/fn-info/functions.c:1338
msgid ""
"INFO:information about the current operating environment according to @{type}"
msgstr ""
"INFO:information about the current operating environment according to @{type}"

#: ../plugins/fn-info/functions.c:1340
msgid "type:string giving the type of information requested"
msgstr "type:string giving the type of information requested"

#: ../plugins/fn-info/functions.c:1341
msgid ""
"INFO returns information about the current operating environment according "
"to @{type}:\n"
"  memavail     \t\tReturns the amount of memory available, bytes.\n"
"  memused      \tReturns the amount of memory used (bytes).\n"
"  numfile      \t\tReturns the number of active worksheets.\n"
"  osversion    \t\tReturns the operating system version.\n"
"  recalc       \t\tReturns the recalculation mode (automatic).\n"
"  release      \t\tReturns the version of Gnumeric as text.\n"
"  system       \t\tReturns the name of the environment.\n"
"  totmem       \t\tReturns the amount of total memory available."
msgstr ""
"INFO returns information about the current operating environment according "
"to @{type}:\n"
"  memavail     \t\tReturns the amount of memory available, bytes.\n"
"  memused      \tReturns the amount of memory used (bytes).\n"
"  numfile      \t\tReturns the number of active worksheets.\n"
"  osversion    \t\tReturns the operating system version.\n"
"  recalc       \t\tReturns the recalculation mode (automatic).\n"
"  release      \t\tReturns the version of Gnumeric as text.\n"
"  system       \t\tReturns the name of the environment.\n"
"  totmem       \t\tReturns the amount of total memory available."

#: ../plugins/fn-info/functions.c:1438
msgid "ISERROR:TRUE if @{value} is any error value"
msgstr "ISERROR:TRUE if @{value} is any error value"

#: ../plugins/fn-info/functions.c:1439 ../plugins/fn-info/functions.c:1457
#: ../plugins/fn-info/functions.c:1479 ../plugins/fn-info/functions.c:1569
#: ../plugins/fn-info/functions.c:1607 ../plugins/fn-info/functions.c:1625
#: ../plugins/fn-info/functions.c:1642 ../plugins/fn-info/functions.c:1681
#: ../plugins/fn-info/functions.c:1702 ../plugins/fn-info/functions.c:1752
msgid "value:a value"
msgstr "value:a value"

#: ../plugins/fn-info/functions.c:1456
msgid "ISNA:TRUE if @{value} is the #N/A error value"
msgstr "ISNA:TRUE if @{value} is the #N/A error value"

#: ../plugins/fn-info/functions.c:1478
msgid "ISERR:TRUE if @{value} is any error value except #N/A"
msgstr "ISERR:TRUE if @{value} is any error value except #N/A"

#: ../plugins/fn-info/functions.c:1497
msgid "ERROR.TYPE:the type of @{error}"
msgstr "ERROR.TYPE:the type of @{error}"

#: ../plugins/fn-info/functions.c:1498
msgid "error:an error"
msgstr "error:an error"

#: ../plugins/fn-info/functions.c:1499
msgid ""
"ERROR.TYPE returns an error number corresponding to the given error value.  "
"The error numbers for error values are:\n"
"\n"
"\t#DIV/0!  \t\t2\n"
"\t#VALUE!  \t3\n"
"\t#REF!    \t\t4\n"
"\t#NAME?   \t5\n"
"\t#NUM!    \t6\n"
"\t#N/A     \t\t7"
msgstr ""
"ERROR.TYPE returns an error number corresponding to the given error value.  "
"The error numbers for error values are:\n"
"\n"
"\t#DIV/0!  \t\t2\n"
"\t#VALUE!  \t3\n"
"\t#REF!    \t\t4\n"
"\t#NAME?   \t5\n"
"\t#NUM!    \t6\n"
"\t#N/A     \t\t7"

#: ../plugins/fn-info/functions.c:1533
msgid "NA:the error value #N/A"
msgstr "NA:the error value #N/A"

#: ../plugins/fn-info/functions.c:1551
msgid "ERROR:the error with the given @{name}"
msgstr "ERROR:the error with the given @{name}"

#: ../plugins/fn-info/functions.c:1552
msgid "name:string"
msgstr "name:string"

#: ../plugins/fn-info/functions.c:1568
msgid "ISBLANK:TRUE if @{value} is blank"
msgstr "ISBLANK:TRUE if @{value} is blank"

#: ../plugins/fn-info/functions.c:1570
msgid ""
"This function checks if a value is blank.  Empty cells are blank, but empty "
"strings are not."
msgstr ""
"This function checks if a value is blank.  Empty cells are blank, but empty "
"strings are not."

#: ../plugins/fn-info/functions.c:1585
msgid "ISEVEN:TRUE if @{n} is even"
msgstr "ISEVEN:TRUE if @{n} is even"

#: ../plugins/fn-info/functions.c:1586 ../plugins/fn-info/functions.c:1660
msgid "n:number"
msgstr "n:number"

#: ../plugins/fn-info/functions.c:1606
msgid "ISLOGICAL:TRUE if @{value} is a logical value"
msgstr "ISLOGICAL:TRUE if @{value} is a logical value"

#: ../plugins/fn-info/functions.c:1608
msgid "This function checks if a value is either TRUE or FALSE."
msgstr "This function checks if a value is either TRUE or FALSE."

#: ../plugins/fn-info/functions.c:1624
msgid "ISNONTEXT:TRUE if @{value} is not text"
msgstr "ISNONTEXT:TRUE if @{value} is not text"

#: ../plugins/fn-info/functions.c:1641
msgid "ISNUMBER:TRUE if @{value} is a number"
msgstr "ISNUMBER:TRUE if @{value} is a number"

#: ../plugins/fn-info/functions.c:1643
msgid ""
"This function checks if a value is a number.  Neither TRUE nor FALSE are "
"numbers for this purpose."
msgstr ""
"This function checks if a value is a number.  Neither TRUE nor FALSE are "
"numbers for this purpose."

#: ../plugins/fn-info/functions.c:1659
msgid "ISODD:TRUE if @{n} is odd"
msgstr "ISODD:TRUE if @{n} is odd"

#: ../plugins/fn-info/functions.c:1680
msgid "ISREF:TRUE if @{value} is a reference"
msgstr "ISREF:TRUE if @{value} is a reference"

#: ../plugins/fn-info/functions.c:1682
msgid "This function checks if a value is a cell reference."
msgstr "This function checks if a value is a cell reference."

#: ../plugins/fn-info/functions.c:1701
msgid "ISTEXT:TRUE if @{value} is text"
msgstr "ISTEXT:TRUE if @{value} is text"

#: ../plugins/fn-info/functions.c:1719
msgid "N:@{text} converted to a number"
msgstr "N:@{text} converted to a number"

#: ../plugins/fn-info/functions.c:1720 ../plugins/fn-string/functions.c:366
#: ../plugins/fn-string/functions.c:582 ../plugins/fn-string/functions.c:623
#: ../plugins/fn-string/functions.c:667 ../plugins/fn-string/functions.c:794
#: ../plugins/fn-string/functions.c:1018 ../plugins/fn-string/functions.c:1065
#: ../plugins/fn-string/functions.c:1098 ../plugins/fn-string/functions.c:1440
msgid "text:string"
msgstr "text:string"

#: ../plugins/fn-info/functions.c:1721
msgid "If @{text} contains non-numerical text, 0 is returned."
msgstr "If @{text} contains non-numerical text, 0 is returned."

#: ../plugins/fn-info/functions.c:1724
msgid "=N(\"eleven\")"
msgstr "=N(\"eleven\")"

#: ../plugins/fn-info/functions.c:1751
msgid "TYPE:a number indicating the data type of @{value}"
msgstr "TYPE:a number indicating the data type of @{value}"

#: ../plugins/fn-info/functions.c:1753
msgid ""
"TYPE returns a number indicating the data type of @{value}:\n"
"1  \t= number\n"
"2  \t= text\n"
"4  \t= boolean\n"
"16 \t= error\n"
"64 \t= array"
msgstr ""
"TYPE returns a number indicating the data type of @{value}:\n"
"1  \t= number\n"
"2  \t= text\n"
"4  \t= boolean\n"
"16 \t= error\n"
"64 \t= array"

#: ../plugins/fn-info/functions.c:1792
msgid "GETENV:the value of execution environment variable @{name}"
msgstr "GETENV:the value of execution environment variable @{name}"

#: ../plugins/fn-info/functions.c:1793
msgid "name:the name of the environment variable"
msgstr "name:the name of the environment variable"

#: ../plugins/fn-info/functions.c:1794
msgid "If a variable called @{name} does not exist, #N/A! will be returned."
msgstr "If a variable called @{name} does not exist, #N/A! will be returned."

#: ../plugins/fn-info/functions.c:1795
msgid "Variable names are case sensitive."
msgstr "Variable names are case sensitive."

#: ../plugins/fn-info/functions.c:1815
msgid "GET.LINK:the target of the hyperlink attached to @{cell} as a string"
msgstr "GET.LINK:the target of the hyperlink attached to @{cell} as a string"

#: ../plugins/fn-info/functions.c:1817
msgid ""
"The value return is not updated automatically when the link attached to @"
"{cell} changes but requires a recalculation."
msgstr ""
"The value return is not updated automatically when the link attached to @"
"{cell} changes but requires a recalculation."

#: ../plugins/fn-logical/functions.c:44
msgid "AND:logical conjunction"
msgstr "AND:logical conjunction"

#: ../plugins/fn-logical/functions.c:45 ../plugins/fn-logical/functions.c:124
#: ../plugins/fn-logical/functions.c:178
msgid "b0:logical value"
msgstr "b0:logical value"

#: ../plugins/fn-logical/functions.c:46 ../plugins/fn-logical/functions.c:125
#: ../plugins/fn-logical/functions.c:179
msgid "b1:logical value"
msgstr "b1:logical value"

#: ../plugins/fn-logical/functions.c:47
msgid "AND calculates the logical conjunction of its arguments @{b0},@{b1},..."
msgstr ""
"AND calculates the logical conjunction of its arguments @{b0},@{b1},..."

#: ../plugins/fn-logical/functions.c:48 ../plugins/fn-logical/functions.c:127
#: ../plugins/fn-logical/functions.c:181
msgid ""
"If an argument is numerical, zero is considered FALSE and anything else TRUE."
msgstr ""
"If an argument is numerical, zero is considered FALSE and anything else TRUE."

#: ../plugins/fn-logical/functions.c:49 ../plugins/fn-logical/functions.c:102
#: ../plugins/fn-logical/functions.c:128 ../plugins/fn-logical/functions.c:182
msgid "Strings and empty values are ignored."
msgstr "Strings and empty values are ignored."

#: ../plugins/fn-logical/functions.c:50 ../plugins/fn-logical/functions.c:129
#: ../plugins/fn-logical/functions.c:183
msgid "If no logical values are provided, then the error #VALUE! is returned."
msgstr "If no logical values are provided, then the error #VALUE! is returned."

#: ../plugins/fn-logical/functions.c:51 ../plugins/fn-logical/functions.c:130
#: ../plugins/fn-logical/functions.c:184
msgid ""
"This function is strict: if any argument is an error, the result will be the "
"first such error."
msgstr ""
"This function is strict: if any argument is an error, the result will be the "
"first such error."

#: ../plugins/fn-logical/functions.c:57
msgid "wiki:en:Logical_conjunction"
msgstr "wiki:en:Logical_conjunction"

#: ../plugins/fn-logical/functions.c:98
msgid "NOT:logical negation"
msgstr "NOT:logical negation"

#: ../plugins/fn-logical/functions.c:99
msgid "b:logical value"
msgstr "b:logical value"

#: ../plugins/fn-logical/functions.c:100
msgid "NOT calculates the logical negation of its argument."
msgstr "NOT calculates the logical negation of its argument."

#: ../plugins/fn-logical/functions.c:101
msgid ""
"If the argument is numerical, zero is considered FALSE and anything else "
"TRUE."
msgstr ""
"If the argument is numerical, zero is considered FALSE and anything else "
"TRUE."

#: ../plugins/fn-logical/functions.c:107
msgid "wiki:en:Negation"
msgstr "wiki:en:Negation"

#: ../plugins/fn-logical/functions.c:123
msgid "OR:logical disjunction"
msgstr "OR:logical disjunction"

#: ../plugins/fn-logical/functions.c:126
msgid "OR calculates the logical disjunction of its arguments @{b0},@{b1},..."
msgstr "OR calculates the logical disjunction of its arguments @{b0},@{b1},..."

#: ../plugins/fn-logical/functions.c:136
msgid "wiki:en:Logical_disjunction"
msgstr "wiki:en:Logical_disjunction"

#: ../plugins/fn-logical/functions.c:177
msgid "XOR:logical exclusive disjunction"
msgstr "XOR:logical exclusive disjunction"

#: ../plugins/fn-logical/functions.c:180
msgid ""
"XOR calculates the logical exclusive disjunction of its arguments @{b0},@"
"{b1},..."
msgstr ""
"XOR calculates the logical exclusive disjunction of its arguments @{b0},@"
"{b1},..."

#: ../plugins/fn-logical/functions.c:189
msgid "wiki:en:Exclusive_disjunction"
msgstr "wiki:en:Exclusive_disjunction"

#: ../plugins/fn-logical/functions.c:230
msgid "IFERROR:test for error"
msgstr "IFERROR:test for error"

#: ../plugins/fn-logical/functions.c:231
msgid "x:value to test for error"
msgstr "x:value to test for error"

#: ../plugins/fn-logical/functions.c:232 ../plugins/fn-logical/functions.c:250
msgid "y:alternate value"
msgstr "y:alternate value"

#: ../plugins/fn-logical/functions.c:233
msgid ""
"This function returns the first value, unless that is an error, in which "
"case it returns the second."
msgstr ""
"This function returns the first value, unless that is an error, in which "
"case it returns the second."

#: ../plugins/fn-logical/functions.c:248
msgid "IFNA:test for #NA! error"
msgstr "IFNA:test for #NA! error"

#: ../plugins/fn-logical/functions.c:249
msgid "x:value to test for #NA! error"
msgstr "x:value to test for #NA! error"

#: ../plugins/fn-logical/functions.c:251
msgid ""
"This function returns the first value, unless that is #NA!, in which case it "
"returns the second."
msgstr ""
"This function returns the first value, unless that is #NA!, in which case it "
"returns the second."

#: ../plugins/fn-logical/functions.c:267
msgid "TRUE:the value TRUE"
msgstr "TRUE:the value TRUE"

#: ../plugins/fn-logical/functions.c:268
msgid "TRUE returns the value TRUE."
msgstr "TRUE returns the value TRUE."

#: ../plugins/fn-logical/functions.c:272 ../plugins/fn-logical/functions.c:290
msgid "wiki:en:Logical_value"
msgstr "wiki:en:Logical_value"

#: ../plugins/fn-logical/functions.c:285
msgid "FALSE:the value FALSE"
msgstr "FALSE:the value FALSE"

#: ../plugins/fn-logical/functions.c:286
msgid "FALSE returns the value FALSE."
msgstr "FALSE returns the value FALSE."

#: ../plugins/fn-lookup/functions.c:729
msgid "ADDRESS:cell address as text"
msgstr "ADDRESS:cell address as text"

#: ../plugins/fn-lookup/functions.c:730
msgid "row_num:row number"
msgstr "row_num:row number"

#: ../plugins/fn-lookup/functions.c:731
msgid "col_num:column number"
msgstr "col_num:column number"

#: ../plugins/fn-lookup/functions.c:732
msgid ""
"abs_num:1 for an absolute, 2 for a row absolute and column relative, 3 for a "
"row relative and column absolute, and 4 for a relative reference; defaults "
"to 1"
msgstr ""
"abs_num:1 for an absolute, 2 for a row absolute and column relative, 3 for a "
"row relative and column absolute, and 4 for a relative reference; defaults "
"to 1"

#: ../plugins/fn-lookup/functions.c:735
msgid ""
"a1:if TRUE, an A1-style reference is provided, otherwise an R1C1-style "
"reference; defaults to TRUE"
msgstr ""
"a1:if TRUE, an A1-style reference is provided, otherwise an R1C1-style "
"reference; defaults to TRUE"

#: ../plugins/fn-lookup/functions.c:737
msgid "text:name of the worksheet, defaults to no sheet"
msgstr "text:name of the worksheet, defaults to no sheet"

#: ../plugins/fn-lookup/functions.c:738
msgid "If @{row_num} or @{col_num} is less than one, ADDRESS returns #VALUE!"
msgstr "If @{row_num} or @{col_num} is less than one, ADDRESS returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:740
msgid "If @{abs_num} is greater than 4 ADDRESS returns #VALUE!"
msgstr "If @{abs_num} is greater than 4 ADDRESS returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:827
msgid "AREAS:number of areas in @{reference}"
msgstr "AREAS:number of areas in @{reference}"

#: ../plugins/fn-lookup/functions.c:828
msgid "reference:range"
msgstr "reference:range"

#: ../plugins/fn-lookup/functions.c:895
msgid "CHOOSE:the (@{index}+1)th argument"
msgstr "CHOOSE:the (@{index}+1)th argument"

#: ../plugins/fn-lookup/functions.c:896
msgid "index:positive number"
msgstr "index:positive number"

#: ../plugins/fn-lookup/functions.c:897
msgid "value1:first value"
msgstr "value1:first value"

#: ../plugins/fn-lookup/functions.c:898
msgid "value2:second value"
msgstr "value2:second value"

#: ../plugins/fn-lookup/functions.c:899
msgid "CHOOSE returns its (@{index}+1)th argument."
msgstr "CHOOSE returns its (@{index}+1)th argument."

#: ../plugins/fn-lookup/functions.c:900
msgid ""
"@{index} is truncated to an integer. If @{index} < 1 or the truncated @"
"{index} > number of values, CHOOSE returns #VALUE!"
msgstr ""
"@{index} is truncated to an integer. If @{index} < 1 or the truncated @"
"{index} > number of values, CHOOSE returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:942
msgid "VLOOKUP:search the first column of @{range} for @{value}"
msgstr "VLOOKUP:search the first column of @{range} for @{value}"

#: ../plugins/fn-lookup/functions.c:943 ../plugins/fn-lookup/functions.c:1011
msgid "value:search value"
msgstr "value:search value"

#: ../plugins/fn-lookup/functions.c:944 ../plugins/fn-lookup/functions.c:1012
msgid "range:range to search"
msgstr "range:range to search"

#: ../plugins/fn-lookup/functions.c:945
msgid "column:1-based column offset indicating the return values"
msgstr "column:1-based column offset indicating the return values"

#: ../plugins/fn-lookup/functions.c:946 ../plugins/fn-lookup/functions.c:1014
msgid ""
"approximate:if false, an exact match of @{value} must be found; defaults to "
"TRUE"
msgstr ""
"approximate:if false, an exact match of @{value} must be found; defaults to "
"TRUE"

#: ../plugins/fn-lookup/functions.c:948
msgid "as_index:if true, the 0-based row offset is returned; defaults to FALSE"
msgstr ""
"as_index:if true, the 0-based row offset is returned; defaults to FALSE"

#: ../plugins/fn-lookup/functions.c:950
msgid ""
"VLOOKUP function finds the row in @{range} that has a first cell similar to @"
"{value}.  If @{approximate} is not true it finds the row with an exact "
"equality. If @{approximate} is true, it finds the last row with first value "
"less than or equal to @{value}. If @{as_index} is true the 0-based row "
"offset is returned."
msgstr ""
"VLOOKUP function finds the row in @{range} that has a first cell similar to @"
"{value}.  If @{approximate} is not true it finds the row with an exact "
"equality. If @{approximate} is true, it finds the last row with first value "
"less than or equal to @{value}. If @{as_index} is true the 0-based row "
"offset is returned."

#: ../plugins/fn-lookup/functions.c:957 ../plugins/fn-lookup/functions.c:1025
msgid ""
"If @{approximate} is true, then the values must be sorted in order of "
"ascending value."
msgstr ""
"If @{approximate} is true, then the values must be sorted in order of "
"ascending value."

#: ../plugins/fn-lookup/functions.c:959
msgid "VLOOKUP returns #REF! if @{column} falls outside @{range}."
msgstr "VLOOKUP returns #REF! if @{column} falls outside @{range}."

#: ../plugins/fn-lookup/functions.c:1010
msgid "HLOOKUP:search the first row of @{range} for @{value}"
msgstr "HLOOKUP:search the first row of @{range} for @{value}"

#: ../plugins/fn-lookup/functions.c:1013
msgid "row:1-based row offset indicating the return values "
msgstr "row:1-based row offset indicating the return values "

#: ../plugins/fn-lookup/functions.c:1016
msgid ""
"as_index:if true, the 0-based column offset is returned; defaults to FALSE"
msgstr ""
"as_index:if true, the 0-based column offset is returned; defaults to FALSE"

#: ../plugins/fn-lookup/functions.c:1018
msgid ""
"HLOOKUP function finds the row in @{range} that has a first cell similar to @"
"{value}.  If @{approximate} is not true it finds the column with an exact "
"equality. If @{approximate} is true, it finds the last column with first "
"value less than or equal to @{value}. If @{as_index} is true the 0-based "
"column offset is returned."
msgstr ""
"HLOOKUP function finds the row in @{range} that has a first cell similar to @"
"{value}.  If @{approximate} is not true it finds the column with an exact "
"equality. If @{approximate} is true, it finds the last column with first "
"value less than or equal to @{value}. If @{as_index} is true the 0-based "
"column offset is returned."

#: ../plugins/fn-lookup/functions.c:1027
msgid "HLOOKUP returns #REF! if @{row} falls outside @{range}."
msgstr "HLOOKUP returns #REF! if @{row} falls outside @{range}."

#: ../plugins/fn-lookup/functions.c:1078
msgid ""
"LOOKUP:contents of @{vector2} at the corresponding location to @{value} in @"
"{vector1}"
msgstr ""
"LOOKUP:contents of @{vector2} at the corresponding location to @{value} in @"
"{vector1}"

#: ../plugins/fn-lookup/functions.c:1080
msgid "value:value to look up"
msgstr "value:value to look up"

#: ../plugins/fn-lookup/functions.c:1081
msgid "vector1:range to search:"
msgstr "vector1:range to search:"

#: ../plugins/fn-lookup/functions.c:1082
msgid "vector2:range of return values"
msgstr "vector2:range of return values"

#: ../plugins/fn-lookup/functions.c:1083
msgid ""
"If  @{vector1} has more rows than columns, LOOKUP searches the first row of @"
"{vector1}, otherwise the first column. If @{vector2} is omitted the return "
"value is taken from the last row or column of @{vector1}."
msgstr ""
"If  @{vector1} has more rows than columns, LOOKUP searches the first row of @"
"{vector1}, otherwise the first column. If @{vector2} is omitted the return "
"value is taken from the last row or column of @{vector1}."

#: ../plugins/fn-lookup/functions.c:1087
msgid ""
"If LOOKUP can't find @{value} it uses the largest value less than @{value}."
msgstr ""
"If LOOKUP can't find @{value} it uses the largest value less than @{value}."

#: ../plugins/fn-lookup/functions.c:1089
msgid "The data must be sorted."
msgstr "The data must be sorted."

#: ../plugins/fn-lookup/functions.c:1090
msgid "If @{value} is smaller than the first value it returns #N/A."
msgstr "If @{value} is smaller than the first value it returns #N/A."

#: ../plugins/fn-lookup/functions.c:1091
msgid ""
"If the corresponding location does not exist in @{vector2}, it returns #N/A."
msgstr ""
"If the corresponding location does not exist in @{vector2}, it returns #N/A."

#: ../plugins/fn-lookup/functions.c:1178
msgid "MATCH:the index of @{seek} in @{vector}"
msgstr "MATCH:the index of @{seek} in @{vector}"

#: ../plugins/fn-lookup/functions.c:1179
msgid "seek:value to find"
msgstr "seek:value to find"

#: ../plugins/fn-lookup/functions.c:1180
msgid "vector:n by 1 or 1 by n range to be searched"
msgstr "vector:n by 1 or 1 by n range to be searched"

#: ../plugins/fn-lookup/functions.c:1181
msgid ""
"type:+1 (the default) to find the largest value ≤ @{seek}, 0 to find the "
"first value = @{seek}, or-1 to find the smallest value ≥ @{seek}"
msgstr ""
"type:+1 (the default) to find the largest value ≤ @{seek}, 0 to find the "
"first value = @{seek}, or-1 to find the smallest value ≥ @{seek}"

#: ../plugins/fn-lookup/functions.c:1184
msgid "MATCH searches @{vector} for @{seek} and returns the 1-based index."
msgstr "MATCH searches @{vector} for @{seek} and returns the 1-based index."

#: ../plugins/fn-lookup/functions.c:1185
msgid ""
" For @{type} = -1 the data must be sorted in descending order; for @{type} = "
"+1 the data must be sorted in ascending order."
msgstr ""
" For @{type} = -1 the data must be sorted in descending order; for @{type} = "
"+1 the data must be sorted in ascending order."

#: ../plugins/fn-lookup/functions.c:1187
msgid "If @{seek} could not be found, #N/A is returned."
msgstr "If @{seek} could not be found, #N/A is returned."

#: ../plugins/fn-lookup/functions.c:1188
msgid "If @{vector} is neither n by 1 nor 1 by n, #N/A is returned."
msgstr "If @{vector} is neither n by 1 nor 1 by n, #N/A is returned."

#: ../plugins/fn-lookup/functions.c:1232
msgid "INDIRECT:contents of the cell pointed to by the @{ref_text} string"
msgstr "INDIRECT:contents of the cell pointed to by the @{ref_text} string"

#: ../plugins/fn-lookup/functions.c:1233
msgid "ref_text:textual reference"
msgstr "ref_text:textual reference"

#: ../plugins/fn-lookup/functions.c:1234
msgid ""
"format:if true, @{ref_text} is given in A1-style, otherwise it is given in "
"R1C1 style; defaults to true"
msgstr ""
"format:if true, @{ref_text} is given in A1-style, otherwise it is given in "
"R1C1 style; defaults to true"

#: ../plugins/fn-lookup/functions.c:1236
msgid ""
"If @{ref_text} is not a valid reference in the style determined by @"
"{format}, INDIRECT returns #REF!"
msgstr ""
"If @{ref_text} is not a valid reference in the style determined by @"
"{format}, INDIRECT returns #REF!"

#: ../plugins/fn-lookup/functions.c:1270
msgid "INDEX:reference to a cell in the given @{array}"
msgstr "INDEX:reference to a cell in the given @{array}"

#: ../plugins/fn-lookup/functions.c:1271
msgid "array:cell or inline array"
msgstr "array:cell or inline array"

#: ../plugins/fn-lookup/functions.c:1272
msgid "row:desired row, defaults to 1"
msgstr "row:desired row, defaults to 1"

#: ../plugins/fn-lookup/functions.c:1273
msgid "col:desired column, defaults to 1"
msgstr "col:desired column, defaults to 1"

#: ../plugins/fn-lookup/functions.c:1274
msgid "area:from which area to select a cell, defaults to 1"
msgstr "area:from which area to select a cell, defaults to 1"

#: ../plugins/fn-lookup/functions.c:1275
msgid ""
"INDEX gives a reference to a cell in the given @{array}. The cell is "
"selected by @{row} and @{col}, which count the rows and columns in the array."
msgstr ""
"INDEX gives a reference to a cell in the given @{array}. The cell is "
"selected by @{row} and @{col}, which count the rows and columns in the array."

#: ../plugins/fn-lookup/functions.c:1280
msgid ""
"If the reference falls outside the range of @{array}, INDEX returns #REF!"
msgstr ""
"If the reference falls outside the range of @{array}, INDEX returns #REF!"

#: ../plugins/fn-lookup/functions.c:1282
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1. Then INDEX(A1:A5,4,1,1) equals 25.9"
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1. Then INDEX(A1:A5,4,1,1) equals 25.9"

#: ../plugins/fn-lookup/functions.c:1371
msgid "COLUMN:vector of column numbers"
msgstr "COLUMN:vector of column numbers"

#: ../plugins/fn-lookup/functions.c:1372 ../plugins/fn-lookup/functions.c:1524
msgid "x:reference, defaults to the position of the current expression"
msgstr "x:reference, defaults to the position of the current expression"

#: ../plugins/fn-lookup/functions.c:1373
msgid ""
"COLUMN function returns a Nx1 array containing the sequence of integers from "
"the first column to the last column of @{x}."
msgstr ""
"COLUMN function returns a Nx1 array containing the sequence of integers from "
"the first column to the last column of @{x}."

#: ../plugins/fn-lookup/functions.c:1376 ../plugins/fn-lookup/functions.c:1528
msgid ""
"If @{x} is neither an array nor a reference nor a range, returns #VALUE!"
msgstr ""
"If @{x} is neither an array nor a reference nor a range, returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:1380
msgid "column() in G13 equals 7."
msgstr "column() in G13 equals 7."

#: ../plugins/fn-lookup/functions.c:1420
msgid "COLUMNNUMBER:column number for the given column called @{name}"
msgstr "COLUMNNUMBER:column number for the given column called @{name}"

#: ../plugins/fn-lookup/functions.c:1421
msgid "name:column name such as \"IV\""
msgstr "name:column name such as \"IV\""

#: ../plugins/fn-lookup/functions.c:1422
msgid "If @{name} is invalid, COLUMNNUMBER returns #VALUE!"
msgstr "If @{name} is invalid, COLUMNNUMBER returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:1447
msgid "COLUMNS:number of columns in @{reference}"
msgstr "COLUMNS:number of columns in @{reference}"

#: ../plugins/fn-lookup/functions.c:1448
msgid "reference:array or area"
msgstr "reference:array or area"

#: ../plugins/fn-lookup/functions.c:1449
msgid ""
"If @{reference} is neither an array nor a reference nor a range, COLUMNS "
"returns #VALUE!"
msgstr ""
"If @{reference} is neither an array nor a reference nor a range, COLUMNS "
"returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:1465
msgid "OFFSET:an offset cell range"
msgstr "OFFSET:an offset cell range"

#: ../plugins/fn-lookup/functions.c:1466
msgid "range:reference or range"
msgstr "range:reference or range"

#: ../plugins/fn-lookup/functions.c:1467
msgid "row:number of rows to offset @{range}"
msgstr "row:number of rows to offset @{range}"

#: ../plugins/fn-lookup/functions.c:1468
msgid "col:number of columns to offset @{range}"
msgstr "col:number of columns to offset @{range}"

#: ../plugins/fn-lookup/functions.c:1469
msgid "height:height of the offset range, defaults to height of @{range}"
msgstr "height:height of the offset range, defaults to height of @{range}"

#: ../plugins/fn-lookup/functions.c:1470
msgid "width:width of the offset range, defaults to width of @{range}"
msgstr "width:width of the offset range, defaults to width of @{range}"

#: ../plugins/fn-lookup/functions.c:1471
msgid ""
"OFFSET returns the cell range starting at offset (@{row},@{col}) from @"
"{range} of height @{height} and width @{width}."
msgstr ""
"OFFSET returns the cell range starting at offset (@{row},@{col}) from @"
"{range} of height @{height} and width @{width}."

#: ../plugins/fn-lookup/functions.c:1474
msgid "If @{range} is neither a reference nor a range, OFFSET returns #VALUE!"
msgstr "If @{range} is neither a reference nor a range, OFFSET returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:1523
msgid "ROW:vector of row numbers"
msgstr "ROW:vector of row numbers"

#: ../plugins/fn-lookup/functions.c:1525
msgid ""
"ROW function returns a 1xN array containing the sequence of integers from "
"the first row to the last row of @{x}."
msgstr ""
"ROW function returns a 1xN array containing the sequence of integers from "
"the first row to the last row of @{x}."

#: ../plugins/fn-lookup/functions.c:1571
msgid "ROWS:number of rows in @{reference}"
msgstr "ROWS:number of rows in @{reference}"

#: ../plugins/fn-lookup/functions.c:1572
msgid "reference:array, reference, or range"
msgstr "reference:array, reference, or range"

#: ../plugins/fn-lookup/functions.c:1573
msgid ""
"If @{reference} is neither an array nor a reference nor a range, ROWS "
"returns #VALUE!"
msgstr ""
"If @{reference} is neither an array nor a reference nor a range, ROWS "
"returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:1589
msgid "SHEETS:number of sheets in @{reference}"
msgstr "SHEETS:number of sheets in @{reference}"

#: ../plugins/fn-lookup/functions.c:1590
msgid "reference:array, reference, or range, defaults to the maximum range"
msgstr "reference:array, reference, or range, defaults to the maximum range"

#: ../plugins/fn-lookup/functions.c:1591
msgid ""
"If @{reference} is neither an array nor a reference nor a range, SHEETS "
"returns #VALUE!"
msgstr ""
"If @{reference} is neither an array nor a reference nor a range, SHEETS "
"returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:1627
msgid "SHEET:sheet number of @{reference}"
msgstr "SHEET:sheet number of @{reference}"

#: ../plugins/fn-lookup/functions.c:1628
msgid ""
"reference:reference or literal sheet name, defaults to the current sheet"
msgstr ""
"reference:reference or literal sheet name, defaults to the current sheet"

#: ../plugins/fn-lookup/functions.c:1629
msgid ""
"If @{reference} is neither a reference nor a literal sheet name, SHEET "
"returns #VALUE!"
msgstr ""
"If @{reference} is neither a reference nor a literal sheet name, SHEET "
"returns #VALUE!"

#: ../plugins/fn-lookup/functions.c:1675
msgid "HYPERLINK:second or first arguments"
msgstr "HYPERLINK:second or first arguments"

#: ../plugins/fn-lookup/functions.c:1676
msgid "link_location:string"
msgstr "link_location:string"

#: ../plugins/fn-lookup/functions.c:1677
msgid "label:string, optional"
msgstr "label:string, optional"

#: ../plugins/fn-lookup/functions.c:1678
msgid ""
"HYPERLINK function currently returns its 2nd argument, or if that is omitted "
"the 1st argument."
msgstr ""
"HYPERLINK function currently returns its 2nd argument, or if that is omitted "
"the 1st argument."

#: ../plugins/fn-lookup/functions.c:1697
msgid "TRANSPOSE:the transpose of @{matrix}"
msgstr "TRANSPOSE:the transpose of @{matrix}"

#: ../plugins/fn-lookup/functions.c:1698 ../plugins/fn-lookup/functions.c:1736
msgid "matrix:range"
msgstr "matrix:range"

#: ../plugins/fn-lookup/functions.c:1735
msgid "FLIP:@{matrix} flipped"
msgstr "FLIP:@{matrix} flipped"

#: ../plugins/fn-lookup/functions.c:1737
msgid ""
"vertical:if true, @{matrix} is flipped vertically, otherwise horizontally; "
"defaults to TRUE"
msgstr ""
"vertical:if true, @{matrix} is flipped vertically, otherwise horizontally; "
"defaults to TRUE"

#: ../plugins/fn-lookup/functions.c:1782
msgid "ARRAY:vertical array of the arguments"
msgstr "ARRAY:vertical array of the arguments"

#: ../plugins/fn-lookup/functions.c:1783
msgid "v:value"
msgstr "v:value"

#: ../plugins/fn-lookup/functions.c:1839
msgid "SORT:sorted list of numbers as vertical array"
msgstr "SORT:sorted list of numbers as vertical array"

#: ../plugins/fn-lookup/functions.c:1840 ../plugins/fn-stat/functions.c:163
#: ../plugins/fn-stat/functions.c:215
msgid "ref:list of numbers"
msgstr "ref:list of numbers"

#: ../plugins/fn-lookup/functions.c:1841
msgid "order:0 (descending order) or 1 (ascending order); defaults to 0"
msgstr "order:0 (descending order) or 1 (ascending order); defaults to 0"

#: ../plugins/fn-lookup/functions.c:1842
msgid "Strings, booleans, and empty cells are ignored."
msgstr "Strings, booleans, and empty cells are ignored."

#: ../plugins/fn-lookup/functions.c:1843
msgid "SORT({4,3,5}) evaluates to {5,4,3}"
msgstr "SORT({4,3,5}) evaluates to {5,4,3}"

#: ../plugins/fn-math/functions.c:51
msgid ""
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0). If the argument evaluates to TRUE, it is counted as one (1)."
msgstr ""
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0). If the argument evaluates to TRUE, it is counted as one (1)."

#: ../plugins/fn-math/functions.c:59
msgid "GCD:the greatest common divisor"
msgstr "GCD:the greatest common divisor"

#: ../plugins/fn-math/functions.c:60 ../plugins/fn-math/functions.c:123
msgid "n0:positive integer"
msgstr "n0:positive integer"

#: ../plugins/fn-math/functions.c:61 ../plugins/fn-math/functions.c:124
msgid "n1:positive integer"
msgstr "n1:positive integer"

#: ../plugins/fn-math/functions.c:62
msgid ""
"GCD calculates the greatest common divisor of the given numbers @{n0},@"
"{n1},..., the greatest integer that is a divisor of each argument."
msgstr ""
"GCD calculates the greatest common divisor of the given numbers @{n0},@"
"{n1},..., the greatest integer that is a divisor of each argument."

#: ../plugins/fn-math/functions.c:63 ../plugins/fn-math/functions.c:126
msgid "If any of the arguments is not an integer, it is truncated."
msgstr "If any of the arguments is not an integer, it is truncated."

#: ../plugins/fn-math/functions.c:122
msgid "LCM:the least common multiple"
msgstr "LCM:the least common multiple"

#: ../plugins/fn-math/functions.c:125
msgid ""
"LCM calculates the least common multiple of the given numbers @{n0},@"
"{n1},..., the smallest integer that is a multiple of each argument."
msgstr ""
"LCM calculates the least common multiple of the given numbers @{n0},@"
"{n1},..., the smallest integer that is a multiple of each argument."

#: ../plugins/fn-math/functions.c:178
msgid "GD:Gudermannian function"
msgstr "GD:Gudermannian function"

#: ../plugins/fn-math/functions.c:179 ../plugins/fn-math/functions.c:290
#: ../plugins/fn-stat/functions.c:1721
msgid "x:value"
msgstr "x:value"

#: ../plugins/fn-math/functions.c:182
msgid "wolfram:Gudermannian.html"
msgstr "wolfram:Gudermannian.html"

#: ../plugins/fn-math/functions.c:183
msgid "wiki:en:Gudermannian_function"
msgstr "wiki:en:Gudermannian_function"

#: ../plugins/fn-math/functions.c:202
msgid "HYPOT:the square root of the sum of the squares of the arguments"
msgstr "HYPOT:the square root of the sum of the squares of the arguments"

#: ../plugins/fn-math/functions.c:203
msgid "n0:number"
msgstr "n0:number"

#: ../plugins/fn-math/functions.c:204
msgid "n1:number"
msgstr "n1:number"

#: ../plugins/fn-math/functions.c:225
msgid "ABS:absolute value"
msgstr "ABS:absolute value"

#: ../plugins/fn-math/functions.c:227
msgid ""
"ABS gives the absolute value of @{x}, i.e. the non-negative number of the "
"same magnitude as @{x}."
msgstr ""
"ABS gives the absolute value of @{x}, i.e. the non-negative number of the "
"same magnitude as @{x}."

#: ../plugins/fn-math/functions.c:244
msgid "ACOS:the arc cosine of @{x}"
msgstr "ACOS:the arc cosine of @{x}"

#: ../plugins/fn-math/functions.c:266
msgid "ACOSH:the hyperbolic arc cosine of @{x}"
msgstr "ACOSH:the hyperbolic arc cosine of @{x}"

#: ../plugins/fn-math/functions.c:289
msgid "ACOT:inverse cotangent of @{x}"
msgstr "ACOT:inverse cotangent of @{x}"

#: ../plugins/fn-math/functions.c:293
msgid "wolfram:InverseCotangent.html"
msgstr "wolfram:InverseCotangent.html"

#: ../plugins/fn-math/functions.c:294 ../plugins/fn-math/functions.c:768
#: ../plugins/fn-math/functions.c:807 ../plugins/fn-math/functions.c:1361
#: ../plugins/fn-math/functions.c:1381 ../plugins/fn-math/functions.c:1421
msgid "wiki:en:Trigonometric_functions"
msgstr "wiki:en:Trigonometric_functions"

#: ../plugins/fn-math/functions.c:307
msgid "ACOTH:the inverse hyperbolic cotangent of @{x}"
msgstr "ACOTH:the inverse hyperbolic cotangent of @{x}"

#: ../plugins/fn-math/functions.c:311
msgid "wolfram:InverseHyperbolicCotangent.html"
msgstr "wolfram:InverseHyperbolicCotangent.html"

#: ../plugins/fn-math/functions.c:312
msgid "wiki:en:Inverse_hyperbolic_function"
msgstr "wiki:en:Inverse_hyperbolic_function"

#: ../plugins/fn-math/functions.c:325
msgid "ASIN:the arc sine of @{x}"
msgstr "ASIN:the arc sine of @{x}"

#: ../plugins/fn-math/functions.c:327
msgid ""
"ASIN calculates the arc sine of @{x}; that is the value whose sine is @{x}."
msgstr ""
"ASIN calculates the arc sine of @{x}; that is the value whose sine is @{x}."

#: ../plugins/fn-math/functions.c:329
msgid "If @{x} falls outside the range -1 to 1, ASIN returns #NUM!"
msgstr "If @{x} falls outside the range -1 to 1, ASIN returns #NUM!"

#: ../plugins/fn-math/functions.c:351
msgid "ASINH:the inverse hyperbolic sine of @{x}"
msgstr "ASINH:the inverse hyperbolic sine of @{x}"

#: ../plugins/fn-math/functions.c:353
msgid ""
"ASINH calculates the inverse hyperbolic sine of @{x}; that is the value "
"whose hyperbolic sine is @{x}."
msgstr ""
"ASINH calculates the inverse hyperbolic sine of @{x}; that is the value "
"whose hyperbolic sine is @{x}."

#: ../plugins/fn-math/functions.c:370
msgid "ATAN:the arc tangent of @{x}"
msgstr "ATAN:the arc tangent of @{x}"

#: ../plugins/fn-math/functions.c:372
msgid ""
"ATAN calculates the arc tangent of @{x}; that is the value whose tangent is @"
"{x}."
msgstr ""
"ATAN calculates the arc tangent of @{x}; that is the value whose tangent is @"
"{x}."

#: ../plugins/fn-math/functions.c:375
msgid "The result will be between −π/2 and +π/2."
msgstr "The result will be between −π/2 and +π/2."

#: ../plugins/fn-math/functions.c:394
msgid "ATANH:the inverse hyperbolic tangent of @{x}"
msgstr "ATANH:the inverse hyperbolic tangent of @{x}"

#: ../plugins/fn-math/functions.c:396
msgid ""
"ATANH calculates the inverse hyperbolic tangent of @{x}; that is the value "
"whose hyperbolic tangent is @{x}."
msgstr ""
"ATANH calculates the inverse hyperbolic tangent of @{x}; that is the value "
"whose hyperbolic tangent is @{x}."

#: ../plugins/fn-math/functions.c:398
msgid "If the absolute value of @{x} is greater than 1.0, ATANH returns #NUM!"
msgstr "If the absolute value of @{x} is greater than 1.0, ATANH returns #NUM!"

#: ../plugins/fn-math/functions.c:419
msgid "ATAN2:the arc tangent of the ratio @{y}/@{x}"
msgstr "ATAN2:the arc tangent of the ratio @{y}/@{x}"

#: ../plugins/fn-math/functions.c:421
msgid "x:x-coordinate"
msgstr "x:x-coordinate"

#: ../plugins/fn-math/functions.c:422
msgid "y:y-coordinate"
msgstr "y:y-coordinate"

#: ../plugins/fn-math/functions.c:423
msgid ""
"ATAN2 calculates the direction from the origin to the point (@{x},@{y}) as "
"an angle from the x-axis in radians."
msgstr ""
"ATAN2 calculates the direction from the origin to the point (@{x},@{y}) as "
"an angle from the x-axis in radians."

#: ../plugins/fn-math/functions.c:427
msgid "The result will be between −π and +π."
msgstr "The result will be between −π and +π."

#: ../plugins/fn-math/functions.c:430
msgid "The order of the arguments may be unexpected."
msgstr "The order of the arguments may be unexpected."

#: ../plugins/fn-math/functions.c:455
msgid "CEIL:smallest integer larger than or equal to @{x}"
msgstr "CEIL:smallest integer larger than or equal to @{x}"

#: ../plugins/fn-math/functions.c:457
msgid "CEIL(@{x}) is the smallest integer that is at least as large as @{x}."
msgstr "CEIL(@{x}) is the smallest integer that is at least as large as @{x}."

#: ../plugins/fn-math/functions.c:458
msgid "This function is the OpenFormula function CEILING(@{x})."
msgstr "This function is the OpenFormula function CEILING(@{x})."

#: ../plugins/fn-math/functions.c:475
msgid "COUNTIF:count of the cells meeting the given @{criteria}"
msgstr "COUNTIF:count of the cells meeting the given @{criteria}"

#: ../plugins/fn-math/functions.c:476 ../plugins/fn-math/functions.c:549
#: ../plugins/fn-math/functions.c:666
msgid "range:cell area"
msgstr "range:cell area"

#: ../plugins/fn-math/functions.c:477
msgid "criteria:condition for a cell to be counted"
msgstr "criteria:condition for a cell to be counted"

#: ../plugins/fn-math/functions.c:548
msgid ""
"SUMIF:sum of the cells in @{actual_range} for which the corresponding cells "
"in the range meet the given @{criteria}"
msgstr ""
"SUMIF:sum of the cells in @{actual_range} for which the corresponding cells "
"in the range meet the given @{criteria}"

#: ../plugins/fn-math/functions.c:550
msgid "criteria:condition for a cell to be summed"
msgstr "criteria:condition for a cell to be summed"

#: ../plugins/fn-math/functions.c:551 ../plugins/fn-math/functions.c:668
msgid "actual_range:cell area, defaults to @{range}"
msgstr "actual_range:cell area, defaults to @{range}"

#: ../plugins/fn-math/functions.c:552
msgid ""
"If the @{actual_range} has a size that differs from the size of @{range}, @"
"{actual_range} is resized (retaining the top-left corner) to match the size "
"of @{range}."
msgstr ""
"If the @{actual_range} has a size that differs from the size of @{range}, @"
"{actual_range} is resized (retaining the top-left corner) to match the size "
"of @{range}."

#: ../plugins/fn-math/functions.c:665
msgid ""
"AVERAGEIF:average of the cells in @{actual range} for which the "
"corresponding cells in the range meet the given @{criteria}"
msgstr ""
"AVERAGEIF:average of the cells in @{actual range} for which the "
"corresponding cells in the range meet the given @{criteria}"

#: ../plugins/fn-math/functions.c:667
msgid "criteria:condition for a cell to be included"
msgstr "criteria:condition for a cell to be included"

#: ../plugins/fn-math/functions.c:731
msgid ""
"CEILING:nearest multiple of @{significance} whose absolute value is at least "
"ABS(@{x})"
msgstr ""
"CEILING:nearest multiple of @{significance} whose absolute value is at least "
"ABS(@{x})"

#: ../plugins/fn-math/functions.c:733 ../plugins/fn-math/functions.c:1086
msgid ""
"significance:base multiple (defaults to 1 for @{x} > 0 and -1 for @{x} <0)"
msgstr ""
"significance:base multiple (defaults to 1 for @{x} > 0 and -1 for @{x} <0)"

#: ../plugins/fn-math/functions.c:734
msgid ""
"CEILING(@{x},@{significance}) is the nearest multiple of @{significance} "
"whose absolute value is at least ABS(@{x})."
msgstr ""
"CEILING(@{x},@{significance}) is the nearest multiple of @{significance} "
"whose absolute value is at least ABS(@{x})."

#: ../plugins/fn-math/functions.c:735
msgid ""
"If @{x} or @{significance} is non-numeric, CEILING returns a #VALUE! error."
msgstr ""
"If @{x} or @{significance} is non-numeric, CEILING returns a #VALUE! error."

#: ../plugins/fn-math/functions.c:736
msgid ""
"If @{x} and @{significance} have different signs, CEILING returns a #NUM! "
"error."
msgstr ""
"If @{x} and @{significance} have different signs, CEILING returns a #NUM! "
"error."

#: ../plugins/fn-math/functions.c:738
msgid ""
"CEILING(@{x}) is exported to ODF as CEILING(@{x},SIGN(@{x}),1). CEILING(@{x},"
"@{significance}) is the OpenFormula function CEILING(@{x},@{significance},1)."
msgstr ""
"CEILING(@{x}) is exported to ODF as CEILING(@{x},SIGN(@{x}),1). CEILING(@{x},"
"@{significance}) is the OpenFormula function CEILING(@{x},@{significance},1)."

#: ../plugins/fn-math/functions.c:764
msgid "COS:the cosine of @{x}"
msgstr "COS:the cosine of @{x}"

#: ../plugins/fn-math/functions.c:765 ../plugins/fn-math/functions.c:839
#: ../plugins/fn-math/functions.c:1356 ../plugins/fn-math/functions.c:1375
#: ../plugins/fn-math/functions.c:1415 ../plugins/fn-math/functions.c:1588
msgid "x:angle in radians"
msgstr "x:angle in radians"

#: ../plugins/fn-math/functions.c:767
msgid "wolfram:Cosine.html"
msgstr "wolfram:Cosine.html"

#: ../plugins/fn-math/functions.c:784
msgid "COSH:the hyperbolic cosine of @{x}"
msgstr "COSH:the hyperbolic cosine of @{x}"

#: ../plugins/fn-math/functions.c:802
msgid "COT:the cotangent of @{x}"
msgstr "COT:the cotangent of @{x}"

#: ../plugins/fn-math/functions.c:806
msgid "wolfram:Cotangent.html"
msgstr "wolfram:Cotangent.html"

#: ../plugins/fn-math/functions.c:820
msgid "COTH:the hyperbolic cotangent of @{x}"
msgstr "COTH:the hyperbolic cotangent of @{x}"

#: ../plugins/fn-math/functions.c:824
msgid "wolfram:HyperbolicCotangent.html"
msgstr "wolfram:HyperbolicCotangent.html"

#: ../plugins/fn-math/functions.c:825 ../plugins/fn-math/functions.c:1401
#: ../plugins/fn-math/functions.c:1441
msgid "wiki:en:Hyperbolic_function"
msgstr "wiki:en:Hyperbolic_function"

#: ../plugins/fn-math/functions.c:838
msgid "DEGREES:equivalent degrees to @{x} radians"
msgstr "DEGREES:equivalent degrees to @{x} radians"

#: ../plugins/fn-math/functions.c:856
msgid "EXP:e raised to the power of @{x}"
msgstr "EXP:e raised to the power of @{x}"

#: ../plugins/fn-math/functions.c:858
msgid "e is the base of the natural logarithm."
msgstr "e is the base of the natural logarithm."

#: ../plugins/fn-math/functions.c:874
msgid "EXPM1:EXP(@{x})-1"
msgstr "EXPM1:EXP(@{x})-1"

#: ../plugins/fn-math/functions.c:876
msgid ""
"This function has a higher resulting precision than evaluating EXP(@{x})-1."
msgstr ""
"This function has a higher resulting precision than evaluating EXP(@{x})-1."

#: ../plugins/fn-math/functions.c:891
msgid "FACT:the factorial of @{x}, i.e. @{x}!"
msgstr "FACT:the factorial of @{x}, i.e. @{x}!"

#: ../plugins/fn-math/functions.c:894
msgid "The domain of this function has been extended using the GAMMA function."
msgstr ""
"The domain of this function has been extended using the GAMMA function."

#: ../plugins/fn-math/functions.c:922
msgid "GAMMA:the Gamma function"
msgstr "GAMMA:the Gamma function"

#: ../plugins/fn-math/functions.c:952
msgid "GAMMALN:natural logarithm of the Gamma function"
msgstr "GAMMALN:natural logarithm of the Gamma function"

#: ../plugins/fn-math/functions.c:976
msgid "BETA:Euler beta function"
msgstr "BETA:Euler beta function"

#: ../plugins/fn-math/functions.c:978 ../plugins/fn-math/functions.c:1002
#: ../plugins/fn-math/functions.c:1218
msgid "y:number"
msgstr "y:number"

#: ../plugins/fn-math/functions.c:979
msgid ""
"BETA function returns the value of the Euler beta function extended to all "
"real numbers except 0 and negative integers."
msgstr ""
"BETA function returns the value of the Euler beta function extended to all "
"real numbers except 0 and negative integers."

#: ../plugins/fn-math/functions.c:980
msgid ""
"If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETA returns #NUM!"
msgstr ""
"If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETA returns #NUM!"

#: ../plugins/fn-math/functions.c:984 ../plugins/fn-math/functions.c:1008
msgid "wiki:en:Beta_function"
msgstr "wiki:en:Beta_function"

#: ../plugins/fn-math/functions.c:1000
msgid ""
"BETALN:natural logarithm of the absolute value of the Euler beta function"
msgstr ""
"BETALN:natural logarithm of the absolute value of the Euler beta function"

#: ../plugins/fn-math/functions.c:1003
msgid ""
"BETALN function returns the natural logarithm of the absolute value of the "
"Euler beta function extended to all real numbers except 0 and negative "
"integers."
msgstr ""
"BETALN function returns the natural logarithm of the absolute value of the "
"Euler beta function extended to all real numbers except 0 and negative "
"integers."

#: ../plugins/fn-math/functions.c:1004
msgid ""
"If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETALN returns "
"#NUM!"
msgstr ""
"If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETALN returns "
"#NUM!"

#: ../plugins/fn-math/functions.c:1025
msgid "COMBIN:binomial coefficient"
msgstr "COMBIN:binomial coefficient"

#: ../plugins/fn-math/functions.c:1026 ../plugins/fn-math/functions.c:1058
#: ../plugins/fn-math/functions.c:2138
msgid "n:non-negative integer"
msgstr "n:non-negative integer"

#: ../plugins/fn-math/functions.c:1027 ../plugins/fn-math/functions.c:1059
msgid "k:non-negative integer"
msgstr "k:non-negative integer"

#: ../plugins/fn-math/functions.c:1028
msgid ""
"COMBIN returns the binomial coefficient \"@{n} choose @{k}\", the number of @"
"{k}-combinations of an @{n}-element set without repetition."
msgstr ""
"COMBIN returns the binomial coefficient \"@{n} choose @{k}\", the number of @"
"{k}-combinations of an @{n}-element set without repetition."

#: ../plugins/fn-math/functions.c:1031
msgid "If @{n} is less than @{k} COMBIN returns #NUM!"
msgstr "If @{n} is less than @{k} COMBIN returns #NUM!"

#: ../plugins/fn-math/functions.c:1036
msgid "wiki:en:Binomial_coefficient"
msgstr "wiki:en:Binomial_coefficient"

#: ../plugins/fn-math/functions.c:1056
msgid ""
"COMBINA:the number of @{k}-combinations of an @{n}-element set with "
"repetition"
msgstr ""
"COMBINA:the number of @{k}-combinations of an @{n}-element set with "
"repetition"

#: ../plugins/fn-math/functions.c:1064
msgid "wiki:en:Multiset"
msgstr "wiki:en:Multiset"

#: ../plugins/fn-math/functions.c:1084
msgid ""
"FLOOR:nearest multiple of @{significance} whose absolute value is at most ABS"
"(@{x})"
msgstr ""
"FLOOR:nearest multiple of @{significance} whose absolute value is at most ABS"
"(@{x})"

#: ../plugins/fn-math/functions.c:1088
msgid ""
"FLOOR(@{x},@{significance}) is the nearest multiple of @{significance} whose "
"absolute value is at most ABS(@{x})"
msgstr ""
"FLOOR(@{x},@{significance}) is the nearest multiple of @{significance} whose "
"absolute value is at most ABS(@{x})"

#: ../plugins/fn-math/functions.c:1090
msgid ""
"FLOOR(@{x}) is exported to ODF as FLOOR(@{x},SIGN(@{x}),1). FLOOR(@{x},@"
"{significance}) is the OpenFormula function FLOOR(@{x},@{significance},1)."
msgstr ""
"FLOOR(@{x}) is exported to ODF as FLOOR(@{x},SIGN(@{x}),1). FLOOR(@{x},@"
"{significance}) is the OpenFormula function FLOOR(@{x},@{significance},1)."

#: ../plugins/fn-math/functions.c:1120
msgid "INT:largest integer not larger than @{x}"
msgstr "INT:largest integer not larger than @{x}"

#: ../plugins/fn-math/functions.c:1139
msgid "LOG:logarithm of @{x} with base @{base}"
msgstr "LOG:logarithm of @{x} with base @{base}"

#: ../plugins/fn-math/functions.c:1140 ../plugins/fn-math/functions.c:1170
#: ../plugins/fn-math/functions.c:1193 ../plugins/fn-math/functions.c:1248
#: ../plugins/fn-math/functions.c:1270
msgid "x:positive number"
msgstr "x:positive number"

#: ../plugins/fn-math/functions.c:1141
msgid "base:base of the logarithm, defaults to 10"
msgstr "base:base of the logarithm, defaults to 10"

#: ../plugins/fn-math/functions.c:1142
msgid "@{base} must be positive and not equal to 1."
msgstr "@{base} must be positive and not equal to 1."

#: ../plugins/fn-math/functions.c:1143
msgid "If @{x} ≤ 0, LOG returns #NUM! error."
msgstr "If @{x} ≤ 0, LOG returns #NUM! error."

#: ../plugins/fn-math/functions.c:1169
msgid "LN:the natural logarithm of @{x}"
msgstr "LN:the natural logarithm of @{x}"

#: ../plugins/fn-math/functions.c:1171
msgid "If @{x} ≤ 0, LN returns #NUM! error."
msgstr "If @{x} ≤ 0, LN returns #NUM! error."

#: ../plugins/fn-math/functions.c:1192
msgid "LN1P:LN(1+@{x})"
msgstr "LN1P:LN(1+@{x})"

#: ../plugins/fn-math/functions.c:1194
msgid ""
"LN1P calculates LN(1+@{x}) but yielding a higher precision than evaluating LN"
"(1+@{x})."
msgstr ""
"LN1P calculates LN(1+@{x}) but yielding a higher precision than evaluating LN"
"(1+@{x})."

#: ../plugins/fn-math/functions.c:1195
msgid "If @{x} ≤ -1, LN returns #NUM! error."
msgstr "If @{x} ≤ -1, LN returns #NUM! error."

#: ../plugins/fn-math/functions.c:1216
msgid "POWER:the value of @{x} raised to the power @{y}"
msgstr "POWER:the value of @{x} raised to the power @{y}"

#: ../plugins/fn-math/functions.c:1219
msgid "If both @{x} and @{y} equal 0, POWER returns #NUM!"
msgstr "If both @{x} and @{y} equal 0, POWER returns #NUM!"

#: ../plugins/fn-math/functions.c:1220
msgid "If @{x} = 0 and @{y} < 0, POWER returns #DIV/0!"
msgstr "If @{x} = 0 and @{y} < 0, POWER returns #DIV/0!"

#: ../plugins/fn-math/functions.c:1221
msgid "If @{x} < 0 and @{y} is not an integer, POWER returns #NUM!"
msgstr "If @{x} < 0 and @{y} is not an integer, POWER returns #NUM!"

#: ../plugins/fn-math/functions.c:1247
msgid "LOG2:the base-2 logarithm of @{x}"
msgstr "LOG2:the base-2 logarithm of @{x}"

#: ../plugins/fn-math/functions.c:1249
msgid "If @{x} ≤ 0, LOG2 returns #NUM!"
msgstr "If @{x} ≤ 0, LOG2 returns #NUM!"

#: ../plugins/fn-math/functions.c:1269
msgid "LOG10:the base-10 logarithm of @{x}"
msgstr "LOG10:the base-10 logarithm of @{x}"

#: ../plugins/fn-math/functions.c:1271
msgid "If @{x} ≤ 0, LOG10 returns #NUM!"
msgstr "If @{x} ≤ 0, LOG10 returns #NUM!"

#: ../plugins/fn-math/functions.c:1291
msgid "MOD:the remainder of @{x} under division by @{n}"
msgstr "MOD:the remainder of @{x} under division by @{n}"

#: ../plugins/fn-math/functions.c:1294
msgid "MOD function returns the remainder when @{x} is divided by @{n}."
msgstr "MOD function returns the remainder when @{x} is divided by @{n}."

#: ../plugins/fn-math/functions.c:1295
msgid "If @{n} is 0, MOD returns #DIV/0!"
msgstr "If @{n} is 0, MOD returns #DIV/0!"

#: ../plugins/fn-math/functions.c:1337
msgid "RADIANS:the number of radians equivalent to @{x} degrees"
msgstr "RADIANS:the number of radians equivalent to @{x} degrees"

#: ../plugins/fn-math/functions.c:1338
msgid "x:angle in degrees"
msgstr "x:angle in degrees"

#: ../plugins/fn-math/functions.c:1355
msgid "SIN:the sine of @{x}"
msgstr "SIN:the sine of @{x}"

#: ../plugins/fn-math/functions.c:1360
msgid "wolfram:Sine.html"
msgstr "wolfram:Sine.html"

#: ../plugins/fn-math/functions.c:1374
msgid "CSC:the cosecant of @{x}"
msgstr "CSC:the cosecant of @{x}"

#: ../plugins/fn-math/functions.c:1376 ../plugins/fn-math/functions.c:1396
#: ../plugins/fn-math/functions.c:1416 ../plugins/fn-math/functions.c:1436
msgid "This function is not Excel compatible."
msgstr "This function is not Excel compatible."

#: ../plugins/fn-math/functions.c:1380
msgid "wolfram:Cosecant.html"
msgstr "wolfram:Cosecant.html"

#: ../plugins/fn-math/functions.c:1394
msgid "CSCH:the hyperbolic cosecant of @{x}"
msgstr "CSCH:the hyperbolic cosecant of @{x}"

#: ../plugins/fn-math/functions.c:1400
msgid "wolfram:HyperbolicCosecant.html"
msgstr "wolfram:HyperbolicCosecant.html"

#: ../plugins/fn-math/functions.c:1414
msgid "SEC:Secant"
msgstr "SEC:Secant"

#: ../plugins/fn-math/functions.c:1417
msgid "SEC(@{x}) is exported to OpenFormula as 1/COS(@{x})."
msgstr "SEC(@{x}) is exported to OpenFormula as 1/COS(@{x})."

#: ../plugins/fn-math/functions.c:1420
msgid "wolfram:Secant.html"
msgstr "wolfram:Secant.html"

#: ../plugins/fn-math/functions.c:1434
msgid "SECH:the hyperbolic secant of @{x}"
msgstr "SECH:the hyperbolic secant of @{x}"

#: ../plugins/fn-math/functions.c:1437
msgid "SECH(@{x}) is exported to OpenFormula as 1/COSH(@{x})."
msgstr "SECH(@{x}) is exported to OpenFormula as 1/COSH(@{x})."

#: ../plugins/fn-math/functions.c:1440
msgid "wolfram:HyperbolicSecant.html"
msgstr "wolfram:HyperbolicSecant.html"

#: ../plugins/fn-math/functions.c:1452
msgid "SINH:the hyperbolic sine of @{x}"
msgstr "SINH:the hyperbolic sine of @{x}"

#: ../plugins/fn-math/functions.c:1470
msgid "SQRT:square root of @{x}"
msgstr "SQRT:square root of @{x}"

#: ../plugins/fn-math/functions.c:1471 ../plugins/fn-math/functions.c:1880
msgid "x:non-negative number"
msgstr "x:non-negative number"

#: ../plugins/fn-math/functions.c:1473
msgid "If @{x} is negative, SQRT returns #NUM!"
msgstr "If @{x} is negative, SQRT returns #NUM!"

#: ../plugins/fn-math/functions.c:1492
msgid "SUMA:sum of all values and cells referenced"
msgstr "SUMA:sum of all values and cells referenced"

#: ../plugins/fn-math/functions.c:1493 ../plugins/fn-math/functions.c:1517
msgid "area0:first cell area"
msgstr "area0:first cell area"

#: ../plugins/fn-math/functions.c:1494 ../plugins/fn-math/functions.c:1518
msgid "area1:second cell area"
msgstr "area1:second cell area"

#: ../plugins/fn-math/functions.c:1516
msgid "SUMSQ:sum of the squares of all values and cells referenced"
msgstr "SUMSQ:sum of the squares of all values and cells referenced"

#: ../plugins/fn-math/functions.c:1539
msgid ""
"MULTINOMIAL:multinomial coefficient (@{x1}+⋯+@{xn}) choose (@{x1},…,@{xn})"
msgstr ""
"MULTINOMIAL:multinomial coefficient (@{x1}+⋯+@{xn}) choose (@{x1},…,@{xn})"

#: ../plugins/fn-math/functions.c:1540
msgid "x1:first number"
msgstr "x1:first number"

#: ../plugins/fn-math/functions.c:1541
msgid "x2:second number"
msgstr "x2:second number"

#: ../plugins/fn-math/functions.c:1542
msgid "xn:nth number"
msgstr "xn:nth number"

#: ../plugins/fn-math/functions.c:1546
msgid "wiki:en:Multinomial_theorem"
msgstr "wiki:en:Multinomial_theorem"

#: ../plugins/fn-math/functions.c:1564
msgid "G_PRODUCT:product of all the values and cells referenced"
msgstr "G_PRODUCT:product of all the values and cells referenced"

#: ../plugins/fn-math/functions.c:1565
msgid "x1:number"
msgstr "x1:number"

#: ../plugins/fn-math/functions.c:1566
msgid "x2:number"
msgstr "x2:number"

#: ../plugins/fn-math/functions.c:1567
msgid "Empty cells are ignored and the empty product is 1."
msgstr "Empty cells are ignored and the empty product is 1."

#: ../plugins/fn-math/functions.c:1587
msgid "TAN:the tangent of @{x}"
msgstr "TAN:the tangent of @{x}"

#: ../plugins/fn-math/functions.c:1604
msgid "TANH:the hyperbolic tangent of @{x}"
msgstr "TANH:the hyperbolic tangent of @{x}"

#: ../plugins/fn-math/functions.c:1621
msgid "PI:the constant 𝜋"
msgstr "PI:the constant 𝜋"

#: ../plugins/fn-math/functions.c:1622
msgid ""
"This function is Excel compatible, but it returns 𝜋 with a better precision."
msgstr ""
"This function is Excel compatible, but it returns 𝜋 with a better precision."

#: ../plugins/fn-math/functions.c:1639
msgid "TRUNC:@{x} truncated to @{d} digits"
msgstr "TRUNC:@{x} truncated to @{d} digits"

#: ../plugins/fn-math/functions.c:1641
msgid "d:non-negative integer, defaults to 0"
msgstr "d:non-negative integer, defaults to 0"

#: ../plugins/fn-math/functions.c:1642
msgid ""
"If @{d} is omitted or negative then it defaults to zero. If it is not an "
"integer then it is truncated to an integer."
msgstr ""
"If @{d} is omitted or negative then it defaults to zero. If it is not an "
"integer then it is truncated to an integer."

#: ../plugins/fn-math/functions.c:1676
msgid "EVEN:@{x} rounded away from 0 to the next even integer"
msgstr "EVEN:@{x} rounded away from 0 to the next even integer"

#: ../plugins/fn-math/functions.c:1711
msgid "ODD:@{x} rounded away from 0 to the next odd integer"
msgstr "ODD:@{x} rounded away from 0 to the next odd integer"

#: ../plugins/fn-math/functions.c:1746
msgid "FACTDOUBLE:double factorial"
msgstr "FACTDOUBLE:double factorial"

#: ../plugins/fn-math/functions.c:1747
msgid "x:non-negative integer"
msgstr "x:non-negative integer"

#: ../plugins/fn-math/functions.c:1748
msgid "FACTDOUBLE function returns the double factorial @{x}!!"
msgstr "FACTDOUBLE function returns the double factorial @{x}!!"

#: ../plugins/fn-math/functions.c:1749
msgid ""
"If @{x} is not an integer, it is truncated. If @{x} is negative, FACTDOUBLE "
"returns #NUM!"
msgstr ""
"If @{x} is not an integer, it is truncated. If @{x} is negative, FACTDOUBLE "
"returns #NUM!"

#: ../plugins/fn-math/functions.c:1783
msgid "FIB:Fibonacci numbers"
msgstr "FIB:Fibonacci numbers"

#: ../plugins/fn-math/functions.c:1784 ../plugins/fn-numtheory/numtheory.c:219
#: ../plugins/fn-numtheory/numtheory.c:253
#: ../plugins/fn-numtheory/numtheory.c:294
#: ../plugins/fn-numtheory/numtheory.c:326
#: ../plugins/fn-numtheory/numtheory.c:386
#: ../plugins/fn-numtheory/numtheory.c:442
#: ../plugins/fn-numtheory/numtheory.c:473
msgid "n:positive integer"
msgstr "n:positive integer"

#: ../plugins/fn-math/functions.c:1785
msgid "FIB(@{n}) is the @{n}th Fibonacci number."
msgstr "FIB(@{n}) is the @{n}th Fibonacci number."

#: ../plugins/fn-math/functions.c:1786
msgid ""
"If @{n} is not an integer, it is truncated. If it is negative or zero FIB "
"returns #NUM!"
msgstr ""
"If @{n} is not an integer, it is truncated. If it is negative or zero FIB "
"returns #NUM!"

#: ../plugins/fn-math/functions.c:1824
msgid "QUOTIENT:integer portion of a division"
msgstr "QUOTIENT:integer portion of a division"

#: ../plugins/fn-math/functions.c:1825
msgid "numerator:integer"
msgstr "numerator:integer"

#: ../plugins/fn-math/functions.c:1826
msgid "denominator:non-zero integer"
msgstr "denominator:non-zero integer"

#: ../plugins/fn-math/functions.c:1827
msgid ""
"QUOTIENT yields the integer portion of the division @{numerator}/@"
"{denominator}.\n"
"QUOTIENT (@{numerator},@{denominator})⨉@{denominator}+MOD(@{numerator},@"
"{denominator})=@{numerator}"
msgstr ""
"QUOTIENT yields the integer portion of the division @{numerator}/@"
"{denominator}.\n"
"QUOTIENT (@{numerator},@{denominator})⨉@{denominator}+MOD(@{numerator},@"
"{denominator})=@{numerator}"

#: ../plugins/fn-math/functions.c:1851
msgid "SIGN:sign of @{x}"
msgstr "SIGN:sign of @{x}"

#: ../plugins/fn-math/functions.c:1853
msgid ""
"SIGN returns 1 if the @{x} is positive and it returns -1 if @{x} is negative."
msgstr ""
"SIGN returns 1 if the @{x} is positive and it returns -1 if @{x} is negative."

#: ../plugins/fn-math/functions.c:1878
msgid "SQRTPI:the square root of @{x} times 𝜋"
msgstr "SQRTPI:the square root of @{x} times 𝜋"

#: ../plugins/fn-math/functions.c:1901
msgid "ROUNDDOWN:@{x} rounded towards 0"
msgstr "ROUNDDOWN:@{x} rounded towards 0"

#: ../plugins/fn-math/functions.c:1903 ../plugins/fn-math/functions.c:1927
#: ../plugins/fn-math/functions.c:1968
msgid "d:integer, defaults to 0"
msgstr "d:integer, defaults to 0"

#: ../plugins/fn-math/functions.c:1904
msgid ""
"If @{d} is greater than zero, @{x} is rounded toward 0 to the given number "
"of digits.\n"
"If @{d} is zero, @{x} is rounded toward 0 to the next integer.\n"
"If @{d} is less than zero, @{x} is rounded toward 0 to the left of the "
"decimal point"
msgstr ""
"If @{d} is greater than zero, @{x} is rounded toward 0 to the given number "
"of digits.\n"
"If @{d} is zero, @{x} is rounded toward 0 to the next integer.\n"
"If @{d} is less than zero, @{x} is rounded toward 0 to the left of the "
"decimal point"

#: ../plugins/fn-math/functions.c:1925
msgid "ROUND:rounded @{x}"
msgstr "ROUND:rounded @{x}"

#: ../plugins/fn-math/functions.c:1928
msgid ""
"If @{d} is greater than zero, @{x} is rounded to the given number of "
"digits.\n"
"If @{d} is zero, @{x} is rounded to the next integer.\n"
"If @{d} is less than zero, @{x} is rounded to the left of the decimal point"
msgstr ""
"If @{d} is greater than zero, @{x} is rounded to the given number of "
"digits.\n"
"If @{d} is zero, @{x} is rounded to the next integer.\n"
"If @{d} is less than zero, @{x} is rounded to the left of the decimal point"

#: ../plugins/fn-math/functions.c:1966
msgid "ROUNDUP:@{x} rounded away from 0"
msgstr "ROUNDUP:@{x} rounded away from 0"

#: ../plugins/fn-math/functions.c:1969
msgid ""
"If @{d} is greater than zero, @{x} is rounded away from 0 to the given "
"number of digits.\n"
"If @{d} is zero, @{x} is rounded away from 0 to the next integer.\n"
"If @{d} is less than zero, @{x} is rounded away from 0 to the left of the "
"decimal point"
msgstr ""
"If @{d} is greater than zero, @{x} is rounded away from 0 to the given "
"number of digits.\n"
"If @{d} is zero, @{x} is rounded away from 0 to the next integer.\n"
"If @{d} is less than zero, @{x} is rounded away from 0 to the left of the "
"decimal point"

#: ../plugins/fn-math/functions.c:2013
msgid "MROUND:@{x} rounded to a multiple of @{m}"
msgstr "MROUND:@{x} rounded to a multiple of @{m}"

#: ../plugins/fn-math/functions.c:2015
msgid "m:number"
msgstr "m:number"

#: ../plugins/fn-math/functions.c:2016
msgid "If @{x} and @{m} have different sign, MROUND returns #NUM!"
msgstr "If @{x} and @{m} have different sign, MROUND returns #NUM!"

#: ../plugins/fn-math/functions.c:2059
msgid "ARABIC:the Roman numeral @{roman} as number"
msgstr "ARABIC:the Roman numeral @{roman} as number"

#: ../plugins/fn-math/functions.c:2060
msgid "roman:Roman numeral"
msgstr "roman:Roman numeral"

#: ../plugins/fn-math/functions.c:2061
msgid ""
"Any Roman symbol to the left of a larger symbol (directly or indirectly) "
"reduces the final value by the symbol amount, otherwise, it increases the "
"final amount by the symbol's amount."
msgstr ""
"Any Roman symbol to the left of a larger symbol (directly or indirectly) "
"reduces the final value by the symbol amount, otherwise, it increases the "
"final amount by the symbol's amount."

#: ../plugins/fn-math/functions.c:2137
msgid "ROMAN:@{n} as a roman numeral text"
msgstr "ROMAN:@{n} as a roman numeral text"

#: ../plugins/fn-math/functions.c:2139
msgid "type:0,1,2,3,or 4, defaults to 0"
msgstr "type:0,1,2,3,or 4, defaults to 0"

#: ../plugins/fn-math/functions.c:2140
msgid ""
"ROMAN returns the arabic number @{n} as a roman numeral text.\n"
"If @{type} is 0 or it is omitted, ROMAN returns classic roman numbers.\n"
"Type 1 is more concise than classic type, type 2 is more concise than type "
"1, and type 3 is more concise than type 2. Type 4 is a simplified type."
msgstr ""
"ROMAN returns the arabic number @{n} as a roman numeral text.\n"
"If @{type} is 0 or it is omitted, ROMAN returns classic roman numbers.\n"
"Type 1 is more concise than classic type, type 2 is more concise than type "
"1, and type 3 is more concise than type 2. Type 4 is a simplified type."

#: ../plugins/fn-math/functions.c:2387
msgid "SUMX2MY2:sum of the difference of squares"
msgstr "SUMX2MY2:sum of the difference of squares"

#: ../plugins/fn-math/functions.c:2388 ../plugins/fn-math/functions.c:2430
#: ../plugins/fn-math/functions.c:2473
msgid "array0:first cell area"
msgstr "array0:first cell area"

#: ../plugins/fn-math/functions.c:2389 ../plugins/fn-math/functions.c:2431
#: ../plugins/fn-math/functions.c:2474
msgid "array1:second cell area"
msgstr "array1:second cell area"

#: ../plugins/fn-math/functions.c:2390
msgid ""
"SUMX2MY2 function returns the sum of the difference of squares of "
"corresponding values in two arrays. The equation of SUMX2MY2 is SUM(x^2-y^2)."
msgstr ""
"SUMX2MY2 function returns the sum of the difference of squares of "
"corresponding values in two arrays. The equation of SUMX2MY2 is SUM(x^2-y^2)."

#: ../plugins/fn-math/functions.c:2429
msgid "SUMX2PY2:sum of the sum of squares"
msgstr "SUMX2PY2:sum of the sum of squares"

#: ../plugins/fn-math/functions.c:2432
msgid ""
"SUMX2PY2 function returns the sum of the sum of squares of corresponding "
"values in two arrays. The equation of SUMX2PY2 is SUM(x^2+y^2)."
msgstr ""
"SUMX2PY2 function returns the sum of the sum of squares of corresponding "
"values in two arrays. The equation of SUMX2PY2 is SUM(x^2+y^2)."

#: ../plugins/fn-math/functions.c:2434
msgid ""
"If @{array0} and @{array1} have different number of data points, SUMX2PY2 "
"returns #N/A.\n"
"Strings and empty cells are simply ignored."
msgstr ""
"If @{array0} and @{array1} have different number of data points, SUMX2PY2 "
"returns #N/A.\n"
"Strings and empty cells are simply ignored."

#: ../plugins/fn-math/functions.c:2472
msgid "SUMXMY2:sum of the squares of differences"
msgstr "SUMXMY2:sum of the squares of differences"

#: ../plugins/fn-math/functions.c:2475
msgid ""
"SUMXMY2 function returns the sum of the squares of the differences of "
"corresponding values in two arrays. The equation of SUMXMY2 is SUM((x-y)^2)."
msgstr ""
"SUMXMY2 function returns the sum of the squares of the differences of "
"corresponding values in two arrays. The equation of SUMXMY2 is SUM((x-y)^2)."

#: ../plugins/fn-math/functions.c:2477
msgid ""
"If @{array0} and @{array1} have different number of data points, SUMXMY2 "
"returns #N/A.\n"
"Strings and empty cells are simply ignored."
msgstr ""
"If @{array0} and @{array1} have different number of data points, SUMXMY2 "
"returns #N/A.\n"
"Strings and empty cells are simply ignored."

#: ../plugins/fn-math/functions.c:2517
msgid "SERIESSUM:sum of a power series at @{x}"
msgstr "SERIESSUM:sum of a power series at @{x}"

#: ../plugins/fn-math/functions.c:2518
msgid "x:number where to evaluate the power series"
msgstr "x:number where to evaluate the power series"

#: ../plugins/fn-math/functions.c:2519
msgid "n:non-negative integer, exponent of the lowest term of the series"
msgstr "n:non-negative integer, exponent of the lowest term of the series"

#: ../plugins/fn-math/functions.c:2520
msgid "m:increment to each exponent"
msgstr "m:increment to each exponent"

#: ../plugins/fn-math/functions.c:2521
msgid "coeff:coefficients of the power series"
msgstr "coeff:coefficients of the power series"

#: ../plugins/fn-math/functions.c:2575
msgid "MINVERSE:the inverse matrix of @{matrix}"
msgstr "MINVERSE:the inverse matrix of @{matrix}"

#: ../plugins/fn-math/functions.c:2576 ../plugins/fn-math/functions.c:2901
msgid "matrix:a square matrix"
msgstr "matrix:a square matrix"

#: ../plugins/fn-math/functions.c:2577
msgid "If @{matrix} is not invertible, MINVERSE returns #NUM!"
msgstr "If @{matrix} is not invertible, MINVERSE returns #NUM!"

#: ../plugins/fn-math/functions.c:2578
msgid ""
"If @{matrix} does not contain an equal number of columns and rows, MINVERSE "
"returns #VALUE!"
msgstr ""
"If @{matrix} does not contain an equal number of columns and rows, MINVERSE "
"returns #VALUE!"

#: ../plugins/fn-math/functions.c:2709
msgid ""
"CHOLESKY:the Cholesky decomposition of the symmetric positive-definite @"
"{matrix}"
msgstr ""
"CHOLESKY:the Cholesky decomposition of the symmetric positive-definite @"
"{matrix}"

#: ../plugins/fn-math/functions.c:2710
msgid "matrix:a symmetric positive definite matrix"
msgstr "matrix:a symmetric positive definite matrix"

#: ../plugins/fn-math/functions.c:2711
msgid ""
"If the Cholesky-Banachiewicz algorithm applied to @{matrix} fails, Cholesky "
"returns #NUM!"
msgstr ""
"If the Cholesky-Banachiewicz algorithm applied to @{matrix} fails, Cholesky "
"returns #NUM!"

#: ../plugins/fn-math/functions.c:2712
msgid ""
"If @{matrix} does not contain an equal number of columns and rows, CHOLESKY "
"returns #VALUE!"
msgstr ""
"If @{matrix} does not contain an equal number of columns and rows, CHOLESKY "
"returns #VALUE!"

#: ../plugins/fn-math/functions.c:2796
msgid "MUNIT:the @{n} by @{n} identity matrix"
msgstr "MUNIT:the @{n} by @{n} identity matrix"

#: ../plugins/fn-math/functions.c:2797
msgid "n:size of the matrix"
msgstr "n:size of the matrix"

#: ../plugins/fn-math/functions.c:2833
msgid "MMULT:the matrix product of @{mat1} and @{mat2}"
msgstr "MMULT:the matrix product of @{mat1} and @{mat2}"

#: ../plugins/fn-math/functions.c:2834
msgid "mat1:a matrix"
msgstr "mat1:a matrix"

#: ../plugins/fn-math/functions.c:2835
msgid "mat2:a matrix"
msgstr "mat2:a matrix"

#: ../plugins/fn-math/functions.c:2900
msgid "MDETERM:the determinant of the matrix @{matrix}"
msgstr "MDETERM:the determinant of the matrix @{matrix}"

#: ../plugins/fn-math/functions.c:2936
msgid "SUMPRODUCT:multiplies components and adds the results"
msgstr "SUMPRODUCT:multiplies components and adds the results"

#: ../plugins/fn-math/functions.c:2938 ../plugins/fn-math/functions.c:2961
msgid ""
"Multiplies corresponding data entries in the given arrays or ranges, and "
"then returns the sum of those products."
msgstr ""
"Multiplies corresponding data entries in the given arrays or ranges, and "
"then returns the sum of those products."

#: ../plugins/fn-math/functions.c:2941
msgid "If an entry is not numeric, the value zero is used instead."
msgstr "If an entry is not numeric, the value zero is used instead."

#: ../plugins/fn-math/functions.c:2942 ../plugins/fn-math/functions.c:2965
msgid ""
"If arrays or range arguments do not have the same dimensions, return #VALUE! "
"error."
msgstr ""
"If arrays or range arguments do not have the same dimensions, return #VALUE! "
"error."

#: ../plugins/fn-math/functions.c:2944
msgid ""
"This function ignores logicals, so using SUMPRODUCT(A1:A5>0) will not work.  "
"Instead use SUMPRODUCT(--(A1:A5>0))"
msgstr ""
"This function ignores logicals, so using SUMPRODUCT(A1:A5>0) will not work.  "
"Instead use SUMPRODUCT(--(A1:A5>0))"

#: ../plugins/fn-math/functions.c:2953
msgid ""
"This function is not OpenFormula compatible. Use ODF.SUMPRODUCT instead."
msgstr ""
"This function is not OpenFormula compatible. Use ODF.SUMPRODUCT instead."

#: ../plugins/fn-math/functions.c:2959
msgid "ODF.SUMPRODUCT:multiplies components and adds the results"
msgstr "ODF.SUMPRODUCT:multiplies components and adds the results"

#: ../plugins/fn-math/functions.c:2964
msgid "If an entry is not numeric or logical, the value zero is used instead."
msgstr "If an entry is not numeric or logical, the value zero is used instead."

#: ../plugins/fn-math/functions.c:2967
msgid "This function differs from SUMPRODUCT by considering booleans."
msgstr "This function differs from SUMPRODUCT by considering booleans."

#: ../plugins/fn-math/functions.c:2968
msgid "This function is not Excel compatible. Use SUMPRODUCT instead."
msgstr "This function is not Excel compatible. Use SUMPRODUCT instead."

#: ../plugins/fn-math/functions.c:3103
msgid "EIGEN:eigenvalues and eigenvectors of the symmetric @{matrix}"
msgstr "EIGEN:eigenvalues and eigenvectors of the symmetric @{matrix}"

#: ../plugins/fn-math/functions.c:3104
msgid "matrix:a symmetric matrix"
msgstr "matrix:a symmetric matrix"

#: ../plugins/fn-math/functions.c:3105
msgid "If @{matrix} is not symmetric, EIGEN returns #NUM!"
msgstr "If @{matrix} is not symmetric, EIGEN returns #NUM!"

#: ../plugins/fn-math/functions.c:3106
msgid ""
"If @{matrix} does not contain an equal number of columns and rows, EIGEN "
"returns #VALUE!"
msgstr ""
"If @{matrix} does not contain an equal number of columns and rows, EIGEN "
"returns #VALUE!"

#: ../plugins/fn-numtheory/numtheory.c:218
msgid "NT_PHI:Euler's totient function"
msgstr "NT_PHI:Euler's totient function"

#: ../plugins/fn-numtheory/numtheory.c:220
msgid ""
"Euler's totient function gives the number of integers less than or equal to @"
"{n} that are relatively prime (coprime) to @{n}."
msgstr ""
"Euler's totient function gives the number of integers less than or equal to @"
"{n} that are relatively prime (coprime) to @{n}."

#: ../plugins/fn-numtheory/numtheory.c:223
msgid "wiki:en:Euler's_totient_function"
msgstr "wiki:en:Euler's_totient_function"

#: ../plugins/fn-numtheory/numtheory.c:252
msgid "NT_MU:Möbius mu function"
msgstr "NT_MU:Möbius mu function"

#: ../plugins/fn-numtheory/numtheory.c:255
msgid ""
"NT_MU function (Möbius mu function) returns 0  if @{n} is divisible by the "
"square of a prime. Otherwise, if @{n} has an odd  number of different prime "
"factors, NT_MU returns -1, and if @{n} has an even number of different prime "
"factors, it returns 1. If @{n} = 1, NT_MU returns 1."
msgstr ""
"NT_MU function (Möbius mu function) returns 0  if @{n} is divisible by the "
"square of a prime. Otherwise, if @{n} has an odd  number of different prime "
"factors, NT_MU returns -1, and if @{n} has an even number of different prime "
"factors, it returns 1. If @{n} = 1, NT_MU returns 1."

#: ../plugins/fn-numtheory/numtheory.c:262
msgid "wiki:en:Möbius_function"
msgstr "wiki:en:Möbius_function"

#: ../plugins/fn-numtheory/numtheory.c:263
msgid "wolfram:MoebiusFunction.html"
msgstr "wolfram:MoebiusFunction.html"

#: ../plugins/fn-numtheory/numtheory.c:293
msgid "NT_D:number of divisors"
msgstr "NT_D:number of divisors"

#: ../plugins/fn-numtheory/numtheory.c:295
msgid "NT_D calculates the number of divisors of @{n}."
msgstr "NT_D calculates the number of divisors of @{n}."

#: ../plugins/fn-numtheory/numtheory.c:325
msgid "NT_SIGMA:sigma function"
msgstr "NT_SIGMA:sigma function"

#: ../plugins/fn-numtheory/numtheory.c:327
msgid "NT_SIGMA calculates the sum of the divisors of @{n}."
msgstr "NT_SIGMA calculates the sum of the divisors of @{n}."

#: ../plugins/fn-numtheory/numtheory.c:330
msgid "wiki:en:Divisor_function"
msgstr "wiki:en:Divisor_function"

#: ../plugins/fn-numtheory/numtheory.c:359
msgid "ITHPRIME:@{i}th prime"
msgstr "ITHPRIME:@{i}th prime"

#: ../plugins/fn-numtheory/numtheory.c:360
msgid "i:positive integer"
msgstr "i:positive integer"

#: ../plugins/fn-numtheory/numtheory.c:361
msgid "ITHPRIME finds the @{i}th prime."
msgstr "ITHPRIME finds the @{i}th prime."

#: ../plugins/fn-numtheory/numtheory.c:385
msgid "ISPRIME:whether @{n} is prime"
msgstr "ISPRIME:whether @{n} is prime"

#: ../plugins/fn-numtheory/numtheory.c:387
msgid "ISPRIME returns TRUE if @{n} is prime and FALSE otherwise."
msgstr "ISPRIME returns TRUE if @{n} is prime and FALSE otherwise."

#: ../plugins/fn-numtheory/numtheory.c:390
msgid "wolfram:PrimeNumber.html"
msgstr "wolfram:PrimeNumber.html"

#: ../plugins/fn-numtheory/numtheory.c:441
msgid "PFACTOR:smallest prime factor"
msgstr "PFACTOR:smallest prime factor"

#: ../plugins/fn-numtheory/numtheory.c:443
msgid "PFACTOR finds the smallest prime factor of its argument."
msgstr "PFACTOR finds the smallest prime factor of its argument."

#: ../plugins/fn-numtheory/numtheory.c:444
msgid ""
"The argument @{n} must be at least 2. Otherwise a #VALUE! error is returned."
msgstr ""
"The argument @{n} must be at least 2. Otherwise a #VALUE! error is returned."

#: ../plugins/fn-numtheory/numtheory.c:472
msgid "NT_PI:number of primes upto @{n}"
msgstr "NT_PI:number of primes upto @{n}"

#: ../plugins/fn-numtheory/numtheory.c:474
msgid "NT_PI returns the number of primes less than or equal to @{n}."
msgstr "NT_PI returns the number of primes less than or equal to @{n}."

#: ../plugins/fn-numtheory/numtheory.c:477
msgid "wolfram:PrimeCountingFunction.html"
msgstr "wolfram:PrimeCountingFunction.html"

#: ../plugins/fn-numtheory/numtheory.c:503
msgid "BITOR:bitwise or"
msgstr "BITOR:bitwise or"

#: ../plugins/fn-numtheory/numtheory.c:504
#: ../plugins/fn-numtheory/numtheory.c:528
#: ../plugins/fn-numtheory/numtheory.c:552
#: ../plugins/fn-numtheory/numtheory.c:577
#: ../plugins/fn-numtheory/numtheory.c:607
msgid "a:non-negative integer"
msgstr "a:non-negative integer"

#: ../plugins/fn-numtheory/numtheory.c:505
#: ../plugins/fn-numtheory/numtheory.c:529
#: ../plugins/fn-numtheory/numtheory.c:553
msgid "b:non-negative integer"
msgstr "b:non-negative integer"

#: ../plugins/fn-numtheory/numtheory.c:506
msgid ""
"BITOR returns the bitwise or of the binary representations of its arguments."
msgstr ""
"BITOR returns the bitwise or of the binary representations of its arguments."

#: ../plugins/fn-numtheory/numtheory.c:527
msgid "BITXOR:bitwise exclusive or"
msgstr "BITXOR:bitwise exclusive or"

#: ../plugins/fn-numtheory/numtheory.c:530
msgid ""
"BITXOR returns the bitwise exclusive or of the binary representations of its "
"arguments."
msgstr ""
"BITXOR returns the bitwise exclusive or of the binary representations of its "
"arguments."

#: ../plugins/fn-numtheory/numtheory.c:551
msgid "BITAND:bitwise and"
msgstr "BITAND:bitwise and"

#: ../plugins/fn-numtheory/numtheory.c:554
msgid ""
"BITAND returns the bitwise and of the binary representations of its "
"arguments."
msgstr ""
"BITAND returns the bitwise and of the binary representations of its "
"arguments."

#: ../plugins/fn-numtheory/numtheory.c:576
msgid "BITLSHIFT:bit-shift to the left"
msgstr "BITLSHIFT:bit-shift to the left"

#: ../plugins/fn-numtheory/numtheory.c:579
msgid ""
"BITLSHIFT returns the binary representations of @{a} shifted @{n} positions "
"to the left."
msgstr ""
"BITLSHIFT returns the binary representations of @{a} shifted @{n} positions "
"to the left."

#: ../plugins/fn-numtheory/numtheory.c:580
msgid ""
"If @{n} is negative, BITLSHIFT shifts the bits to the right by ABS(@{n}) "
"positions."
msgstr ""
"If @{n} is negative, BITLSHIFT shifts the bits to the right by ABS(@{n}) "
"positions."

#: ../plugins/fn-numtheory/numtheory.c:606
msgid "BITRSHIFT:bit-shift to the right"
msgstr "BITRSHIFT:bit-shift to the right"

#: ../plugins/fn-numtheory/numtheory.c:609
msgid ""
"BITRSHIFT returns the binary representations of @{a} shifted @{n} positions "
"to the right."
msgstr ""
"BITRSHIFT returns the binary representations of @{a} shifted @{n} positions "
"to the right."

#: ../plugins/fn-numtheory/numtheory.c:610
msgid ""
"If @{n} is negative, BITRSHIFT shifts the bits to the left by ABS(@{n}) "
"positions."
msgstr ""
"If @{n} is negative, BITRSHIFT shifts the bits to the left by ABS(@{n}) "
"positions."

#: ../plugins/fn-r/functions.c:19
msgid "R.DNORM:probability density function of the normal distribution"
msgstr "R.DNORM:probability density function of the normal distribution"

#: ../plugins/fn-r/functions.c:20 ../plugins/fn-r/functions.c:45
#: ../plugins/fn-r/functions.c:99 ../plugins/fn-r/functions.c:124
#: ../plugins/fn-r/functions.c:151 ../plugins/fn-r/functions.c:178
#: ../plugins/fn-r/functions.c:203 ../plugins/fn-r/functions.c:257
#: ../plugins/fn-r/functions.c:282 ../plugins/fn-r/functions.c:336
#: ../plugins/fn-r/functions.c:359 ../plugins/fn-r/functions.c:409
#: ../plugins/fn-r/functions.c:434 ../plugins/fn-r/functions.c:461
#: ../plugins/fn-r/functions.c:488 ../plugins/fn-r/functions.c:512
#: ../plugins/fn-r/functions.c:564 ../plugins/fn-r/functions.c:589
#: ../plugins/fn-r/functions.c:643 ../plugins/fn-r/functions.c:666
#: ../plugins/fn-r/functions.c:716 ../plugins/fn-r/functions.c:739
#: ../plugins/fn-r/functions.c:789 ../plugins/fn-r/functions.c:814
#: ../plugins/fn-r/functions.c:841 ../plugins/fn-r/functions.c:868
#: ../plugins/fn-r/functions.c:893 ../plugins/fn-r/functions.c:947
#: ../plugins/fn-r/functions.c:974 ../plugins/fn-r/functions.c:1032
#: ../plugins/fn-r/functions.c:1055 ../plugins/fn-r/functions.c:1105
#: ../plugins/fn-r/functions.c:1130 ../plugins/fn-r/functions.c:1184
#: ../plugins/fn-r/functions.c:1211 ../plugins/fn-r/functions.c:1240
msgid "x:observation"
msgstr "x:observation"

#: ../plugins/fn-r/functions.c:21 ../plugins/fn-r/functions.c:46
#: ../plugins/fn-r/functions.c:73
msgid "mu:mean of the distribution"
msgstr "mu:mean of the distribution"

#: ../plugins/fn-r/functions.c:22 ../plugins/fn-r/functions.c:47
#: ../plugins/fn-r/functions.c:74
msgid "sigma:standard deviation of the distribution"
msgstr "sigma:standard deviation of the distribution"

#: ../plugins/fn-r/functions.c:23 ../plugins/fn-r/functions.c:102
#: ../plugins/fn-r/functions.c:181 ../plugins/fn-r/functions.c:260
#: ../plugins/fn-r/functions.c:338 ../plugins/fn-r/functions.c:412
#: ../plugins/fn-r/functions.c:490 ../plugins/fn-r/functions.c:567
#: ../plugins/fn-r/functions.c:645 ../plugins/fn-r/functions.c:718
#: ../plugins/fn-r/functions.c:792 ../plugins/fn-r/functions.c:871
#: ../plugins/fn-r/functions.c:951 ../plugins/fn-r/functions.c:1034
#: ../plugins/fn-r/functions.c:1108 ../plugins/fn-r/functions.c:1188
#: ../plugins/fn-r/functions.c:1243
msgid "give_log:if true, log of the result will be returned instead"
msgstr "give_log:if true, log of the result will be returned instead"

#: ../plugins/fn-r/functions.c:24
msgid ""
"This function returns the probability density function of the normal "
"distribution."
msgstr ""
"This function returns the probability density function of the normal "
"distribution."

#: ../plugins/fn-r/functions.c:44
msgid "R.PNORM:cumulative distribution function of the normal distribution"
msgstr "R.PNORM:cumulative distribution function of the normal distribution"

#: ../plugins/fn-r/functions.c:48 ../plugins/fn-r/functions.c:75
#: ../plugins/fn-r/functions.c:127 ../plugins/fn-r/functions.c:154
#: ../plugins/fn-r/functions.c:206 ../plugins/fn-r/functions.c:233
#: ../plugins/fn-r/functions.c:285 ../plugins/fn-r/functions.c:312
#: ../plugins/fn-r/functions.c:361 ../plugins/fn-r/functions.c:386
#: ../plugins/fn-r/functions.c:437 ../plugins/fn-r/functions.c:464
#: ../plugins/fn-r/functions.c:514 ../plugins/fn-r/functions.c:540
#: ../plugins/fn-r/functions.c:592 ../plugins/fn-r/functions.c:619
#: ../plugins/fn-r/functions.c:668 ../plugins/fn-r/functions.c:693
#: ../plugins/fn-r/functions.c:741 ../plugins/fn-r/functions.c:766
#: ../plugins/fn-r/functions.c:817 ../plugins/fn-r/functions.c:844
#: ../plugins/fn-r/functions.c:896 ../plugins/fn-r/functions.c:923
#: ../plugins/fn-r/functions.c:978 ../plugins/fn-r/functions.c:1007
#: ../plugins/fn-r/functions.c:1057 ../plugins/fn-r/functions.c:1082
#: ../plugins/fn-r/functions.c:1133 ../plugins/fn-r/functions.c:1160
#: ../plugins/fn-r/functions.c:1215
msgid ""
"lower_tail:if true (the default), the lower tail of the distribution is "
"considered"
msgstr ""
"lower_tail:if true (the default), the lower tail of the distribution is "
"considered"

#: ../plugins/fn-r/functions.c:49 ../plugins/fn-r/functions.c:76
#: ../plugins/fn-r/functions.c:128 ../plugins/fn-r/functions.c:155
#: ../plugins/fn-r/functions.c:207 ../plugins/fn-r/functions.c:234
#: ../plugins/fn-r/functions.c:286 ../plugins/fn-r/functions.c:313
#: ../plugins/fn-r/functions.c:362 ../plugins/fn-r/functions.c:387
#: ../plugins/fn-r/functions.c:438 ../plugins/fn-r/functions.c:465
#: ../plugins/fn-r/functions.c:515 ../plugins/fn-r/functions.c:541
#: ../plugins/fn-r/functions.c:593 ../plugins/fn-r/functions.c:620
#: ../plugins/fn-r/functions.c:669 ../plugins/fn-r/functions.c:694
#: ../plugins/fn-r/functions.c:742 ../plugins/fn-r/functions.c:767
#: ../plugins/fn-r/functions.c:818 ../plugins/fn-r/functions.c:845
#: ../plugins/fn-r/functions.c:897 ../plugins/fn-r/functions.c:924
#: ../plugins/fn-r/functions.c:979 ../plugins/fn-r/functions.c:1008
#: ../plugins/fn-r/functions.c:1058 ../plugins/fn-r/functions.c:1083
#: ../plugins/fn-r/functions.c:1134 ../plugins/fn-r/functions.c:1161
#: ../plugins/fn-r/functions.c:1216
msgid "log_p:if true, log of the probability is used"
msgstr "log_p:if true, log of the probability is used"

#: ../plugins/fn-r/functions.c:50
msgid ""
"This function returns the cumulative distribution function of the normal "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the normal "
"distribution."

#: ../plugins/fn-r/functions.c:71
msgid "R.QNORM:probability quantile function of the normal distribution"
msgstr "R.QNORM:probability quantile function of the normal distribution"

#: ../plugins/fn-r/functions.c:72 ../plugins/fn-r/functions.c:230
#: ../plugins/fn-r/functions.c:309 ../plugins/fn-r/functions.c:384
#: ../plugins/fn-r/functions.c:538 ../plugins/fn-r/functions.c:616
#: ../plugins/fn-r/functions.c:691 ../plugins/fn-r/functions.c:764
#: ../plugins/fn-r/functions.c:920 ../plugins/fn-r/functions.c:1003
#: ../plugins/fn-r/functions.c:1080 ../plugins/fn-r/functions.c:1157
#: ../plugins/fn-random/functions.c:630 ../plugins/fn-stat/functions.c:522
#: ../plugins/fn-stat/functions.c:975 ../plugins/fn-stat/functions.c:1033
#: ../plugins/fn-stat/functions.c:1184 ../plugins/fn-stat/functions.c:1271
#: ../plugins/fn-stat/functions.c:1472 ../plugins/fn-stat/functions.c:1817
msgid "p:probability"
msgstr "p:probability"

#: ../plugins/fn-r/functions.c:77
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the normal distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the normal distribution."

#: ../plugins/fn-r/functions.c:98
msgid "R.DLNORM:probability density function of the log-normal distribution"
msgstr "R.DLNORM:probability density function of the log-normal distribution"

#: ../plugins/fn-r/functions.c:100 ../plugins/fn-r/functions.c:125
#: ../plugins/fn-r/functions.c:152
msgid "logmean:mean of the underlying normal distribution"
msgstr "logmean:mean of the underlying normal distribution"

#: ../plugins/fn-r/functions.c:101 ../plugins/fn-r/functions.c:126
#: ../plugins/fn-r/functions.c:153
msgid "logsd:standard deviation of the underlying normal distribution"
msgstr "logsd:standard deviation of the underlying normal distribution"

#: ../plugins/fn-r/functions.c:103
msgid ""
"This function returns the probability density function of the log-normal "
"distribution."
msgstr ""
"This function returns the probability density function of the log-normal "
"distribution."

#: ../plugins/fn-r/functions.c:123
msgid ""
"R.PLNORM:cumulative distribution function of the log-normal distribution"
msgstr ""
"R.PLNORM:cumulative distribution function of the log-normal distribution"

#: ../plugins/fn-r/functions.c:129
msgid ""
"This function returns the cumulative distribution function of the log-normal "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the log-normal "
"distribution."

#: ../plugins/fn-r/functions.c:150
msgid "R.QLNORM:probability quantile function of the log-normal distribution"
msgstr "R.QLNORM:probability quantile function of the log-normal distribution"

#: ../plugins/fn-r/functions.c:156
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the log-normal distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the log-normal distribution."

#: ../plugins/fn-r/functions.c:177
msgid "R.DGAMMA:probability density function of the gamma distribution"
msgstr "R.DGAMMA:probability density function of the gamma distribution"

#: ../plugins/fn-r/functions.c:179 ../plugins/fn-r/functions.c:204
#: ../plugins/fn-r/functions.c:231 ../plugins/fn-r/functions.c:565
#: ../plugins/fn-r/functions.c:590 ../plugins/fn-r/functions.c:617
#: ../plugins/fn-r/functions.c:1185 ../plugins/fn-r/functions.c:1212
#: ../plugins/fn-r/functions.c:1242
msgid "shape:the shape parameter of the distribution"
msgstr "shape:the shape parameter of the distribution"

#: ../plugins/fn-r/functions.c:180 ../plugins/fn-r/functions.c:205
#: ../plugins/fn-r/functions.c:232 ../plugins/fn-r/functions.c:566
#: ../plugins/fn-r/functions.c:591 ../plugins/fn-r/functions.c:618
#: ../plugins/fn-r/functions.c:717 ../plugins/fn-r/functions.c:740
#: ../plugins/fn-r/functions.c:765 ../plugins/fn-r/functions.c:1107
#: ../plugins/fn-r/functions.c:1132 ../plugins/fn-r/functions.c:1159
#: ../plugins/fn-r/functions.c:1187 ../plugins/fn-r/functions.c:1214
msgid "scale:the scale parameter of the distribution"
msgstr "scale:the scale parameter of the distribution"

#: ../plugins/fn-r/functions.c:182
msgid ""
"This function returns the probability density function of the gamma "
"distribution."
msgstr ""
"This function returns the probability density function of the gamma "
"distribution."

#: ../plugins/fn-r/functions.c:202
msgid "R.PGAMMA:cumulative distribution function of the gamma distribution"
msgstr "R.PGAMMA:cumulative distribution function of the gamma distribution"

#: ../plugins/fn-r/functions.c:208
msgid ""
"This function returns the cumulative distribution function of the gamma "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the gamma "
"distribution."

#: ../plugins/fn-r/functions.c:229
msgid "R.QGAMMA:probability quantile function of the gamma distribution"
msgstr "R.QGAMMA:probability quantile function of the gamma distribution"

#: ../plugins/fn-r/functions.c:235
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the gamma distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the gamma distribution."

#: ../plugins/fn-r/functions.c:256
msgid "R.DBETA:probability density function of the beta distribution"
msgstr "R.DBETA:probability density function of the beta distribution"

#: ../plugins/fn-r/functions.c:258 ../plugins/fn-r/functions.c:283
#: ../plugins/fn-r/functions.c:310
msgid "a:the first shape parameter of the distribution"
msgstr "a:the first shape parameter of the distribution"

#: ../plugins/fn-r/functions.c:259 ../plugins/fn-r/functions.c:284
#: ../plugins/fn-r/functions.c:311
msgid "b:the second scale parameter of the distribution"
msgstr "b:the second scale parameter of the distribution"

#: ../plugins/fn-r/functions.c:261
msgid ""
"This function returns the probability density function of the beta "
"distribution."
msgstr ""
"This function returns the probability density function of the beta "
"distribution."

#: ../plugins/fn-r/functions.c:281
msgid "R.PBETA:cumulative distribution function of the beta distribution"
msgstr "R.PBETA:cumulative distribution function of the beta distribution"

#: ../plugins/fn-r/functions.c:287
msgid ""
"This function returns the cumulative distribution function of the beta "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the beta "
"distribution."

#: ../plugins/fn-r/functions.c:308
msgid "R.QBETA:probability quantile function of the beta distribution"
msgstr "R.QBETA:probability quantile function of the beta distribution"

#: ../plugins/fn-r/functions.c:314
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the beta distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the beta distribution."

#: ../plugins/fn-r/functions.c:335
msgid "R.DT:probability density function of the Student t distribution"
msgstr "R.DT:probability density function of the Student t distribution"

#: ../plugins/fn-r/functions.c:337 ../plugins/fn-r/functions.c:360
#: ../plugins/fn-r/functions.c:385 ../plugins/fn-r/functions.c:1241
msgid "n:the number of degrees of freedom of the distribution"
msgstr "n:the number of degrees of freedom of the distribution"

#: ../plugins/fn-r/functions.c:339
msgid ""
"This function returns the probability density function of the Student t "
"distribution."
msgstr ""
"This function returns the probability density function of the Student t "
"distribution."

#: ../plugins/fn-r/functions.c:358
msgid "R.PT:cumulative distribution function of the Student t distribution"
msgstr "R.PT:cumulative distribution function of the Student t distribution"

#: ../plugins/fn-r/functions.c:363
msgid ""
"This function returns the cumulative distribution function of the Student t "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the Student t "
"distribution."

#: ../plugins/fn-r/functions.c:383
msgid "R.QT:probability quantile function of the Student t distribution"
msgstr "R.QT:probability quantile function of the Student t distribution"

#: ../plugins/fn-r/functions.c:388
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Student t distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Student t distribution."

#: ../plugins/fn-r/functions.c:408
msgid "R.DF:probability density function of the F distribution"
msgstr "R.DF:probability density function of the F distribution"

#: ../plugins/fn-r/functions.c:410 ../plugins/fn-r/functions.c:435
#: ../plugins/fn-r/functions.c:462
msgid "n1:the first number of degrees of freedom of the distribution"
msgstr "n1:the first number of degrees of freedom of the distribution"

#: ../plugins/fn-r/functions.c:411 ../plugins/fn-r/functions.c:436
#: ../plugins/fn-r/functions.c:463
msgid "n2:the second number of degrees of freedom of the distribution"
msgstr "n2:the second number of degrees of freedom of the distribution"

#: ../plugins/fn-r/functions.c:413
msgid ""
"This function returns the probability density function of the F distribution."
msgstr ""
"This function returns the probability density function of the F distribution."

#: ../plugins/fn-r/functions.c:433
msgid "R.PF:cumulative distribution function of the F distribution"
msgstr "R.PF:cumulative distribution function of the F distribution"

#: ../plugins/fn-r/functions.c:439
msgid ""
"This function returns the cumulative distribution function of the F "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the F "
"distribution."

#: ../plugins/fn-r/functions.c:460
msgid "R.QF:probability quantile function of the F distribution"
msgstr "R.QF:probability quantile function of the F distribution"

#: ../plugins/fn-r/functions.c:466
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the F distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the F distribution."

#: ../plugins/fn-r/functions.c:487
msgid "R.DCHISQ:probability density function of the chi-square distribution"
msgstr "R.DCHISQ:probability density function of the chi-square distribution"

#: ../plugins/fn-r/functions.c:489 ../plugins/fn-r/functions.c:513
#: ../plugins/fn-r/functions.c:539
msgid "df:the number of degrees of freedom of the distribution"
msgstr "df:the number of degrees of freedom of the distribution"

#: ../plugins/fn-r/functions.c:491
msgid ""
"This function returns the probability density function of the chi-square "
"distribution."
msgstr ""
"This function returns the probability density function of the chi-square "
"distribution."

#: ../plugins/fn-r/functions.c:492
msgid ""
"A two argument invocation R.DCHISQ(@{x},@{df}) is exported to OpenFormula as "
"CHISQDIST(@{x},@{df},FALSE())."
msgstr ""
"A two argument invocation R.DCHISQ(@{x},@{df}) is exported to OpenFormula as "
"CHISQDIST(@{x},@{df},FALSE())."

#: ../plugins/fn-r/functions.c:511
msgid ""
"R.PCHISQ:cumulative distribution function of the chi-square distribution"
msgstr ""
"R.PCHISQ:cumulative distribution function of the chi-square distribution"

#: ../plugins/fn-r/functions.c:516
msgid ""
"This function returns the cumulative distribution function of the chi-square "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the chi-square "
"distribution."

#: ../plugins/fn-r/functions.c:517
msgid ""
"A two argument invocation R.PCHISQ(@{x},@{df}) is exported to OpenFormula as "
"CHISQDIST(@{x},@{df})."
msgstr ""
"A two argument invocation R.PCHISQ(@{x},@{df}) is exported to OpenFormula as "
"CHISQDIST(@{x},@{df})."

#: ../plugins/fn-r/functions.c:537
msgid "R.QCHISQ:probability quantile function of the chi-square distribution"
msgstr "R.QCHISQ:probability quantile function of the chi-square distribution"

#: ../plugins/fn-r/functions.c:542
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the chi-square distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the chi-square distribution."

#: ../plugins/fn-r/functions.c:543
msgid ""
"A two argument invocation R.QCHISQ(@{p},@{df}) is exported to OpenFormula as "
"CHISQINV(@{p},@{df})."
msgstr ""
"A two argument invocation R.QCHISQ(@{p},@{df}) is exported to OpenFormula as "
"CHISQINV(@{p},@{df})."

#: ../plugins/fn-r/functions.c:563
msgid "R.DWEIBULL:probability density function of the Weibull distribution"
msgstr "R.DWEIBULL:probability density function of the Weibull distribution"

#: ../plugins/fn-r/functions.c:568
msgid ""
"This function returns the probability density function of the Weibull "
"distribution."
msgstr ""
"This function returns the probability density function of the Weibull "
"distribution."

#: ../plugins/fn-r/functions.c:588
msgid "R.PWEIBULL:cumulative distribution function of the Weibull distribution"
msgstr ""
"R.PWEIBULL:cumulative distribution function of the Weibull distribution"

#: ../plugins/fn-r/functions.c:594
msgid ""
"This function returns the cumulative distribution function of the Weibull "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the Weibull "
"distribution."

#: ../plugins/fn-r/functions.c:615
msgid "R.QWEIBULL:probability quantile function of the Weibull distribution"
msgstr "R.QWEIBULL:probability quantile function of the Weibull distribution"

#: ../plugins/fn-r/functions.c:621
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Weibull distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Weibull distribution."

#: ../plugins/fn-r/functions.c:642
msgid "R.DPOIS:probability density function of the Poisson distribution"
msgstr "R.DPOIS:probability density function of the Poisson distribution"

#: ../plugins/fn-r/functions.c:644 ../plugins/fn-r/functions.c:667
#: ../plugins/fn-r/functions.c:692
msgid "lambda:the mean of the distribution"
msgstr "lambda:the mean of the distribution"

#: ../plugins/fn-r/functions.c:646
msgid ""
"This function returns the probability density function of the Poisson "
"distribution."
msgstr ""
"This function returns the probability density function of the Poisson "
"distribution."

#: ../plugins/fn-r/functions.c:665
msgid "R.PPOIS:cumulative distribution function of the Poisson distribution"
msgstr "R.PPOIS:cumulative distribution function of the Poisson distribution"

#: ../plugins/fn-r/functions.c:670
msgid ""
"This function returns the cumulative distribution function of the Poisson "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the Poisson "
"distribution."

#: ../plugins/fn-r/functions.c:690
msgid "R.QPOIS:probability quantile function of the Poisson distribution"
msgstr "R.QPOIS:probability quantile function of the Poisson distribution"

#: ../plugins/fn-r/functions.c:695
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Poisson distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Poisson distribution."

#: ../plugins/fn-r/functions.c:715
msgid "R.DEXP:probability density function of the exponential distribution"
msgstr "R.DEXP:probability density function of the exponential distribution"

#: ../plugins/fn-r/functions.c:719
msgid ""
"This function returns the probability density function of the exponential "
"distribution."
msgstr ""
"This function returns the probability density function of the exponential "
"distribution."

#: ../plugins/fn-r/functions.c:738
msgid "R.PEXP:cumulative distribution function of the exponential distribution"
msgstr ""
"R.PEXP:cumulative distribution function of the exponential distribution"

#: ../plugins/fn-r/functions.c:743
msgid ""
"This function returns the cumulative distribution function of the "
"exponential distribution."
msgstr ""
"This function returns the cumulative distribution function of the "
"exponential distribution."

#: ../plugins/fn-r/functions.c:763
msgid "R.QEXP:probability quantile function of the exponential distribution"
msgstr "R.QEXP:probability quantile function of the exponential distribution"

#: ../plugins/fn-r/functions.c:768
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the exponential distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the exponential distribution."

#: ../plugins/fn-r/functions.c:788
msgid "R.DBINOM:probability density function of the binomial distribution"
msgstr "R.DBINOM:probability density function of the binomial distribution"

#: ../plugins/fn-r/functions.c:790 ../plugins/fn-r/functions.c:815
#: ../plugins/fn-r/functions.c:842 ../plugins/fn-r/functions.c:869
#: ../plugins/fn-r/functions.c:894 ../plugins/fn-r/functions.c:921
msgid "n:the number of trials"
msgstr "n:the number of trials"

#: ../plugins/fn-r/functions.c:791 ../plugins/fn-r/functions.c:816
#: ../plugins/fn-r/functions.c:843 ../plugins/fn-r/functions.c:870
#: ../plugins/fn-r/functions.c:895 ../plugins/fn-r/functions.c:922
#: ../plugins/fn-r/functions.c:1033 ../plugins/fn-r/functions.c:1056
#: ../plugins/fn-r/functions.c:1081
msgid "psuc:the probability of success in each trial"
msgstr "psuc:the probability of success in each trial"

#: ../plugins/fn-r/functions.c:793
msgid ""
"This function returns the probability density function of the binomial "
"distribution."
msgstr ""
"This function returns the probability density function of the binomial "
"distribution."

#: ../plugins/fn-r/functions.c:813
msgid "R.PBINOM:cumulative distribution function of the binomial distribution"
msgstr "R.PBINOM:cumulative distribution function of the binomial distribution"

#: ../plugins/fn-r/functions.c:819
msgid ""
"This function returns the cumulative distribution function of the binomial "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the binomial "
"distribution."

#: ../plugins/fn-r/functions.c:840
msgid "R.QBINOM:probability quantile function of the binomial distribution"
msgstr "R.QBINOM:probability quantile function of the binomial distribution"

#: ../plugins/fn-r/functions.c:846
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the binomial distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the binomial distribution."

#: ../plugins/fn-r/functions.c:867
msgid ""
"R.DNBINOM:probability density function of the negative binomial distribution"
msgstr ""
"R.DNBINOM:probability density function of the negative binomial distribution"

#: ../plugins/fn-r/functions.c:872
msgid ""
"This function returns the probability density function of the negative "
"binomial distribution."
msgstr ""
"This function returns the probability density function of the negative "
"binomial distribution."

#: ../plugins/fn-r/functions.c:892
msgid ""
"R.PNBINOM:cumulative distribution function of the negative binomial "
"distribution"
msgstr ""
"R.PNBINOM:cumulative distribution function of the negative binomial "
"distribution"

#: ../plugins/fn-r/functions.c:898
msgid ""
"This function returns the cumulative distribution function of the negative "
"binomial distribution."
msgstr ""
"This function returns the cumulative distribution function of the negative "
"binomial distribution."

#: ../plugins/fn-r/functions.c:919
msgid ""
"R.QNBINOM:probability quantile function of the negative binomial distribution"
msgstr ""
"R.QNBINOM:probability quantile function of the negative binomial distribution"

#: ../plugins/fn-r/functions.c:925
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the negative binomial "
"distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the negative binomial "
"distribution."

#: ../plugins/fn-r/functions.c:946
msgid ""
"R.DHYPER:probability density function of the hypergeometric distribution"
msgstr ""
"R.DHYPER:probability density function of the hypergeometric distribution"

#: ../plugins/fn-r/functions.c:948 ../plugins/fn-r/functions.c:975
#: ../plugins/fn-r/functions.c:1004
msgid "r:the number of red balls"
msgstr "r:the number of red balls"

#: ../plugins/fn-r/functions.c:949 ../plugins/fn-r/functions.c:976
#: ../plugins/fn-r/functions.c:1005
msgid "b:the number of black balls"
msgstr "b:the number of black balls"

#: ../plugins/fn-r/functions.c:950 ../plugins/fn-r/functions.c:977
#: ../plugins/fn-r/functions.c:1006
msgid "n:the number of balls drawn"
msgstr "n:the number of balls drawn"

#: ../plugins/fn-r/functions.c:952
msgid ""
"This function returns the probability density function of the hypergeometric "
"distribution."
msgstr ""
"This function returns the probability density function of the hypergeometric "
"distribution."

#: ../plugins/fn-r/functions.c:973
msgid ""
"R.PHYPER:cumulative distribution function of the hypergeometric distribution"
msgstr ""
"R.PHYPER:cumulative distribution function of the hypergeometric distribution"

#: ../plugins/fn-r/functions.c:980
msgid ""
"This function returns the cumulative distribution function of the "
"hypergeometric distribution."
msgstr ""
"This function returns the cumulative distribution function of the "
"hypergeometric distribution."

#: ../plugins/fn-r/functions.c:1002
msgid ""
"R.QHYPER:probability quantile function of the hypergeometric distribution"
msgstr ""
"R.QHYPER:probability quantile function of the hypergeometric distribution"

#: ../plugins/fn-r/functions.c:1009
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the hypergeometric distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the hypergeometric distribution."

#: ../plugins/fn-r/functions.c:1031
msgid "R.DGEOM:probability density function of the geometric distribution"
msgstr "R.DGEOM:probability density function of the geometric distribution"

#: ../plugins/fn-r/functions.c:1035
msgid ""
"This function returns the probability density function of the geometric "
"distribution."
msgstr ""
"This function returns the probability density function of the geometric "
"distribution."

#: ../plugins/fn-r/functions.c:1054
msgid "R.PGEOM:cumulative distribution function of the geometric distribution"
msgstr "R.PGEOM:cumulative distribution function of the geometric distribution"

#: ../plugins/fn-r/functions.c:1059
msgid ""
"This function returns the cumulative distribution function of the geometric "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the geometric "
"distribution."

#: ../plugins/fn-r/functions.c:1079
msgid "R.QGEOM:probability quantile function of the geometric distribution"
msgstr "R.QGEOM:probability quantile function of the geometric distribution"

#: ../plugins/fn-r/functions.c:1084
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the geometric distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the geometric distribution."

#: ../plugins/fn-r/functions.c:1104
msgid "R.DCAUCHY:probability density function of the Cauchy distribution"
msgstr "R.DCAUCHY:probability density function of the Cauchy distribution"

#: ../plugins/fn-r/functions.c:1106 ../plugins/fn-r/functions.c:1131
#: ../plugins/fn-r/functions.c:1158
msgid "location:the center of the distribution"
msgstr "location:the center of the distribution"

#: ../plugins/fn-r/functions.c:1109
msgid ""
"This function returns the probability density function of the Cauchy "
"distribution."
msgstr ""
"This function returns the probability density function of the Cauchy "
"distribution."

#: ../plugins/fn-r/functions.c:1129
msgid "R.PCAUCHY:cumulative distribution function of the Cauchy distribution"
msgstr "R.PCAUCHY:cumulative distribution function of the Cauchy distribution"

#: ../plugins/fn-r/functions.c:1135
msgid ""
"This function returns the cumulative distribution function of the Cauchy "
"distribution."
msgstr ""
"This function returns the cumulative distribution function of the Cauchy "
"distribution."

#: ../plugins/fn-r/functions.c:1156
msgid "R.QCAUCHY:probability quantile function of the Cauchy distribution"
msgstr "R.QCAUCHY:probability quantile function of the Cauchy distribution"

#: ../plugins/fn-r/functions.c:1162
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Cauchy distribution."
msgstr ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Cauchy distribution."

#: ../plugins/fn-r/functions.c:1183
msgid "R.DSNORM:probability density function of the skew-normal distribution"
msgstr "R.DSNORM:probability density function of the skew-normal distribution"

#: ../plugins/fn-r/functions.c:1186 ../plugins/fn-r/functions.c:1213
msgid "location:the location parameter of the distribution"
msgstr "location:the location parameter of the distribution"

#: ../plugins/fn-r/functions.c:1189
msgid ""
"This function returns the probability density function of the skew-normal "
"distribution."
msgstr ""
"This function returns the probability density function of the skew-normal "
"distribution."

#: ../plugins/fn-r/functions.c:1210
msgid ""
"R.PSNORM:cumulative distribution function of the skew-normal distribution"
msgstr ""
"R.PSNORM:cumulative distribution function of the skew-normal distribution"

#: ../plugins/fn-r/functions.c:1217
msgid ""
"This function returns the cumulative distribution function of the skew-"
"normal distribution."
msgstr ""
"This function returns the cumulative distribution function of the skew-"
"normal distribution."

#: ../plugins/fn-r/functions.c:1239
msgid "R.DST:probability density function of the skew-t distribution"
msgstr "R.DST:probability density function of the skew-t distribution"

#: ../plugins/fn-r/functions.c:1244
msgid ""
"This function returns the probability density function of the skew-t "
"distribution."
msgstr ""
"This function returns the probability density function of the skew-t "
"distribution."

#: ../plugins/fn-random/functions.c:47
msgid "RAND:a random number between zero and one"
msgstr "RAND:a random number between zero and one"

#: ../plugins/fn-random/functions.c:64
msgid ""
"RANDUNIFORM:random variate from the uniform distribution from @{a} to @{b}"
msgstr ""
"RANDUNIFORM:random variate from the uniform distribution from @{a} to @{b}"

#: ../plugins/fn-random/functions.c:65
msgid "a:lower limit of the uniform distribution"
msgstr "a:lower limit of the uniform distribution"

#: ../plugins/fn-random/functions.c:66
msgid "b:upper limit of the uniform distribution"
msgstr "b:upper limit of the uniform distribution"

#: ../plugins/fn-random/functions.c:67
msgid "If @{a} > @{b} RANDUNIFORM returns #NUM!"
msgstr "If @{a} > @{b} RANDUNIFORM returns #NUM!"

#: ../plugins/fn-random/functions.c:89
msgid "RANDDISCRETE:random variate from a finite discrete distribution"
msgstr "RANDDISCRETE:random variate from a finite discrete distribution"

#: ../plugins/fn-random/functions.c:90
msgid "val_range:possible values of the random variable"
msgstr "val_range:possible values of the random variable"

#: ../plugins/fn-random/functions.c:91
msgid ""
"prob_range:probabilities of the corresponding values in @{val_range}, "
"defaults to equal probabilities"
msgstr ""
"prob_range:probabilities of the corresponding values in @{val_range}, "
"defaults to equal probabilities"

#: ../plugins/fn-random/functions.c:93
msgid ""
"RANDDISCRETE returns one of the values in the @{val_range}. The "
"probabilities for each value are given in the @{prob_range}."
msgstr ""
"RANDDISCRETE returns one of the values in the @{val_range}. The "
"probabilities for each value are given in the @{prob_range}."

#: ../plugins/fn-random/functions.c:95
msgid ""
"If the sum of all values in @{prob_range} is not one, RANDDISCRETE returns "
"#NUM!"
msgstr ""
"If the sum of all values in @{prob_range} is not one, RANDDISCRETE returns "
"#NUM!"

#: ../plugins/fn-random/functions.c:96
msgid ""
"If @{val_range} and @{prob_range} are not the same size, RANDDISCRETE "
"returns #NUM!"
msgstr ""
"If @{val_range} and @{prob_range} are not the same size, RANDDISCRETE "
"returns #NUM!"

#: ../plugins/fn-random/functions.c:97
msgid ""
"If @{val_range} or @{prob_range} is not a range, RANDDISCRETE returns #VALUE!"
msgstr ""
"If @{val_range} or @{prob_range} is not a range, RANDDISCRETE returns #VALUE!"

#: ../plugins/fn-random/functions.c:175
msgid "RANDEXP:random variate from an exponential distribution"
msgstr "RANDEXP:random variate from an exponential distribution"

#: ../plugins/fn-random/functions.c:176
msgid "b:parameter of the exponential distribution"
msgstr "b:parameter of the exponential distribution"

#: ../plugins/fn-random/functions.c:194
msgid "RANDPOISSON:random variate from a Poisson distribution"
msgstr "RANDPOISSON:random variate from a Poisson distribution"

#: ../plugins/fn-random/functions.c:195
msgid "λ:parameter of the Poisson distribution"
msgstr "λ:parameter of the Poisson distribution"

#: ../plugins/fn-random/functions.c:196
msgid "If @{λ} < 0 RANDPOISSON returns #NUM!"
msgstr "If @{λ} < 0 RANDPOISSON returns #NUM!"

#: ../plugins/fn-random/functions.c:218
msgid "RANDBINOM:random variate from a binomial distribution"
msgstr "RANDBINOM:random variate from a binomial distribution"

#: ../plugins/fn-random/functions.c:219 ../plugins/fn-random/functions.c:276
#: ../plugins/fn-random/functions.c:582
msgid "p:probability of success in a single trial"
msgstr "p:probability of success in a single trial"

#: ../plugins/fn-random/functions.c:220
msgid "n:number of trials"
msgstr "n:number of trials"

#: ../plugins/fn-random/functions.c:221
msgid "If @{p} < 0 or @{p} > 1 RANDBINOM returns #NUM!"
msgstr "If @{p} < 0 or @{p} > 1 RANDBINOM returns #NUM!"

#: ../plugins/fn-random/functions.c:222
msgid "If @{n} < 0 RANDBINOM returns #NUM!"
msgstr "If @{n} < 0 RANDBINOM returns #NUM!"

#: ../plugins/fn-random/functions.c:244
msgid ""
"RANDBETWEEN:a random integer number between and including @{bottom} and @"
"{top}"
msgstr ""
"RANDBETWEEN:a random integer number between and including @{bottom} and @"
"{top}"

#: ../plugins/fn-random/functions.c:246
msgid "bottom:lower limit"
msgstr "bottom:lower limit"

#: ../plugins/fn-random/functions.c:247
msgid "top:upper limit"
msgstr "top:upper limit"

#: ../plugins/fn-random/functions.c:248
msgid "If @{bottom} > @{top}, RANDBETWEEN returns #NUM!"
msgstr "If @{bottom} > @{top}, RANDBETWEEN returns #NUM!"

#: ../plugins/fn-random/functions.c:275
msgid "RANDNEGBINOM:random variate from a negative binomial distribution"
msgstr "RANDNEGBINOM:random variate from a negative binomial distribution"

#: ../plugins/fn-random/functions.c:277
msgid "n:number of failures"
msgstr "n:number of failures"

#: ../plugins/fn-random/functions.c:278
msgid "If @{p} < 0 or @{p} > 1 RANDNEGBINOM returns #NUM!"
msgstr "If @{p} < 0 or @{p} > 1 RANDNEGBINOM returns #NUM!"

#: ../plugins/fn-random/functions.c:279
msgid "If @{n} < 1 RANDNEGBINOM returns #NUM!"
msgstr "If @{n} < 1 RANDNEGBINOM returns #NUM!"

#: ../plugins/fn-random/functions.c:300
msgid "RANDBERNOULLI:random variate from a Bernoulli distribution"
msgstr "RANDBERNOULLI:random variate from a Bernoulli distribution"

#: ../plugins/fn-random/functions.c:301 ../plugins/fn-stat/functions.c:907
msgid "p:probability of success"
msgstr "p:probability of success"

#: ../plugins/fn-random/functions.c:302
msgid "If @{p} < 0 or @{p} > 1 RANDBERNOULLI returns #NUM!"
msgstr "If @{p} < 0 or @{p} > 1 RANDBERNOULLI returns #NUM!"

#: ../plugins/fn-random/functions.c:324
msgid "RANDNORM:random variate from a normal distribution"
msgstr "RANDNORM:random variate from a normal distribution"

#: ../plugins/fn-random/functions.c:325
msgid "μ:mean of the distribution"
msgstr "μ:mean of the distribution"

#: ../plugins/fn-random/functions.c:326 ../plugins/fn-random/functions.c:374
msgid "σ:standard deviation of the distribution"
msgstr "σ:standard deviation of the distribution"

#: ../plugins/fn-random/functions.c:327
msgid "If @{σ} < 0, RANDNORM returns #NUM!"
msgstr "If @{σ} < 0, RANDNORM returns #NUM!"

#: ../plugins/fn-random/functions.c:349
msgid "RANDCAUCHY:random variate from a Cauchy or Lorentz distribution"
msgstr "RANDCAUCHY:random variate from a Cauchy or Lorentz distribution"

#: ../plugins/fn-random/functions.c:350
msgid "a:scale parameter of the distribution"
msgstr "a:scale parameter of the distribution"

#: ../plugins/fn-random/functions.c:351
msgid "If @{a} < 0 RANDCAUCHY returns #NUM!"
msgstr "If @{a} < 0 RANDCAUCHY returns #NUM!"

#: ../plugins/fn-random/functions.c:372
msgid "RANDLOGNORM:random variate from a lognormal distribution"
msgstr "RANDLOGNORM:random variate from a lognormal distribution"

#: ../plugins/fn-random/functions.c:373
msgid "ζ:parameter of the lognormal distribution"
msgstr "ζ:parameter of the lognormal distribution"

#: ../plugins/fn-random/functions.c:375
msgid "If @{σ} < 0, RANDLOGNORM returns #NUM!"
msgstr "If @{σ} < 0, RANDLOGNORM returns #NUM!"

#: ../plugins/fn-random/functions.c:394
msgid "RANDWEIBULL:random variate from a Weibull distribution"
msgstr "RANDWEIBULL:random variate from a Weibull distribution"

#: ../plugins/fn-random/functions.c:395
msgid "a:parameter of the Weibull distribution"
msgstr "a:parameter of the Weibull distribution"

#: ../plugins/fn-random/functions.c:396
msgid "b:parameter of the Weibull distribution"
msgstr "b:parameter of the Weibull distribution"

#: ../plugins/fn-random/functions.c:415
msgid "RANDLAPLACE:random variate from a Laplace distribution"
msgstr "RANDLAPLACE:random variate from a Laplace distribution"

#: ../plugins/fn-random/functions.c:416
msgid "a:parameter of the Laplace distribution"
msgstr "a:parameter of the Laplace distribution"

#: ../plugins/fn-random/functions.c:434
msgid "RANDRAYLEIGH:random variate from a Rayleigh distribution"
msgstr "RANDRAYLEIGH:random variate from a Rayleigh distribution"

#: ../plugins/fn-random/functions.c:435 ../plugins/fn-random/functions.c:455
msgid "σ:scale parameter of the Rayleigh distribution"
msgstr "σ:scale parameter of the Rayleigh distribution"

#: ../plugins/fn-random/functions.c:453
msgid ""
"RANDRAYLEIGHTAIL:random variate from the tail of a Rayleigh distribution"
msgstr ""
"RANDRAYLEIGHTAIL:random variate from the tail of a Rayleigh distribution"

#: ../plugins/fn-random/functions.c:454 ../plugins/fn-random/functions.c:793
msgid "a:lower limit of the tail"
msgstr "a:lower limit of the tail"

#: ../plugins/fn-random/functions.c:474
msgid "RANDGAMMA:random variate from a Gamma distribution"
msgstr "RANDGAMMA:random variate from a Gamma distribution"

#: ../plugins/fn-random/functions.c:475
msgid "a:parameter of the Gamma distribution"
msgstr "a:parameter of the Gamma distribution"

#: ../plugins/fn-random/functions.c:476
msgid "b:parameter of the Gamma distribution"
msgstr "b:parameter of the Gamma distribution"

#: ../plugins/fn-random/functions.c:477
msgid "If @{a} ≤ 0, RANDGAMMA returns #NUM!"
msgstr "If @{a} ≤ 0, RANDGAMMA returns #NUM!"

#: ../plugins/fn-random/functions.c:499
msgid "RANDPARETO:random variate from a Pareto distribution"
msgstr "RANDPARETO:random variate from a Pareto distribution"

#: ../plugins/fn-random/functions.c:500
msgid "a:parameter of the Pareto distribution"
msgstr "a:parameter of the Pareto distribution"

#: ../plugins/fn-random/functions.c:501
msgid "b:parameter of the Pareto distribution"
msgstr "b:parameter of the Pareto distribution"

#: ../plugins/fn-random/functions.c:520
msgid "RANDFDIST:random variate from an F distribution"
msgstr "RANDFDIST:random variate from an F distribution"

#: ../plugins/fn-random/functions.c:521
msgid "df1:numerator degrees of freedom"
msgstr "df1:numerator degrees of freedom"

#: ../plugins/fn-random/functions.c:522
msgid "df2:denominator degrees of freedom"
msgstr "df2:denominator degrees of freedom"

#: ../plugins/fn-random/functions.c:541
msgid "RANDBETA:random variate from a Beta distribution"
msgstr "RANDBETA:random variate from a Beta distribution"

#: ../plugins/fn-random/functions.c:542
msgid "a:parameter of the Beta distribution"
msgstr "a:parameter of the Beta distribution"

#: ../plugins/fn-random/functions.c:543
msgid "b:parameter of the Beta distribution"
msgstr "b:parameter of the Beta distribution"

#: ../plugins/fn-random/functions.c:562
msgid "RANDLOGISTIC:random variate from a logistic distribution"
msgstr "RANDLOGISTIC:random variate from a logistic distribution"

#: ../plugins/fn-random/functions.c:563
msgid "a:parameter of the logistic distribution"
msgstr "a:parameter of the logistic distribution"

#: ../plugins/fn-random/functions.c:581
msgid "RANDGEOM:random variate from a geometric distribution"
msgstr "RANDGEOM:random variate from a geometric distribution"

#: ../plugins/fn-random/functions.c:583
msgid "If @{p} < 0 or @{p} > 1 RANDGEOM returns #NUM!"
msgstr "If @{p} < 0 or @{p} > 1 RANDGEOM returns #NUM!"

#: ../plugins/fn-random/functions.c:604
msgid "RANDHYPERG:random variate from a hypergeometric distribution"
msgstr "RANDHYPERG:random variate from a hypergeometric distribution"

#: ../plugins/fn-random/functions.c:605
msgid "n1:number of objects of type 1"
msgstr "n1:number of objects of type 1"

#: ../plugins/fn-random/functions.c:606
msgid "n2:number of objects of type 2"
msgstr "n2:number of objects of type 2"

#: ../plugins/fn-random/functions.c:607
msgid "t:total number of objects selected"
msgstr "t:total number of objects selected"

#: ../plugins/fn-random/functions.c:629
msgid "RANDLOG:random variate from a logarithmic distribution"
msgstr "RANDLOG:random variate from a logarithmic distribution"

#: ../plugins/fn-random/functions.c:631
msgid "If @{p} < 0 or @{p} > 1 RANDLOG returns #NUM!"
msgstr "If @{p} < 0 or @{p} > 1 RANDLOG returns #NUM!"

#: ../plugins/fn-random/functions.c:652
msgid "RANDCHISQ:random variate from a Chi-square distribution"
msgstr "RANDCHISQ:random variate from a Chi-square distribution"

#: ../plugins/fn-random/functions.c:653 ../plugins/fn-random/functions.c:672
#: ../plugins/fn-random/functions.c:942
msgid "df:degrees of freedom"
msgstr "df:degrees of freedom"

#: ../plugins/fn-random/functions.c:671
msgid "RANDTDIST:random variate from a Student t distribution"
msgstr "RANDTDIST:random variate from a Student t distribution"

#: ../plugins/fn-random/functions.c:690
msgid "RANDGUMBEL:random variate from a Gumbel distribution"
msgstr "RANDGUMBEL:random variate from a Gumbel distribution"

#: ../plugins/fn-random/functions.c:691
msgid "a:parameter of the Gumbel distribution"
msgstr "a:parameter of the Gumbel distribution"

#: ../plugins/fn-random/functions.c:692
msgid "b:parameter of the Gumbel distribution"
msgstr "b:parameter of the Gumbel distribution"

#: ../plugins/fn-random/functions.c:693
msgid "type:type of the Gumbel distribution, defaults to 1"
msgstr "type:type of the Gumbel distribution, defaults to 1"

#: ../plugins/fn-random/functions.c:694
msgid "If @{type} is neither 1 nor 2, RANDGUMBEL returns #NUM!"
msgstr "If @{type} is neither 1 nor 2, RANDGUMBEL returns #NUM!"

#: ../plugins/fn-random/functions.c:719
msgid "RANDLEVY:random variate from a Lévy distribution"
msgstr "RANDLEVY:random variate from a Lévy distribution"

#: ../plugins/fn-random/functions.c:720
msgid "c:parameter of the Lévy distribution"
msgstr "c:parameter of the Lévy distribution"

#: ../plugins/fn-random/functions.c:721
msgid "α:parameter of the Lévy distribution"
msgstr "α:parameter of the Lévy distribution"

#: ../plugins/fn-random/functions.c:722
msgid "β:parameter of the Lévy distribution, defaults to 0"
msgstr "β:parameter of the Lévy distribution, defaults to 0"

#: ../plugins/fn-random/functions.c:723
msgid ""
"For @{α} = 1, @{β}=0, the Lévy distribution reduces to the Cauchy (or "
"Lorentzian) distribution."
msgstr ""
"For @{α} = 1, @{β}=0, the Lévy distribution reduces to the Cauchy (or "
"Lorentzian) distribution."

#: ../plugins/fn-random/functions.c:725
msgid ""
"For @{α} = 2, @{β}=0, the Lévy distribution reduces to the normal "
"distribution."
msgstr ""
"For @{α} = 2, @{β}=0, the Lévy distribution reduces to the normal "
"distribution."

#: ../plugins/fn-random/functions.c:727
msgid "If @{α} ≤ 0 or @{α} > 2, RANDLEVY returns #NUM!"
msgstr "If @{α} ≤ 0 or @{α} > 2, RANDLEVY returns #NUM!"

#: ../plugins/fn-random/functions.c:728
msgid "If @{β} < -1 or @{β} > 1, RANDLEVY returns #NUM!"
msgstr "If @{β} < -1 or @{β} > 1, RANDLEVY returns #NUM!"

#: ../plugins/fn-random/functions.c:751
msgid "RANDEXPPOW:random variate from an exponential power distribution"
msgstr "RANDEXPPOW:random variate from an exponential power distribution"

#: ../plugins/fn-random/functions.c:752
msgid "a:scale parameter of the exponential power distribution"
msgstr "a:scale parameter of the exponential power distribution"

#: ../plugins/fn-random/functions.c:753
msgid "b:exponent of the exponential power distribution"
msgstr "b:exponent of the exponential power distribution"

#: ../plugins/fn-random/functions.c:754
msgid ""
"For @{b} = 1 the exponential power distribution reduces to the Laplace "
"distribution."
msgstr ""
"For @{b} = 1 the exponential power distribution reduces to the Laplace "
"distribution."

#: ../plugins/fn-random/functions.c:756
msgid ""
"For @{b} = 2 the exponential power distribution reduces to the normal "
"distribution with σ = a/sqrt(2)"
msgstr ""
"For @{b} = 2 the exponential power distribution reduces to the normal "
"distribution with σ = a/sqrt(2)"

#: ../plugins/fn-random/functions.c:776
msgid "RANDLANDAU:random variate from the Landau distribution"
msgstr "RANDLANDAU:random variate from the Landau distribution"

#: ../plugins/fn-random/functions.c:792
msgid ""
"RANDNORMTAIL:random variate from the upper tail of a normal distribution "
"with mean 0"
msgstr ""
"RANDNORMTAIL:random variate from the upper tail of a normal distribution "
"with mean 0"

#: ../plugins/fn-random/functions.c:794
msgid "σ:standard deviation of the normal distribution"
msgstr "σ:standard deviation of the normal distribution"

#: ../plugins/fn-random/functions.c:795
msgid ""
"The method is based on Marsaglia's famous rectangle-wedge-tail algorithm "
"(Ann Math Stat 32, 894-899 (1961)), with this aspect explained in Knuth, v2, "
"3rd ed, p139, 586 (exercise 11)."
msgstr ""
"The method is based on Marsaglia's famous rectangle-wedge-tail algorithm "
"(Ann Math Stat 32, 894-899 (1961)), with this aspect explained in Knuth, v2, "
"3rd ed, p139, 586 (exercise 11)."

#: ../plugins/fn-random/functions.c:816
msgid ""
"SIMTABLE:one of the values in the given argument list depending on the round "
"number of the simulation tool"
msgstr ""
"SIMTABLE:one of the values in the given argument list depending on the round "
"number of the simulation tool"

#: ../plugins/fn-random/functions.c:818
msgid "d1:first value"
msgstr "d1:first value"

#: ../plugins/fn-random/functions.c:819
msgid "d2:second value"
msgstr "d2:second value"

#: ../plugins/fn-random/functions.c:820
msgid ""
"SIMTABLE returns one of the values in the given argument list depending on "
"the round number of the simulation tool. When the simulation tool is not "
"activated, SIMTABLE returns @{d1}.\n"
"With the simulation tool and the SIMTABLE function you can test given "
"decision variables. Each SIMTABLE function contains the possible values of a "
"simulation variable. In most valid simulation models you should have the "
"same number of values @{dN} for all decision variables.  If the simulation "
"is run more rounds than there are values defined, SIMTABLE returns #N/A! "
"error (e.g. if A1 contains `=SIMTABLE(1)' and A2 `=SIMTABLE(1,2)', A1 yields "
"#N/A! error on the second round).\n"
"The successive use of the simulation tool also requires that you give to the "
"tool at least one input variable having RAND() or any other "
"RAND<distribution name>() function in it. On each round, the simulation tool "
"iterates for the given number of rounds over all the input variables to "
"reevaluate them. On each iteration, the values of the output variables are "
"stored, and when the round is completed, descriptive statistical information "
"is created according to the values."
msgstr ""
"SIMTABLE returns one of the values in the given argument list depending on "
"the round number of the simulation tool. When the simulation tool is not "
"activated, SIMTABLE returns @{d1}.\n"
"With the simulation tool and the SIMTABLE function you can test given "
"decision variables. Each SIMTABLE function contains the possible values of a "
"simulation variable. In most valid simulation models you should have the "
"same number of values @{dN} for all decision variables.  If the simulation "
"is run more rounds than there are values defined, SIMTABLE returns #N/A! "
"error (e.g. if A1 contains `=SIMTABLE(1)' and A2 `=SIMTABLE(1,2)', A1 yields "
"#N/A! error on the second round).\n"
"The successive use of the simulation tool also requires that you give to the "
"tool at least one input variable having RAND() or any other "
"RAND<distribution name>() function in it. On each round, the simulation tool "
"iterates for the given number of rounds over all the input variables to "
"reevaluate them. On each iteration, the values of the output variables are "
"stored, and when the round is completed, descriptive statistical information "
"is created according to the values."

#: ../plugins/fn-random/functions.c:884
msgid "RANDSNORM:random variate from a skew-normal distribution"
msgstr "RANDSNORM:random variate from a skew-normal distribution"

#: ../plugins/fn-random/functions.c:885
msgid "𝛼:shape parameter of the skew-normal distribution, defaults to 0"
msgstr "𝛼:shape parameter of the skew-normal distribution, defaults to 0"

#: ../plugins/fn-random/functions.c:887
msgid "𝜉:location parameter of the skew-normal distribution, defaults to 0"
msgstr "𝜉:location parameter of the skew-normal distribution, defaults to 0"

#: ../plugins/fn-random/functions.c:889
msgid "𝜔:scale parameter of the skew-normal distribution, defaults to 1"
msgstr "𝜔:scale parameter of the skew-normal distribution, defaults to 1"

#: ../plugins/fn-random/functions.c:891
msgid ""
"The random variates are drawn from a skew-normal distribution with shape "
"parameter @{𝛼}. When @{𝛼}=0, the skewness vanishes, and we obtain the "
"standard normal density; as 𝛼 increases (in absolute value), the skewness of "
"the distribution increases; when @{𝛼} approaches infinity  the density "
"converges to the so-called half-normal (or folded normal) density function; "
"if the sign of @{𝛼} changes, the density is reflected on the opposite side "
"of the vertical axis."
msgstr ""
"The random variates are drawn from a skew-normal distribution with shape "
"parameter @{𝛼}. When @{𝛼}=0, the skewness vanishes, and we obtain the "
"standard normal density; as 𝛼 increases (in absolute value), the skewness of "
"the distribution increases; when @{𝛼} approaches infinity  the density "
"converges to the so-called half-normal (or folded normal) density function; "
"if the sign of @{𝛼} changes, the density is reflected on the opposite side "
"of the vertical axis."

#: ../plugins/fn-random/functions.c:901
msgid ""
"The mean of a skew-normal distribution with location parameter @{𝜉}=0 is not "
"0."
msgstr ""
"The mean of a skew-normal distribution with location parameter @{𝜉}=0 is not "
"0."

#: ../plugins/fn-random/functions.c:903
msgid ""
"The standard deviation of a skew-normal distribution with scale parameter @"
"{𝜔}=1 is not 1."
msgstr ""
"The standard deviation of a skew-normal distribution with scale parameter @"
"{𝜔}=1 is not 1."

#: ../plugins/fn-random/functions.c:905
msgid "The skewness of a skew-normal distribution is in general not @{𝛼}."
msgstr "The skewness of a skew-normal distribution is in general not @{𝛼}."

#: ../plugins/fn-random/functions.c:906
msgid "If @{𝜔} < 0, RANDSNORM returns #NUM!"
msgstr "If @{𝜔} < 0, RANDSNORM returns #NUM!"

#: ../plugins/fn-random/functions.c:941
msgid "RANDSTDIST:random variate from a skew-t distribution"
msgstr "RANDSTDIST:random variate from a skew-t distribution"

#: ../plugins/fn-random/functions.c:943
msgid "𝛼:shape parameter of the skew-t distribution, defaults to 0"
msgstr "𝛼:shape parameter of the skew-t distribution, defaults to 0"

#: ../plugins/fn-random/functions.c:944
msgid "The mean of a skew-t distribution is not 0."
msgstr "The mean of a skew-t distribution is not 0."

#: ../plugins/fn-random/functions.c:945
msgid "The standard deviation of a skew-t distribution is not 1."
msgstr "The standard deviation of a skew-t distribution is not 1."

#: ../plugins/fn-random/functions.c:946
msgid "The skewness of a skew-t distribution is in general not @{𝛼}."
msgstr "The skewness of a skew-t distribution is in general not @{𝛼}."

#: ../plugins/fn-stat/functions.c:45
msgid ""
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0). If the argument evaluates to TRUE, it is counted as one (1). "
"Note that empty cells are not counted."
msgstr ""
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0). If the argument evaluates to TRUE, it is counted as one (1). "
"Note that empty cells are not counted."

#: ../plugins/fn-stat/functions.c:50
msgid "VARP:variance of an entire population"
msgstr "VARP:variance of an entire population"

#: ../plugins/fn-stat/functions.c:51 ../plugins/fn-stat/functions.c:77
#: ../plugins/fn-stat/functions.c:107 ../plugins/fn-stat/functions.c:135
#: ../plugins/fn-stat/functions.c:2557 ../plugins/fn-stat/functions.c:2588
#: ../plugins/fn-stat/functions.c:2616 ../plugins/fn-stat/functions.c:2645
msgid "area1:first cell area"
msgstr "area1:first cell area"

#: ../plugins/fn-stat/functions.c:52 ../plugins/fn-stat/functions.c:78
#: ../plugins/fn-stat/functions.c:108 ../plugins/fn-stat/functions.c:136
#: ../plugins/fn-stat/functions.c:2558 ../plugins/fn-stat/functions.c:2589
#: ../plugins/fn-stat/functions.c:2617 ../plugins/fn-stat/functions.c:2646
msgid "area2:second cell area"
msgstr "area2:second cell area"

#: ../plugins/fn-stat/functions.c:53
msgid "VARP is also known as the N-variance."
msgstr "VARP is also known as the N-variance."

#: ../plugins/fn-stat/functions.c:54
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain number 11.4, 17.3, "
"21.3, 25.9, and 40.1."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain number 11.4, 17.3, "
"21.3, 25.9, and 40.1."

#: ../plugins/fn-stat/functions.c:55
msgid "Then VARP(A1:A5) equals 94.112"
msgstr "Then VARP(A1:A5) equals 94.112"

#: ../plugins/fn-stat/functions.c:57 ../plugins/fn-stat/functions.c:87
msgid "wiki:en:Variance"
msgstr "wiki:en:Variance"

#: ../plugins/fn-stat/functions.c:58 ../plugins/fn-stat/functions.c:88
msgid "wolfram:Variance.html"
msgstr "wolfram:Variance.html"

#: ../plugins/fn-stat/functions.c:76
msgid "VAR:sample variance of the given sample"
msgstr "VAR:sample variance of the given sample"

#: ../plugins/fn-stat/functions.c:79
msgid "VAR is also known as the N-1-variance."
msgstr "VAR is also known as the N-1-variance."

#: ../plugins/fn-stat/functions.c:80 ../plugins/fn-stat/functions.c:2562
msgid ""
"Since the N-1-variance includes Bessel's correction, whereas the N-variance "
"calculated by VARPA or VARP does not, under reasonable conditions the N-1-"
"variance is an unbiased estimator of the variance of the population from "
"which the sample is drawn."
msgstr ""
"Since the N-1-variance includes Bessel's correction, whereas the N-variance "
"calculated by VARPA or VARP does not, under reasonable conditions the N-1-"
"variance is an unbiased estimator of the variance of the population from "
"which the sample is drawn."

#: ../plugins/fn-stat/functions.c:84 ../plugins/fn-stat/functions.c:112
#: ../plugins/fn-stat/functions.c:139 ../plugins/fn-stat/functions.c:277
#: ../plugins/fn-stat/functions.c:603 ../plugins/fn-stat/functions.c:630
#: ../plugins/fn-stat/functions.c:656 ../plugins/fn-stat/functions.c:726
#: ../plugins/fn-stat/functions.c:752 ../plugins/fn-stat/functions.c:787
#: ../plugins/fn-stat/functions.c:827 ../plugins/fn-stat/functions.c:852
#: ../plugins/fn-stat/functions.c:1855 ../plugins/fn-stat/functions.c:1881
#: ../plugins/fn-stat/functions.c:1905 ../plugins/fn-stat/functions.c:1930
#: ../plugins/fn-stat/functions.c:2061 ../plugins/fn-stat/functions.c:2193
#: ../plugins/fn-stat/functions.c:2236 ../plugins/fn-stat/functions.c:2424
#: ../plugins/fn-stat/functions.c:2774 ../plugins/fn-stat/functions.c:2817
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1."

#: ../plugins/fn-stat/functions.c:85
msgid "Then VAR(A1:A5) equals 117.64."
msgstr "Then VAR(A1:A5) equals 117.64."

#: ../plugins/fn-stat/functions.c:106
msgid "STDEV:sample standard deviation of the given sample"
msgstr "STDEV:sample standard deviation of the given sample"

#: ../plugins/fn-stat/functions.c:109
msgid "STDEV is also known as the N-1-standard deviation."
msgstr "STDEV is also known as the N-1-standard deviation."

#: ../plugins/fn-stat/functions.c:110
msgid ""
"To obtain the population standard deviation of a whole population use STDEVP."
msgstr ""
"To obtain the population standard deviation of a whole population use STDEVP."

#: ../plugins/fn-stat/functions.c:113
msgid "Then STDEV(A1:A5) equals 10.84619749."
msgstr "Then STDEV(A1:A5) equals 10.84619749."

#: ../plugins/fn-stat/functions.c:115 ../plugins/fn-stat/functions.c:142
msgid "wiki:en:Standard_deviation"
msgstr "wiki:en:Standard_deviation"

#: ../plugins/fn-stat/functions.c:116 ../plugins/fn-stat/functions.c:143
msgid "wolfram:StandardDeviation.html"
msgstr "wolfram:StandardDeviation.html"

#: ../plugins/fn-stat/functions.c:134
msgid "STDEVP:population standard deviation of the given population"
msgstr "STDEVP:population standard deviation of the given population"

#: ../plugins/fn-stat/functions.c:137 ../plugins/fn-stat/functions.c:2647
msgid "This is also known as the N-standard deviation"
msgstr "This is also known as the N-standard deviation"

#: ../plugins/fn-stat/functions.c:140
msgid "Then STDEVP(A1:A5) equals 9.701133954."
msgstr "Then STDEVP(A1:A5) equals 9.701133954."

#: ../plugins/fn-stat/functions.c:161
msgid "RANK:rank of a number in a list of numbers"
msgstr "RANK:rank of a number in a list of numbers"

#: ../plugins/fn-stat/functions.c:162 ../plugins/fn-stat/functions.c:214
msgid "x:number whose rank you want to find"
msgstr "x:number whose rank you want to find"

#: ../plugins/fn-stat/functions.c:164 ../plugins/fn-stat/functions.c:216
msgid "order:0 (descending order) or non-zero (ascending order); defaults to 0"
msgstr ""
"order:0 (descending order) or non-zero (ascending order); defaults to 0"

#: ../plugins/fn-stat/functions.c:165
msgid "In case of a tie, RANK returns the largest possible rank."
msgstr "In case of a tie, RANK returns the largest possible rank."

#: ../plugins/fn-stat/functions.c:167
msgid ""
"Let us assume that the cells A1, A2, …, A5 contain numbers 11.4, 17.3, 21.3, "
"25.9, and 25.9."
msgstr ""
"Let us assume that the cells A1, A2, …, A5 contain numbers 11.4, 17.3, 21.3, "
"25.9, and 25.9."

#: ../plugins/fn-stat/functions.c:168
msgid "Then RANK(17.3,A1:A5) equals 4."
msgstr "Then RANK(17.3,A1:A5) equals 4."

#: ../plugins/fn-stat/functions.c:169
msgid "Then RANK(25.9,A1:A5) equals 1."
msgstr "Then RANK(25.9,A1:A5) equals 1."

#: ../plugins/fn-stat/functions.c:213
msgid "RANK.AVG:rank of a number in a list of numbers"
msgstr "RANK.AVG:rank of a number in a list of numbers"

#: ../plugins/fn-stat/functions.c:217
msgid "In case of a tie, RANK returns the average rank."
msgstr "In case of a tie, RANK returns the average rank."

#: ../plugins/fn-stat/functions.c:218
msgid "This function is Excel 2010 compatible."
msgstr "This function is Excel 2010 compatible."

#: ../plugins/fn-stat/functions.c:219
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 25.9."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 25.9."

#: ../plugins/fn-stat/functions.c:220
msgid "Then RANK.AVG(17.3,A1:A5) equals 4."
msgstr "Then RANK.AVG(17.3,A1:A5) equals 4."

#: ../plugins/fn-stat/functions.c:221
msgid "Then RANK.AVG(25.9,A1:A5) equals 1.5."
msgstr "Then RANK.AVG(25.9,A1:A5) equals 1.5."

#: ../plugins/fn-stat/functions.c:271
msgid "TRIMMEAN:mean of the interior of a data set"
msgstr "TRIMMEAN:mean of the interior of a data set"

#: ../plugins/fn-stat/functions.c:272
msgid "ref:list of numbers whose mean you want to calculate"
msgstr "ref:list of numbers whose mean you want to calculate"

#: ../plugins/fn-stat/functions.c:273
msgid "fraction:fraction of the data set excluded from the mean"
msgstr "fraction:fraction of the data set excluded from the mean"

#: ../plugins/fn-stat/functions.c:274
msgid ""
"If @{fraction}=0.2 and the data set contains 40 numbers, 8 numbers are "
"trimmed from the data set (40 x 0.2): the 4 largest and the 4 smallest. To "
"avoid a bias, the number of points to be excluded is always rounded down to "
"the nearest even number."
msgstr ""
"If @{fraction}=0.2 and the data set contains 40 numbers, 8 numbers are "
"trimmed from the data set (40 x 0.2): the 4 largest and the 4 smallest. To "
"avoid a bias, the number of points to be excluded is always rounded down to "
"the nearest even number."

#: ../plugins/fn-stat/functions.c:278
msgid ""
"Then TRIMMEAN(A1:A5,0.2) equals 23.2 and TRIMMEAN(A1:A5,0.4) equals 21.5."
msgstr ""
"Then TRIMMEAN(A1:A5,0.2) equals 23.2 and TRIMMEAN(A1:A5,0.4) equals 21.5."

#: ../plugins/fn-stat/functions.c:320
msgid "COVAR:covariance of two data sets"
msgstr "COVAR:covariance of two data sets"

#: ../plugins/fn-stat/functions.c:321 ../plugins/fn-stat/functions.c:351
#: ../plugins/fn-stat/functions.c:381
msgid "array1:first data set"
msgstr "array1:first data set"

#: ../plugins/fn-stat/functions.c:322 ../plugins/fn-stat/functions.c:352
msgid "array2:set data set"
msgstr "array2:set data set"

#: ../plugins/fn-stat/functions.c:323 ../plugins/fn-stat/functions.c:353
#: ../plugins/fn-stat/functions.c:383 ../plugins/fn-stat/functions.c:573
#: ../plugins/fn-stat/functions.c:821 ../plugins/fn-stat/functions.c:850
#: ../plugins/fn-stat/functions.c:1847 ../plugins/fn-stat/functions.c:1878
#: ../plugins/fn-stat/functions.c:1928 ../plugins/fn-stat/functions.c:2014
#: ../plugins/fn-stat/functions.c:2033 ../plugins/fn-stat/functions.c:2057
msgid "Strings and empty cells are simply ignored."
msgstr "Strings and empty cells are simply ignored."

#: ../plugins/fn-stat/functions.c:325 ../plugins/fn-stat/functions.c:355
#: ../plugins/fn-stat/functions.c:385 ../plugins/fn-stat/functions.c:2365
#: ../plugins/fn-stat/functions.c:2858 ../plugins/fn-stat/functions.c:2924
#: ../plugins/fn-stat/functions.c:3960 ../plugins/fn-stat/functions.c:4017
#: ../plugins/fn-stat/functions.c:4069
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7."

#: ../plugins/fn-stat/functions.c:328 ../plugins/fn-stat/functions.c:358
msgid "Then COVAR(A1:A5,B1:B5) equals 65.858."
msgstr "Then COVAR(A1:A5,B1:B5) equals 65.858."

#: ../plugins/fn-stat/functions.c:330 ../plugins/fn-stat/functions.c:360
msgid "wiki:en:Covariance"
msgstr "wiki:en:Covariance"

#: ../plugins/fn-stat/functions.c:331 ../plugins/fn-stat/functions.c:361
#: ../plugins/fn-stat/functions.c:391
msgid "wolfram:Covariance.html"
msgstr "wolfram:Covariance.html"

#: ../plugins/fn-stat/functions.c:350
msgid "COVARIANCE.S:sample covariance of two data sets"
msgstr "COVARIANCE.S:sample covariance of two data sets"

#: ../plugins/fn-stat/functions.c:380
msgid "CORREL:Pearson correlation coefficient of two data sets"
msgstr "CORREL:Pearson correlation coefficient of two data sets"

#: ../plugins/fn-stat/functions.c:382
msgid "array2:second data set"
msgstr "array2:second data set"

#: ../plugins/fn-stat/functions.c:388
msgid "Then CORREL(A1:A5,B1:B5) equals 0.996124788."
msgstr "Then CORREL(A1:A5,B1:B5) equals 0.996124788."

#: ../plugins/fn-stat/functions.c:390
msgid "wiki:en:CorrelationCoefficient.html"
msgstr "wiki:en:CorrelationCoefficient.html"

#: ../plugins/fn-stat/functions.c:410
msgid ""
"NEGBINOMDIST:probability mass function of the negative binomial distribution"
msgstr ""
"NEGBINOMDIST:probability mass function of the negative binomial distribution"

#: ../plugins/fn-stat/functions.c:411
msgid "f:number of failures"
msgstr "f:number of failures"

#: ../plugins/fn-stat/functions.c:412
msgid "t:threshold number of successes"
msgstr "t:threshold number of successes"

#: ../plugins/fn-stat/functions.c:413
msgid "p:probability of a success"
msgstr "p:probability of a success"

#: ../plugins/fn-stat/functions.c:414
msgid "If @{f} or @{t} is a non-integer it is truncated."
msgstr "If @{f} or @{t} is a non-integer it is truncated."

#: ../plugins/fn-stat/functions.c:415
msgid "If (@{f} + @{t} -1) <= 0 this function returns a #NUM! error."
msgstr "If (@{f} + @{t} -1) <= 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:416
msgid "If @{p} < 0 or @{p} > 1 this functions returns a #NUM! error."
msgstr "If @{p} < 0 or @{p} > 1 this functions returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:439
msgid ""
"NORMSDIST:cumulative density function of the standard normal distribution"
msgstr ""
"NORMSDIST:cumulative density function of the standard normal distribution"

#: ../plugins/fn-stat/functions.c:442
msgid "NORMSDIST is the OpenFormula function LEGACY.NORMSDIST."
msgstr "NORMSDIST is the OpenFormula function LEGACY.NORMSDIST."

#: ../plugins/fn-stat/functions.c:445 ../plugins/fn-stat/functions.c:470
msgid "wiki:en:Normal_distribution"
msgstr "wiki:en:Normal_distribution"

#: ../plugins/fn-stat/functions.c:446 ../plugins/fn-stat/functions.c:471
msgid "wolfram:NormalDistribution.html"
msgstr "wolfram:NormalDistribution.html"

#: ../plugins/fn-stat/functions.c:463
msgid ""
"NORMSINV:inverse of the cumulative density function of the standard normal "
"distribution"
msgstr ""
"NORMSINV:inverse of the cumulative density function of the standard normal "
"distribution"

#: ../plugins/fn-stat/functions.c:464
msgid "p:given probability"
msgstr "p:given probability"

#: ../plugins/fn-stat/functions.c:465
msgid "If @{p} < 0 or @{p} > 1 this function returns #NUM! error."
msgstr "If @{p} < 0 or @{p} > 1 this function returns #NUM! error."

#: ../plugins/fn-stat/functions.c:467
msgid "NORMSINV is the OpenFormula function LEGACY.NORMSINV."
msgstr "NORMSINV is the OpenFormula function LEGACY.NORMSINV."

#: ../plugins/fn-stat/functions.c:491
msgid ""
"LOGNORMDIST:cumulative distribution function of the lognormal distribution"
msgstr ""
"LOGNORMDIST:cumulative distribution function of the lognormal distribution"

#: ../plugins/fn-stat/functions.c:493 ../plugins/fn-stat/functions.c:523
msgid "mean:mean"
msgstr "mean:mean"

#: ../plugins/fn-stat/functions.c:494 ../plugins/fn-stat/functions.c:524
msgid "stddev:standard deviation"
msgstr "stddev:standard deviation"

#: ../plugins/fn-stat/functions.c:495
msgid "If @{stddev} = 0 LOGNORMDIST returns a #DIV/0! error."
msgstr "If @{stddev} = 0 LOGNORMDIST returns a #DIV/0! error."

#: ../plugins/fn-stat/functions.c:496
msgid ""
"If @{x} <= 0, @{mean} < 0 or @{stddev} <= 0 this function returns a #NUM! "
"error."
msgstr ""
"If @{x} <= 0, @{mean} < 0 or @{stddev} <= 0 this function returns a #NUM! "
"error."

#: ../plugins/fn-stat/functions.c:500 ../plugins/fn-stat/functions.c:529
msgid "wiki:en:Log-normal_distribution"
msgstr "wiki:en:Log-normal_distribution"

#: ../plugins/fn-stat/functions.c:501 ../plugins/fn-stat/functions.c:530
msgid "wolfram:LogNormalDistribution.html"
msgstr "wolfram:LogNormalDistribution.html"

#: ../plugins/fn-stat/functions.c:521
msgid ""
"LOGINV:inverse of the cumulative distribution function of the lognormal "
"distribution"
msgstr ""
"LOGINV:inverse of the cumulative distribution function of the lognormal "
"distribution"

#: ../plugins/fn-stat/functions.c:525
msgid ""
"If @{p} < 0 or @{p} > 1 or @{stddev} <= 0 this function returns #NUM! error."
msgstr ""
"If @{p} < 0 or @{p} > 1 or @{stddev} <= 0 this function returns #NUM! error."

#: ../plugins/fn-stat/functions.c:552
msgid "FISHERINV:inverse of the Fisher transformation"
msgstr "FISHERINV:inverse of the Fisher transformation"

#: ../plugins/fn-stat/functions.c:554
msgid "If @{x} is a non-number this function returns a #VALUE! error."
msgstr "If @{x} is a non-number this function returns a #VALUE! error."

#: ../plugins/fn-stat/functions.c:570
msgid "MODE:first most common number in the dataset"
msgstr "MODE:first most common number in the dataset"

#: ../plugins/fn-stat/functions.c:571 ../plugins/fn-stat/functions.c:599
#: ../plugins/fn-stat/functions.c:626 ../plugins/fn-stat/functions.c:653
#: ../plugins/fn-stat/functions.c:689 ../plugins/fn-stat/functions.c:723
#: ../plugins/fn-stat/functions.c:749 ../plugins/fn-stat/functions.c:784
#: ../plugins/fn-stat/functions.c:819 ../plugins/fn-stat/functions.c:848
#: ../plugins/fn-stat/functions.c:1845 ../plugins/fn-stat/functions.c:1876
#: ../plugins/fn-stat/functions.c:1902 ../plugins/fn-stat/functions.c:1926
#: ../plugins/fn-stat/functions.c:2055 ../plugins/fn-stat/functions.c:2478
#: ../plugins/fn-stat/functions.c:2503 ../plugins/fn-stat/functions.c:2530
msgid "number1:first value"
msgstr "number1:first value"

#: ../plugins/fn-stat/functions.c:572 ../plugins/fn-stat/functions.c:600
#: ../plugins/fn-stat/functions.c:627 ../plugins/fn-stat/functions.c:654
#: ../plugins/fn-stat/functions.c:690 ../plugins/fn-stat/functions.c:724
#: ../plugins/fn-stat/functions.c:750 ../plugins/fn-stat/functions.c:785
#: ../plugins/fn-stat/functions.c:820 ../plugins/fn-stat/functions.c:849
#: ../plugins/fn-stat/functions.c:1846 ../plugins/fn-stat/functions.c:1877
#: ../plugins/fn-stat/functions.c:1903 ../plugins/fn-stat/functions.c:1927
#: ../plugins/fn-stat/functions.c:2056 ../plugins/fn-stat/functions.c:2479
#: ../plugins/fn-stat/functions.c:2504 ../plugins/fn-stat/functions.c:2531
msgid "number2:second value"
msgstr "number2:second value"

#: ../plugins/fn-stat/functions.c:574
msgid ""
"If the data set does not contain any duplicates this function returns a #N/A "
"error."
msgstr ""
"If the data set does not contain any duplicates this function returns a #N/A "
"error."

#: ../plugins/fn-stat/functions.c:576
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"11.4, 25.9, and 40.1."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"11.4, 25.9, and 40.1."

#: ../plugins/fn-stat/functions.c:577
msgid "Then MODE(A1:A5) equals 11.4."
msgstr "Then MODE(A1:A5) equals 11.4."

#: ../plugins/fn-stat/functions.c:579
msgid "wiki:en:Mode_(statistics)"
msgstr "wiki:en:Mode_(statistics)"

#: ../plugins/fn-stat/functions.c:580
msgid "wolfram:Mode.html"
msgstr "wolfram:Mode.html"

#: ../plugins/fn-stat/functions.c:598
msgid "HARMEAN:harmonic mean"
msgstr "HARMEAN:harmonic mean"

#: ../plugins/fn-stat/functions.c:601
msgid ""
"The harmonic mean of N data points is  N divided by the sum of the "
"reciprocals of the data points)."
msgstr ""
"The harmonic mean of N data points is  N divided by the sum of the "
"reciprocals of the data points)."

#: ../plugins/fn-stat/functions.c:604
msgid "Then HARMEAN(A1:A5) equals 19.529814427."
msgstr "Then HARMEAN(A1:A5) equals 19.529814427."

#: ../plugins/fn-stat/functions.c:606
msgid "wiki:en:Harmonic_mean"
msgstr "wiki:en:Harmonic_mean"

#: ../plugins/fn-stat/functions.c:607
msgid "wolfram:HarmonicMean.html"
msgstr "wolfram:HarmonicMean.html"

#: ../plugins/fn-stat/functions.c:625
msgid "GEOMEAN:geometric mean"
msgstr "GEOMEAN:geometric mean"

#: ../plugins/fn-stat/functions.c:628
msgid ""
"The geometric mean is equal to the Nth root of the product of the N values."
msgstr ""
"The geometric mean is equal to the Nth root of the product of the N values."

#: ../plugins/fn-stat/functions.c:631
msgid "Then GEOMEAN(A1:A5) equals 21.279182482."
msgstr "Then GEOMEAN(A1:A5) equals 21.279182482."

#: ../plugins/fn-stat/functions.c:633
msgid "wiki:en:Geometric_mean"
msgstr "wiki:en:Geometric_mean"

#: ../plugins/fn-stat/functions.c:634
msgid "wolfram:GeometricMean.html"
msgstr "wolfram:GeometricMean.html"

#: ../plugins/fn-stat/functions.c:652
msgid "COUNT:total number of integer or floating point arguments passed"
msgstr "COUNT:total number of integer or floating point arguments passed"

#: ../plugins/fn-stat/functions.c:657
msgid "Then COUNT(A1:A5) equals 5."
msgstr "Then COUNT(A1:A5) equals 5."

#: ../plugins/fn-stat/functions.c:688
msgid "COUNTA:number of arguments passed not including empty cells"
msgstr "COUNTA:number of arguments passed not including empty cells"

#: ../plugins/fn-stat/functions.c:692
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, \"missing\", \"missing\", 25.9, and 40.1."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, \"missing\", \"missing\", 25.9, and 40.1."

#: ../plugins/fn-stat/functions.c:693
msgid "Then COUNTA(A1:A5) equals 5."
msgstr "Then COUNTA(A1:A5) equals 5."

#: ../plugins/fn-stat/functions.c:722
msgid "AVERAGE:average of all the numeric values and cells"
msgstr "AVERAGE:average of all the numeric values and cells"

#: ../plugins/fn-stat/functions.c:727
msgid "Then AVERAGE(A1:A5) equals 23.2."
msgstr "Then AVERAGE(A1:A5) equals 23.2."

#: ../plugins/fn-stat/functions.c:729
msgid "wiki:en:Arithmetic_mean"
msgstr "wiki:en:Arithmetic_mean"

#: ../plugins/fn-stat/functions.c:730
msgid "wolfram:ArithmeticMean.html"
msgstr "wolfram:ArithmeticMean.html"

#: ../plugins/fn-stat/functions.c:748
msgid ""
"MIN:smallest value, with negative numbers considered smaller than positive "
"numbers"
msgstr ""
"MIN:smallest value, with negative numbers considered smaller than positive "
"numbers"

#: ../plugins/fn-stat/functions.c:753
msgid "Then MIN(A1:A5) equals 11.4."
msgstr "Then MIN(A1:A5) equals 11.4."

#: ../plugins/fn-stat/functions.c:783
msgid ""
"MAX:largest value, with negative numbers considered smaller than positive "
"numbers"
msgstr ""
"MAX:largest value, with negative numbers considered smaller than positive "
"numbers"

#: ../plugins/fn-stat/functions.c:788
msgid "Then MAX(A1:A5) equals 40.1."
msgstr "Then MAX(A1:A5) equals 40.1."

#: ../plugins/fn-stat/functions.c:818
msgid "SKEW:unbiased estimate for skewness of a distribution"
msgstr "SKEW:unbiased estimate for skewness of a distribution"

#: ../plugins/fn-stat/functions.c:822
msgid ""
"This is only meaningful if the underlying distribution really has a third "
"moment.  The skewness of a symmetric (e.g., normal) distribution is zero."
msgstr ""
"This is only meaningful if the underlying distribution really has a third "
"moment.  The skewness of a symmetric (e.g., normal) distribution is zero."

#: ../plugins/fn-stat/functions.c:825
msgid ""
"If less than three numbers are given, this function returns a #DIV/0! error."
msgstr ""
"If less than three numbers are given, this function returns a #DIV/0! error."

#: ../plugins/fn-stat/functions.c:828
msgid "Then SKEW(A1:A5) equals 0.976798268."
msgstr "Then SKEW(A1:A5) equals 0.976798268."

#: ../plugins/fn-stat/functions.c:847
msgid "SKEWP:population skewness of a data set"
msgstr "SKEWP:population skewness of a data set"

#: ../plugins/fn-stat/functions.c:851
msgid "If less than two numbers are given, SKEWP returns a #DIV/0! error."
msgstr "If less than two numbers are given, SKEWP returns a #DIV/0! error."

#: ../plugins/fn-stat/functions.c:853
msgid "Then SKEWP(A1:A5) equals 0.655256198."
msgstr "Then SKEWP(A1:A5) equals 0.655256198."

#: ../plugins/fn-stat/functions.c:872
msgid ""
"EXPONDIST:probability density or cumulative distribution function of the "
"exponential distribution"
msgstr ""
"EXPONDIST:probability density or cumulative distribution function of the "
"exponential distribution"

#: ../plugins/fn-stat/functions.c:874
msgid "y:scale parameter"
msgstr "y:scale parameter"

#: ../plugins/fn-stat/functions.c:875 ../plugins/fn-stat/functions.c:945
#: ../plugins/fn-stat/functions.c:1571 ../plugins/fn-stat/functions.c:1751
#: ../plugins/fn-stat/functions.c:1787
msgid ""
"cumulative:whether to evaluate the density function or the cumulative "
"distribution function"
msgstr ""
"cumulative:whether to evaluate the density function or the cumulative "
"distribution function"

#: ../plugins/fn-stat/functions.c:876
msgid ""
"If @{cumulative} is false it will return:\t@{y} * exp (-@{y}*@{x}),otherwise "
"it will return\t1 - exp (-@{y}*@{x})."
msgstr ""
"If @{cumulative} is false it will return:\t@{y} * exp (-@{y}*@{x}),otherwise "
"it will return\t1 - exp (-@{y}*@{x})."

#: ../plugins/fn-stat/functions.c:879
msgid "If @{x} < 0 or @{y} <= 0 this will return an error."
msgstr "If @{x} < 0 or @{y} <= 0 this will return an error."

#: ../plugins/fn-stat/functions.c:905
msgid "BERNOULLI:probability mass function of a Bernoulli distribution"
msgstr "BERNOULLI:probability mass function of a Bernoulli distribution"

#: ../plugins/fn-stat/functions.c:906
msgid "k:integer"
msgstr "k:integer"

#: ../plugins/fn-stat/functions.c:908
msgid "If @{k} != 0 and @{k} != 1 this function returns a #NUM! error."
msgstr "If @{k} != 0 and @{k} != 1 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:909 ../plugins/fn-stat/functions.c:978
#: ../plugins/fn-stat/functions.c:1189 ../plugins/fn-stat/functions.c:1476
#: ../plugins/fn-stat/functions.c:1509 ../plugins/fn-stat/functions.c:1543
#: ../plugins/fn-stat/functions.c:1604 ../plugins/fn-stat/functions.c:4328
msgid "If @{p} < 0 or @{p} > 1 this function returns a #NUM! error."
msgstr "If @{p} < 0 or @{p} > 1 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:941
msgid ""
"GAMMADIST:probability density or cumulative distribution function of the "
"gamma distribution"
msgstr ""
"GAMMADIST:probability density or cumulative distribution function of the "
"gamma distribution"

#: ../plugins/fn-stat/functions.c:943 ../plugins/fn-stat/functions.c:976
#: ../plugins/fn-stat/functions.c:1148 ../plugins/fn-stat/functions.c:1185
#: ../plugins/fn-stat/functions.c:1749
msgid "alpha:scale parameter"
msgstr "alpha:scale parameter"

#: ../plugins/fn-stat/functions.c:944 ../plugins/fn-stat/functions.c:977
#: ../plugins/fn-stat/functions.c:1149 ../plugins/fn-stat/functions.c:1186
#: ../plugins/fn-stat/functions.c:1750
msgid "beta:scale parameter"
msgstr "beta:scale parameter"

#: ../plugins/fn-stat/functions.c:946 ../plugins/fn-stat/functions.c:1310
#: ../plugins/fn-stat/functions.c:1755 ../plugins/fn-stat/functions.c:1984
msgid "If @{x} < 0 this function returns a #NUM! error."
msgstr "If @{x} < 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:947 ../plugins/fn-stat/functions.c:1153
#: ../plugins/fn-stat/functions.c:1190
msgid "If @{alpha} <= 0 or @{beta} <= 0, this function returns a #NUM! error."
msgstr "If @{alpha} <= 0 or @{beta} <= 0, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:974
msgid "GAMMAINV:inverse of the cumulative gamma distribution"
msgstr "GAMMAINV:inverse of the cumulative gamma distribution"

#: ../plugins/fn-stat/functions.c:979 ../plugins/fn-stat/functions.c:1756
msgid "If @{alpha} <= 0 or @{beta} <= 0 this function returns a #NUM! error."
msgstr "If @{alpha} <= 0 or @{beta} <= 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1004
msgid "CHIDIST:survival function of the chi-squared distribution"
msgstr "CHIDIST:survival function of the chi-squared distribution"

#: ../plugins/fn-stat/functions.c:1006 ../plugins/fn-stat/functions.c:1034
#: ../plugins/fn-stat/functions.c:1220 ../plugins/fn-stat/functions.c:1272
msgid "dof:number of degrees of freedom"
msgstr "dof:number of degrees of freedom"

#: ../plugins/fn-stat/functions.c:1007 ../plugins/fn-stat/functions.c:1035
#: ../plugins/fn-stat/functions.c:1222 ../plugins/fn-stat/functions.c:1273
#: ../plugins/fn-stat/functions.c:1309 ../plugins/fn-stat/functions.c:1475
msgid "The survival function is 1 minus the cumulative distribution function."
msgstr "The survival function is 1 minus the cumulative distribution function."

#: ../plugins/fn-stat/functions.c:1008
msgid "If @{dof} is non-integer it is truncated."
msgstr "If @{dof} is non-integer it is truncated."

#: ../plugins/fn-stat/functions.c:1009 ../plugins/fn-stat/functions.c:1223
msgid "If @{dof} < 1 this function returns a #NUM! error."
msgstr "If @{dof} < 1 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1011
msgid ""
"CHIDIST(@{x},@{dof}) is the OpenFormula function LEGACY.CHIDIST(@{x},@{dof})."
msgstr ""
"CHIDIST(@{x},@{dof}) is the OpenFormula function LEGACY.CHIDIST(@{x},@{dof})."

#: ../plugins/fn-stat/functions.c:1032
msgid "CHIINV:inverse of the survival function of the chi-squared distribution"
msgstr ""
"CHIINV:inverse of the survival function of the chi-squared distribution"

#: ../plugins/fn-stat/functions.c:1036 ../plugins/fn-stat/functions.c:1274
msgid ""
"If @{p} < 0 or @{p} > 1 or @{dof} < 1 this function returns a #NUM! error."
msgstr ""
"If @{p} < 0 or @{p} > 1 or @{dof} < 1 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1038
msgid ""
"CHIINV(@{p},@{dof}) is the OpenFormula function LEGACY.CHIDIST(@{p},@{dof})."
msgstr ""
"CHIINV(@{p},@{dof}) is the OpenFormula function LEGACY.CHIDIST(@{p},@{dof})."

#: ../plugins/fn-stat/functions.c:1059
msgid "CHITEST:p value of the Goodness of Fit Test"
msgstr "CHITEST:p value of the Goodness of Fit Test"

#: ../plugins/fn-stat/functions.c:1060
msgid "actual_range:observed data"
msgstr "actual_range:observed data"

#: ../plugins/fn-stat/functions.c:1061
msgid "theoretical_range:expected values"
msgstr "theoretical_range:expected values"

#: ../plugins/fn-stat/functions.c:1062
msgid ""
"If the actual range is not an n by 1 or 1 by n range, but an n by m range, "
"then CHITEST uses (n-1) times (m-1) as degrees of freedom. This is useful if "
"the expected values were calculated from the observed value in a test of "
"independence or test of homogeneity."
msgstr ""
"If the actual range is not an n by 1 or 1 by n range, but an n by m range, "
"then CHITEST uses (n-1) times (m-1) as degrees of freedom. This is useful if "
"the expected values were calculated from the observed value in a test of "
"independence or test of homogeneity."

#: ../plugins/fn-stat/functions.c:1068
msgid "CHITEST is the OpenFormula function LEGACY.CHITEST."
msgstr "CHITEST is the OpenFormula function LEGACY.CHITEST."

#: ../plugins/fn-stat/functions.c:1146
msgid "BETADIST:cumulative distribution function of the beta distribution"
msgstr "BETADIST:cumulative distribution function of the beta distribution"

#: ../plugins/fn-stat/functions.c:1150 ../plugins/fn-stat/functions.c:1187
msgid "a:optional lower bound, defaults to 0"
msgstr "a:optional lower bound, defaults to 0"

#: ../plugins/fn-stat/functions.c:1151 ../plugins/fn-stat/functions.c:1188
msgid "b:optional upper bound, defaults to 1"
msgstr "b:optional upper bound, defaults to 1"

#: ../plugins/fn-stat/functions.c:1152
msgid "If @{x} < @{a} or @{x} > @{b} this function returns a #NUM! error."
msgstr "If @{x} < @{a} or @{x} > @{b} this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1154 ../plugins/fn-stat/functions.c:1191
msgid "If @{a} >= @{b} this function returns a #NUM! error."
msgstr "If @{a} >= @{b} this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1183
msgid ""
"BETAINV:inverse of the cumulative distribution function of the beta "
"distribution"
msgstr ""
"BETAINV:inverse of the cumulative distribution function of the beta "
"distribution"

#: ../plugins/fn-stat/functions.c:1218
msgid "TDIST:survival function of the Student t-distribution"
msgstr "TDIST:survival function of the Student t-distribution"

#: ../plugins/fn-stat/functions.c:1221
msgid "tails:1 or 2"
msgstr "tails:1 or 2"

#: ../plugins/fn-stat/functions.c:1224
msgid "If @{tails} is neither 1 or 2 this function returns a #NUM! error."
msgstr "If @{tails} is neither 1 or 2 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1225
msgid ""
"The parameterization of this function is different from what is used for, e."
"g., NORMSDIST.  This is a common source of mistakes, but necessary for "
"compatibility."
msgstr ""
"The parameterisation of this function is different from what is used for, e."
"g., NORMSDIST.  This is a common source of mistakes, but necessary for "
"compatibility."

#: ../plugins/fn-stat/functions.c:1228
msgid "This function is Excel compatible for non-negative @{x}."
msgstr "This function is Excel compatible for non-negative @{x}."

#: ../plugins/fn-stat/functions.c:1270
msgid "TINV:inverse of the survival function of the Student t-distribution"
msgstr "TINV:inverse of the survival function of the Student t-distribution"

#: ../plugins/fn-stat/functions.c:1276
msgid ""
"The parameterization of this function is different from what is used for, e."
"g., NORMSINV.  This is a common source of mistakes, but necessary for "
"compatibility."
msgstr ""
"The parameterisation of this function is different from what is used for, e."
"g., NORMSINV.  This is a common source of mistakes, but necessary for "
"compatibility."

#: ../plugins/fn-stat/functions.c:1305
msgid "FDIST:survival function of the F distribution"
msgstr "FDIST:survival function of the F distribution"

#: ../plugins/fn-stat/functions.c:1307 ../plugins/fn-stat/functions.c:1473
msgid "dof_of_num:numerator degrees of freedom"
msgstr "dof_of_num:numerator degrees of freedom"

#: ../plugins/fn-stat/functions.c:1308 ../plugins/fn-stat/functions.c:1474
msgid "dof_of_denom:denominator degrees of freedom"
msgstr "dof_of_denom:denominator degrees of freedom"

#: ../plugins/fn-stat/functions.c:1311
msgid ""
"If @{dof_of_num} < 1 or @{dof_of_denom} < 1, this function returns a #NUM! "
"error."
msgstr ""
"If @{dof_of_num} < 1 or @{dof_of_denom} < 1, this function returns a #NUM! "
"error."

#: ../plugins/fn-stat/functions.c:1313
msgid "FDIST is the OpenFormula function LEGACY.FDIST."
msgstr "FDIST is the OpenFormula function LEGACY.FDIST."

#: ../plugins/fn-stat/functions.c:1335
msgid ""
"LANDAU:approximate probability density function of the Landau distribution"
msgstr ""
"LANDAU:approximate probability density function of the Landau distribution"

#: ../plugins/fn-stat/functions.c:1471
msgid "FINV:inverse of the survival function of the F distribution"
msgstr "FINV:inverse of the survival function of the F distribution"

#: ../plugins/fn-stat/functions.c:1477
msgid ""
"If @{dof_of_num} < 1 or @{dof_of_denom} < 1 this function returns a #NUM! "
"error."
msgstr ""
"If @{dof_of_num} < 1 or @{dof_of_denom} < 1 this function returns a #NUM! "
"error."

#: ../plugins/fn-stat/functions.c:1479
msgid "FINV is the OpenFormula function LEGACY.FINV."
msgstr "FINV is the OpenFormula function LEGACY.FINV."

#: ../plugins/fn-stat/functions.c:1501
msgid ""
"BINOMDIST:probability mass or cumulative distribution function of the "
"binomial distribution"
msgstr ""
"BINOMDIST:probability mass or cumulative distribution function of the "
"binomial distribution"

#: ../plugins/fn-stat/functions.c:1502
msgid "n:number of successes"
msgstr "n:number of successes"

#: ../plugins/fn-stat/functions.c:1503 ../plugins/fn-stat/functions.c:1537
#: ../plugins/fn-stat/functions.c:1599
msgid "trials:number of trials"
msgstr "trials:number of trials"

#: ../plugins/fn-stat/functions.c:1504 ../plugins/fn-stat/functions.c:1538
#: ../plugins/fn-stat/functions.c:1600
msgid "p:probability of success in each trial"
msgstr "p:probability of success in each trial"

#: ../plugins/fn-stat/functions.c:1505 ../plugins/fn-stat/functions.c:1659
#: ../plugins/fn-stat/functions.c:1982 ../plugins/fn-stat/functions.c:4326
msgid ""
"cumulative:whether to evaluate the mass function or the cumulative "
"distribution function"
msgstr ""
"cumulative:whether to evaluate the mass function or the cumulative "
"distribution function"

#: ../plugins/fn-stat/functions.c:1506
msgid "If @{n} or @{trials} are non-integer they are truncated."
msgstr "If @{n} or @{trials} are non-integer they are truncated."

#: ../plugins/fn-stat/functions.c:1507
msgid "If @{n} < 0 or @{trials} < 0 this function returns a #NUM! error."
msgstr "If @{n} < 0 or @{trials} < 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1508
msgid "If @{n} > @{trials} this function returns a #NUM! error."
msgstr "If @{n} > @{trials} this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1536
msgid ""
"BINOM.DIST.RANGE:probability of the binomial distribution over an interval"
msgstr ""
"BINOM.DIST.RANGE:probability of the binomial distribution over an interval"

#: ../plugins/fn-stat/functions.c:1539
msgid "start:start of the interval"
msgstr "start:start of the interval"

#: ../plugins/fn-stat/functions.c:1540
msgid "end:end of the interval, defaults to @{start}"
msgstr "end:end of the interval, defaults to @{start}"

#: ../plugins/fn-stat/functions.c:1541
msgid "If @{start}, @{end} or @{trials} are non-integer they are truncated."
msgstr "If @{start}, @{end} or @{trials} are non-integer they are truncated."

#: ../plugins/fn-stat/functions.c:1542 ../plugins/fn-stat/functions.c:1603
msgid "If @{trials} < 0 this function returns a #NUM! error."
msgstr "If @{trials} < 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1544
msgid "If @{start} > @{end} this function returns 0."
msgstr "If @{start} > @{end} this function returns 0."

#: ../plugins/fn-stat/functions.c:1567
msgid ""
"CAUCHY:probability density or cumulative distribution function of the "
"Cauchy, Lorentz or Breit-Wigner distribution"
msgstr ""
"CAUCHY:probability density or cumulative distribution function of the "
"Cauchy, Lorentz or Breit-Wigner distribution"

#: ../plugins/fn-stat/functions.c:1570 ../plugins/fn-stat/functions.c:4356
#: ../plugins/fn-stat/functions.c:4495
msgid "a:scale parameter"
msgstr "a:scale parameter"

#: ../plugins/fn-stat/functions.c:1572
msgid "If @{a} < 0 this function returns a #NUM! error."
msgstr "If @{a} < 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1573 ../plugins/fn-stat/functions.c:4329
msgid ""
"If @{cumulative} is neither TRUE nor FALSE this function returns a #VALUE! "
"error."
msgstr ""
"If @{cumulative} is neither TRUE nor FALSE this function returns a #VALUE! "
"error."

#: ../plugins/fn-stat/functions.c:1598
msgid "CRITBINOM:right-tailed critical value of the binomial distribution"
msgstr "CRITBINOM:right-tailed critical value of the binomial distribution"

#: ../plugins/fn-stat/functions.c:1601
msgid "alpha:significance level (area of the tail)"
msgstr "alpha:significance level (area of the tail)"

#: ../plugins/fn-stat/functions.c:1602
msgid "If @{trials} is a non-integer it is truncated."
msgstr "If @{trials} is a non-integer it is truncated."

#: ../plugins/fn-stat/functions.c:1605
msgid "If @{alpha} < 0 or @{alpha} > 1 this function returns a #NUM! error."
msgstr "If @{alpha} < 0 or @{alpha} > 1 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1628
msgid "PERMUT:number of @{k}-permutations of a @{n}-set"
msgstr "PERMUT:number of @{k}-permutations of a @{n}-set"

#: ../plugins/fn-stat/functions.c:1629
msgid "n:size of the base set"
msgstr "n:size of the base set"

#: ../plugins/fn-stat/functions.c:1630
msgid "k:number of elements in each permutation"
msgstr "k:number of elements in each permutation"

#: ../plugins/fn-stat/functions.c:1631
msgid "If @{n} = 0 this function returns a #NUM! error."
msgstr "If @{n} = 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1632
msgid "If @{n} < @{k} this function returns a #NUM! error."
msgstr "If @{n} < @{k} this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1654
msgid ""
"HYPGEOMDIST:probability mass or cumulative distribution function of the "
"hypergeometric distribution"
msgstr ""
"HYPGEOMDIST:probability mass or cumulative distribution function of the "
"hypergeometric distribution"

#: ../plugins/fn-stat/functions.c:1655
msgid "x:number of successes"
msgstr "x:number of successes"

#: ../plugins/fn-stat/functions.c:1656
msgid "n:sample size"
msgstr "n:sample size"

#: ../plugins/fn-stat/functions.c:1657
msgid "M:number of possible successes in the population"
msgstr "M:number of possible successes in the population"

#: ../plugins/fn-stat/functions.c:1658
msgid "N:population size"
msgstr "N:population size"

#: ../plugins/fn-stat/functions.c:1660
msgid "If @{x},@{n},@{M} or @{N} is a non-integer it is truncated."
msgstr "If @{x},@{n},@{M} or @{N} is a non-integer it is truncated."

#: ../plugins/fn-stat/functions.c:1661
msgid "If @{x},@{n},@{M} or @{N} < 0 this function returns a #NUM! error."
msgstr "If @{x},@{n},@{M} or @{N} < 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1662
msgid "If @{x} > @{M} or @{n} > @{N} this function returns a #NUM! error."
msgstr "If @{x} > @{M} or @{n} > @{N} this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1690
msgid ""
"CONFIDENCE:margin of error of a confidence interval for the population mean"
msgstr ""
"CONFIDENCE:margin of error of a confidence interval for the population mean"

#: ../plugins/fn-stat/functions.c:1691
msgid "alpha:significance level"
msgstr "alpha:significance level"

#: ../plugins/fn-stat/functions.c:1692
msgid "stddev:population standard deviation"
msgstr "stddev:population standard deviation"

#: ../plugins/fn-stat/functions.c:1693
msgid "size:sample size"
msgstr "size:sample size"

#: ../plugins/fn-stat/functions.c:1694
msgid ""
"This function requires the usually unknown population standard deviation."
msgstr ""
"This function requires the usually unknown population standard deviation."

#: ../plugins/fn-stat/functions.c:1695
msgid "If @{size} is non-integer it is truncated."
msgstr "If @{size} is non-integer it is truncated."

#: ../plugins/fn-stat/functions.c:1696
msgid "If @{size} < 0 this function returns a #NUM! error."
msgstr "If @{size} < 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1697
msgid "If @{size} is 0 this function returns a #DIV/0! error."
msgstr "If @{size} is 0 this function returns a #DIV/0! error."

#: ../plugins/fn-stat/functions.c:1720
msgid "STANDARDIZE:z-score of a value"
msgstr "STANDARDIZE:z-score of a value"

#: ../plugins/fn-stat/functions.c:1722
msgid "mean:mean of the original distribution"
msgstr "mean:mean of the original distribution"

#: ../plugins/fn-stat/functions.c:1723
msgid "stddev:standard deviation of the original distribution"
msgstr "stddev:standard deviation of the original distribution"

#: ../plugins/fn-stat/functions.c:1724 ../plugins/fn-stat/functions.c:1788
msgid "If @{stddev} is 0 this function returns a #DIV/0! error."
msgstr "If @{stddev} is 0 this function returns a #DIV/0! error."

#: ../plugins/fn-stat/functions.c:1747
msgid ""
"WEIBULL:probability density or cumulative distribution function of the "
"Weibull distribution"
msgstr ""
"WEIBULL:probability density or cumulative distribution function of the "
"Weibull distribution"

#: ../plugins/fn-stat/functions.c:1752
msgid ""
"If the @{cumulative} boolean is true it will return: 1 - exp (-(@{x}/@{beta})"
"^@{alpha}),otherwise it will return (@{alpha}/@{beta}^@{alpha}) * @{x}^(@"
"{alpha}-1) * exp(-(@{x}/@{beta}^@{alpha}))."
msgstr ""
"If the @{cumulative} boolean is true it will return: 1 - exp (-(@{x}/@{beta})"
"^@{alpha}),otherwise it will return (@{alpha}/@{beta}^@{alpha}) * @{x}^(@"
"{alpha}-1) * exp(-(@{x}/@{beta}^@{alpha}))."

#: ../plugins/fn-stat/functions.c:1783
msgid ""
"NORMDIST:probability density or cumulative distribution function of a normal "
"distribution"
msgstr ""
"NORMDIST:probability density or cumulative distribution function of a normal "
"distribution"

#: ../plugins/fn-stat/functions.c:1785 ../plugins/fn-stat/functions.c:1818
#: ../plugins/fn-stat/functions.c:1981
msgid "mean:mean of the distribution"
msgstr "mean:mean of the distribution"

#: ../plugins/fn-stat/functions.c:1786 ../plugins/fn-stat/functions.c:1819
msgid "stddev:standard deviation of the distribution"
msgstr "stddev:standard deviation of the distribution"

#: ../plugins/fn-stat/functions.c:1816
msgid ""
"NORMINV:inverse of the cumulative distribution function of a normal "
"distribution"
msgstr ""
"NORMINV:inverse of the cumulative distribution function of a normal "
"distribution"

#: ../plugins/fn-stat/functions.c:1820
msgid ""
"If @{p} < 0 or @{p} > 1 or @{stddev} <= 0 this function returns a #NUM! "
"error."
msgstr ""
"If @{p} < 0 or @{p} > 1 or @{stddev} <= 0 this function returns a #NUM! "
"error."

#: ../plugins/fn-stat/functions.c:1844
msgid "KURT:unbiased estimate of the kurtosis of a data set"
msgstr "KURT:unbiased estimate of the kurtosis of a data set"

#: ../plugins/fn-stat/functions.c:1848
msgid ""
"This is only meaningful if the underlying distribution really has a fourth "
"moment.  The kurtosis is offset by three such that a normal distribution "
"will have zero kurtosis."
msgstr ""
"This is only meaningful if the underlying distribution really has a fourth "
"moment.  The kurtosis is offset by three such that a normal distribution "
"will have zero kurtosis."

#: ../plugins/fn-stat/functions.c:1852
msgid ""
"If fewer than four numbers are given or all of them are equal this function "
"returns a #DIV/0! error."
msgstr ""
"If fewer than four numbers are given or all of them are equal this function "
"returns a #DIV/0! error."

#: ../plugins/fn-stat/functions.c:1856
msgid "Then KURT(A1:A5) equals 1.234546305."
msgstr "Then KURT(A1:A5) equals 1.234546305."

#: ../plugins/fn-stat/functions.c:1875
msgid "KURTP:population kurtosis of a data set"
msgstr "KURTP:population kurtosis of a data set"

#: ../plugins/fn-stat/functions.c:1879
msgid ""
"If fewer than two numbers are given or all of them are equal this function "
"returns a #DIV/0! error."
msgstr ""
"If fewer than two numbers are given or all of them are equal this function "
"returns a #DIV/0! error."

#: ../plugins/fn-stat/functions.c:1882
msgid "Then KURTP(A1:A5) equals -0.691363424."
msgstr "Then KURTP(A1:A5) equals -0.691363424."

#: ../plugins/fn-stat/functions.c:1901
msgid "AVEDEV:average of the absolute deviations of a data set"
msgstr "AVEDEV:average of the absolute deviations of a data set"

#: ../plugins/fn-stat/functions.c:1906
msgid "Then AVEDEV(A1:A5) equals 7.84."
msgstr "Then AVEDEV(A1:A5) equals 7.84."

#: ../plugins/fn-stat/functions.c:1925
msgid "DEVSQ:sum of squares of deviations of a data set"
msgstr "DEVSQ:sum of squares of deviations of a data set"

#: ../plugins/fn-stat/functions.c:1931
msgid "Then DEVSQ(A1:A5) equals 470.56."
msgstr "Then DEVSQ(A1:A5) equals 470.56."

#: ../plugins/fn-stat/functions.c:1950
msgid "FISHER:Fisher transformation"
msgstr "FISHER:Fisher transformation"

#: ../plugins/fn-stat/functions.c:1952
msgid "If @{x} is not a number, this function returns a #VALUE! error."
msgstr "If @{x} is not a number, this function returns a #VALUE! error."

#: ../plugins/fn-stat/functions.c:1953
msgid "If @{x} <= -1 or @{x} >= 1, this function returns a #NUM! error."
msgstr "If @{x} <= -1 or @{x} >= 1, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:1979
msgid ""
"POISSON:probability mass or cumulative distribution function of the Poisson "
"distribution"
msgstr ""
"POISSON:probability mass or cumulative distribution function of the Poisson "
"distribution"

#: ../plugins/fn-stat/functions.c:1980
msgid "x:number of events"
msgstr "x:number of events"

#: ../plugins/fn-stat/functions.c:1983
msgid "If @{x} is a non-integer it is truncated."
msgstr "If @{x} is a non-integer it is truncated."

#: ../plugins/fn-stat/functions.c:1985
msgid "If @{mean} <= 0 POISSON returns the #NUM! error."
msgstr "If @{mean} <= 0 POISSON returns the #NUM! error."

#: ../plugins/fn-stat/functions.c:2011
msgid "PEARSON:Pearson correlation coefficient of the paired set of data"
msgstr "PEARSON:Pearson correlation coefficient of the paired set of data"

#: ../plugins/fn-stat/functions.c:2012 ../plugins/fn-stat/functions.c:2031
msgid "array1:first component values"
msgstr "array1:first component values"

#: ../plugins/fn-stat/functions.c:2013 ../plugins/fn-stat/functions.c:2032
msgid "array2:second component values"
msgstr "array2:second component values"

#: ../plugins/fn-stat/functions.c:2030
msgid ""
"RSQ:square of the Pearson correlation coefficient of the paired set of data"
msgstr ""
"RSQ:square of the Pearson correlation coefficient of the paired set of data"

#: ../plugins/fn-stat/functions.c:2054
msgid "MEDIAN:median of a data set"
msgstr "MEDIAN:median of a data set"

#: ../plugins/fn-stat/functions.c:2058
msgid ""
"If even numbers are given MEDIAN returns the average of the two numbers in "
"the center."
msgstr ""
"If even numbers are given MEDIAN returns the average of the two numbers in "
"the centre."

#: ../plugins/fn-stat/functions.c:2062
msgid "Then MEDIAN(A1:A5) equals 21.3."
msgstr "Then MEDIAN(A1:A5) equals 21.3."

#: ../plugins/fn-stat/functions.c:2064
msgid "wiki:en:Median"
msgstr "wiki:en:Median"

#: ../plugins/fn-stat/functions.c:2065
msgid "wolfram:StatisticalMedian.html"
msgstr "wolfram:StatisticalMedian.html"

#: ../plugins/fn-stat/functions.c:2084
msgid "SSMEDIAN:median for grouped data"
msgstr "SSMEDIAN:median for grouped data"

#: ../plugins/fn-stat/functions.c:2085
msgid "array:data set"
msgstr "array:data set"

#: ../plugins/fn-stat/functions.c:2086
msgid "interval:length of each grouping interval, defaults to 1"
msgstr "interval:length of each grouping interval, defaults to 1"

#: ../plugins/fn-stat/functions.c:2087
msgid ""
"The data are assumed to be grouped into intervals of width @{interval}. Each "
"data point in @{array} is the midpoint of the interval containing the true "
"value. The median is calculated by interpolation within the median interval "
"(the interval containing the median value), assuming that the true values "
"within that interval are distributed uniformly:\n"
"median = L + @{interval}*(N/2 - CF)/F\n"
"where:\n"
"L = the lower limit of the median interval\n"
"N = the total number of data points\n"
"CF = the number of data points below the median interval\n"
"F = the number of data points in the median interval"
msgstr ""
"The data are assumed to be grouped into intervals of width @{interval}. Each "
"data point in @{array} is the midpoint of the interval containing the true "
"value. The median is calculated by interpolation within the median interval "
"(the interval containing the median value), assuming that the true values "
"within that interval are distributed uniformly:\n"
"median = L + @{interval}*(N/2 - CF)/F\n"
"where:\n"
"L = the lower limit of the median interval\n"
"N = the total number of data points\n"
"CF = the number of data points below the median interval\n"
"F = the number of data points in the median interval"

#: ../plugins/fn-stat/functions.c:2098 ../plugins/fn-stat/functions.c:2771
#: ../plugins/fn-stat/functions.c:2813
msgid "If @{array} is empty, this function returns a #NUM! error."
msgstr "If @{array} is empty, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2099
msgid ""
"If @{interval} <= 0, this function returns a #NUM! error. SSMEDIAN does not "
"check whether the data points are at least @{interval} apart."
msgstr ""
"If @{interval} <= 0, this function returns a #NUM! error. SSMEDIAN does not "
"check whether the data points are at least @{interval} apart."

#: ../plugins/fn-stat/functions.c:2186
msgid "LARGE:@{k}-th largest value in a data set"
msgstr "LARGE:@{k}-th largest value in a data set"

#: ../plugins/fn-stat/functions.c:2187 ../plugins/fn-stat/functions.c:2230
msgid "data:data set"
msgstr "data:data set"

#: ../plugins/fn-stat/functions.c:2188 ../plugins/fn-stat/functions.c:2231
msgid "k:which value to find"
msgstr "k:which value to find"

#: ../plugins/fn-stat/functions.c:2189 ../plugins/fn-stat/functions.c:2232
msgid "If data set is empty this function returns a #NUM! error."
msgstr "If data set is empty this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2190 ../plugins/fn-stat/functions.c:2233
msgid ""
"If @{k} <= 0 or @{k} is greater than the number of data items given this "
"function returns a #NUM! error."
msgstr ""
"If @{k} <= 0 or @{k} is greater than the number of data items given this "
"function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2195
msgid "Then LARGE(A1:A5,2) equals 25.9.LARGE(A1:A5,4) equals 17.3."
msgstr "Then LARGE(A1:A5,2) equals 25.9.LARGE(A1:A5,4) equals 17.3."

#: ../plugins/fn-stat/functions.c:2229
msgid "SMALL:@{k}-th smallest value in a data set"
msgstr "SMALL:@{k}-th smallest value in a data set"

#: ../plugins/fn-stat/functions.c:2238
msgid "Then SMALL(A1:A5,2) equals 17.3.SMALL(A1:A5,4) equals 25.9."
msgstr "Then SMALL(A1:A5,2) equals 17.3.SMALL(A1:A5,4) equals 25.9."

#: ../plugins/fn-stat/functions.c:2273
msgid ""
"PROB:probability of an interval for a discrete (and finite) probability "
"distribution"
msgstr ""
"PROB:probability of an interval for a discrete (and finite) probability "
"distribution"

#: ../plugins/fn-stat/functions.c:2274
msgid "x_range:possible values"
msgstr "x_range:possible values"

#: ../plugins/fn-stat/functions.c:2275
msgid "prob_range:probabilities of the corresponding values"
msgstr "prob_range:probabilities of the corresponding values"

#: ../plugins/fn-stat/functions.c:2276
msgid "lower_limit:lower interval limit"
msgstr "lower_limit:lower interval limit"

#: ../plugins/fn-stat/functions.c:2277
msgid "upper_limit:upper interval limit, defaults to @{lower_limit}"
msgstr "upper_limit:upper interval limit, defaults to @{lower_limit}"

#: ../plugins/fn-stat/functions.c:2278
msgid ""
"If the sum of the probabilities in @{prob_range} is not equal to 1 this "
"function returns a #NUM! error."
msgstr ""
"If the sum of the probabilities in @{prob_range} is not equal to 1 this "
"function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2280
msgid ""
"If any value in @{prob_range} is <=0 or > 1, this function returns a #NUM! "
"error."
msgstr ""
"If any value in @{prob_range} is <=0 or > 1, this function returns a #NUM! "
"error."

#: ../plugins/fn-stat/functions.c:2282
msgid ""
"If @{x_range} and @{prob_range} contain a different number of data entries, "
"this function returns a #N/A error."
msgstr ""
"If @{x_range} and @{prob_range} contain a different number of data entries, "
"this function returns a #N/A error."

#: ../plugins/fn-stat/functions.c:2359
msgid "STEYX:standard error of the predicted y-value in the regression"
msgstr "STEYX:standard error of the predicted y-value in the regression"

#: ../plugins/fn-stat/functions.c:2360 ../plugins/fn-stat/functions.c:3405
#: ../plugins/fn-stat/functions.c:3521 ../plugins/fn-stat/functions.c:3763
#: ../plugins/fn-stat/functions.c:3861 ../plugins/fn-stat/functions.c:3951
#: ../plugins/fn-stat/functions.c:4010 ../plugins/fn-stat/functions.c:4062
msgid "known_ys:known y-values"
msgstr "known_ys:known y-values"

#: ../plugins/fn-stat/functions.c:2361 ../plugins/fn-stat/functions.c:3522
#: ../plugins/fn-stat/functions.c:3952 ../plugins/fn-stat/functions.c:4011
#: ../plugins/fn-stat/functions.c:4063
msgid "known_xs:known x-values"
msgstr "known_xs:known x-values"

#: ../plugins/fn-stat/functions.c:2362
msgid ""
"If @{known_ys} and @{known_xs} are empty or have a different number of "
"arguments then this function returns a #N/A error."
msgstr ""
"If @{known_ys} and @{known_xs} are empty or have a different number of "
"arguments then this function returns a #N/A error."

#: ../plugins/fn-stat/functions.c:2368
msgid "Then STEYX(A1:A5,B1:B5) equals 1.101509979."
msgstr "Then STEYX(A1:A5,B1:B5) equals 1.101509979."

#: ../plugins/fn-stat/functions.c:2412
msgid ""
"ZTEST:the probability of observing a sample mean as large as or larger than "
"the mean of the given sample"
msgstr ""
"ZTEST:the probability of observing a sample mean as large as or larger than "
"the mean of the given sample"

#: ../plugins/fn-stat/functions.c:2414
msgid "ref:data set (sample)"
msgstr "ref:data set (sample)"

#: ../plugins/fn-stat/functions.c:2415
msgid "x:population mean"
msgstr "x:population mean"

#: ../plugins/fn-stat/functions.c:2416
msgid ""
"stddev:population standard deviation, defaults to the sample standard "
"deviation"
msgstr ""
"stddev:population standard deviation, defaults to the sample standard "
"deviation"

#: ../plugins/fn-stat/functions.c:2417
msgid ""
"ZTEST calulates the probability of observing a sample mean as large as or "
"larger than the mean of the given sample for samples drawn from a normal "
"distribution with mean @{x} and standard deviation @{stddev}."
msgstr ""
"ZTEST calculates the probability of observing a sample mean as large as or "
"larger than the mean of the given sample for samples drawn from a normal "
"distribution with mean @{x} and standard deviation @{stddev}."

#: ../plugins/fn-stat/functions.c:2420
msgid ""
"If @{ref} contains less than two data items ZTEST returns #DIV/0! error."
msgstr ""
"If @{ref} contains less than two data items ZTEST returns #DIV/0! error."

#: ../plugins/fn-stat/functions.c:2426
msgid "Then ZTEST(A1:A5,20) equals 0.254717826."
msgstr "Then ZTEST(A1:A5,20) equals 0.254717826."

#: ../plugins/fn-stat/functions.c:2477
msgid "AVERAGEA:average of all the values and cells"
msgstr "AVERAGEA:average of all the values and cells"

#: ../plugins/fn-stat/functions.c:2482 ../plugins/fn-stat/functions.c:2507
#: ../plugins/fn-stat/functions.c:2534 ../plugins/fn-stat/functions.c:2566
#: ../plugins/fn-stat/functions.c:2593 ../plugins/fn-stat/functions.c:2623
#: ../plugins/fn-stat/functions.c:2650
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1."

#: ../plugins/fn-stat/functions.c:2483
msgid "Then AVERAGEA(A1:A5) equals 18.94."
msgstr "Then AVERAGEA(A1:A5) equals 18.94."

#: ../plugins/fn-stat/functions.c:2502
msgid ""
"MAXA:largest value, with negative numbers considered smaller than positive "
"numbers"
msgstr ""
"MAXA:largest value, with negative numbers considered smaller than positive "
"numbers"

#: ../plugins/fn-stat/functions.c:2509
msgid "Then MAXA(A1:A5) equals 40.1."
msgstr "Then MAXA(A1:A5) equals 40.1."

#: ../plugins/fn-stat/functions.c:2529
msgid ""
"MINA:smallest value, with negative numbers considered smaller than positive "
"numbers"
msgstr ""
"MINA:smallest value, with negative numbers considered smaller than positive "
"numbers"

#: ../plugins/fn-stat/functions.c:2536
msgid "Then MINA(A1:A5) equals 0."
msgstr "Then MINA(A1:A5) equals 0."

#: ../plugins/fn-stat/functions.c:2556
msgid "VARA:sample variance of the given sample"
msgstr "VARA:sample variance of the given sample"

#: ../plugins/fn-stat/functions.c:2559
msgid "VARA is also known as the N-1-variance."
msgstr "VARA is also known as the N-1-variance."

#: ../plugins/fn-stat/functions.c:2560
msgid "To get the true variance of a complete population use VARPA."
msgstr "To get the true variance of a complete population use VARPA."

#: ../plugins/fn-stat/functions.c:2568
msgid "Then VARA(A1:A5) equals 228.613."
msgstr "Then VARA(A1:A5) equals 228.613."

#: ../plugins/fn-stat/functions.c:2587
msgid "VARPA:variance of an entire population"
msgstr "VARPA:variance of an entire population"

#: ../plugins/fn-stat/functions.c:2590
msgid "VARPA is also known as the N-variance."
msgstr "VARPA is also known as the N-variance."

#: ../plugins/fn-stat/functions.c:2595
msgid "Then VARPA(A1:A5) equals 182.8904."
msgstr "Then VARPA(A1:A5) equals 182.8904."

#: ../plugins/fn-stat/functions.c:2614
msgid "STDEVA:sample standard deviation of the given sample"
msgstr "STDEVA:sample standard deviation of the given sample"

#: ../plugins/fn-stat/functions.c:2618
msgid "STDEVA is also known as the N-1-standard deviation."
msgstr "STDEVA is also known as the N-1-standard deviation."

#: ../plugins/fn-stat/functions.c:2619
msgid ""
"To obtain the population standard deviation of a whole population use "
"STDEVPA."
msgstr ""
"To obtain the population standard deviation of a whole population use "
"STDEVPA."

#: ../plugins/fn-stat/functions.c:2625
msgid "Then STDEVA(A1:A5) equals 15.119953704."
msgstr "Then STDEVA(A1:A5) equals 15.119953704."

#: ../plugins/fn-stat/functions.c:2644
msgid "STDEVPA:population standard deviation of an entire population"
msgstr "STDEVPA:population standard deviation of an entire population"

#: ../plugins/fn-stat/functions.c:2652
msgid "Then STDEVPA(A1:A5) equals 13.523697719."
msgstr "Then STDEVPA(A1:A5) equals 13.523697719."

#: ../plugins/fn-stat/functions.c:2671
msgid "PERCENTRANK:rank of a data point in a data set"
msgstr "PERCENTRANK:rank of a data point in a data set"

#: ../plugins/fn-stat/functions.c:2672
msgid "array:range of numeric values"
msgstr "array:range of numeric values"

#: ../plugins/fn-stat/functions.c:2673
msgid "x:data point to be ranked"
msgstr "x:data point to be ranked"

#: ../plugins/fn-stat/functions.c:2674
msgid "significance:number of significant digits, defaults to 3"
msgstr "significance:number of significant digits, defaults to 3"

#: ../plugins/fn-stat/functions.c:2675
msgid ""
"If @{array} contains no data points, this function returns a #NUM! error."
msgstr ""
"If @{array} contains no data points, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2677
msgid ""
"If @{significance} is less than one, this function returns a #NUM! error."
msgstr ""
"If @{significance} is less than one, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2679
msgid ""
"If @{x} exceeds the largest value or is less than the smallest value in @"
"{array}, this function returns a #NUM! error."
msgstr ""
"If @{x} exceeds the largest value or is less than the smallest value in @"
"{array}, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2681
msgid ""
"If @{x} does not match any of the values in @{array} or @{x} matches more "
"than once, this function interpolates the returned value."
msgstr ""
"If @{x} does not match any of the values in @{array} or @{x} matches more "
"than once, this function interpolates the returned value."

#: ../plugins/fn-stat/functions.c:2768
msgid ""
"PERCENTILE:determines the  100*@{k}-th percentile of the given data points"
msgstr ""
"PERCENTILE:determines the  100*@{k}-th percentile of the given data points"

#: ../plugins/fn-stat/functions.c:2769 ../plugins/fn-stat/functions.c:2811
msgid "array:data points"
msgstr "array:data points"

#: ../plugins/fn-stat/functions.c:2770
msgid "k:which percentile to calculate"
msgstr "k:which percentile to calculate"

#: ../plugins/fn-stat/functions.c:2772
msgid "If @{k} < 0 or @{k} > 1, this function returns a #NUM! error."
msgstr "If @{k} < 0 or @{k} > 1, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2775
msgid "Then PERCENTILE(A1:A5,0.42) equals 20.02."
msgstr "Then PERCENTILE(A1:A5,0.42) equals 20.02."

#: ../plugins/fn-stat/functions.c:2810
msgid "QUARTILE:the @{k}-th quartile of the data points"
msgstr "QUARTILE:the @{k}-th quartile of the data points"

#: ../plugins/fn-stat/functions.c:2812
msgid "quart:a number from 0 to 4, indicating which quartile to calculate"
msgstr "quart:a number from 0 to 4, indicating which quartile to calculate"

#: ../plugins/fn-stat/functions.c:2814
msgid ""
"If @{quart} < 0 or @{quart} > 4, this function returns a #NUM! error. If @"
"{quart} = 0, the smallest value of @{array} to be returned."
msgstr ""
"If @{quart} < 0 or @{quart} > 4, this function returns a #NUM! error. If @"
"{quart} = 0, the smallest value of @{array} to be returned."

#: ../plugins/fn-stat/functions.c:2815
msgid "If @{quart} is not an integer, it is truncated."
msgstr "If @{quart} is not an integer, it is truncated."

#: ../plugins/fn-stat/functions.c:2818
msgid "Then QUARTILE(A1:A5,1) equals 17.3."
msgstr "Then QUARTILE(A1:A5,1) equals 17.3."

#: ../plugins/fn-stat/functions.c:2853
msgid ""
"FTEST:p-value for the two-tailed hypothesis test comparing the variances of "
"two populations"
msgstr ""
"FTEST:p-value for the two-tailed hypothesis test comparing the variances of "
"two populations"

#: ../plugins/fn-stat/functions.c:2855 ../plugins/fn-stat/functions.c:2912
msgid "array1:sample from the first population"
msgstr "array1:sample from the first population"

#: ../plugins/fn-stat/functions.c:2856 ../plugins/fn-stat/functions.c:2913
msgid "array2:sample from the second population"
msgstr "array2:sample from the second population"

#: ../plugins/fn-stat/functions.c:2861
msgid "Then FTEST(A1:A5,B1:B5) equals 0.510815017."
msgstr "Then FTEST(A1:A5,B1:B5) equals 0.510815017."

#: ../plugins/fn-stat/functions.c:2910
msgid ""
"TTEST:p-value for a hypothesis test comparing the means of two populations "
"using the Student t-distribution"
msgstr ""
"TTEST:p-value for a hypothesis test comparing the means of two populations "
"using the Student t-distribution"

#: ../plugins/fn-stat/functions.c:2914
msgid "tails:number of tails to consider"
msgstr "tails:number of tails to consider"

#: ../plugins/fn-stat/functions.c:2915
msgid ""
"type:Type of test to perform. 1 indicates a test for paired variables, 2 a "
"test of unpaired variables with equal variances, and 3 a test of unpaired "
"variables with unequal variances"
msgstr ""
"type:Type of test to perform. 1 indicates a test for paired variables, 2 a "
"test of unpaired variables with equal variances, and 3 a test of unpaired "
"variables with unequal variances"

#: ../plugins/fn-stat/functions.c:2918
msgid ""
"If the data sets contain a different number of data points and the test is "
"paired (@{type} one), TTEST returns the #N/A error."
msgstr ""
"If the data sets contain a different number of data points and the test is "
"paired (@{type} one), TTEST returns the #N/A error."

#: ../plugins/fn-stat/functions.c:2920
msgid "@{tails} and @{type} are truncated to integers."
msgstr "@{tails} and @{type} are truncated to integers."

#: ../plugins/fn-stat/functions.c:2921
msgid "If @{tails} is not one or two, this function returns a #NUM! error."
msgstr "If @{tails} is not one or two, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:2922
msgid ""
"If @{type} is any other than one, two, or three, this function returns a "
"#NUM! error."
msgstr ""
"If @{type} is any other than one, two, or three, this function returns a "
"#NUM! error."

#: ../plugins/fn-stat/functions.c:2927
msgid ""
"Then TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.TTEST(A1:A5,B1:B5,2,1) equals "
"0.006255239.TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.TTEST(A1:A5,B1:B5,1,3) "
"equals 0.113821797."
msgstr ""
"Then TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.TTEST(A1:A5,B1:B5,2,1) equals "
"0.006255239.TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.TTEST(A1:A5,B1:B5,1,3) "
"equals 0.113821797."

#: ../plugins/fn-stat/functions.c:3085
msgid "FREQUENCY:frequency table"
msgstr "FREQUENCY:frequency table"

#: ../plugins/fn-stat/functions.c:3086
msgid "data_array:data values"
msgstr "data_array:data values"

#: ../plugins/fn-stat/functions.c:3087
msgid "bins_array:array of cutoff values"
msgstr "bins_array:array of cutoff values"

#: ../plugins/fn-stat/functions.c:3088
msgid "The results are given as an array."
msgstr "The results are given as an array."

#: ../plugins/fn-stat/functions.c:3089
msgid ""
"If the @{bins_array} is empty, this function returns the number of data "
"points in @{data_array}."
msgstr ""
"If the @{bins_array} is empty, this function returns the number of data "
"points in @{data_array}."

#: ../plugins/fn-stat/functions.c:3307
msgid "LINEST:multiple linear regression coefficients and statistics"
msgstr "LINEST:multiple linear regression coefficients and statistics"

#: ../plugins/fn-stat/functions.c:3308 ../plugins/fn-stat/functions.c:3616
msgid "known_ys:vector of values of dependent variable"
msgstr "known_ys:vector of values of dependent variable"

#: ../plugins/fn-stat/functions.c:3309 ../plugins/fn-stat/functions.c:3617
msgid ""
"known_xs:array of values of independent variables, defaults to a single "
"vector {1,…,n}"
msgstr ""
"known_xs:array of values of independent variables, defaults to a single "
"vector {1,…,n}"

#: ../plugins/fn-stat/functions.c:3310 ../plugins/fn-stat/functions.c:3407
#: ../plugins/fn-stat/functions.c:3619 ../plugins/fn-stat/functions.c:3765
#: ../plugins/fn-stat/functions.c:3864
msgid "affine:if true, the model contains a constant term, defaults to true"
msgstr "affine:if true, the model contains a constant term, defaults to true"

#: ../plugins/fn-stat/functions.c:3311
msgid ""
"stats:if true, some additional statistics are provided, defaults to false"
msgstr ""
"stats:if true, some additional statistics are provided, defaults to false"

#: ../plugins/fn-stat/functions.c:3312
msgid ""
"This function returns an array with the first row giving the regression "
"coefficients for the independent variables x_m, x_(m-1),…,x_2, x_1 followed "
"by the y-intercept if @{affine} is true."
msgstr ""
"This function returns an array with the first row giving the regression "
"coefficients for the independent variables x_m, x_(m-1),…,x_2, x_1 followed "
"by the y-intercept if @{affine} is true."

#: ../plugins/fn-stat/functions.c:3315
msgid ""
"If @{stats} is true, the second row contains the corresponding standard "
"errors of the regression coefficients.In this case, the third row contains "
"the R^2 value and the standard error for the predicted value. The fourth row "
"contains the observed F value and its degrees of freedom. Finally, the fifth "
"row contains the regression sum of squares and the residual sum of squares."
msgstr ""
"If @{stats} is true, the second row contains the corresponding standard "
"errors of the regression coefficients.In this case, the third row contains "
"the R^2 value and the standard error for the predicted value. The fourth row "
"contains the observed F value and its degrees of freedom. Finally, the fifth "
"row contains the regression sum of squares and the residual sum of squares."

#: ../plugins/fn-stat/functions.c:3322
msgid ""
"If @{affine} is false, R^2 is the uncentered version of the coefficient of "
"determination; that is the proportion of the sum of squares explained by the "
"model."
msgstr ""
"If @{affine} is false, R^2 is the uncentered version of the coefficient of "
"determination; that is the proportion of the sum of squares explained by the "
"model."

#: ../plugins/fn-stat/functions.c:3325 ../plugins/fn-stat/functions.c:3620
msgid ""
"If the length of @{known_ys} does not match the corresponding length of @"
"{known_xs}, this function returns a #NUM! error."
msgstr ""
"If the length of @{known_ys} does not match the corresponding length of @"
"{known_xs}, this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:3404
msgid "LOGREG:the logarithmic regression"
msgstr "LOGREG:the logarithmic regression"

#: ../plugins/fn-stat/functions.c:3406 ../plugins/fn-stat/functions.c:3862
msgid "known_xs:known x-values; defaults to the array {1, 2, 3, …}"
msgstr "known_xs:known x-values; defaults to the array {1, 2, 3, …}"

#: ../plugins/fn-stat/functions.c:3408 ../plugins/fn-stat/functions.c:3766
msgid ""
"stat:if true, extra statistical information will be returned; defaults to "
"FALSE"
msgstr ""
"stat:if true, extra statistical information will be returned; defaults to "
"FALSE"

#: ../plugins/fn-stat/functions.c:3409
msgid ""
"LOGREG function transforms your x's to z=ln(x) and applies the “least "
"squares” method to fit the linear equation y = m * z + b to your y's and z's "
"--- equivalent to fitting the equation y = m * ln(x) + b to y's and x's. "
"LOGREG returns an array having two columns and one row. m is given in the "
"first column and b in the second. "
msgstr ""
"LOGREG function transforms your xs to z=ln(x) and applies the “least "
"squares” method to fit the linear equation y = m * z + b to your ys and zs "
"--- equivalent to fitting the equation y = m * ln(x) + b to ys and xs. "
"LOGREG returns an array having two columns and one row. m is given in the "
"first column and b in the second. "

#: ../plugins/fn-stat/functions.c:3417
msgid ""
"Any extra statistical information is written below m and b in the result "
"array.  This extra statistical information consists of four rows of data:  "
"In the first row the standard error values for the coefficients m, b are "
"given.  The second row contains the square of R and the standard error for "
"the y estimate. The third row contains the F-observed value and the degrees "
"of freedom.  The last row contains the regression sum of squares and the "
"residual sum of squares.The default of @{stat} is FALSE."
msgstr ""
"Any extra statistical information is written below m and b in the result "
"array.  This extra statistical information consists of four rows of data:  "
"In the first row the standard error values for the coefficients m, b are "
"given.  The second row contains the square of R and the standard error for "
"the y estimate. The third row contains the F-observed value and the degrees "
"of freedom.  The last row contains the regression sum of squares and the "
"residual sum of squares.The default of @{stat} is FALSE."

#: ../plugins/fn-stat/functions.c:3426 ../plugins/fn-stat/functions.c:3781
#: ../plugins/fn-stat/functions.c:3872
msgid ""
"If @{known_ys} and @{known_xs} have unequal number of data points, this "
"function returns a #NUM! error."
msgstr ""
"If @{known_ys} and @{known_xs} have unequal number of data points, this "
"function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:3520
msgid "LOGFIT:logarithmic least square fit (using a trial and error method)"
msgstr "LOGFIT:logarithmic least square fit (using a trial and error method)"

#: ../plugins/fn-stat/functions.c:3524
msgid ""
"LOGFIT function applies the “least squares” method to fit the logarithmic "
"equation y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 to your data. "
"The graph of the equation is a logarithmic curve moved horizontally by c and "
"possibly mirrored across the y-axis (if sign = -1)."
msgstr ""
"LOGFIT function applies the “least squares” method to fit the logarithmic "
"equation y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 to your data. "
"The graph of the equation is a logarithmic curve moved horizontally by c and "
"possibly mirrored across the y-axis (if sign = -1)."

#: ../plugins/fn-stat/functions.c:3530
msgid ""
"LOGFIT returns an array having five columns and one row. `Sign' is given in "
"the first column, `a', `b', and `c' are given in columns 2 to 4. Column 5 "
"holds the sum of squared residuals."
msgstr ""
"LOGFIT returns an array having five columns and one row. `Sign' is given in "
"the first column, `a', `b', and `c' are given in columns 2 to 4. Column 5 "
"holds the sum of squared residuals."

#: ../plugins/fn-stat/functions.c:3534
msgid ""
"An error is returned when there are less than 3 different x's or y's, or "
"when the shape of the point cloud is too different from a ``logarithmic'' "
"one."
msgstr ""
"An error is returned when there are less than 3 different x's or y's, or "
"when the shape of the point cloud is too different from a ``logarithmic'' "
"one."

#: ../plugins/fn-stat/functions.c:3537
msgid ""
"You can use the above formula = a + b * ln(sign * (x - c)) or rearrange it "
"to = (exp((y - a) / b)) / sign + c to compute unknown y's or x's, "
"respectively. "
msgstr ""
"You can use the above formula = a + b * ln(sign * (x - c)) or rearrange it "
"to = (exp((y - a) / b)) / sign + c to compute unknown y's or x's, "
"respectively. "

#: ../plugins/fn-stat/functions.c:3542
msgid ""
"This is non-linear fitting by trial-and-error. The accuracy of `c' is: width "
"of x-range -> rounded to the next smaller (10^integer), times 0.000001. "
"There might be cases in which the returned fit is not the best possible."
msgstr ""
"This is non-linear fitting by trial-and-error. The accuracy of `c' is: width "
"of x-range -> rounded to the next smaller (10^integer), times 0.000001. "
"There might be cases in which the returned fit is not the best possible."

#: ../plugins/fn-stat/functions.c:3615
msgid ""
"TREND:estimates future values of a given data set using a least squares "
"approximation"
msgstr ""
"TREND:estimates future values of a given data set using a least squares "
"approximation"

#: ../plugins/fn-stat/functions.c:3618
msgid ""
"new_xs:array of x-values for which to estimate the y-values; defaults to @"
"{known_xs}"
msgstr ""
"new_xs:array of x-values for which to estimate the y-values; defaults to @"
"{known_xs}"

#: ../plugins/fn-stat/functions.c:3622
msgid ""
"Let us assume that the cells A1, A2, …, A5 contain numbers 11.4, 17.3, 21.3, "
"25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and "
"42.7."
msgstr ""
"Let us assume that the cells A1, A2, …, A5 contain numbers 11.4, 17.3, 21.3, "
"25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and "
"42.7."

#: ../plugins/fn-stat/functions.c:3625
msgid "Then TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}."
msgstr "Then TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}."

#: ../plugins/fn-stat/functions.c:3762
msgid "LOGEST:exponential least square fit"
msgstr "LOGEST:exponential least square fit"

#: ../plugins/fn-stat/functions.c:3764
msgid "known_xs:known x-values; default to an array {1, 2, 3, …}"
msgstr "known_xs:known x-values; default to an array {1, 2, 3, …}"

#: ../plugins/fn-stat/functions.c:3767
msgid ""
"LOGEST function applies the “least squares” method to fit an exponential "
"curve of the form\ty = b * m{1}^x{1} * m{2}^x{2}... to your data."
msgstr ""
"LOGEST function applies the “least squares” method to fit an exponential "
"curve of the form\ty = b * m{1}^x{1} * m{2}^x{2}... to your data."

#: ../plugins/fn-stat/functions.c:3771
msgid "LOGEST returns an array { m{n},m{n-1}, ...,m{1},b }."
msgstr "LOGEST returns an array { m{n},m{n-1}, ...,m{1},b }."

#: ../plugins/fn-stat/functions.c:3772
msgid ""
"Extra statistical information is written below the regression line "
"coefficients in the result array.  Extra statistical information consists of "
"four rows of data.  In the first row the standard error values for the "
"coefficients m1, (m2, ...), b are represented.  The second row contains the "
"square of R and the standard error for the y estimate.  The third row "
"contains the F-observed value and the degrees of freedom.  The last row "
"contains the regression sum of squares and the residual sum of squares."
msgstr ""
"Extra statistical information is written below the regression line "
"coefficients in the result array.  Extra statistical information consists of "
"four rows of data.  In the first row the standard error values for the "
"coefficients m1, (m2, ...), b are represented.  The second row contains the "
"square of R and the standard error for the y estimate.  The third row "
"contains the F-observed value and the degrees of freedom.  The last row "
"contains the regression sum of squares and the residual sum of squares."

#: ../plugins/fn-stat/functions.c:3860
msgid "GROWTH:exponential growth prediction"
msgstr "GROWTH:exponential growth prediction"

#: ../plugins/fn-stat/functions.c:3863
msgid ""
"new_xs:x-values for which to estimate the y-values; defaults to @{known_xs}"
msgstr ""
"new_xs:x-values for which to estimate the y-values; defaults to @{known_xs}"

#: ../plugins/fn-stat/functions.c:3865
msgid ""
"GROWTH function applies the “least squares” method to fit an exponential "
"curve to your data and predicts the exponential growth by using this curve."
msgstr ""
"GROWTH function applies the “least squares” method to fit an exponential "
"curve to your data and predicts the exponential growth by using this curve."

#: ../plugins/fn-stat/functions.c:3870
msgid ""
"GROWTH returns an array having one column and a row for each data point in @"
"{new_xs}."
msgstr ""
"GROWTH returns an array having one column and a row for each data point in @"
"{new_xs}."

#: ../plugins/fn-stat/functions.c:3948
msgid ""
"FORECAST:estimates a future value according to existing values using simple "
"linear regression"
msgstr ""
"FORECAST:estimates a future value according to existing values using simple "
"linear regression"

#: ../plugins/fn-stat/functions.c:3950
msgid "x:x-value whose matching y-value should be forecast"
msgstr "x:x-value whose matching y-value should be forecast"

#: ../plugins/fn-stat/functions.c:3953
msgid ""
"This function estimates a future value according to existing values using "
"simple linear regression."
msgstr ""
"This function estimates a future value according to existing values using "
"simple linear regression."

#: ../plugins/fn-stat/functions.c:3955 ../plugins/fn-stat/functions.c:4012
#: ../plugins/fn-stat/functions.c:4065
msgid ""
"If @{known_xs} or @{known_ys} contains no data entries or different number "
"of data entries, this function returns a #N/A error."
msgstr ""
"If @{known_xs} or @{known_ys} contains no data entries or different number "
"of data entries, this function returns a #N/A error."

#: ../plugins/fn-stat/functions.c:3957
msgid ""
"If the variance of the @{known_xs} is zero, this function returns a #DIV/0 "
"error."
msgstr ""
"If the variance of the @{known_xs} is zero, this function returns a #DIV/0 "
"error."

#: ../plugins/fn-stat/functions.c:3963
msgid "Then FORECAST(7,A1:A5,B1:B5) equals -10.859397661."
msgstr "Then FORECAST(7,A1:A5,B1:B5) equals -10.859397661."

#: ../plugins/fn-stat/functions.c:4009
msgid "INTERCEPT:the intercept of a linear regression line"
msgstr "INTERCEPT:the intercept of a linear regression line"

#: ../plugins/fn-stat/functions.c:4014 ../plugins/fn-stat/functions.c:4067
msgid ""
"If the variance of the @{known_xs} is zero, this function returns #DIV/0 "
"error."
msgstr ""
"If the variance of the @{known_xs} is zero, this function returns #DIV/0 "
"error."

#: ../plugins/fn-stat/functions.c:4020
msgid "Then INTERCEPT(A1:A5,B1:B5) equals -20.785117212."
msgstr "Then INTERCEPT(A1:A5,B1:B5) equals -20.785117212."

#: ../plugins/fn-stat/functions.c:4061
msgid "SLOPE:the slope of a linear regression line"
msgstr "SLOPE:the slope of a linear regression line"

#: ../plugins/fn-stat/functions.c:4072
msgid "Then SLOPE(A1:A5,B1:B5) equals 1.417959936."
msgstr "Then SLOPE(A1:A5,B1:B5) equals 1.417959936."

#: ../plugins/fn-stat/functions.c:4113
msgid "SUBTOTAL:the subtotal of the given list of arguments"
msgstr "SUBTOTAL:the subtotal of the given list of arguments"

#: ../plugins/fn-stat/functions.c:4114
msgid ""
"function_nbr:determines which function to use according to the following "
"table:\n"
"\t1   AVERAGE\n"
"\t2   COUNT\n"
"\t3   COUNTA\n"
"\t4   MAX\n"
"\t5   MIN\n"
"\t6   PRODUCT\n"
"\t7   STDEV\n"
"\t8   STDEVP\n"
"\t9   SUM\n"
"\t10   VAR\n"
"\t11   VARP"
msgstr ""
"function_nbr:determines which function to use according to the following "
"table:\n"
"\t1   AVERAGE\n"
"\t2   COUNT\n"
"\t3   COUNTA\n"
"\t4   MAX\n"
"\t5   MIN\n"
"\t6   PRODUCT\n"
"\t7   STDEV\n"
"\t8   STDEVP\n"
"\t9   SUM\n"
"\t10   VAR\n"
"\t11   VARP"

#: ../plugins/fn-stat/functions.c:4127
msgid "ref1:first value"
msgstr "ref1:first value"

#: ../plugins/fn-stat/functions.c:4128
msgid "ref2:second value"
msgstr "ref2:second value"

#: ../plugins/fn-stat/functions.c:4130
msgid ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39."
msgstr ""
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39."

#: ../plugins/fn-stat/functions.c:4131
msgid ""
"Then SUBTOTAL(1,A1:A5) equals 30.SUBTOTAL(6,A1:A5) equals 22378356.SUBTOTAL"
"(7,A1:A5) equals 6.164414003.SUBTOTAL(9,A1:A5) equals 150.SUBTOTAL(11,A1:A5) "
"equals 30.4."
msgstr ""
"Then SUBTOTAL(1,A1:A5) equals 30.SUBTOTAL(6,A1:A5) equals 22378356.SUBTOTAL"
"(7,A1:A5) equals 6.164414003.SUBTOTAL(9,A1:A5) equals 150.SUBTOTAL(11,A1:A5) "
"equals 30.4."

#: ../plugins/fn-stat/functions.c:4210
msgid "CRONBACH:Cronbach's alpha"
msgstr "CRONBACH:Cronbach's alpha"

#: ../plugins/fn-stat/functions.c:4211
msgid "ref1:first data set"
msgstr "ref1:first data set"

#: ../plugins/fn-stat/functions.c:4212
msgid "ref2:second data set"
msgstr "ref2:second data set"

#: ../plugins/fn-stat/functions.c:4323
msgid ""
"GEOMDIST:probability mass or cumulative distribution function of the "
"geometric distribution"
msgstr ""
"GEOMDIST:probability mass or cumulative distribution function of the "
"geometric distribution"

#: ../plugins/fn-stat/functions.c:4324
msgid "k:number of trials"
msgstr "k:number of trials"

#: ../plugins/fn-stat/functions.c:4325
msgid "p:probability of success in any trial"
msgstr "p:probability of success in any trial"

#: ../plugins/fn-stat/functions.c:4327
msgid "If @{k} < 0 this function returns a #NUM! error."
msgstr "If @{k} < 0 this function returns a #NUM! error."

#: ../plugins/fn-stat/functions.c:4354
msgid "LOGISTIC:probability density function of the logistic distribution"
msgstr "LOGISTIC:probability density function of the logistic distribution"

#: ../plugins/fn-stat/functions.c:4385
msgid "PARETO:probability density function of the Pareto distribution"
msgstr "PARETO:probability density function of the Pareto distribution"

#: ../plugins/fn-stat/functions.c:4387
msgid "a:exponent"
msgstr "a:exponent"

#: ../plugins/fn-stat/functions.c:4388 ../plugins/fn-stat/functions.c:4496
msgid "b:scale parameter"
msgstr "b:scale parameter"

#: ../plugins/fn-stat/functions.c:4419
msgid "RAYLEIGH:probability density function of the Rayleigh distribution"
msgstr "RAYLEIGH:probability density function of the Rayleigh distribution"

#: ../plugins/fn-stat/functions.c:4421 ../plugins/fn-stat/functions.c:4457
msgid "sigma:scale parameter"
msgstr "sigma:scale parameter"

#: ../plugins/fn-stat/functions.c:4454
msgid ""
"RAYLEIGHTAIL:probability density function of the Rayleigh tail distribution"
msgstr ""
"RAYLEIGHTAIL:probability density function of the Rayleigh tail distribution"

#: ../plugins/fn-stat/functions.c:4456
msgid "a:lower limit"
msgstr "a:lower limit"

#: ../plugins/fn-stat/functions.c:4492
msgid ""
"EXPPOWDIST:the probability density function of the Exponential Power "
"distribution"
msgstr ""
"EXPPOWDIST:the probability density function of the Exponential Power "
"distribution"

#: ../plugins/fn-stat/functions.c:4498
msgid ""
"This distribution has been recommended for lifetime analysis when a U-shaped "
"hazard function is desired. This corresponds to rapid failure once the "
"product starts to wear out after a period of steady or even improving "
"reliability."
msgstr ""
"This distribution has been recommended for lifetime analysis when a U-shaped "
"hazard function is desired. This corresponds to rapid failure once the "
"product starts to wear out after a period of steady or even improving "
"reliability."

#: ../plugins/fn-stat/functions.c:4526
msgid "LAPLACE:probability density function of the Laplace distribution"
msgstr "LAPLACE:probability density function of the Laplace distribution"

#: ../plugins/fn-stat/functions.c:4528
msgid "a:mean"
msgstr "a:mean"

#: ../plugins/fn-stat/functions.c:4549
msgid ""
"PERMUTATIONA:the number of permutations of @{y} objects chosen from @{x} "
"objects with repetition allowed"
msgstr ""
"PERMUTATIONA:the number of permutations of @{y} objects chosen from @{x} "
"objects with repetition allowed"

#: ../plugins/fn-stat/functions.c:4550
msgid "x:total number of objects"
msgstr "x:total number of objects"

#: ../plugins/fn-stat/functions.c:4551
msgid "y:number of selected objects"
msgstr "y:number of selected objects"

#: ../plugins/fn-stat/functions.c:4552
msgid "If both @{x} and @{y} equal 0, PERMUTATIONA returns 1."
msgstr "If both @{x} and @{y} equal 0, PERMUTATIONA returns 1."

#: ../plugins/fn-stat/functions.c:4553
msgid "If @{x} < 0 or @{y} < 0, PERMUTATIONA returns #NUM!"
msgstr "If @{x} < 0 or @{y} < 0, PERMUTATIONA returns #NUM!"

#: ../plugins/fn-stat/functions.c:4554
msgid "If @{x} or @{y} are not integers, they are truncated"
msgstr "If @{x} or @{y} are not integers, they are truncated"

#: ../plugins/fn-stat/functions.c:4582
msgid "LKSTEST:Lilliefors (Kolmogorov-Smirnov) Test of Normality"
msgstr "LKSTEST:Lilliefors (Kolmogorov-Smirnov) Test of Normality"

#: ../plugins/fn-stat/functions.c:4583 ../plugins/fn-stat/functions.c:4700
#: ../plugins/fn-stat/functions.c:4784 ../plugins/fn-stat/functions.c:4869
msgid "x:array of sample values"
msgstr "x:array of sample values"

#: ../plugins/fn-stat/functions.c:4584
msgid ""
"This function returns an array with the first row giving the p-value of the "
"Lilliefors (Kolmogorov-Smirnov) Test, the second row the test statistic of "
"the test, and the third the number of observations in the sample."
msgstr ""
"This function returns an array with the first row giving the p-value of the "
"Lilliefors (Kolmogorov-Smirnov) Test, the second row the test statistic of "
"the test, and the third the number of observations in the sample."

#: ../plugins/fn-stat/functions.c:4586
msgid "If there are less than 5 sample values, LKSTEST returns #VALUE!"
msgstr "If there are less than 5 sample values, LKSTEST returns #VALUE!"

#: ../plugins/fn-stat/functions.c:4588
msgid "wiki:en:Lilliefors_test"
msgstr "wiki:en:Lilliefors_test"

#: ../plugins/fn-stat/functions.c:4699
msgid "SFTEST:Shapiro-Francia Test of Normality"
msgstr "SFTEST:Shapiro-Francia Test of Normality"

#: ../plugins/fn-stat/functions.c:4701
msgid ""
"This function returns an array with the first row giving the p-value of the "
"Shapiro-Francia Test, the second row the test statistic of the test, and the "
"third the number of observations in the sample."
msgstr ""
"This function returns an array with the first row giving the p-value of the "
"Shapiro-Francia Test, the second row the test statistic of the test, and the "
"third the number of observations in the sample."

#: ../plugins/fn-stat/functions.c:4703
msgid ""
"If there are less than 5 or more than 5000 sample values, SFTEST returns "
"#VALUE!"
msgstr ""
"If there are less than 5 or more than 5000 sample values, SFTEST returns "
"#VALUE!"

#: ../plugins/fn-stat/functions.c:4783
msgid "CVMTEST:Cramér-von Mises Test of Normality"
msgstr "CVMTEST:Cramér-von Mises Test of Normality"

#: ../plugins/fn-stat/functions.c:4785
msgid ""
"This function returns an array with the first row giving the p-value of the "
"Cramér-von Mises Test, the second row the test statistic of the test, and "
"the third the number of observations in the sample."
msgstr ""
"This function returns an array with the first row giving the p-value of the "
"Cramér-von Mises Test, the second row the test statistic of the test, and "
"the third the number of observations in the sample."

#: ../plugins/fn-stat/functions.c:4787
msgid "If there are less than 8 sample values, CVMTEST returns #VALUE!"
msgstr "If there are less than 8 sample values, CVMTEST returns #VALUE!"

#: ../plugins/fn-stat/functions.c:4789
msgid "wiki:en:Cramér–von-Mises_criterion"
msgstr "wiki:en:Cramér–von-Mises_criterion"

#: ../plugins/fn-stat/functions.c:4868
msgid "ADTEST:Anderson-Darling Test of Normality"
msgstr "ADTEST:Anderson-Darling Test of Normality"

#: ../plugins/fn-stat/functions.c:4870
msgid ""
"This function returns an array with the first row giving the p-value of the "
"Anderson-Darling Test, the second row the test statistic of the test, and "
"the third the number of observations in the sample."
msgstr ""
"This function returns an array with the first row giving the p-value of the "
"Anderson-Darling Test, the second row the test statistic of the test, and "
"the third the number of observations in the sample."

#: ../plugins/fn-stat/functions.c:4872
msgid "If there are less than 8 sample values, ADTEST returns #VALUE!"
msgstr "If there are less than 8 sample values, ADTEST returns #VALUE!"

#: ../plugins/fn-stat/functions.c:4874
msgid "wiki:en:Anderson–Darling_test"
msgstr "wiki:en:Anderson–Darling_test"

#: ../plugins/fn-string/functions.c:56
msgid "CHAR:the CP1252 (Windows-1252) character for the code point @{x}"
msgstr "CHAR:the CP1252 (Windows-1252) character for the code point @{x}"

#: ../plugins/fn-string/functions.c:57
msgid "x:code point"
msgstr "x:code point"

#: ../plugins/fn-string/functions.c:58
msgid "CHAR(@{x}) returns the CP1252 (Windows-1252) character with code @{x}."
msgstr "CHAR(@{x}) returns the CP1252 (Windows-1252) character with code @{x}."

#: ../plugins/fn-string/functions.c:59
msgid "@{x} must be in the range 1 to 255."
msgstr "@{x} must be in the range 1 to 255."

#: ../plugins/fn-string/functions.c:60 ../plugins/fn-string/functions.c:136
msgid ""
"CP1252 (Windows-1252) is also known as the \"ANSI code page\", but it is not "
"an ANSI standard."
msgstr ""
"CP1252 (Windows-1252) is also known as the \"ANSI code page\", but it is not "
"an ANSI standard."

#: ../plugins/fn-string/functions.c:62
msgid ""
"CP1252 (Windows-1252) is based on an early draft of ISO-8859-1, and contains "
"all of its printable characters. It also contains all of ISO-8859-15's "
"printable characters (but partially at different positions.)"
msgstr ""
"CP1252 (Windows-1252) is based on an early draft of ISO-8859-1, and contains "
"all of its printable characters. It also contains all of ISO-8859-15's "
"printable characters (but partially at different positions.)"

#: ../plugins/fn-string/functions.c:66 ../plugins/fn-string/functions.c:138
msgid ""
"In CP1252 (Windows-1252), 129, 141, 143, 144, and 157 do not have matching "
"characters."
msgstr ""
"In CP1252 (Windows-1252), 129, 141, 143, 144, and 157 do not have matching "
"characters."

#: ../plugins/fn-string/functions.c:67 ../plugins/fn-string/functions.c:139
msgid ""
"For @{x} from 1 to 255 except 129, 141, 143, 144, and 157 we have CODE(CHAR(@"
"{x}))=@{x}."
msgstr ""
"For @{x} from 1 to 255 except 129, 141, 143, 144, and 157 we have CODE(CHAR(@"
"{x}))=@{x}."

#: ../plugins/fn-string/functions.c:105
msgid ""
"UNICHAR:the Unicode character represented by the Unicode code point @{x}"
msgstr ""
"UNICHAR:the Unicode character represented by the Unicode code point @{x}"

#: ../plugins/fn-string/functions.c:106
msgid "x:Unicode code point"
msgstr "x:Unicode code point"

#: ../plugins/fn-string/functions.c:133
msgid "CODE:the CP1252 (Windows-1252) code point for the character @{c}"
msgstr "CODE:the CP1252 (Windows-1252) code point for the character @{c}"

#: ../plugins/fn-string/functions.c:134 ../plugins/fn-string/functions.c:179
msgid "c:character"
msgstr "c:character"

#: ../plugins/fn-string/functions.c:135
msgid "@{c} must be a valid CP1252 (Windows-1252) character."
msgstr "@{c} must be a valid CP1252 (Windows-1252) character."

#: ../plugins/fn-string/functions.c:137
msgid ""
"CP1252 (Windows-1252) is based on an early draft of ISO-8859-1, and contains "
"all of its printable characters (but partially at different positions.)"
msgstr ""
"CP1252 (Windows-1252) is based on an early draft of ISO-8859-1, and contains "
"all of its printable characters (but partially at different positions.)"

#: ../plugins/fn-string/functions.c:178
msgid "UNICODE:the Unicode code point for the character @{c}"
msgstr "UNICODE:the Unicode code point for the character @{c}"

#: ../plugins/fn-string/functions.c:244
msgid "EXACT:TRUE if @{string1} is exactly equal to @{string2}"
msgstr "EXACT:TRUE if @{string1} is exactly equal to @{string2}"

#: ../plugins/fn-string/functions.c:245
msgid "string1:first string"
msgstr "string1:first string"

#: ../plugins/fn-string/functions.c:246
msgid "string2:second string"
msgstr "string2:second string"

#: ../plugins/fn-string/functions.c:264
msgid "LEN:the number of characters of the string @{s}"
msgstr "LEN:the number of characters of the string @{s}"

#: ../plugins/fn-string/functions.c:265 ../plugins/fn-string/functions.c:282
#: ../plugins/fn-string/functions.c:300 ../plugins/fn-string/functions.c:332
#: ../plugins/fn-string/functions.c:384 ../plugins/fn-string/functions.c:424
#: ../plugins/fn-string/functions.c:511 ../plugins/fn-string/functions.c:547
msgid "s:the string"
msgstr "s:the string"

#: ../plugins/fn-string/functions.c:281
msgid "LENB:the number of bytes in the string @{s}"
msgstr "LENB:the number of bytes in the string @{s}"

#: ../plugins/fn-string/functions.c:299
msgid "LEFT:the first @{num_chars} characters of the string @{s}"
msgstr "LEFT:the first @{num_chars} characters of the string @{s}"

#: ../plugins/fn-string/functions.c:301 ../plugins/fn-string/functions.c:512
msgid "num_chars:the number of characters to return (defaults to 1)"
msgstr "num_chars:the number of characters to return (defaults to 1)"

#: ../plugins/fn-string/functions.c:302
msgid ""
"If the string @{s} is in a right-to-left script, the returned first "
"characters are from the right of the string."
msgstr ""
"If the string @{s} is in a right-to-left script, the returned first "
"characters are from the right of the string."

#: ../plugins/fn-string/functions.c:331
msgid ""
"LEFTB:the first characters  of the string @{s} comprising at most @"
"{num_bytes} bytes"
msgstr ""
"LEFTB:the first characters  of the string @{s} comprising at most @"
"{num_bytes} bytes"

#: ../plugins/fn-string/functions.c:333 ../plugins/fn-string/functions.c:426
#: ../plugins/fn-string/functions.c:548
msgid "num_bytes:the maximum number of bytes to return (defaults to 1)"
msgstr "num_bytes:the maximum number of bytes to return (defaults to 1)"

#: ../plugins/fn-string/functions.c:334 ../plugins/fn-string/functions.c:427
#: ../plugins/fn-string/functions.c:549 ../plugins/fn-string/functions.c:894
#: ../plugins/fn-string/functions.c:1385
msgid ""
"The semantics of this function is subject to change as various applications "
"implement it."
msgstr ""
"The semantics of this function is subject to change as various applications "
"implement it."

#: ../plugins/fn-string/functions.c:335
msgid ""
"If the string is in a right-to-left script, the returned first characters "
"are from the right of the string."
msgstr ""
"If the string is in a right-to-left script, the returned first characters "
"are from the right of the string."

#: ../plugins/fn-string/functions.c:336 ../plugins/fn-string/functions.c:428
#: ../plugins/fn-string/functions.c:472 ../plugins/fn-string/functions.c:551
#: ../plugins/fn-string/functions.c:895 ../plugins/fn-string/functions.c:1386
msgid ""
"While this function is syntactically Excel compatible, the differences in "
"the underlying text encoding will usually yield different results."
msgstr ""
"While this function is syntactically Excel compatible, the differences in "
"the underlying text encoding will usually yield different results."

#: ../plugins/fn-string/functions.c:337 ../plugins/fn-string/functions.c:430
#: ../plugins/fn-string/functions.c:474 ../plugins/fn-string/functions.c:552
#: ../plugins/fn-string/functions.c:897 ../plugins/fn-string/functions.c:1388
msgid ""
"While this function is OpenFormula compatible, most of its behavior is, at "
"this time, implementation specific."
msgstr ""
"While this function is OpenFormula compatible, most of its behaviour is, at "
"this time, implementation specific."

#: ../plugins/fn-string/functions.c:365
msgid "LOWER:a lower-case version of the string @{text}"
msgstr "LOWER:a lower-case version of the string @{text}"

#: ../plugins/fn-string/functions.c:383
msgid ""
"MID:the substring of the string @{s} starting at position @{position} "
"consisting of @{length} characters"
msgstr ""
"MID:the substring of the string @{s} starting at position @{position} "
"consisting of @{length} characters"

#: ../plugins/fn-string/functions.c:385
msgid "position:the starting position"
msgstr "position:the starting position"

#: ../plugins/fn-string/functions.c:386
msgid "length:the number of characters to return"
msgstr "length:the number of characters to return"

#: ../plugins/fn-string/functions.c:423
msgid ""
"MIDB:the characters following the first @{start_pos} bytes comprising at "
"most @{num_bytes} bytes"
msgstr ""
"MIDB:the characters following the first @{start_pos} bytes comprising at "
"most @{num_bytes} bytes"

#: ../plugins/fn-string/functions.c:425
msgid "start_pos:the number of the byte with which to start (defaults to 1)"
msgstr "start_pos:the number of the byte with which to start (defaults to 1)"

#: ../plugins/fn-string/functions.c:467
msgid ""
"FINDB:first byte position of @{string1} in @{string2} following byte "
"position @{start}"
msgstr ""
"FINDB:first byte position of @{string1} in @{string2} following byte "
"position @{start}"

#: ../plugins/fn-string/functions.c:468 ../plugins/fn-string/functions.c:696
msgid "string1:search string"
msgstr "string1:search string"

#: ../plugins/fn-string/functions.c:469 ../plugins/fn-string/functions.c:697
msgid "string2:search field"
msgstr "string2:search field"

#: ../plugins/fn-string/functions.c:470 ../plugins/fn-string/functions.c:1375
msgid "start:starting byte position, defaults to 1"
msgstr "start:starting byte position, defaults to 1"

#: ../plugins/fn-string/functions.c:471 ../plugins/fn-string/functions.c:699
msgid "This search is case-sensitive."
msgstr "This search is case-sensitive."

#: ../plugins/fn-string/functions.c:510
msgid "RIGHT:the last @{num_chars} characters of the string @{s}"
msgstr "RIGHT:the last @{num_chars} characters of the string @{s}"

#: ../plugins/fn-string/functions.c:513 ../plugins/fn-string/functions.c:550
msgid ""
"If the string @{s} is in a right-to-left script, the returned last "
"characters are from the left of the string."
msgstr ""
"If the string @{s} is in a right-to-left script, the returned last "
"characters are from the left of the string."

#: ../plugins/fn-string/functions.c:546
msgid ""
"RIGHTB:the last characters of the string @{s} comprising at most @"
"{num_bytes} bytes"
msgstr ""
"RIGHTB:the last characters of the string @{s} comprising at most @"
"{num_bytes} bytes"

#: ../plugins/fn-string/functions.c:581
msgid "UPPER:an upper-case version of the string @{text}"
msgstr "UPPER:an upper-case version of the string @{text}"

#: ../plugins/fn-string/functions.c:600
msgid "CONCATENATE:the concatenation of the strings @{s1}, @{s2},…"
msgstr "CONCATENATE:the concatenation of the strings @{s1}, @{s2},…"

#: ../plugins/fn-string/functions.c:601
msgid "s1:first string"
msgstr "s1:first string"

#: ../plugins/fn-string/functions.c:602
msgid "s2:second string"
msgstr "s2:second string"

#: ../plugins/fn-string/functions.c:622
msgid "REPT:@{num} repetitions of string @{text}"
msgstr "REPT:@{num} repetitions of string @{text}"

#: ../plugins/fn-string/functions.c:624
msgid "num:non-negative integer"
msgstr "num:non-negative integer"

#: ../plugins/fn-string/functions.c:666
msgid "CLEAN:@{text} with any non-printable characters removed"
msgstr "CLEAN:@{text} with any non-printable characters removed"

#: ../plugins/fn-string/functions.c:668
msgid ""
"CLEAN removes non-printable characters from its argument leaving only "
"regular characters and white-space."
msgstr ""
"CLEAN removes non-printable characters from its argument leaving only "
"regular characters and white-space."

#: ../plugins/fn-string/functions.c:695
msgid ""
"FIND:first position of @{string1} in @{string2} following position @{start}"
msgstr ""
"FIND:first position of @{string1} in @{string2} following position @{start}"

#: ../plugins/fn-string/functions.c:698 ../plugins/fn-string/functions.c:1306
msgid "start:starting position, defaults to 1"
msgstr "start:starting position, defaults to 1"

#: ../plugins/fn-string/functions.c:733
msgid "FIXED:formatted string representation of @{num}"
msgstr "FIXED:formatted string representation of @{num}"

#: ../plugins/fn-string/functions.c:734 ../plugins/fn-string/functions.c:1231
msgid "num:number"
msgstr "num:number"

#: ../plugins/fn-string/functions.c:735
msgid "decimals:number of decimals"
msgstr "decimals:number of decimals"

#: ../plugins/fn-string/functions.c:736
msgid ""
"no_commas:TRUE if no thousand separators should be used, defaults to FALSE"
msgstr ""
"no_commas:TRUE if no thousand separators should be used, defaults to FALSE"

#: ../plugins/fn-string/functions.c:793
msgid "PROPER:@{text} with initial of each word capitalised"
msgstr "PROPER:@{text} with initial of each word capitalised"

#: ../plugins/fn-string/functions.c:835
msgid ""
"REPLACE:string @{old} with @{num} characters starting at @{start} replaced "
"by @{new}"
msgstr ""
"REPLACE:string @{old} with @{num} characters starting at @{start} replaced "
"by @{new}"

#: ../plugins/fn-string/functions.c:837 ../plugins/fn-string/functions.c:888
msgid "old:original text"
msgstr "old:original text"

#: ../plugins/fn-string/functions.c:838
msgid "start:starting position"
msgstr "start:starting position"

#: ../plugins/fn-string/functions.c:839
msgid "num:number of characters to be replaced"
msgstr "num:number of characters to be replaced"

#: ../plugins/fn-string/functions.c:840 ../plugins/fn-string/functions.c:891
#: ../plugins/fn-string/functions.c:1159
msgid "new:replacement string"
msgstr "new:replacement string"

#: ../plugins/fn-string/functions.c:886
msgid ""
"REPLACEB:string @{old} with up to @{num} bytes starting at @{start} replaced "
"by @{new}"
msgstr ""
"REPLACEB:string @{old} with up to @{num} bytes starting at @{start} replaced "
"by @{new}"

#: ../plugins/fn-string/functions.c:889
msgid "start:starting byte position"
msgstr "start:starting byte position"

#: ../plugins/fn-string/functions.c:890
msgid "num:number of bytes to be replaced"
msgstr "num:number of bytes to be replaced"

#: ../plugins/fn-string/functions.c:892
msgid ""
"REPLACEB replaces the string of valid unicode characters starting at the "
"byte @{start} and ending at @{start}+@{num}-1 with the string @{new}."
msgstr ""
"REPLACEB replaces the string of valid unicode characters starting at the "
"byte @{start} and ending at @{start}+@{num}-1 with the string @{new}."

#: ../plugins/fn-string/functions.c:940
msgid "T:@{value} if and only if @{value} is text, otherwise empty"
msgstr "T:@{value} if and only if @{value} is text, otherwise empty"

#: ../plugins/fn-string/functions.c:941
msgid "value:original value"
msgstr "value:original value"

#: ../plugins/fn-string/functions.c:963
msgid "TEXT:@{value} as a string formatted as @{format}"
msgstr "TEXT:@{value} as a string formatted as @{format}"

#: ../plugins/fn-string/functions.c:964
msgid "value:value to be formatted"
msgstr "value:value to be formatted"

#: ../plugins/fn-string/functions.c:965
msgid "format:desired format"
msgstr "format:desired format"

#: ../plugins/fn-string/functions.c:1017
msgid "TRIM:@{text} with only single spaces between words"
msgstr "TRIM:@{text} with only single spaces between words"

#: ../plugins/fn-string/functions.c:1064
msgid "VALUE:numeric value of @{text}"
msgstr "VALUE:numeric value of @{text}"

#: ../plugins/fn-string/functions.c:1097
msgid "NUMBERVALUE:numeric value of @{text}"
msgstr "NUMBERVALUE:numeric value of @{text}"

#: ../plugins/fn-string/functions.c:1099
msgid "separator:decimal separator"
msgstr "separator:decimal separator"

#: ../plugins/fn-string/functions.c:1100
msgid ""
"If @{text} does not look like a decimal number, NUMBERVALUE returns the "
"value VALUE would return (ignoring the given @{separator})."
msgstr ""
"If @{text} does not look like a decimal number, NUMBERVALUE returns the "
"value VALUE would return (ignoring the given @{separator})."

#: ../plugins/fn-string/functions.c:1156
msgid "SUBSTITUTE:@{text} with all occurrences of @{old} replaced by @{new}"
msgstr "SUBSTITUTE:@{text} with all occurrences of @{old} replaced by @{new}"

#: ../plugins/fn-string/functions.c:1157 ../plugins/fn-string/functions.c:1567
msgid "text:original text"
msgstr "text:original text"

#: ../plugins/fn-string/functions.c:1158
msgid "old:string to be replaced"
msgstr "old:string to be replaced"

#: ../plugins/fn-string/functions.c:1160
msgid ""
"num:if @{num} is specified and a number only the @{num}th occurrence of @"
"{old} is replaced"
msgstr ""
"num:if @{num} is specified and a number only the @{num}th occurrence of @"
"{old} is replaced"

#: ../plugins/fn-string/functions.c:1230
msgid "DOLLAR:@{num} formatted as currency"
msgstr "DOLLAR:@{num} formatted as currency"

#: ../plugins/fn-string/functions.c:1232
msgid "decimals:decimals"
msgstr "decimals:decimals"

#: ../plugins/fn-string/functions.c:1302
msgid ""
"SEARCH:the location of the @{search} string within @{text} after position @"
"{start}"
msgstr ""
"SEARCH:the location of the @{search} string within @{text} after position @"
"{start}"

#: ../plugins/fn-string/functions.c:1304 ../plugins/fn-string/functions.c:1373
msgid "search:search string"
msgstr "search:search string"

#: ../plugins/fn-string/functions.c:1305 ../plugins/fn-string/functions.c:1374
msgid "text:search field"
msgstr "text:search field"

#: ../plugins/fn-string/functions.c:1307 ../plugins/fn-string/functions.c:1376
msgid ""
"@{search} may contain wildcard characters (*) and question marks (?). A "
"question mark matches any single character, and a wildcard matches any "
"string including the empty string. To search for * or ?, precede the symbol "
"with ~."
msgstr ""
"@{search} may contain wildcard characters (*) and question marks (?). A "
"question mark matches any single character, and a wildcard matches any "
"string including the empty string. To search for * or ?, precede the symbol "
"with ~."

#: ../plugins/fn-string/functions.c:1312 ../plugins/fn-string/functions.c:1381
msgid "This search is not case sensitive."
msgstr "This search is not case sensitive."

#: ../plugins/fn-string/functions.c:1313
msgid "If @{search} is not found, SEARCH returns #VALUE!"
msgstr "If @{search} is not found, SEARCH returns #VALUE!"

#: ../plugins/fn-string/functions.c:1314
msgid ""
"If @{start} is less than one or it is greater than the length of @{text}, "
"SEARCH returns #VALUE!"
msgstr ""
"If @{start} is less than one or it is greater than the length of @{text}, "
"SEARCH returns #VALUE!"

#: ../plugins/fn-string/functions.c:1371
msgid ""
"SEARCHB:the location of the @{search} string within @{text} after byte "
"position @{start}"
msgstr ""
"SEARCHB:the location of the @{search} string within @{text} after byte "
"position @{start}"

#: ../plugins/fn-string/functions.c:1382
msgid "If @{search} is not found, SEARCHB returns #VALUE!"
msgstr "If @{search} is not found, SEARCHB returns #VALUE!"

#: ../plugins/fn-string/functions.c:1383
msgid ""
"If @{start} is less than one or it is greater than the byte length of @"
"{text}, SEARCHB returns #VALUE!"
msgstr ""
"If @{start} is less than one or it is greater than the byte length of @"
"{text}, SEARCHB returns #VALUE!"

#: ../plugins/fn-string/functions.c:1439
msgid ""
"ASC:text with full-width katakana and ASCII characters converted to half-"
"width"
msgstr ""
"ASC:text with full-width katakana and ASCII characters converted to half-"
"width"

#: ../plugins/fn-string/functions.c:1441
msgid ""
"ASC converts full-width katakana and ASCII characters to half-width "
"equivalent characters, copying all others. "
msgstr ""
"ASC converts full-width katakana and ASCII characters to half-width "
"equivalent characters, copying all others. "

#: ../plugins/fn-string/functions.c:1442 ../plugins/fn-string/functions.c:1570
msgid ""
"The distinction between half-width and full-width characters is described in "
"http://www.unicode.org/reports/tr11/."
msgstr ""
"The distinction between half-width and full-width characters is described in "
"http://www.unicode.org/reports/tr11/."

#: ../plugins/fn-string/functions.c:1443 ../plugins/fn-string/functions.c:1572
msgid "For most strings, this function has the same effect as in Excel."
msgstr "For most strings, this function has the same effect as in Excel."

#: ../plugins/fn-string/functions.c:1444
msgid ""
"While in obsolete encodings ASC used to translate between 2-byte and 1-byte "
"characters, this is not the case in UTF-8."
msgstr ""
"While in obsolete encodings ASC used to translate between 2-byte and 1-byte "
"characters, this is not the case in UTF-8."

#: ../plugins/fn-string/functions.c:1566
msgid ""
"JIS:text with half-width katakana and ASCII characters converted to full-"
"width"
msgstr ""
"JIS:text with half-width katakana and ASCII characters converted to full-"
"width"

#: ../plugins/fn-string/functions.c:1568
msgid ""
"JIS converts half-width katakana and ASCII characters to full-width "
"equivalent characters, copying all others. "
msgstr ""
"JIS converts half-width katakana and ASCII characters to full-width "
"equivalent characters, copying all others. "

#: ../plugins/fn-string/functions.c:1573
msgid ""
"While in obsolete encodings JIS used to translate between 1-byte and 2-byte "
"characters, this is not the case in UTF-8."
msgstr ""
"While in obsolete encodings JIS used to translate between 1-byte and 2-byte "
"characters, this is not the case in UTF-8."

#: ../plugins/fn-tsa/functions.c:94
msgid ""
"Possible interpolation methods are:\n"
"0: linear;\n"
"1: linear with averaging;\n"
"2: staircase;\n"
"3: staircase with averaging;\n"
"4: natural cubic spline;\n"
"5: natural cubic spline with averaging."
msgstr ""
"Possible interpolation methods are:\n"
"0: linear;\n"
"1: linear with averaging;\n"
"2: staircase;\n"
"3: staircase with averaging;\n"
"4: natural cubic spline;\n"
"5: natural cubic spline with averaging."

#: ../plugins/fn-tsa/functions.c:381
msgid ""
"INTERPOLATION:interpolated values corresponding to the given abscissa targets"
msgstr ""
"INTERPOLATION:interpolated values corresponding to the given abscissa targets"

#: ../plugins/fn-tsa/functions.c:382
msgid "abscissae:abscissae of the given data points"
msgstr "abscissae:abscissae of the given data points"

#: ../plugins/fn-tsa/functions.c:383
msgid "ordinates:ordinates of the given data points"
msgstr "ordinates:ordinates of the given data points"

#: ../plugins/fn-tsa/functions.c:384
msgid "targets:abscissae of the interpolated data"
msgstr "targets:abscissae of the interpolated data"

#: ../plugins/fn-tsa/functions.c:385
msgid "interpolation:method of interpolation, defaults to 0 ('linear')"
msgstr "interpolation:method of interpolation, defaults to 0 ('linear')"

#: ../plugins/fn-tsa/functions.c:386 ../plugins/fn-tsa/functions.c:575
msgid "The output consists always of one column of numbers."
msgstr "The output consists always of one column of numbers."

#: ../plugins/fn-tsa/functions.c:388
msgid ""
"The @{abscissae} should be given in increasing order. If the @{abscissae} is "
"not in increasing order the INTERPOLATION function is significantly slower."
msgstr ""
"The @{abscissae} should be given in increasing order. If the @{abscissae} is "
"not in increasing order the INTERPOLATION function is significantly slower."

#: ../plugins/fn-tsa/functions.c:390
msgid "If any two @{abscissae} values are equal an error is returned."
msgstr "If any two @{abscissae} values are equal an error is returned."

#: ../plugins/fn-tsa/functions.c:391
msgid ""
"If any of interpolation methods 1 ('linear with averaging'), 3 ('staircase "
"with averaging'), and 5 ('natural cubic spline with averaging') is used, the "
"number of returned values is one less than the number of targets and the "
"target values must be given in increasing order. The values returned are the "
"average heights of the interpolation function on the intervals determined by "
"consecutive target values."
msgstr ""
"If any of interpolation methods 1 ('linear with averaging'), 3 ('staircase "
"with averaging'), and 5 ('natural cubic spline with averaging') is used, the "
"number of returned values is one less than the number of targets and the "
"target values must be given in increasing order. The values returned are the "
"average heights of the interpolation function on the intervals determined by "
"consecutive target values."

#: ../plugins/fn-tsa/functions.c:398 ../plugins/fn-tsa/functions.c:582
msgid "Strings and empty cells in @{abscissae} and @{ordinates} are ignored."
msgstr "Strings and empty cells in @{abscissae} and @{ordinates} are ignored."

#: ../plugins/fn-tsa/functions.c:399 ../plugins/fn-tsa/functions.c:583
msgid ""
"If several target data are provided they must be in the same column in "
"consecutive cells."
msgstr ""
"If several target data are provided they must be in the same column in "
"consecutive cells."

#: ../plugins/fn-tsa/functions.c:568
msgid "PERIODOGRAM:periodogram of the given data"
msgstr "PERIODOGRAM:periodogram of the given data"

#: ../plugins/fn-tsa/functions.c:569
msgid "ordinates:ordinates of the given data"
msgstr "ordinates:ordinates of the given data"

#: ../plugins/fn-tsa/functions.c:570
msgid "filter:windowing function to  be used, defaults to no filter"
msgstr "filter:windowing function to  be used, defaults to no filter"

#: ../plugins/fn-tsa/functions.c:571
msgid ""
"abscissae:abscissae of the given data, defaults to regularly spaced abscissae"
msgstr ""
"abscissae:abscissae of the given data, defaults to regularly spaced abscissae"

#: ../plugins/fn-tsa/functions.c:572
msgid "interpolation:method of interpolation, defaults to none"
msgstr "interpolation:method of interpolation, defaults to none"

#: ../plugins/fn-tsa/functions.c:573
msgid "number:number of interpolated data points"
msgstr "number:number of interpolated data points"

#: ../plugins/fn-tsa/functions.c:574
msgid ""
"If an interpolation method is used, the number of returned values is one "
"less than the number of targets and the targets values must be given in "
"increasing order."
msgstr ""
"If an interpolation method is used, the number of returned values is one "
"less than the number of targets and the targets values must be given in "
"increasing order."

#: ../plugins/fn-tsa/functions.c:577
msgid ""
"Possible window functions are:\n"
"0: no filter (rectangular window)\n"
"1: Bartlett (triangular window)\n"
"2: Hahn (cosine window)\n"
"3: Welch (parabolic window)"
msgstr ""
"Possible window functions are:\n"
"0: no filter (rectangular window)\n"
"1: Bartlett (triangular window)\n"
"2: Hahn (cosine window)\n"
"3: Welch (parabolic window)"

#: ../plugins/fn-tsa/functions.c:827
msgid "FOURIER:Fourier or inverse Fourier transform"
msgstr "FOURIER:Fourier or inverse Fourier transform"

#: ../plugins/fn-tsa/functions.c:828 ../plugins/fn-tsa/functions.c:927
msgid "Sequence:the data sequence to be transformed"
msgstr "Sequence:the data sequence to be transformed"

#: ../plugins/fn-tsa/functions.c:829
msgid ""
"Inverse:if true, the inverse Fourier transform is calculated, defaults to "
"false"
msgstr ""
"Inverse:if true, the inverse Fourier transform is calculated, defaults to "
"false"

#: ../plugins/fn-tsa/functions.c:830
msgid ""
"Separate:if true, the real and imaginary parts are given separately, "
"defaults to false"
msgstr ""
"Separate:if true, the real and imaginary parts are given separately, "
"defaults to false"

#: ../plugins/fn-tsa/functions.c:831
msgid ""
"This array function returns the Fourier or inverse Fourier transform of the "
"given data sequence."
msgstr ""
"This array function returns the Fourier or inverse Fourier transform of the "
"given data sequence."

#: ../plugins/fn-tsa/functions.c:832
msgid ""
"The output consists of one column of complex numbers if @{Separate} is false "
"and of two columns of real numbers if @{Separate} is true."
msgstr ""
"The output consists of one column of complex numbers if @{Separate} is false "
"and of two columns of real numbers if @{Separate} is true."

#: ../plugins/fn-tsa/functions.c:833
msgid ""
"If @{Separate} is true the first output column contains the real parts and "
"the second column the imaginary parts."
msgstr ""
"If @{Separate} is true the first output column contains the real parts and "
"the second column the imaginary parts."

#: ../plugins/fn-tsa/functions.c:834 ../plugins/fn-tsa/functions.c:931
msgid ""
"If @{Sequence} is neither an n by 1 nor 1 by n array, this function returns "
"#VALUE!"
msgstr ""
"If @{Sequence} is neither an n by 1 nor 1 by n array, this function returns "
"#VALUE!"

#: ../plugins/fn-tsa/functions.c:926
msgid "HPFILTER:Hodrick Prescott Filter"
msgstr "HPFILTER:Hodrick Prescott Filter"

#: ../plugins/fn-tsa/functions.c:928
msgid "λ:filter parameter λ, defaults to 1600"
msgstr "λ:filter parameter λ, defaults to 1600"

#: ../plugins/fn-tsa/functions.c:929
msgid ""
"This array function returns the trend and cyclical components obtained by "
"applying the Hodrick Prescott Filter with parameter @{λ} to the given data "
"sequence."
msgstr ""
"This array function returns the trend and cyclical components obtained by "
"applying the Hodrick Prescott Filter with parameter @{λ} to the given data "
"sequence."

#: ../plugins/fn-tsa/functions.c:930
msgid ""
"The output consists of two columns of numbers, the first containing the "
"trend component, the second the cyclical component."
msgstr ""
"The output consists of two columns of numbers, the first containing the "
"trend component, the second the cyclical component."

#: ../plugins/fn-tsa/functions.c:932
msgid ""
"If @{Sequence} contians less than 6 numerical values, this function returns "
"#VALUE!"
msgstr ""
"If @{Sequence} contians less than 6 numerical values, this function returns "
"#VALUE!"

#: ../plugins/gda/plugin-gda.c:306
msgid "EXECSQL:result of executing @{sql} in the libgda data source @{dsn}"
msgstr "EXECSQL:result of executing @{sql} in the libgda data source @{dsn}"

#: ../plugins/gda/plugin-gda.c:308 ../plugins/gda/plugin-gda.c:385
msgid "dsn:libgda data source"
msgstr "dsn:libgda data source"

#: ../plugins/gda/plugin-gda.c:309 ../plugins/gda/plugin-gda.c:386
msgid "username:user name to access @{dsn}"
msgstr "username:user name to access @{dsn}"

#: ../plugins/gda/plugin-gda.c:310 ../plugins/gda/plugin-gda.c:387
msgid "password:password to access @{dsn} as @{username}"
msgstr "password:password to access @{dsn} as @{username}"

#: ../plugins/gda/plugin-gda.c:311
msgid "sql:SQL command"
msgstr "sql:SQL command"

#: ../plugins/gda/plugin-gda.c:312 ../plugins/gda/plugin-gda.c:389
msgid "Before using EXECSQL, you need to set up a libgda data source."
msgstr "Before using EXECSQL, you need to set up a libgda data source."

#: ../plugins/gda/plugin-gda.c:384
msgid "READDBTABLE:all rows of the table @{table} in @{dsn}"
msgstr "READDBTABLE:all rows of the table @{table} in @{dsn}"

#: ../plugins/gda/plugin-gda.c:388
msgid "table:SQL table to retrieve"
msgstr "table:SQL table to retrieve"

#: ../plugins/sample_datasource/sample_datasource.c:276
msgid "ATL_LAST:sample real-time data source"
msgstr "ATL_LAST:sample real-time data source"

#: ../plugins/sample_datasource/sample_datasource.c:277
msgid "tag:tag to watch"
msgstr "tag:tag to watch"

#: ../plugins/sample_datasource/sample_datasource.c:278
msgid ""
"ATL_LAST is a sample implementation of a real time data source.  It takes a "
"string tag and monitors the named pipe ~/atl for changes to the value of "
"that tag."
msgstr ""
"ATL_LAST is a sample implementation of a real time data source.  It takes a "
"string tag and monitors the named pipe ~/atl for changes to the value of "
"that tag."

#: ../plugins/sample_datasource/sample_datasource.c:279
msgid "This is not intended to be generally enabled and is OFF by default."
msgstr "This is not intended to be generally enabled and is OFF by default."

#~ msgid "secz = 1/cosz."
#~ msgstr "secz = 1/cosz."

#~ msgid "cscz = 1/sinz."
#~ msgstr "cscz = 1/sinz."

#~ msgid "cotz = cosz/sinz."
#~ msgstr "cotz = cosz/sinz."

#~ msgid "α:order (any number)"
#~ msgstr "α:order (any number)"

#~ msgid "DURATION:the duration of a security"
#~ msgstr "DURATION:the duration of a security"

#~ msgid "DURATION calculates the duration of a security."
#~ msgstr "DURATION calculates the duration of a security."

#~ msgid ""
#~ "SUMPRODUCTs arguments are arrays or ranges. Attempting to use A1:A5>0 "
#~ "will not work, implicit intersection will kick in. Instead use --(A1:A5>0)"
#~ msgstr ""
#~ "SUMPRODUCTs arguments are arrays or ranges. Attempting to use A1:A5>0 "
#~ "will not work, implicit intersection will kick in. Instead use --(A1:A5>0)"

#~ msgid "a:amount of skew, defaults to 0"
#~ msgstr "a:amount of skew, defaults to 0"

#~ msgid "μ:mean of the underlying normal distribution, defaults to 0"
#~ msgstr "μ:mean of the underlying normal distribution, defaults to 0"

#~ msgid ""
#~ "SSMEDIAN:median for grouped data as commonly determined in the social "
#~ "sciences"
#~ msgstr ""
#~ "SSMEDIAN:median for grouped data as commonly determined in the social "
#~ "sciences"

#~ msgid ""
#~ "The data points given in @{array} are assumed to be the result of "
#~ "grouping data into intervals of length @{interval}"
#~ msgstr ""
#~ "The data points given in @{array} are assumed to be the result of "
#~ "grouping data into intervals of length @{interval}"

#~ msgid "Let us assume that the cells A1, A2, A3 contain numbers 7, 8, 8."
#~ msgstr "Let us assume that the cells A1, A2, A3 contain numbers 7, 8, 8."

#~ msgid "Then SSMEDIAN(A1:A3, 1) equals 7.75."
#~ msgstr "Then SSMEDIAN(A1:A3, 1) equals 7.75."

#~ msgid "The output consists always of one column of complex numbers."
#~ msgstr "The output consists always of one column of complex numbers."

#~ msgid "DATE2UNIX:translate a date serial value to a Unix timestamp"
#~ msgstr "DATE2UNIX:translate a date serial value to a Unix timestamp"

#~ msgid "d:date serial value"
#~ msgstr "d:date serial value"

#~ msgid ""
#~ "The DATE2UNIX function translates a date serial values into a Unix "
#~ "timestamp."
#~ msgstr ""
#~ "The DATE2UNIX function translates a date serial values into a Unix "
#~ "timestamp."

#~ msgid ""
#~ "cost_of_carry:net cost of holding the underlying asset of the underlying "
#~ "option (for common stocks, the risk free rate less the dividend yield)"
#~ msgstr ""
#~ "cost_of_carry:net cost of holding the underlying asset of the underlying "
#~ "option (for common stocks, the risk free rate less the dividend yield)"

#~ msgid ""
#~ "ACCRINT calculates the accrued interest for a security that pays periodic "
#~ "interest."
#~ msgstr ""
#~ "ACCRINT calculates the accrued interest for a security that pays periodic "
#~ "interest."

#~ msgid "ref_text:"
#~ msgstr "ref_text:"

#~ msgid "array:"
#~ msgstr "array:"

#~ msgid "ACOTH:inverse hyperbolic cotangent of a value"
#~ msgstr "ACOTH:inverse hyperbolic cotangent of a value"

#~ msgid "b1:angle in radians"
#~ msgstr "b1:angle in radians"

#~ msgid "b2:angle in radians"
#~ msgstr "b2:angle in radians"

#~ msgid ""
#~ "ATAN2 calculates the arc tangent of the ratio @{b1}/@{b2} with the sign "
#~ "according to the quadrant containing (@{b1},@{b2})."
#~ msgstr ""
#~ "ATAN2 calculates the arc tangent of the ratio @{b1}/@{b2} with the sign "
#~ "according to the quadrant containing (@{b1},@{b2})."

#~ msgid "COS:Cosine function"
#~ msgstr "COS:Cosine function"

#~ msgid "COSH:Hyperbolic cosine function"
#~ msgstr "COSH:Hyperbolic cosine function"

#~ msgid "COT:cotangent of a value"
#~ msgstr "COT:cotangent of a value"

#~ msgid "COTH:hyperbolic cotangent of a value"
#~ msgstr "COTH:hyperbolic cotangent of a value"

#~ msgid "x:number."
#~ msgstr "x:number."

#~ msgid "LOG:Logarithm"
#~ msgstr "LOG:Logarithm"

#~ msgid "SIN:Sine function"
#~ msgstr "SIN:Sine function"

#~ msgid "CSC:Cosecant"
#~ msgstr "CSC:Cosecant"

#~ msgid "CSCH:Hyperbolic cosecant"
#~ msgstr "CSCH:Hyperbolic cosecant"

#~ msgid "SECH:Hyperbolic secant"
#~ msgstr "SECH:Hyperbolic secant"

#~ msgid "TAN:tangent"
#~ msgstr "TAN:tangent"

#~ msgid "TANH:hyperbolic tangent"
#~ msgstr "TANH:hyperbolic tangent"

#~ msgid "x:"
#~ msgstr "x:"

#~ msgid ""
#~ "EXPONDIST:(cumulative)density function of the exponential distribution"
#~ msgstr ""
#~ "EXPONDIST:(cumulative)density function of the exponential distribution"

#~ msgid "k:"
#~ msgstr "k:"

#~ msgid "GAMMADIST:(cumulative) density function of the gamma distribution"
#~ msgstr "GAMMADIST:(cumulative) density function of the gamma distribution"

#~ msgid ""
#~ "BINOMDIST:(cumulative) probability mass function of the binomial "
#~ "distribution"
#~ msgstr ""
#~ "BINOMDIST:(cumulative) probability mass function of the binomial "
#~ "distribution"

#~ msgid "This function is the OpenFormula function B"
#~ msgstr "This function is the OpenFormula function B"

#~ msgid ""
#~ "HYPGEOMDIST:(cumulative) probability mass function of the hypergeometric "
#~ "distribution"
#~ msgstr ""
#~ "HYPGEOMDIST:(cumulative) probability mass function of the hypergeometric "
#~ "distribution"

#~ msgid ""
#~ "WEIBULL:(cumulative) probability density function of the Weibull "
#~ "distribution"
#~ msgstr ""
#~ "WEIBULL:(cumulative) probability density function of the Weibull "
#~ "distribution"

#~ msgid ""
#~ "NORMDIST:(cumulative) probability density function of a normal "
#~ "distribution"
#~ msgstr ""
#~ "NORMDIST:(cumulative) probability density function of a normal "
#~ "distribution"

#~ msgid ""
#~ "POISSON:(cumulative) probability mass function of the Poisson distribution"
#~ msgstr ""
#~ "POISSON:(cumulative) probability mass function of the Poisson distribution"

#~ msgid ""
#~ "const:If this is FALSE, the curve will be forced to go through [1; 0], i."
#~ "e., b will be zero. The default is TRUE."
#~ msgstr ""
#~ "const:If this is FALSE, the curve will be forced to go through [1; 0], i."
#~ "e., b will be zero. The default is TRUE."

#~ msgid ""
#~ "If @{known_y}'s and @{known_x}'s have unequal number of data points, this "
#~ "function returns a #NUM! error."
#~ msgstr ""
#~ "If @{known_y}'s and @{known_x}'s have unequal number of data points, this "
#~ "function returns a #NUM! error."

#~ msgid ""
#~ "new_x's: x-values for which you want to estimate the y-values; defaults "
#~ "to @{known_x}'s"
#~ msgstr ""
#~ "new_x's: x-values for which you want to estimate the y-values; defaults "
#~ "to @{known_x}'s"

#~ msgid ""
#~ "const:if this is false the line will be forced to go through the origin; "
#~ "defaults to TRUE"
#~ msgstr ""
#~ "const:if this is false the line will be forced to go through the origin; "
#~ "defaults to TRUE"

#~ msgid ""
#~ "const:if this is false the line will be forced to go through (0,1); "
#~ "defaults to TRUE"
#~ msgstr ""
#~ "const:if this is false the line will be forced to go through (0,1); "
#~ "defaults to TRUE"

#~ msgid ""
#~ "GEOMDIST:(cumulative) probability mass function of the hypergeometric "
#~ "distribution"
#~ msgstr ""
#~ "GEOMDIST:(cumulative) probability mass function of the hypergeometric "
#~ "distribution"

#~ msgid ""
#~ "If the actual range is not an n by 1 or 1 by n range, the returned value "
#~ "appears to have no sensible meaning."
#~ msgstr ""
#~ "If the actual range is not an n by 1 or 1 by n range, the returned value "
#~ "appears to have no sensible meaning."

#~ msgid ""
#~ "tails:1 or 2. If this is 2, @{x} is replaced by the absolute value and "
#~ "the returned value is multiplied by 2"
#~ msgstr ""
#~ "tails:1 or 2. If this is 2, @{x} is replaced by the absolute value and "
#~ "the returned value is multiplied by 2"

#~ msgid "ZTEST:p-value of a 2-tailed z-test for a population mean"
#~ msgstr "ZTEST:p-value of a 2-tailed z-test for a population mean"

#~ msgid "x:mean as given in the null hypothesis"
#~ msgstr "x:mean as given in the null hypothesis"

#~ msgid "This function is ODF compatible."
#~ msgstr "This function is ODF compatible."

#, fuzzy
#~ msgid "NPER:calculate number of periods"
#~ msgstr "n:the number of trials"

#~ msgid ""
#~ "@FUNCTION=PRICE\n"
#~ "@SYNTAX=PRICE(settle,mat,rate,yield,redemption_price,[frequency,basis])\n"
#~ "@DESCRIPTION=PRICE returns price per $100 face value of a security. This "
#~ "method can only be used if the security pays periodic interest.\n"
#~ "\n"
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, PRICE returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=PRICE\n"
#~ "@SYNTAX=PRICE(settle,mat,rate,yield,redemption_price,[frequency,basis])\n"
#~ "@DESCRIPTION=PRICE returns price per £100 face value of a security. This "
#~ "method can only be used if the security pays periodic interest.\n"
#~ "\n"
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, PRICE returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=YIELD\n"
#~ "@SYNTAX=YIELD(settlement,maturity,rate,price,redemption_price,frequency[,"
#~ "basis])\n"
#~ "@DESCRIPTION=YIELD returns the yield on a security that pays periodic "
#~ "interest.\n"
#~ "\n"
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, YIELD returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=YIELD\n"
#~ "@SYNTAX=YIELD(settlement,maturity,rate,price,redemption_price,frequency[,"
#~ "basis])\n"
#~ "@DESCRIPTION=YIELD returns the yield on a security that pays periodic "
#~ "interest.\n"
#~ "\n"
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, YIELD returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=YIELDDISC\n"
#~ "@SYNTAX=YIELDDISC(settlement,maturity,pr,redemption[,basis])\n"
#~ "@DESCRIPTION=YIELDDISC calculates the annual yield of a security that is "
#~ "discounted.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security. @pr is the price per $100 face value of "
#~ "the security. @redemption is the redemption value per $100 face value. "
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, YIELDDISC returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=YIELDDISC\n"
#~ "@SYNTAX=YIELDDISC(settlement,maturity,pr,redemption[,basis])\n"
#~ "@DESCRIPTION=YIELDDISC calculates the annual yield of a security that is "
#~ "discounted.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security. @pr is the price per £100 face value of "
#~ "the security. @redemption is the redemption value per £100 face value. "
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, YIELDDISC returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=YIELDMAT\n"
#~ "@SYNTAX=YIELDMAT(settlement,maturity,issue,rate,pr[,basis])\n"
#~ "@DESCRIPTION=YIELDMAT calculates the annual yield of a security for which "
#~ "the interest is paid at maturity date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @issue is the issue date of the security. "
#~ "@rate is the interest rate set to the security. @pr is the price per $100 "
#~ "face value of the security. @basis is the type of day counting system you "
#~ "want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=YIELDMAT\n"
#~ "@SYNTAX=YIELDMAT(settlement,maturity,issue,rate,pr[,basis])\n"
#~ "@DESCRIPTION=YIELDMAT calculates the annual yield of a security for which "
#~ "the interest is paid at maturity date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @issue is the issue date of the security. "
#~ "@rate is the interest rate set to the security. @pr is the price per £100 "
#~ "face value of the security. @basis is the type of day counting system you "
#~ "want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ODDFPRICE\n"
#~ "@SYNTAX=ODDFPRICE(settlement,maturity,issue,first_coupon,rate,yld,"
#~ "redemption,frequency[,basis])\n"
#~ "@DESCRIPTION=ODDFPRICE returns the price per $100 face value of a "
#~ "security. The security should have an odd short or long first period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @issue is the issue date of the security. "
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDFPRICE returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ODDFPRICE\n"
#~ "@SYNTAX=ODDFPRICE(settlement,maturity,issue,first_coupon,rate,yld,"
#~ "redemption,frequency[,basis])\n"
#~ "@DESCRIPTION=ODDFPRICE returns the price per £100 face value of a "
#~ "security. The security should have an odd short or long first period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @issue is the issue date of the security. "
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDFPRICE returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ODDFYIELD\n"
#~ "@SYNTAX=ODDFYIELD(settlement,maturity,issue,first_coupon,rate,pr,"
#~ "redemption,frequency[,basis])\n"
#~ "@DESCRIPTION=ODDFYIELD calculates the yield of a security having an odd "
#~ "first period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @frequency is the number of coupon "
#~ "payments per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = "
#~ "quarterly. @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDFYIELD returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ODDFYIELD\n"
#~ "@SYNTAX=ODDFYIELD(settlement,maturity,issue,first_coupon,rate,pr,"
#~ "redemption,frequency[,basis])\n"
#~ "@DESCRIPTION=ODDFYIELD calculates the yield of a security having an odd "
#~ "first period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @frequency is the number of coupon "
#~ "payments per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = "
#~ "quarterly. @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDFYIELD returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ODDLPRICE\n"
#~ "@SYNTAX=ODDLPRICE(settlement,maturity,last_interest,rate,yld,redemption,"
#~ "frequency[,basis])\n"
#~ "@DESCRIPTION=ODDLPRICE calculates the price per $100 face value of a "
#~ "security that has an odd last coupon period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @frequency is the number of coupon "
#~ "payments per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = "
#~ "quarterly. @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDLPRICE returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ODDLPRICE\n"
#~ "@SYNTAX=ODDLPRICE(settlement,maturity,last_interest,rate,yld,redemption,"
#~ "frequency[,basis])\n"
#~ "@DESCRIPTION=ODDLPRICE calculates the price per £100 face value of a "
#~ "security that has an odd last coupon period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @frequency is the number of coupon "
#~ "payments per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = "
#~ "quarterly. @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDLPRICE returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ODDLYIELD\n"
#~ "@SYNTAX=ODDLYIELD(settlement,maturity,last_interest,rate,pr,redemption,"
#~ "frequency[,basis])\n"
#~ "@DESCRIPTION=ODDLYIELD calculates the yield of a security having an odd "
#~ "last period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @frequency is the number of coupon "
#~ "payments per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = "
#~ "quarterly. @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDLYIELD returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ODDLYIELD\n"
#~ "@SYNTAX=ODDLYIELD(settlement,maturity,last_interest,rate,pr,redemption,"
#~ "frequency[,basis])\n"
#~ "@DESCRIPTION=ODDLYIELD calculates the yield of a security having an odd "
#~ "last period.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security. @frequency is the number of coupon "
#~ "payments per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = "
#~ "quarterly. @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, ODDLYIELD returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=AMORDEGRC\n"
#~ "@SYNTAX=AMORDEGRC(cost,purchase_date,first_period,salvage,period,rate[,"
#~ "basis])\n"
#~ "@DESCRIPTION=AMORDEGRC: Calculates depreciation for each accounting "
#~ "period using French accounting conventions.   Assets purchased in the "
#~ "middle of a period take prorated depreciation into account.  This is "
#~ "similar to AMORLINC, except that a depreciation coefficient is applied in "
#~ "the calculation depending on the life of the assets.\n"
#~ "Named for AMORtissement DEGRessif Comptabilite\n"
#~ "\n"
#~ "@cost The value of the asset.\n"
#~ "@purchase_date The date the asset was purchased.\n"
#~ "@first_period The end of the first period.\n"
#~ "@salvage Asset value at maturity.\n"
#~ "@period The length of accounting periods.\n"
#~ "@rate rate of depreciation as a percentage.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AMORDEGRC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1) = 733\n"
#~ "\n"
#~ "@SEEALSO=AMORLINC"
#~ msgstr ""
#~ "@FUNCTION=AMORDEGRC\n"
#~ "@SYNTAX=AMORDEGRC(cost,purchase_date,first_period,salvage,period,rate[,"
#~ "basis])\n"
#~ "@DESCRIPTION=AMORDEGRC: Calculates depreciation for each accounting "
#~ "period using French accounting conventions.   Assets purchased in the "
#~ "middle of a period take prorated depreciation into account.  This is "
#~ "similar to AMORLINC, except that a depreciation coefficient is applied in "
#~ "the calculation depending on the life of the assets.\n"
#~ "Named for AMORtissement DEGRessif Comptabilite\n"
#~ "\n"
#~ "@cost The value of the asset.\n"
#~ "@purchase_date The date the asset was purchased.\n"
#~ "@first_period The end of the first period.\n"
#~ "@salvage Asset value at maturity.\n"
#~ "@period The length of accounting periods.\n"
#~ "@rate rate of depreciation as a percentage.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AMORDEGRC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1) = 733\n"
#~ "\n"
#~ "@SEEALSO=AMORLINC"

#~ msgid ""
#~ "@FUNCTION=AMORLINC\n"
#~ "@SYNTAX=AMORLINC(cost,purchase_date,first_period,salvage,period,rate[,"
#~ "basis])\n"
#~ "@DESCRIPTION=AMORLINC: Calculates depreciation for each accounting period "
#~ "using French accounting conventions.   Assets purchased in the middle of "
#~ "a period take prorated depreciation into account.\n"
#~ "Named for AMORtissement LINeaire Comptabilite.\n"
#~ "\n"
#~ "@cost The value of the asset.\n"
#~ "@purchase_date The date the asset was purchased.\n"
#~ "@first_period The end of the first period.\n"
#~ "@salvage Asset value at maturity.\n"
#~ "@period The length of accounting periods.\n"
#~ "@rate rate of depreciation as a percentage.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AMORLINC(2400,DATE(1998,8,19),DATE(1998,12,31),300,1,0.15,1) = 360\n"
#~ "\n"
#~ "@SEEALSO=AMORDEGRC"
#~ msgstr ""
#~ "@FUNCTION=AMORLINC\n"
#~ "@SYNTAX=AMORLINC(cost,purchase_date,first_period,salvage,period,rate[,"
#~ "basis])\n"
#~ "@DESCRIPTION=AMORLINC: Calculates depreciation for each accounting period "
#~ "using French accounting conventions.   Assets purchased in the middle of "
#~ "a period take prorated depreciation into account.\n"
#~ "Named for AMORtissement LINeaire Comptabilite.\n"
#~ "\n"
#~ "@cost The value of the asset.\n"
#~ "@purchase_date The date the asset was purchased.\n"
#~ "@first_period The end of the first period.\n"
#~ "@salvage Asset value at maturity.\n"
#~ "@period The length of accounting periods.\n"
#~ "@rate rate of depreciation as a percentage.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AMORLINC(2400,DATE(1998,8,19),DATE(1998,12,31),300,1,0.15,1) = 360\n"
#~ "\n"
#~ "@SEEALSO=AMORDEGRC"

#~ msgid ""
#~ "@FUNCTION=COUPDAYBS\n"
#~ "@SYNTAX=COUPDAYBS(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPDAYBS returns the number of days from the beginning of "
#~ "the coupon period to the settlement date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPDAYBS returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 89\n"
#~ "COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 0\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COUPDAYBS\n"
#~ "@SYNTAX=COUPDAYBS(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPDAYBS returns the number of days from the beginning of "
#~ "the coupon period to the settlement date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPDAYBS returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 89\n"
#~ "COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 0\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COUPDAYS\n"
#~ "@SYNTAX=COUPDAYS(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPDAYS returns the number of days in the coupon period of "
#~ "the settlement date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPDAYS returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 90\n"
#~ "COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 90\n"
#~ "COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,1,FALSE) = 91\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COUPDAYS\n"
#~ "@SYNTAX=COUPDAYS(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPDAYS returns the number of days in the coupon period of "
#~ "the settlement date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPDAYS returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 90\n"
#~ "COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 90\n"
#~ "COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,1,FALSE) = 91\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COUPDAYSNC\n"
#~ "@SYNTAX=COUPDAYSNC(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPDAYSNC returns the number of days from the settlement "
#~ "date to the next coupon date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPDAYSNC returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
#~ "COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COUPDAYSNC\n"
#~ "@SYNTAX=COUPDAYSNC(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPDAYSNC returns the number of days from the settlement "
#~ "date to the next coupon date.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPDAYSNC returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
#~ "COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COUPNCD\n"
#~ "@SYNTAX=COUPNCD(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPNCD returns the coupon date following settlement.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPNCD returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 30-Nov-2002\n"
#~ "COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 28-Feb-2003\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COUPNCD\n"
#~ "@SYNTAX=COUPNCD(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPNCD returns the coupon date following settlement.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPNCD returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 30-Nov-2002\n"
#~ "COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 28-Feb-2003\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COUPPCD\n"
#~ "@SYNTAX=COUPPCD(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPPCD returns the coupon date preceding settlement.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPPCD returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 31-Aug-2002\n"
#~ "COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 29-Nov-2002\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COUPPCD\n"
#~ "@SYNTAX=COUPPCD(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPPCD returns the coupon date preceding settlement.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "(See the gnumeric manual for a detailed description of these bases).\n"
#~ "\n"
#~ "* If @frequency is invalid, COUPPCD returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 31-Aug-2002\n"
#~ "COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 29-Nov-2002\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COUPNUM\n"
#~ "@SYNTAX=COUPNUM(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPNUM returns the numbers of coupons to be paid between "
#~ "the settlement and maturity dates, rounded up.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, 4, 6 or 12, COUPNUM returns #NUM! "
#~ "error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 5, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0) = 6\n"
#~ "COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 5\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COUPNUM\n"
#~ "@SYNTAX=COUPNUM(settlement,maturity,frequency[,basis,eom])\n"
#~ "@DESCRIPTION=COUPNUM returns the numbers of coupons to be paid between "
#~ "the settlement and maturity dates, rounded up.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@frequency is the number of coupon payments per year.\n"
#~ "@eom = TRUE handles end of month maturity dates special.\n"
#~ "Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. 6 = "
#~ "bimonthly, 12 = monthly.\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, 4, 6 or 12, COUPNUM returns #NUM! "
#~ "error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 5, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0) = 6\n"
#~ "COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 5\n"
#~ "@SEEALSO="

#~ msgid "x:value."
#~ msgstr "x:value."

#~ msgid "x,mu,sigma,give_log"
#~ msgstr "x,mu,sigma,give_log"

#~ msgid "x,mu,sigma,lower_tail,log_p"
#~ msgstr "x,mu,sigma,lower_tail,log_p"

#~ msgid "p,mu,sigma,lower_tail,log_p"
#~ msgstr "p,mu,sigma,lower_tail,log_p"

#~ msgid "x,logmean,logsd,give_log"
#~ msgstr "x,logmean,logsd,give_log"

#~ msgid "x,logmean,logsd,lower_tail,log_p"
#~ msgstr "x,logmean,logsd,lower_tail,log_p"

#~ msgid "x,shape,scale,give_log"
#~ msgstr "x,shape,scale,give_log"

#~ msgid "x,shape,scale,lower_tail,log_p"
#~ msgstr "x,shape,scale,lower_tail,log_p"

#~ msgid "p,shape,scale,lower_tail,log_p"
#~ msgstr "p,shape,scale,lower_tail,log_p"

#~ msgid "x,a,b,give_log"
#~ msgstr "x,a,b,give_log"

#~ msgid "x,a,b,lower_tail,log_p"
#~ msgstr "x,a,b,lower_tail,log_p"

#~ msgid "p,a,b,lower_tail,log_p"
#~ msgstr "p,a,b,lower_tail,log_p"

#~ msgid "x,n,give_log"
#~ msgstr "x,n,give_log"

#~ msgid "x,n,lower_tail,log_p"
#~ msgstr "x,n,lower_tail,log_p"

#~ msgid "p,n,lower_tail,log_p"
#~ msgstr "p,n,lower_tail,log_p"

#~ msgid "x,n1,n2,give_log"
#~ msgstr "x,n1,n2,give_log"

#~ msgid "x,n1,n2,lower_tail,log_p"
#~ msgstr "x,n1,n2,lower_tail,log_p"

#~ msgid "x,df,give_log"
#~ msgstr "x,df,give_log"

#~ msgid "x,df,lower_tail,log_p"
#~ msgstr "x,df,lower_tail,log_p"

#~ msgid "p,df,lower_tail,log_p"
#~ msgstr "p,df,lower_tail,log_p"

#~ msgid "x,lambda,give_log"
#~ msgstr "x,lambda,give_log"

#~ msgid "x,lambda,lower_tail,log_p"
#~ msgstr "x,lambda,lower_tail,log_p"

#~ msgid "p,lambda,lower_tail,log_p"
#~ msgstr "p,lambda,lower_tail,log_p"

#~ msgid "x,scale,give_log"
#~ msgstr "x,scale,give_log"

#~ msgid "x,scale,lower_tail,log_p"
#~ msgstr "x,scale,lower_tail,log_p"

#~ msgid "p,scale,lower_tail,log_p"
#~ msgstr "p,scale,lower_tail,log_p"

#~ msgid "x,n,psuc,give_log"
#~ msgstr "x,n,psuc,give_log"

#~ msgid "x,n,psuc,lower_tail,log_p"
#~ msgstr "x,n,psuc,lower_tail,log_p"

#~ msgid "p,n,psuc,lower_tail,log_p"
#~ msgstr "p,n,psuc,lower_tail,log_p"

#~ msgid "x,r,b,n,give_log"
#~ msgstr "x,r,b,n,give_log"

#~ msgid "x,r,b,n,lower_tail,log_p"
#~ msgstr "x,r,b,n,lower_tail,log_p"

#~ msgid "p,r,b,n,lower_tail,log_p"
#~ msgstr "p,r,b,n,lower_tail,log_p"

#~ msgid "x,psuc,give_log"
#~ msgstr "x,psuc,give_log"

#~ msgid "x,psuc,lower_tail,log_p"
#~ msgstr "x,psuc,lower_tail,log_p"

#~ msgid "p,psuc,lower_tail,log_p"
#~ msgstr "p,psuc,lower_tail,log_p"

#~ msgid "x,location,scale,give_log"
#~ msgstr "x,location,scale,give_log"

#~ msgid "x,location,scale,lower_tail,log_p"
#~ msgstr "x,location,scale,lower_tail,log_p"

#~ msgid "p,location,scale,lower_tail,log_p"
#~ msgstr "p,location,scale,lower_tail,log_p"

#, fuzzy
#~ msgid "LOGINV(0.5,2,3) equals 7.389056099."
#~ msgstr "FLOOR(0.5) equals 0."

#, fuzzy
#~ msgid "TDIST(0,5,2) equals 1."
#~ msgstr "FLOOR(5,2) equals 4."

#, fuzzy
#~ msgid "FISHER(0.332) equals 0.345074339."
#~ msgstr "FLOOR(0.5) equals 0."

#~ msgid ""
#~ "@FUNCTION=CUM_BIV_NORM_DIST\n"
#~ "@SYNTAX=CUM_BIV_NORM_DIST(a,b,rho)\n"
#~ "@DESCRIPTION=CUM_BIV_NORM_DIST calculates the cumulative bivariate normal "
#~ "distribution from parameters a, b & rho.\n"
#~ "The return value is the probability that two random variables with "
#~ "correlation @rho are respectively each less than @a and @b.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST,NORMSDIST,NORMSINV"
#~ msgstr ""
#~ "@FUNCTION=CUM_BIV_NORM_DIST\n"
#~ "@SYNTAX=CUM_BIV_NORM_DIST(a,b,rho)\n"
#~ "@DESCRIPTION=CUM_BIV_NORM_DIST calculates the cumulative bivariate normal "
#~ "distribution from parameters a, b & rho.\n"
#~ "The return value is the probability that two random variables with "
#~ "correlation @rho are respectively each less than @a and @b.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST,NORMSDIST,NORMSINV"

#~ msgid ""
#~ "@FUNCTION=OPT_BS\n"
#~ "@SYNTAX=OPT_BS(call_put_flag,spot,strike,time,rate,volatility [,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS uses the Black-Scholes model to calculate the price "
#~ "of a European option using call_put_flag, @call_put_flag, 'c' or 'p' "
#~ "struck at @strike on an asset with spot price @spot.\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate.\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date. \n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed in the same units as @strike and "
#~ "@spot.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BS\n"
#~ "@SYNTAX=OPT_BS(call_put_flag,spot,strike,time,rate,volatility [,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS uses the Black-Scholes model to calculate the price "
#~ "of a European option using call_put_flag, @call_put_flag, 'c' or 'p' "
#~ "struck at @strike on an asset with spot price @spot.\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate.\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date. \n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed in the same units as @strike and "
#~ "@spot.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BS_DELTA\n"
#~ "@SYNTAX=OPT_BS_DELTA(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_DELTA uses the Black-Scholes model to calculate the "
#~ "'delta' of a European option with call_put_flag, @call_put_flag, 'c' or "
#~ "'p' struck at @strike on an asset with spot price @spot.\n"
#~ "Where @time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate.\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date. \n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed in the same units as @strike and "
#~ "@spot.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BS_DELTA\n"
#~ "@SYNTAX=OPT_BS_DELTA(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_DELTA uses the Black-Scholes model to calculate the "
#~ "'delta' of a European option with call_put_flag, @call_put_flag, 'c' or "
#~ "'p' struck at @strike on an asset with spot price @spot.\n"
#~ "Where @time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate.\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date. \n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed in the same units as @strike and "
#~ "@spot.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BS_GAMMA\n"
#~ "@SYNTAX=OPT_BS_GAMMA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_GAMMA uses the Black-Scholes model to calculate the "
#~ "'gamma' of a European option struck at @strike on an asset with spot "
#~ "price @spot.\n"
#~ "\n"
#~ "(The gamma of an option is the second derivative of its price with "
#~ "respect to the price of the underlying asset, and is the same for calls "
#~ "and puts.)\n"
#~ "\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as the rate of change of delta per "
#~ "unit change in @spot.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BS_GAMMA\n"
#~ "@SYNTAX=OPT_BS_GAMMA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_GAMMA uses the Black-Scholes model to calculate the "
#~ "'gamma' of a European option struck at @strike on an asset with spot "
#~ "price @spot.\n"
#~ "\n"
#~ "(The gamma of an option is the second derivative of its price with "
#~ "respect to the price of the underlying asset, and is the same for calls "
#~ "and puts.)\n"
#~ "\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as the rate of change of delta per "
#~ "unit change in @spot.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA"

#~ msgid ""
#~ "@FUNCTION=OPT_BS_THETA\n"
#~ "@SYNTAX=OPT_BS_THETA(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_THETA uses the Black-Scholes model to calculate the "
#~ "'theta' of a European option with call_put_flag, @call_put_flag struck at "
#~ "@strike on an asset with spot price @spot.\n"
#~ "\n"
#~ "(The theta of an option is the rate of change of its price with respect "
#~ "to time to expiry.)\n"
#~ "\n"
#~ "@time is the time to maturity of the option expressed in years\n"
#~ "and @rate is the risk-free interest rate to the exercise date, in "
#~ "percent.\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as minus the rate of change of "
#~ "option value, per 365.25 days.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_VEGA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BS_THETA\n"
#~ "@SYNTAX=OPT_BS_THETA(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_THETA uses the Black-Scholes model to calculate the "
#~ "'theta' of a European option with call_put_flag, @call_put_flag struck at "
#~ "@strike on an asset with spot price @spot.\n"
#~ "\n"
#~ "(The theta of an option is the rate of change of its price with respect "
#~ "to time to expiry.)\n"
#~ "\n"
#~ "@time is the time to maturity of the option expressed in years\n"
#~ "and @rate is the risk-free interest rate to the exercise date, in "
#~ "percent.\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as minus the rate of change of "
#~ "option value, per 365.25 days.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_VEGA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BS_VEGA\n"
#~ "@SYNTAX=OPT_BS_VEGA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_VEGA uses the Black-Scholes model to calculate the "
#~ "'vega' of a European option struck at @strike on an asset with spot price "
#~ "@spot.\n"
#~ "(The vega of an option is the rate of change of its price with respect to "
#~ "volatility, and is the same for calls and puts.)\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ " @time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% volatility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BS_VEGA\n"
#~ "@SYNTAX=OPT_BS_VEGA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_VEGA uses the Black-Scholes model to calculate the "
#~ "'vega' of a European option struck at @strike on an asset with spot price "
#~ "@spot.\n"
#~ "(The vega of an option is the rate of change of its price with respect to "
#~ "volatility, and is the same for calls and puts.)\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ " @time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% volatility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BS_RHO\n"
#~ "@SYNTAX=OPT_BS_RHO(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_RHO uses the Black-Scholes model to calculate the "
#~ "'rho' of a European option with call_put_flag, @call_put_flag struck at "
#~ "@strike on an asset with spot price @spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "\n"
#~ "(The rho of an option is the rate of change of its price with respect to "
#~ "the risk free interest rate.)\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% change in @rate.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BS_RHO\n"
#~ "@SYNTAX=OPT_BS_RHO(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_RHO uses the Black-Scholes model to calculate the "
#~ "'rho' of a European option with call_put_flag, @call_put_flag struck at "
#~ "@strike on an asset with spot price @spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "\n"
#~ "(The rho of an option is the rate of change of its price with respect to "
#~ "the risk free interest rate.)\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% change in @rate.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BS_CARRYCOST\n"
#~ "@SYNTAX=OPT_BS_CARRYCOST(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_CARRYCOST uses the Black-Scholes model to calculate "
#~ "the 'elasticity' of a European option struck at @strike on an asset with "
#~ "spot price @spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "\n"
#~ "(The elasticity of an option is the rate of change of its price with "
#~ "respect to its cost of carry.)\n"
#~ "\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date.  @time is the time to maturity "
#~ "of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% volatility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BS_CARRYCOST\n"
#~ "@SYNTAX=OPT_BS_CARRYCOST(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BS_CARRYCOST uses the Black-Scholes model to calculate "
#~ "the 'elasticity' of a European option struck at @strike on an asset with "
#~ "spot price @spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "\n"
#~ "(The elasticity of an option is the rate of change of its price with "
#~ "respect to its cost of carry.)\n"
#~ "\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date.  @time is the time to maturity "
#~ "of the option expressed in years.\n"
#~ "@rate is the risk-free interest rate to the exercise date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% volatility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_GARMAN_KOHLHAGEN\n"
#~ "@SYNTAX=OPT_GARMAN_KOHLHAGEN(call_put_flag,spot,strike,time,domestic_rate,"
#~ "foreign_rate,volatility[,cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_GARMAN_KOHLHAGEN values the theoretical price of a "
#~ "European currency option struck at @strike on an asset with spot price "
#~ "@spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date. \n"
#~ "@time the number of days to exercise.\n"
#~ "@domestic_rate is the domestic risk-free interest rate to the exercise "
#~ "date.\n"
#~ "@foreign_rate is the foreign risk-free interest rate to the exercise "
#~ "date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% volatility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_GARMAN_KOHLHAGEN\n"
#~ "@SYNTAX=OPT_GARMAN_KOHLHAGEN(call_put_flag,spot,strike,time,domestic_rate,"
#~ "foreign_rate,volatility[,cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_GARMAN_KOHLHAGEN values the theoretical price of a "
#~ "European currency option struck at @strike on an asset with spot price "
#~ "@spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date. \n"
#~ "@time the number of days to exercise.\n"
#~ "@domestic_rate is the domestic risk-free interest rate to the exercise "
#~ "date.\n"
#~ "@foreign_rate is the foreign risk-free interest rate to the exercise "
#~ "date, in percent.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "* The returned value will be expressed as the rate of change of option "
#~ "value, per 100% volatility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_FRENCH\n"
#~ "@SYNTAX=OPT_FRENCH(call_put_flag,spot,strike,time,t2,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_FRENCH values the theoretical price of a European option "
#~ "adjusted for trading day volatility, struck at @strike on an asset with "
#~ "spot price @spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@volatility is the annualized volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ " @time the number of calendar days to exercise divided by calendar days "
#~ "in the year.\n"
#~ "@t2 is the number of trading days to exercise divided by trading days in "
#~ "the year.\n"
#~ "@rate is the risk-free interest rate.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, to the "
#~ "exercise date, in percent.\n"
#~ "For common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_FRENCH\n"
#~ "@SYNTAX=OPT_FRENCH(call_put_flag,spot,strike,time,t2,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_FRENCH values the theoretical price of a European option "
#~ "adjusted for trading day volatility, struck at @strike on an asset with "
#~ "spot price @spot.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@volatility is the annualised volatility, in percent, of the asset for "
#~ "the period through to the exercise date.\n"
#~ " @time the number of calendar days to exercise divided by calendar days "
#~ "in the year.\n"
#~ "@t2 is the number of trading days to exercise divided by trading days in "
#~ "the year.\n"
#~ "@rate is the risk-free interest rate.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, to the "
#~ "exercise date, in percent.\n"
#~ "For common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_JUMP_DIFF\n"
#~ "@SYNTAX=OPT_JUMP_DIFF(call_put_flag,spot,strike,time,rate,volatility,"
#~ "lambda,gamma)\n"
#~ "@DESCRIPTION=OPT_JUMP_DIFF models the theoretical price of an option "
#~ "according to the Jump Diffusion process (Merton).\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price of the option.\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the annualized rate of interest.\n"
#~ "@volatility is the annualized volatility of the underlying asset.\n"
#~ "@lambda is expected number of 'jumps' per year.\n"
#~ "@gamma is proportion of volatility explained by the 'jumps.'\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_JUMP_DIFF\n"
#~ "@SYNTAX=OPT_JUMP_DIFF(call_put_flag,spot,strike,time,rate,volatility,"
#~ "lambda,gamma)\n"
#~ "@DESCRIPTION=OPT_JUMP_DIFF models the theoretical price of an option "
#~ "according to the Jump Diffusion process (Merton).\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price of the option.\n"
#~ "@time is the time to maturity of the option expressed in years.\n"
#~ "@rate is the annualised rate of interest.\n"
#~ "@volatility is the annualised volatility of the underlying asset.\n"
#~ "@lambda is expected number of 'jumps' per year.\n"
#~ "@gamma is proportion of volatility explained by the 'jumps.'\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=OPT_MILTERSEN_SCHWARTZ\n"
#~ "@SYNTAX=OPT_MILTERSEN_SCHWARTZ(call_put_flag,p_t,f_t,x,t1,t2,v_s,v_e,v_f,"
#~ "rho_se,rho_sf,rho_ef,kappa_e,kappa_f)\n"
#~ "@DESCRIPTION=OPT_MILTERSEN_SCHWARTZ models the theoretical price of "
#~ "options on commodities futures according to Miltersen & Schwartz. \n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@p_t is a zero coupon bond with expiry at option maturity.\n"
#~ "@f_t is the futures price.\n"
#~ "@x is the strike price.\n"
#~ "@t1 is the time to maturity of the option.\n"
#~ "@t2 is the time to maturity of the underlying commodity futures "
#~ "contract.\n"
#~ "@v_s is the volatility of the spot commodity price.\n"
#~ "@v_e is the volatility of the future convenience yield.\n"
#~ "@v_f is the volatility of the forward rate of interest.\n"
#~ "@rho_se is correlation between the spot commodity price and the "
#~ "convenience yield.\n"
#~ "@rho_sf is correlation between the spot commodity price and the forward "
#~ "interest rate.\n"
#~ "@rho_ef is correlation between the forward interest rate and the "
#~ "convenience yield.\n"
#~ "@kappa_e is the speed of mean reversion of the convenience yield.\n"
#~ "@kappa_f is the speed of mean reversion of the forward interest rate.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_MILTERSEN_SCHWARTZ\n"
#~ "@SYNTAX=OPT_MILTERSEN_SCHWARTZ(call_put_flag,p_t,f_t,x,t1,t2,v_s,v_e,v_f,"
#~ "rho_se,rho_sf,rho_ef,kappa_e,kappa_f)\n"
#~ "@DESCRIPTION=OPT_MILTERSEN_SCHWARTZ models the theoretical price of "
#~ "options on commodities futures according to Miltersen & Schwartz. \n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@p_t is a zero coupon bond with expiry at option maturity.\n"
#~ "@f_t is the futures price.\n"
#~ "@x is is the strike price.\n"
#~ "@t1 is the time to maturity of the option.\n"
#~ "@t2 is the time to maturity of the underlying commodity futures "
#~ "contract.\n"
#~ "@v_s is the volatility of the spot commodity price.\n"
#~ "@v_e is the volatility of the future convenience yield.\n"
#~ "@v_f is the volatility of the forward rate of interest.\n"
#~ "@rho_se is correlation between the spot commodity price and the "
#~ "convenience yield.\n"
#~ "@rho_sf is correlation between the spot commodity price and the forward "
#~ "interest rate.\n"
#~ "@rho_ef is correlation between the forward interest rate and the "
#~ "convenience yield.\n"
#~ "@kappa_e is the speed of mean reversion of the convenience yield.\n"
#~ "@kappa_f is the speed of mean reversion of the forward interest rate.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=OPT_RGW\n"
#~ "@SYNTAX=OPT_RGW(spot,strike,t1,t2,rate,d,volatility)\n"
#~ "@DESCRIPTION=OPT_RGW models the theoretical price of an American option "
#~ "according to the Roll-Geske-Whaley approximation where: \n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@t1 is the time to the dividend payout.\n"
#~ "@t2 is the time to option expiration.\n"
#~ "@rate is the annualized rate of interest.\n"
#~ "@d is the amount of the dividend to be paid expressed in currency.\n"
#~ "@volatility is the annualized rate of volatility of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_RGW\n"
#~ "@SYNTAX=OPT_RGW(call_put_flag,spot,strike,t1,t2,rate,d,volatility)\n"
#~ "@DESCRIPTION=OPT_RGW models the theoretical price of an American option "
#~ "according to the Roll-Geske-Whaley approximation where: \n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@t1 is the time to the dividend payout.\n"
#~ "@t2 is the time to option expiration.\n"
#~ "@rate is the annualised rate of interest.\n"
#~ "@d is the amount of the dividend to be paid.\n"
#~ "@volatility is the annualised rate of volatility of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BAW_AMER\n"
#~ "@SYNTAX=OPT_BAW_AMER(call_put_flag,spot,strike,time,rate,cost_of_carry,"
#~ "volatility)\n"
#~ "@DESCRIPTION=OPT_BAW_AMER models the theoretical price of an option "
#~ "according to the Barone Adesie & Whaley approximation. \n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BAW_AMER\n"
#~ "@SYNTAX=OPT_BAW_AMER(call_put_flag,spot,strike,time,rate,cost_of_carry,"
#~ "volatility)\n"
#~ "@DESCRIPTION=OPT_BAW_AMER models the theoretical price of an option "
#~ "according to the Barone Adesie & Whaley approximation. \n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BJER_STENS\n"
#~ "@SYNTAX=OPT_BJER_STENS(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BJER_STENS models the theoretical price of American "
#~ "options according to the Bjerksund & Stensland approximation technique.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BJER_STENS\n"
#~ "@SYNTAX=OPT_BJER_STENS(call_put_flag,spot,strike,time,rate,volatility[,"
#~ "cost_of_carry])\n"
#~ "@DESCRIPTION=OPT_BJER_STENS models the theoretical price of American "
#~ "options according to the Bjerksund & Stensland approximation technique.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_EXEC\n"
#~ "@SYNTAX=OPT_EXEC(call_put_flag,spot,strike,time,rate,volatility,"
#~ "cost_of_carry,lambda)\n"
#~ "@DESCRIPTION=OPT_EXEC models the theoretical price of executive stock "
#~ "options @call_put_flag is 'c' or 'p' to indicate whether the option is a "
#~ "call or a put.\n"
#~ "One would expect this to always be a call option.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@lambda is the jump rate for executives. The model assumes executives "
#~ "forfeit their options if they leave the company.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_EXEC\n"
#~ "@SYNTAX=OPT_EXEC(call_put_flag,spot,strike,time,rate,volatility,"
#~ "cost_of_carry,lambda)\n"
#~ "@DESCRIPTION=OPT_EXEC models the theoretical price of executive stock "
#~ "options @call_put_flag is 'c' or 'p' to indicate whether the option is a "
#~ "call or a put.\n"
#~ "One would expect this to always be a call option.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@lambda is the jump rate for executives. The model assumes executives "
#~ "forfeit their options if they leave the company.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_FORWARD_START\n"
#~ "@SYNTAX=OPT_FORWARD_START(call_put_flag,spot,alpha,time1,time,rate,"
#~ "volatility,cost_of_carry)\n"
#~ "@DESCRIPTION=OPT_FORWARD_START models the theoretical price of forward "
#~ "start options\n"
#~ " @call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@alpha is a fraction that set the strike price the future date @time1.\n"
#~ "@time1 is the number of days until the option starts.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_FORWARD_START\n"
#~ "@SYNTAX=OPT_FORWARD_START(call_put_flag,spot,alpha,time1,time,rate,"
#~ "volatility,cost_of_carry)\n"
#~ "@DESCRIPTION=OPT_FORWARD_START models the theoretical price of forward "
#~ "start options\n"
#~ " @call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@alpha is a fraction that set the strike price the future date @time1.\n"
#~ "@time1 is the number of days until the option starts.\n"
#~ "@time is the number of days to maturity of the option.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_TIME_SWITCH\n"
#~ "@SYNTAX=OPT_TIME_SWITCH(call_put_flag,spot,strike,a,time,m,dt,rate,"
#~ "cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_TIME_SWITCH models the theoretical price of time switch "
#~ "options. (Pechtl 1995)\n"
#~ "The holder receives @a * @dt for each period dt that the asset price was "
#~ "greater than the strike price (for a call) or below it (for a put). \n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@a is the amount received for each time period as discussed above.\n"
#~ "@time is the maturity of the option in years.\n"
#~ "@m is the number of time units the option has already met the condition.\n"
#~ "@dt is the agreed upon discrete time period (often a day) expressed as a "
#~ "fraction of a year.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_TIME_SWITCH\n"
#~ "@SYNTAX=OPT_TIME_SWITCH(call_put_flag,spot,strike,a,time,m,dt,rate,"
#~ "cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_TIME_SWITCH models the theoretical price of time switch "
#~ "options. (Pechtl 1995)\n"
#~ "The holder receives @a * @dt for each period dt that the asset price was "
#~ "greater than the strike price (for a call) or below it (for a put). \n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@a is the amount received for each time period as discussed above.\n"
#~ "@time is the maturity of the option in years.\n"
#~ "@m is the number of time units the option has already met the condition.\n"
#~ "@dt is the agreed upon discrete time period (often a day) expressed as a "
#~ "fraction of a year.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=OPT_SIMPLE_CHOOSER\n"
#~ "@SYNTAX=OPT_SIMPLE_CHOOSER(call_put_flag,spot,strike,time1,time2,rate,"
#~ "cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_SIMPLE_CHOOSER models the theoretical price of simple "
#~ "chooser options.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time1 is the time in years until the holder chooses a put or a call "
#~ "option.\n"
#~ "@time2 is the time in years until the chosen option expires.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_SIMPLE_CHOOSER\n"
#~ "@SYNTAX=OPT_SIMPLE_CHOOSER(call_put_flag,spot,strike,time1,time2,rate,"
#~ "cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_SIMPLE_CHOOSER models the theoretical price of simple "
#~ "chooser options.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time1 is the time in years until the holder chooses a put or a call "
#~ "option.\n"
#~ "@time2 is the time in years until the the chosen option expires.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_COMPLEX_CHOOSER\n"
#~ "@SYNTAX=OPT_COMPLEX_CHOOSER(call_put_flag,spot,strike_call,strike_put,"
#~ "time,time_call,time_put,rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_COMPLEX_CHOOSER models the theoretical price of complex "
#~ "chooser options.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike_call is the strike price at which the option is struck, "
#~ "applicable if exercised as a call option.\n"
#~ "@strike_put is the strike price at which the option is struck, applicable "
#~ "if exercised as a put option.\n"
#~ "@time is the time in years until the holder chooses a put or a call "
#~ "option. \n"
#~ "@time_call is the time in years to maturity of the call option if "
#~ "chosen.\n"
#~ "@time_put is the time in years  to maturity of the put option if chosen.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_COMPLEX_CHOOSER\n"
#~ "@SYNTAX=OPT_COMPLEX_CHOOSER(call_put_flag,spot,strike_call,strike_put,"
#~ "time,time_call,time_put,rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_COMPLEX_CHOOSER models the theoretical price of complex "
#~ "chooser options.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike_call is the strike price at which the option is struck, "
#~ "applicable if exercised as a call option.\n"
#~ "@strike_put is the strike price at which the option is struck, applicable "
#~ "if exercised as a put option.\n"
#~ "@time is the time in years until the holder chooses a put or a call "
#~ "option. \n"
#~ "@time_call is the time in years to maturity of the call option if "
#~ "chosen.\n"
#~ "@time_put is the time in years  to maturity of the put option if chosen.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_ON_OPTIONS\n"
#~ "@SYNTAX=OPT_ON_OPTIONS(type_flag,spot,strike1,strike2,time1,time2,rate,"
#~ "cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_ON_OPTIONS models the theoretical price of options on "
#~ "options.\n"
#~ "@type_flag is 'cc' for calls on calls, 'cp' for calls on puts, and so on "
#~ "for 'pc', and 'pp'.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike1 is the strike price at which the option being valued is struck.\n"
#~ "@strike2 is the strike price at which the underlying option is struck.\n"
#~ "@time1 is the time in years to maturity of the option.\n"
#~ "@time2 is the time in years to the maturity of the underlying option.\n"
#~ "(@time2 >= @time1).\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset of the "
#~ "underlying option.for common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualized volatility in price of the underlying asset "
#~ "of the underlying option.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_ON_OPTIONS\n"
#~ "@SYNTAX=OPT_ON_OPTIONS(type_flag,spot,strike1,strike2,time1,time2,rate,"
#~ "cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_ON_OPTIONS models the theoretical price of options on "
#~ "options.\n"
#~ "@type_flag is 'cc' for calls on calls, 'cp' for calls on puts, and so on "
#~ "for 'pc', and 'pp'.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike1 is the strike price at which the option being valued is struck.\n"
#~ "@strike2 is the strike price at which the underlying option is struck.\n"
#~ "@time1 is the time in years to maturity of the option.\n"
#~ "@time2 is the time in years to the maturity of the underlying option.\n"
#~ "(@time2 >= @time1).\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset of the "
#~ "underlying option.for common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualised volatility in price of the underlying asset "
#~ "of the underlying option.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_EXTENDIBLE_WRITER\n"
#~ "@SYNTAX=OPT_EXTENDIBLE_WRITER(call_put_flag,spot,strike1,strike2,time1,"
#~ "time2,rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_EXTENDIBLE_WRITER models the theoretical price of "
#~ "extendible writer options. These are options that can be exercised at an "
#~ "initial period, @time1, or their maturity extended to @time2 if the "
#~ "option is out of the money at @time1.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike1 is the strike price at which the option is struck.\n"
#~ "@strike2 is the strike price at which the option is re-struck if out of "
#~ "the money at @time1.\n"
#~ "@time1 is the initial maturity of the option in years.\n"
#~ "@time2 is the is the extended maturity in years if chosen.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_EXTENDIBLE_WRITER\n"
#~ "@SYNTAX=OPT_EXTENDIBLE_WRITER(call_put_flag,spot,strike1,strike2,time1,"
#~ "time2,rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_EXTENDIBLE_WRITER models the theoretical price of "
#~ "extendible writer options. These are options that can be exercised at an "
#~ "initial period, @time1, or their maturity extended to @time2 if the "
#~ "option is out of the money at @time1.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike1 is the strike price at which the option is struck.\n"
#~ "@strike2 is the strike price at which the option is re-struck if out of "
#~ "the money at @time1.\n"
#~ "@time1 is the initial maturity of the option in years.\n"
#~ "@time2 is the is the extended maturity in years if chosen.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_2_ASSET_CORRELATION\n"
#~ "@SYNTAX=OPT_2_ASSET_CORRELATION(call_put_flag,spot1,spot2,strike1,strike2,"
#~ "time,cost_of_carry1,cost_of_carry2,rate,volatility1,volatility2,rho)\n"
#~ "@DESCRIPTION=OPT_2_ASSET_CORRELATION models the theoretical price of  "
#~ "options on 2 assets with correlation @rho.\n"
#~ "The payoff for a call is max(@spot2 - @strike2,0) if @spot1 > @strike1 or "
#~ "0 otherwise.\n"
#~ "The payoff for a put is max (@strike2 - @spot2, 0) if @spot1 < @strike1 "
#~ "or 0 otherwise.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot1 & @spot2 are the spot prices of the underlying assets.\n"
#~ "@strike1 & @strike2 are the strike prices at which the option is struck.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the "
#~ "underlying assets, for common stocks, this would be the dividend yield.\n"
#~ "@volatility1 & @volatility2 are the annualized volatility in price of the "
#~ "underlying assets.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_2_ASSET_CORRELATION\n"
#~ "@SYNTAX=OPT_2_ASSET_CORRELATION(call_put_flag,spot1,spot2,strike1,strike2,"
#~ "time,cost_of_carry1,cost_of_carry2,rate,volatility1,volatility2,rho)\n"
#~ "@DESCRIPTION=OPT_2_ASSET_CORRELATION models the theoretical price of  "
#~ "options on 2 assets with correlation @rho.\n"
#~ "The payoff for a call is max(@spot2 - @strike2,0) if @spot1 > @strike1 or "
#~ "0 otherwise.\n"
#~ "The payoff for a put is max (@strike2 - @spot2, 0) if @spot1 < @strike1 "
#~ "or 0 otherwise.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot1 & @spot2 are the spot prices of the underlying assets.\n"
#~ "@strike1 & @strike2 are the strike prices at which the option is struck.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the "
#~ "underlying assets, for common stocks, this would be the dividend yield.\n"
#~ "@volatility1 & @volatility2 are the annualised volatility in price of the "
#~ "underlying assets.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_EURO_EXCHANGE\n"
#~ "@SYNTAX=OPT_EURO_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
#~ "cost_of_carry2,volatility1,volatility2,rho)\n"
#~ "@DESCRIPTION=OPT_EURO_EXCHANGE models the theoretical price of a European "
#~ "option to exchange one asset with quantity @qty2 and spot price @spot2 "
#~ "for another, with quantity @qty1 and spot price @spot1.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the "
#~ "underlying assets, for common stocks, this would be the dividend yield.\n"
#~ "@volatility1 & @volatility2 are the annualized volatility in price of the "
#~ "underlying assets.\n"
#~ "@rho is the correlation between the two assets.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_AMER_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, "
#~ "OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_EURO_EXCHANGE\n"
#~ "@SYNTAX=OPT_EURO_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
#~ "cost_of_carry2,volatility1,volatility2,rho)\n"
#~ "@DESCRIPTION=OPT_EURO_EXCHANGE models the theoretical price of a European "
#~ "option to exchange one asset with quantity @qty2 and spot price @spot2 "
#~ "for another, with quantity @qty1 and spot price @spot1.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the "
#~ "underlying assets, for common stocks, this would be the dividend yield.\n"
#~ "@volatility1 & @volatility2 are the annualised volatility in price of the "
#~ "underlying assets.\n"
#~ "@rho is the correlation between the two assets.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_AMER_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, "
#~ "OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_AMER_EXCHANGE\n"
#~ "@SYNTAX=OPT_AMER_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
#~ "cost_of_carry2,volatility1, volatility2, rho)\n"
#~ "@DESCRIPTION=OPT_AMER_EXCHANGE models the theoretical price of an "
#~ "American option to exchange one asset with quantity @qty2 and spot price "
#~ "@spot2 for another, with quantity @qty1 and spot price @spot1.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the "
#~ "underlying assets, for common stocks, this would be the dividend yield.\n"
#~ "@volatility1 & @volatility2 are the annualized volatility in price of the "
#~ "underlying assets.\n"
#~ "@rho is the correlation between the two assets.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_EURO_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, "
#~ "OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_AMER_EXCHANGE\n"
#~ "@SYNTAX=OPT_AMER_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
#~ "cost_of_carry2,volatility1, volatility2, rho)\n"
#~ "@DESCRIPTION=OPT_AMER_EXCHANGE models the theoretical price of an "
#~ "American option to exchange one asset with quantity @qty2 and spot price "
#~ "@spot2 for another, with quantity @qty1 and spot price @spot1.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the "
#~ "underlying assets, for common stocks, this would be the dividend yield.\n"
#~ "@volatility1 & @volatility2 are the annualised volatility in price of the "
#~ "underlying assets.\n"
#~ "@rho is the correlation between the two assets.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_EURO_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, "
#~ "OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_SPREAD_APPROX\n"
#~ "@SYNTAX=OPT_SPREAD_APPROX(call_put_flag,fut_price1,fut_price2,strike,"
#~ "time, rate,volatility1,volatility2,rho)\n"
#~ "@DESCRIPTION=OPT_SPREAD_APPROX models the theoretical price of a European "
#~ "option on the spread between two futures contracts.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@fut_price1 & @fut_price2 are the prices of the two futures contracts.\n"
#~ "@strike is the strike price at which the option is struck \n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@volatility1 & @volatility2 are the annualized volatility in price of the "
#~ "underlying futures contracts.\n"
#~ "@rho is the correlation between the two futures contracts.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_SPREAD_APPROX\n"
#~ "@SYNTAX=OPT_SPREAD_APPROX(call_put_flag,fut_price1,fut_price2,strike,"
#~ "time, rate,volatility1,volatility2,rho)\n"
#~ "@DESCRIPTION=OPT_SPREAD_APPROX models the theoretical price of a European "
#~ "option on the spread between two futures contracts.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@fut_price1 & @fut_price2 are the prices of the two futures contracts.\n"
#~ "@strike is the strike price at which the option is struck \n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@volatility1 & @volatility2 are the annualised volatility in price of the "
#~ "underlying futures contracts.\n"
#~ "@rho is the correlation between the two futures contracts.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_FLOAT_STRK_LKBK\n"
#~ "@SYNTAX=OPT_FLOAT_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,time,"
#~ "rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_FLOAT_STRK_LKBK models the theoretical price of an "
#~ "option where the holder of the option may exercise on expiry at the most "
#~ "favourable price observed during the options life of the underlying "
#~ "asset.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@spot_min is the minimum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@spot_max is the maximum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_FLOAT_STRK_LKBK\n"
#~ "@SYNTAX=OPT_FLOAT_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,time,"
#~ "rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_FLOAT_STRK_LKBK models the theoretical price of an "
#~ "option where the holder of the option may exercise on expiry at the most "
#~ "favourable price observed during the options life of the underlying "
#~ "asset.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@spot_min is the minimum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@spot_max is the maximum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_FIXED_STRK_LKBK\n"
#~ "@SYNTAX=OPT_FIXED_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,strike,"
#~ "time,rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_FIXED_STRK_LKBK models the theoretical price of an "
#~ "option where the holder of the option may exercise on expiry at the most "
#~ "favourable price observed during the options life of the underlying "
#~ "asset.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@spot_min is the minimum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@spot_max is the maximum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@strike is the strike prices at which the option is struck.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_FIXED_STRK_LKBK\n"
#~ "@SYNTAX=OPT_FIXED_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,strike,"
#~ "time,rate,cost_of_carry,volatility)\n"
#~ "@DESCRIPTION=OPT_FIXED_STRK_LKBK models the theoretical price of an "
#~ "option where the holder of the option may exercise on expiry at the most "
#~ "favourable price observed during the options life of the underlying "
#~ "asset.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@spot_min is the minimum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@spot_max is the maximum spot price of the underlying asset so far "
#~ "observed.\n"
#~ "@strike is the strike prices at which the option is struck.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset, for "
#~ "common stocks, this would be the dividend yield.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=OPT_BINOMIAL\n"
#~ "@SYNTAX=OPT_BINOMIAL(amer_euro_flag,call_put_flag,num_time_steps, spot, "
#~ "strike, time, rate, volatility, cost_of_carry)\n"
#~ "@DESCRIPTION=OPT_ models the theoretical price of either an American or "
#~ "European style option using a binomial tree.\n"
#~ "@amer_euro_flag is either 'a' or 'e' to indicate whether the option being "
#~ "valued is an American or European style option respectively.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@num_time_steps is the number of time steps used in the valuation, a "
#~ "greater number of time steps yields greater accuracy however is slower to "
#~ "calculate.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualized risk-free rate of interest.\n"
#~ "@volatility is the annualized volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
#~ msgstr ""
#~ "@FUNCTION=OPT_BINOMIAL\n"
#~ "@SYNTAX=OPT_BINOMIAL(amer_euro_flag,call_put_flag,num_time_steps, spot, "
#~ "strike, time, rate, volatility, cost_of_carry)\n"
#~ "@DESCRIPTION=OPT_ models the theoretical price of either an American or "
#~ "European style option using a binomial tree.\n"
#~ "@amer_euro_flag is either 'a' or 'e' to indicate whether the option being "
#~ "valued is an American or European style option respectively.\n"
#~ "@call_put_flag is 'c' or 'p' to indicate whether the option is a call or "
#~ "a put.\n"
#~ "@num_time_steps is the number of time steps used in the valuation, a "
#~ "greater number of time steps yields greater accuracy however is slower to "
#~ "calculate.\n"
#~ "@spot is the spot price of the underlying asset.\n"
#~ "@strike is the strike price at which the option is struck.\n"
#~ "@time is the initial maturity of the option in years.\n"
#~ "@rate is the annualised risk-free rate of interest.\n"
#~ "@volatility is the annualised volatility in price of the underlying "
#~ "asset.\n"
#~ "@cost_of_carry is the leakage in value of the underlying asset.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#~ msgid ""
#~ "@FUNCTION=COMPLEX\n"
#~ "@SYNTAX=COMPLEX(real,im[,suffix])\n"
#~ "@DESCRIPTION=COMPLEX returns a complex number of the form x + yi.\n"
#~ "\n"
#~ "@real is the real and @im is the imaginary part of the complex number.  "
#~ "@suffix is the suffix for the imaginary part.  If it is omitted, COMPLEX "
#~ "uses 'i' by default.\n"
#~ "\n"
#~ "* If @suffix is neither 'i' nor 'j', COMPLEX returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COMPLEX(1,-1) equals 1-i.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COMPLEX\n"
#~ "@SYNTAX=COMPLEX(real,im[,suffix])\n"
#~ "@DESCRIPTION=COMPLEX returns a complex number of the form x + yi.\n"
#~ "\n"
#~ "@real is the real and @im is the imaginary part of the complex number.  "
#~ "@suffix is the suffix for the imaginary part.  If it is omitted, COMPLEX "
#~ "uses 'i' by default.\n"
#~ "\n"
#~ "* If @suffix is neither 'i' nor 'j', COMPLEX returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COMPLEX(1,-1) equals 1-i.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=IMAGINARY\n"
#~ "@SYNTAX=IMAGINARY(inumber)\n"
#~ "@DESCRIPTION=IMAGINARY returns the imaginary part of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMAGINARY returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMAGINARY(\"132-j\") equals -1.\n"
#~ "\n"
#~ "@SEEALSO=IMREAL"
#~ msgstr ""
#~ "@FUNCTION=IMAGINARY\n"
#~ "@SYNTAX=IMAGINARY(inumber)\n"
#~ "@DESCRIPTION=IMAGINARY returns the imaginary part of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMAGINARY returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMAGINARY(\"132-j\") equals -1.\n"
#~ "\n"
#~ "@SEEALSO=IMREAL"

#~ msgid ""
#~ "@FUNCTION=IMABS\n"
#~ "@SYNTAX=IMABS(inumber)\n"
#~ "@DESCRIPTION=IMABS returns the absolute value of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMABS returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMABS(\"2-j\") equals 2.23606798.\n"
#~ "\n"
#~ "@SEEALSO=IMAGINARY,IMREAL"
#~ msgstr ""
#~ "@FUNCTION=IMABS\n"
#~ "@SYNTAX=IMABS(inumber)\n"
#~ "@DESCRIPTION=IMABS returns the absolute value of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMABS returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMABS(\"2-j\") equals 2.23606798.\n"
#~ "\n"
#~ "@SEEALSO=IMAGINARY,IMREAL"

#~ msgid ""
#~ "@FUNCTION=IMREAL\n"
#~ "@SYNTAX=IMREAL(inumber)\n"
#~ "@DESCRIPTION=IMREAL returns the real part of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMREAL returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "imreal(\"132-j\") equals 132.\n"
#~ "\n"
#~ "@SEEALSO=IMAGINARY"
#~ msgstr ""
#~ "@FUNCTION=IMREAL\n"
#~ "@SYNTAX=IMREAL(inumber)\n"
#~ "@DESCRIPTION=IMREAL returns the real part of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMREAL returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "imreal(\"132-j\") equals 132.\n"
#~ "\n"
#~ "@SEEALSO=IMAGINARY"

#~ msgid ""
#~ "@FUNCTION=IMCONJUGATE\n"
#~ "@SYNTAX=IMCONJUGATE(inumber)\n"
#~ "@DESCRIPTION=IMCONJUGATE returns the complex conjugate of a complex "
#~ "number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCONJUGATE returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCONJUGATE(\"1-j\") equals 1+j.\n"
#~ "\n"
#~ "@SEEALSO=IMAGINARY,IMREAL"
#~ msgstr ""
#~ "@FUNCTION=IMCONJUGATE\n"
#~ "@SYNTAX=IMCONJUGATE(inumber)\n"
#~ "@DESCRIPTION=IMCONJUGATE returns the complex conjugate of a complex "
#~ "number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCONJUGATE returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCONJUGATE(\"1-j\") equals 1+j.\n"
#~ "\n"
#~ "@SEEALSO=IMAGINARY,IMREAL"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=IMINV\n"
#~ "@SYNTAX=IMINV(inumber)\n"
#~ "@DESCRIPTION=IMINV returns the inverse, or reciprocal, of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\t1/z = (x - i y)/(x^2 + y^2).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMINV returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMINV(\"1-j\") equals 0.5+0.5j.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=IMINV\n"
#~ "@SYNTAX=IMINV(inumber)\n"
#~ "@DESCRIPTION=IMINV returns the the inverse, or reciprocal, of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\t1/z = (x - i y)/(x^2 + y^2).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMINV returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMINV(\"1-j\") equals 0.5+0.5j.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=IMNEG\n"
#~ "@SYNTAX=IMNEG(inumber)\n"
#~ "@DESCRIPTION=IMNEG returns the negative of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\t-z = (-x) + i(-y).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMNEG returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMNEG(\"1-j\") equals -1+j.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=IMNEG\n"
#~ "@SYNTAX=IMNEG(inumber)\n"
#~ "@DESCRIPTION=IMNEG returns the negative of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\t-z = (-x) + i(-y).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMNEG returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMNEG(\"1-j\") equals -1+j.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=IMCOS\n"
#~ "@SYNTAX=IMCOS(inumber)\n"
#~ "@DESCRIPTION=IMCOS returns the cosine of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOS returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOS(\"1+j\") equals 0.833730-0.988898j.\n"
#~ "\n"
#~ "@SEEALSO=IMSIN,IMTAN"
#~ msgstr ""
#~ "@FUNCTION=IMCOS\n"
#~ "@SYNTAX=IMCOS(inumber)\n"
#~ "@DESCRIPTION=IMCOS returns the cosine of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOS returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOS(\"1+j\") equals 0.833730-0.988898j.\n"
#~ "\n"
#~ "@SEEALSO=IMSIN,IMTAN"

#~ msgid ""
#~ "@FUNCTION=IMTAN\n"
#~ "@SYNTAX=IMTAN(inumber)\n"
#~ "@DESCRIPTION=IMTAN returns the tangent of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMTAN returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMTAN(\"2-j\") equals -0.2434582-1.1667363j.\n"
#~ "\n"
#~ "@SEEALSO=IMSIN,IMCOS"
#~ msgstr ""
#~ "@FUNCTION=IMTAN\n"
#~ "@SYNTAX=IMTAN(inumber)\n"
#~ "@DESCRIPTION=IMTAN returns the tangent of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMTAN returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMTAN(\"2-j\") equals -0.2434582-1.1667363j.\n"
#~ "\n"
#~ "@SEEALSO=IMSIN,IMCOS"

#~ msgid ""
#~ "@FUNCTION=IMSEC\n"
#~ "@SYNTAX=IMSEC(inumber)\n"
#~ "@DESCRIPTION=IMSEC returns the complex secant of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\tsec(z) = 1/cos(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSEC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSEC(\"2-j\") equals -0.413149-0.687527j.\n"
#~ "\n"
#~ "@SEEALSO=IMCSC,IMCOT"
#~ msgstr ""
#~ "@FUNCTION=IMSEC\n"
#~ "@SYNTAX=IMSEC(inumber)\n"
#~ "@DESCRIPTION=IMSEC returns the complex secant of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\tsec(z) = 1/cos(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSEC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSEC(\"2-j\") equals -0.413149-0.687527j.\n"
#~ "\n"
#~ "@SEEALSO=IMCSC,IMCOT"

#~ msgid ""
#~ "@FUNCTION=IMCSC\n"
#~ "@SYNTAX=IMCSC(inumber)\n"
#~ "@DESCRIPTION=IMCSC returns the complex cosecant of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\tcsc(z) = 1/sin(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCSC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCSC(\"2-j\") equals 0.635494-0.221501j.\n"
#~ "\n"
#~ "@SEEALSO=IMSEC,IMCOT"
#~ msgstr ""
#~ "@FUNCTION=IMCSC\n"
#~ "@SYNTAX=IMCSC(inumber)\n"
#~ "@DESCRIPTION=IMCSC returns the complex cosecant of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\tcsc(z) = 1/sin(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCSC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCSC(\"2-j\") equals 0.635494-0.221501j.\n"
#~ "\n"
#~ "@SEEALSO=IMSEC,IMCOT"

#~ msgid ""
#~ "@FUNCTION=IMCOT\n"
#~ "@SYNTAX=IMCOT(inumber)\n"
#~ "@DESCRIPTION=IMCOT returns the complex cotangent of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\tcot(z) = 1/tan(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOT returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOT(\"2-j\") equals -0.171384+0.821330j.\n"
#~ "\n"
#~ "@SEEALSO=IMSEC,IMCSC"
#~ msgstr ""
#~ "@FUNCTION=IMCOT\n"
#~ "@SYNTAX=IMCOT(inumber)\n"
#~ "@DESCRIPTION=IMCOT returns the complex cotangent of the complex number z "
#~ "(@inumber), where\n"
#~ "\n"
#~ "\tcot(z) = 1/tan(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOT returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOT(\"2-j\") equals -0.171384+0.821330j.\n"
#~ "\n"
#~ "@SEEALSO=IMSEC,IMCSC"

#~ msgid ""
#~ "@FUNCTION=IMEXP\n"
#~ "@SYNTAX=IMEXP(inumber)\n"
#~ "@DESCRIPTION=IMEXP returns the exponential of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMEXP returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMEXP(\"2-j\") equals 3.992324-6.217676j.\n"
#~ "\n"
#~ "@SEEALSO=IMLN"
#~ msgstr ""
#~ "@FUNCTION=IMEXP\n"
#~ "@SYNTAX=IMEXP(inumber)\n"
#~ "@DESCRIPTION=IMEXP returns the exponential of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMEXP returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMEXP(\"2-j\") equals 3.992324-6.217676j.\n"
#~ "\n"
#~ "@SEEALSO=IMLN"

#~ msgid ""
#~ "@FUNCTION=IMARGUMENT\n"
#~ "@SYNTAX=IMARGUMENT(inumber)\n"
#~ "@DESCRIPTION=IMARGUMENT returns the argument theta of a complex number, i."
#~ "e. the angle in radians from the real axis to the representation of the "
#~ "number in polar coordinates.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARGUMENT returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARGUMENT(\"2-j\") equals -0.463647609.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=IMARGUMENT\n"
#~ "@SYNTAX=IMARGUMENT(inumber)\n"
#~ "@DESCRIPTION=IMARGUMENT returns the argument theta of a complex number, i."
#~ "e. the angle in radians from the real axis to the representation of the "
#~ "number in polar coordinates.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARGUMENT returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARGUMENT(\"2-j\") equals -0.463647609.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=IMLN\n"
#~ "@SYNTAX=IMLN(inumber)\n"
#~ "@DESCRIPTION=IMLN returns the natural logarithm of a complex number.\n"
#~ "\n"
#~ "The result will have an imaginary part between -pi and +pi.  The natural "
#~ "logarithm is not uniquely defined on complex numbers. You may need to add "
#~ "or subtract an even multiple of pi to the imaginary part.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMLN returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMLN(\"3-j\") equals 1.15129-0.32175j.\n"
#~ "\n"
#~ "@SEEALSO=IMEXP,IMLOG2,IMLOG10"
#~ msgstr ""
#~ "@FUNCTION=IMLN\n"
#~ "@SYNTAX=IMLN(inumber)\n"
#~ "@DESCRIPTION=IMLN returns the natural logarithm of a complex number.\n"
#~ "\n"
#~ "The result will have an imaginary part between -pi and +pi.  The natural "
#~ "logarithm is not uniquely defined on complex numbers. You may need to add "
#~ "or subtract an even multiple of pi to the imaginary part.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMLN returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMLN(\"3-j\") equals 1.15129-0.32175j.\n"
#~ "\n"
#~ "@SEEALSO=IMEXP,IMLOG2,IMLOG10"

#~ msgid ""
#~ "@FUNCTION=IMLOG2\n"
#~ "@SYNTAX=IMLOG2(inumber)\n"
#~ "@DESCRIPTION=IMLOG2 returns the logarithm of a complex number in base 2.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMLOG2 returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMLOG2(\"3-j\") equals 1.66096-0.46419j.\n"
#~ "\n"
#~ "@SEEALSO=IMLN,IMLOG10"
#~ msgstr ""
#~ "@FUNCTION=IMLOG2\n"
#~ "@SYNTAX=IMLOG2(inumber)\n"
#~ "@DESCRIPTION=IMLOG2 returns the logarithm of a complex number in base 2.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMLOG2 returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMLOG2(\"3-j\") equals 1.66096-0.46419j.\n"
#~ "\n"
#~ "@SEEALSO=IMLN,IMLOG10"

#~ msgid ""
#~ "@FUNCTION=IMLOG10\n"
#~ "@SYNTAX=IMLOG10(inumber)\n"
#~ "@DESCRIPTION=IMLOG10 returns the logarithm of a complex number in base "
#~ "10.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMLOG10 returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMLOG10(\"3-j\") equals 0.5-0.13973j.\n"
#~ "\n"
#~ "@SEEALSO=IMLN,IMLOG2"
#~ msgstr ""
#~ "@FUNCTION=IMLOG10\n"
#~ "@SYNTAX=IMLOG10(inumber)\n"
#~ "@DESCRIPTION=IMLOG10 returns the logarithm of a complex number in base "
#~ "10.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMLOG10 returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMLOG10(\"3-j\") equals 0.5-0.13973j.\n"
#~ "\n"
#~ "@SEEALSO=IMLN,IMLOG2"

#~ msgid ""
#~ "@FUNCTION=IMPOWER\n"
#~ "@SYNTAX=IMPOWER(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMPOWER returns a complex number raised to a power.  "
#~ "@inumber1 is the complex number to be raised to a power and @inumber2 is "
#~ "the power to which you want to raise it.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMPOWER "
#~ "returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMPOWER(\"4-j\",2) equals 15-8j.\n"
#~ "\n"
#~ "@SEEALSO=IMSQRT"
#~ msgstr ""
#~ "@FUNCTION=IMPOWER\n"
#~ "@SYNTAX=IMPOWER(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMPOWER returns a complex number raised to a power.  "
#~ "@inumber1 is the complex number to be raised to a power and @inumber2 is "
#~ "the power to which you want to raise it.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMPOWER "
#~ "returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMPOWER(\"4-j\",2) equals 15-8j.\n"
#~ "\n"
#~ "@SEEALSO=IMSQRT"

#~ msgid ""
#~ "@FUNCTION=IMDIV\n"
#~ "@SYNTAX=IMDIV(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMDIV returns the quotient of two complex numbers.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMDIV returns "
#~ "#VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMDIV(\"2-j\",\"2+j\") equals 0.6-0.8j.\n"
#~ "\n"
#~ "@SEEALSO=IMPRODUCT"
#~ msgstr ""
#~ "@FUNCTION=IMDIV\n"
#~ "@SYNTAX=IMDIV(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMDIV returns the quotient of two complex numbers.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMDIV returns "
#~ "#VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMDIV(\"2-j\",\"2+j\") equals 0.6-0.8j.\n"
#~ "\n"
#~ "@SEEALSO=IMPRODUCT"

#~ msgid ""
#~ "@FUNCTION=IMSIN\n"
#~ "@SYNTAX=IMSIN(inumber)\n"
#~ "@DESCRIPTION=IMSIN returns the sine of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSIN returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSIN(\"1+j\") equals 1.29846+0.63496j.\n"
#~ "\n"
#~ "@SEEALSO=IMCOS,IMTAN"
#~ msgstr ""
#~ "@FUNCTION=IMSIN\n"
#~ "@SYNTAX=IMSIN(inumber)\n"
#~ "@DESCRIPTION=IMSIN returns the sine of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSIN returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSIN(\"1+j\") equals 1.29846+0.63496j.\n"
#~ "\n"
#~ "@SEEALSO=IMCOS,IMTAN"

#~ msgid ""
#~ "@FUNCTION=IMSINH\n"
#~ "@SYNTAX=IMSINH(inumber)\n"
#~ "@DESCRIPTION=IMSINH returns the complex hyperbolic sine of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tsinh(z) = (exp(z) - exp(-z))/2.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSINH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSINH(\"1+j\") equals 0.63496+1.29846j.\n"
#~ "\n"
#~ "@SEEALSO=IMCOSH,IMTANH"
#~ msgstr ""
#~ "@FUNCTION=IMSINH\n"
#~ "@SYNTAX=IMSINH(inumber)\n"
#~ "@DESCRIPTION=IMSINH returns the complex hyperbolic sine of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tsinh(z) = (exp(z) - exp(-z))/2.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSINH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSINH(\"1+j\") equals 0.63496+1.29846j.\n"
#~ "\n"
#~ "@SEEALSO=IMCOSH,IMTANH"

#~ msgid ""
#~ "@FUNCTION=IMCOSH\n"
#~ "@SYNTAX=IMCOSH(inumber)\n"
#~ "@DESCRIPTION=IMCOSH returns the complex hyperbolic cosine of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tcosh(z) = (exp(z) + exp(-z))/2.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOSH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOSH(\"1+j\") equals 0.83373+0.988898j.\n"
#~ "\n"
#~ "@SEEALSO=IMSINH,IMTANH"
#~ msgstr ""
#~ "@FUNCTION=IMCOSH\n"
#~ "@SYNTAX=IMCOSH(inumber)\n"
#~ "@DESCRIPTION=IMCOSH returns the complex hyperbolic cosine of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tcosh(z) = (exp(z) + exp(-z))/2.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOSH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOSH(\"1+j\") equals 0.83373+0.988898j.\n"
#~ "\n"
#~ "@SEEALSO=IMSINH,IMTANH"

#~ msgid ""
#~ "@FUNCTION=IMTANH\n"
#~ "@SYNTAX=IMTANH(inumber)\n"
#~ "@DESCRIPTION=IMTANH returns the complex hyperbolic tangent of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\ttanh(z) = sinh(z)/cosh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMTANH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMTANH(\"1+j\") equals 1.083923+0.2717526j.\n"
#~ "\n"
#~ "@SEEALSO=IMSINH,IMCOSH"
#~ msgstr ""
#~ "@FUNCTION=IMTANH\n"
#~ "@SYNTAX=IMTANH(inumber)\n"
#~ "@DESCRIPTION=IMTANH returns the complex hyperbolic tangent of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\ttanh(z) = sinh(z)/cosh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMTANH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMTANH(\"1+j\") equals 1.083923+0.2717526j.\n"
#~ "\n"
#~ "@SEEALSO=IMSINH,IMCOSH"

#~ msgid ""
#~ "@FUNCTION=IMSECH\n"
#~ "@SYNTAX=IMSECH(inumber)\n"
#~ "@DESCRIPTION=IMSECH returns the complex hyperbolic secant of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tsech(z) = 1/cosh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSECH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSECH(\"1+j\") equals 0.498337-0.5910838j.\n"
#~ "\n"
#~ "@SEEALSO=IMCSCH,IMCOTH"
#~ msgstr ""
#~ "@FUNCTION=IMSECH\n"
#~ "@SYNTAX=IMSECH(inumber)\n"
#~ "@DESCRIPTION=IMSECH returns the complex hyperbolic secant of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tsech(z) = 1/cosh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSECH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSECH(\"1+j\") equals 0.498337-0.5910838j.\n"
#~ "\n"
#~ "@SEEALSO=IMCSCH,IMCOTH"

#~ msgid ""
#~ "@FUNCTION=IMCSCH\n"
#~ "@SYNTAX=IMCSCH(inumber)\n"
#~ "@DESCRIPTION=IMCSCH returns the complex hyperbolic cosecant of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tcsch(z) = 1/sinh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCSCH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCSCH(\"1+j\") equals 0.303931-0.621518j.\n"
#~ "\n"
#~ "@SEEALSO=IMSECH,IMCOTH"
#~ msgstr ""
#~ "@FUNCTION=IMCSCH\n"
#~ "@SYNTAX=IMCSCH(inumber)\n"
#~ "@DESCRIPTION=IMCSCH returns the complex hyperbolic cosecant of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tcsch(z) = 1/sinh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCSCH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCSCH(\"1+j\") equals 0.303931-0.621518j.\n"
#~ "\n"
#~ "@SEEALSO=IMSECH,IMCOTH"

#~ msgid ""
#~ "@FUNCTION=IMCOTH\n"
#~ "@SYNTAX=IMCOTH(inumber)\n"
#~ "@DESCRIPTION=IMCOTH returns the complex hyperbolic cotangent of the "
#~ "complex number z (@inumber) where,\n"
#~ "\n"
#~ "\tcoth(z) = 1/tanh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOTH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOTH(\"1+j\") equals 0.868014-0.217622j.\n"
#~ "\n"
#~ "@SEEALSO=IMSECH,IMCSCH"
#~ msgstr ""
#~ "@FUNCTION=IMCOTH\n"
#~ "@SYNTAX=IMCOTH(inumber)\n"
#~ "@DESCRIPTION=IMCOTH returns the complex hyperbolic cotangent of the "
#~ "complex number z (@inumber) where,\n"
#~ "\n"
#~ "\tcoth(z) = 1/tanh(z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMCOTH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMCOTH(\"1+j\") equals 0.868014-0.217622j.\n"
#~ "\n"
#~ "@SEEALSO=IMSECH,IMCSCH"

#~ msgid ""
#~ "@FUNCTION=IMARCSIN\n"
#~ "@SYNTAX=IMARCSIN(inumber)\n"
#~ "@DESCRIPTION=IMARCSIN returns the complex arcsine of the complex number "
#~ "@inumber. The branch cuts are on the real axis, less than -1 and greater "
#~ "than 1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSIN returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSIN(\"1+j\") equals 0.6662394+1.061275j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCOS,IMARCTAN"
#~ msgstr ""
#~ "@FUNCTION=IMARCSIN\n"
#~ "@SYNTAX=IMARCSIN(inumber)\n"
#~ "@DESCRIPTION=IMARCSIN returns the complex arcsine of the complex number "
#~ "@inumber. The branch cuts are on the real axis, less than -1 and greater "
#~ "than 1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSIN returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSIN(\"1+j\") equals 0.6662394+1.061275j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCOS,IMARCTAN"

#~ msgid ""
#~ "@FUNCTION=IMARCCOS\n"
#~ "@SYNTAX=IMARCCOS(inumber)\n"
#~ "@DESCRIPTION=IMARCCOS returns the complex arccosine of the complex number "
#~ "@inumber. The branch cuts are on the real axis, less than -1 and greater "
#~ "than 1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOS returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOS(\"1+j\") equals 0.9045569-1.061275j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSIN,IMARCTAN"
#~ msgstr ""
#~ "@FUNCTION=IMARCCOS\n"
#~ "@SYNTAX=IMARCCOS(inumber)\n"
#~ "@DESCRIPTION=IMARCCOS returns the complex arccosine of the complex number "
#~ "@inumber. The branch cuts are on the real axis, less than -1 and greater "
#~ "than 1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOS returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOS(\"1+j\") equals 0.9045569-1.061275j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSIN,IMARCTAN"

#~ msgid ""
#~ "@FUNCTION=IMARCTAN\n"
#~ "@SYNTAX=IMARCTAN(inumber)\n"
#~ "@DESCRIPTION=IMARCTAN returns the complex arctangent of the complex "
#~ "number @inumber. The branch cuts are on the imaginary axis, below -i and "
#~ "above i.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCTAN returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCTAN(\"1+j\") equals 1.0172220+0.4023595j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSIN,IMARCCOS"
#~ msgstr ""
#~ "@FUNCTION=IMARCTAN\n"
#~ "@SYNTAX=IMARCTAN(inumber)\n"
#~ "@DESCRIPTION=IMARCTAN returns the complex arctangent of the complex "
#~ "number @inumber. The branch cuts are on the imaginary axis, below -i and "
#~ "above i.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCTAN returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCTAN(\"1+j\") equals 1.0172220+0.4023595j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSIN,IMARCCOS"

#~ msgid ""
#~ "@FUNCTION=IMARCSEC\n"
#~ "@SYNTAX=IMARCSEC(inumber)\n"
#~ "@DESCRIPTION=IMARCSEC returns the complex arcsecant of the complex number "
#~ "z (@inumber), where\n"
#~ "\n"
#~ "\tarcsec(z) = arccos(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSEC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSEC(\"1+j\") equals 1.1185179+0.5306375j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCSC,IMARCCOT"
#~ msgstr ""
#~ "@FUNCTION=IMARCSEC\n"
#~ "@SYNTAX=IMARCSEC(inumber)\n"
#~ "@DESCRIPTION=IMARCSEC returns the complex arcsecant of the complex number "
#~ "z (@inumber), where\n"
#~ "\n"
#~ "\tarcsec(z) = arccos(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSEC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSEC(\"1+j\") equals 1.1185179+0.5306375j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCSC,IMARCCOT"

#~ msgid ""
#~ "@FUNCTION=IMARCCSC\n"
#~ "@SYNTAX=IMARCCSC(inumber)\n"
#~ "@DESCRIPTION=IMARCCSC returns the complex arccosecant of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tarccsc(z) = arcsin(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCSC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCSC(\"1+j\") equals 0.45227845-0.5306375j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSEC,IMARCCOT"
#~ msgstr ""
#~ "@FUNCTION=IMARCCSC\n"
#~ "@SYNTAX=IMARCCSC(inumber)\n"
#~ "@DESCRIPTION=IMARCCSC returns the complex arccosecant of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tarccsc(z) = arcsin(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCSC returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCSC(\"1+j\") equals 0.45227845-0.5306375j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSEC,IMARCCOT"

#~ msgid ""
#~ "@FUNCTION=IMARCCOT\n"
#~ "@SYNTAX=IMARCCOT(inumber)\n"
#~ "@DESCRIPTION=IMARCCOT returns the complex arccotangent of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tarccot(z) = arctan(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOT returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOT(\"1+j\") equals 0.553574+0.4023595j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSEC,IMARCCSC"
#~ msgstr ""
#~ "@FUNCTION=IMARCCOT\n"
#~ "@SYNTAX=IMARCCOT(inumber)\n"
#~ "@DESCRIPTION=IMARCCOT returns the complex arccotangent of the complex "
#~ "number z (@inumber), where\n"
#~ "\n"
#~ "\tarccot(z) = arctan(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOT returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOT(\"1+j\") equals 0.553574+0.4023595j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSEC,IMARCCSC"

#~ msgid ""
#~ "@FUNCTION=IMARCSINH\n"
#~ "@SYNTAX=IMARCSINH(inumber)\n"
#~ "@DESCRIPTION=IMARCSINH returns the complex hyperbolic arcsine of the "
#~ "complex number @inumber. The branch cuts are on the imaginary axis, below "
#~ "-i and above i.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSINH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSINH(\"1+j\") equals 1.061275+0.6662394j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCOSH,IMARCTANH"
#~ msgstr ""
#~ "@FUNCTION=IMARCSINH\n"
#~ "@SYNTAX=IMARCSINH(inumber)\n"
#~ "@DESCRIPTION=IMARCSINH returns the complex hyperbolic arcsine of the "
#~ "complex number @inumber. The branch cuts are on the imaginary axis, below "
#~ "-i and above i.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSINH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSINH(\"1+j\") equals 1.061275+0.6662394j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCOSH,IMARCTANH"

#~ msgid ""
#~ "@FUNCTION=IMARCCOSH\n"
#~ "@SYNTAX=IMARCCOSH(inumber)\n"
#~ "@DESCRIPTION=IMARCCOSH returns the complex hyperbolic arccosine of the "
#~ "complex number @inumber. The branch cut is on the real axis, less than "
#~ "1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOSH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOSH(\"1+j\") equals 1.06127506+0.904557j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSINH,IMARCTANH"
#~ msgstr ""
#~ "@FUNCTION=IMARCCOSH\n"
#~ "@SYNTAX=IMARCCOSH(inumber)\n"
#~ "@DESCRIPTION=IMARCCOSH returns the complex hyperbolic arccosine of the "
#~ "complex number @inumber. The branch cut is on the real axis, less than "
#~ "1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOSH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOSH(\"1+j\") equals 1.06127506+0.904557j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSINH,IMARCTANH"

#~ msgid ""
#~ "@FUNCTION=IMARCTANH\n"
#~ "@SYNTAX=IMARCTANH(inumber)\n"
#~ "@DESCRIPTION=IMARCTANH returns the complex hyperbolic arctangent of the "
#~ "complex number @inumber. The branch cuts are on the real axis, less than "
#~ "-1 and greater than 1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCTANH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCTANH(\"1+j\") equals 0.4023595+1.0172220j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSINH,IMARCCOSH"
#~ msgstr ""
#~ "@FUNCTION=IMARCTANH\n"
#~ "@SYNTAX=IMARCTANH(inumber)\n"
#~ "@DESCRIPTION=IMARCTANH returns the complex hyperbolic arctangent of the "
#~ "complex number @inumber. The branch cuts are on the real axis, less than "
#~ "-1 and greater than 1.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCTANH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCTANH(\"1+j\") equals 0.4023595+1.0172220j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSINH,IMARCCOSH"

#~ msgid ""
#~ "@FUNCTION=IMARCSECH\n"
#~ "@SYNTAX=IMARCSECH(inumber)\n"
#~ "@DESCRIPTION=IMARCSECH returns the complex hyperbolic arcsecant of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tarcsech(z) = arccosh(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSECH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSECH(\"1+j\") equals 0.5306375-1.118518j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCSCH,IMARCCOTH"
#~ msgstr ""
#~ "@FUNCTION=IMARCSECH\n"
#~ "@SYNTAX=IMARCSECH(inumber)\n"
#~ "@DESCRIPTION=IMARCSECH returns the complex hyperbolic arcsecant of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tarcsech(z) = arccosh(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCSECH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCSECH(\"1+j\") equals 0.5306375-1.118518j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCCSCH,IMARCCOTH"

#~ msgid ""
#~ "@FUNCTION=IMARCCSCH\n"
#~ "@SYNTAX=IMARCCSCH(inumber)\n"
#~ "@DESCRIPTION=IMARCCSCH returns the complex hyperbolic arccosecant of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tarccsch(z) = arcsinh(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCSCH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCSCH(\"1+j\") equals 0.5306375-0.452278j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSECH,IMARCCOTH"
#~ msgstr ""
#~ "@FUNCTION=IMARCCSCH\n"
#~ "@SYNTAX=IMARCCSCH(inumber)\n"
#~ "@DESCRIPTION=IMARCCSCH returns the complex hyperbolic arccosecant of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tarccsch(z) = arcsinh(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCSCH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCSCH(\"1+j\") equals 0.5306375-0.452278j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSECH,IMARCCOTH"

#~ msgid ""
#~ "@FUNCTION=IMARCCOTH\n"
#~ "@SYNTAX=IMARCCOTH(inumber)\n"
#~ "@DESCRIPTION=IMARCCOTH returns the complex hyperbolic arccotangent of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tarccoth(z) = arctanh(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOTH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOTH(\"1+j\") equals 0.40235948-0.5535744j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSECH,IMARCCSCH"
#~ msgstr ""
#~ "@FUNCTION=IMARCCOTH\n"
#~ "@SYNTAX=IMARCCOTH(inumber)\n"
#~ "@DESCRIPTION=IMARCCOTH returns the complex hyperbolic arccotangent of the "
#~ "complex number z (@inumber), where\n"
#~ "\n"
#~ "\tarccoth(z) = arctanh(1/z).\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMARCCOTH returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMARCCOTH(\"1+j\") equals 0.40235948-0.5535744j.\n"
#~ "\n"
#~ "@SEEALSO=IMARCSECH,IMARCCSCH"

#~ msgid ""
#~ "@FUNCTION=IMSQRT\n"
#~ "@SYNTAX=IMSQRT(inumber)\n"
#~ "@DESCRIPTION=IMSQRT returns the square root of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSQRT returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSQRT(\"1+j\") equals 1.09868+0.4550899j.\n"
#~ "\n"
#~ "@SEEALSO=IMPOWER"
#~ msgstr ""
#~ "@FUNCTION=IMSQRT\n"
#~ "@SYNTAX=IMSQRT(inumber)\n"
#~ "@DESCRIPTION=IMSQRT returns the square root of a complex number.\n"
#~ "\n"
#~ "* If @inumber is not a valid complex number, IMSQRT returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSQRT(\"1+j\") equals 1.09868+0.4550899j.\n"
#~ "\n"
#~ "@SEEALSO=IMPOWER"

#~ msgid ""
#~ "@FUNCTION=IMSUB\n"
#~ "@SYNTAX=IMSUB(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMSUB returns the difference of two complex numbers.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMSUB returns "
#~ "#VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSUB(\"3-j\",\"2+j\") equals 1-2j.\n"
#~ "\n"
#~ "@SEEALSO=IMSUM"
#~ msgstr ""
#~ "@FUNCTION=IMSUB\n"
#~ "@SYNTAX=IMSUB(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMSUB returns the difference of two complex numbers.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMSUB returns "
#~ "#VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSUB(\"3-j\",\"2+j\") equals 1-2j.\n"
#~ "\n"
#~ "@SEEALSO=IMSUM"

#~ msgid ""
#~ "@FUNCTION=IMPRODUCT\n"
#~ "@SYNTAX=IMPRODUCT(inumber1[,inumber2,...])\n"
#~ "@DESCRIPTION=IMPRODUCT returns the product of given complex numbers.\n"
#~ "\n"
#~ "* If any of the @inumbers are not valid complex numbers, IMPRODUCT "
#~ "returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMPRODUCT(\"2-j\",\"4-2j\") equals 6-8j.\n"
#~ "\n"
#~ "@SEEALSO=IMDIV"
#~ msgstr ""
#~ "@FUNCTION=IMPRODUCT\n"
#~ "@SYNTAX=IMPRODUCT(inumber1[,inumber2,...])\n"
#~ "@DESCRIPTION=IMPRODUCT returns the product of given complex numbers.\n"
#~ "\n"
#~ "* If any of the @inumbers are not valid complex numbers, IMPRODUCT "
#~ "returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMPRODUCT(\"2-j\",\"4-2j\") equals 6-8j.\n"
#~ "\n"
#~ "@SEEALSO=IMDIV"

#~ msgid ""
#~ "@FUNCTION=IMSUM\n"
#~ "@SYNTAX=IMSUM(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMSUM returns the sum of two complex numbers.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMSUM returns "
#~ "#VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSUM(\"2-4j\",\"9-j\") equals 11-5j.\n"
#~ "\n"
#~ "@SEEALSO=IMSUB"
#~ msgstr ""
#~ "@FUNCTION=IMSUM\n"
#~ "@SYNTAX=IMSUM(inumber1,inumber2)\n"
#~ "@DESCRIPTION=IMSUM returns the sum of two complex numbers.\n"
#~ "\n"
#~ "* If @inumber1 or @inumber2 are not valid complex numbers, IMSUM returns "
#~ "#VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IMSUM(\"2-4j\",\"9-j\") equals 11-5j.\n"
#~ "\n"
#~ "@SEEALSO=IMSUB"

#~ msgid ""
#~ "@FUNCTION=DAVERAGE\n"
#~ "@SYNTAX=DAVERAGE(database,field,criteria)\n"
#~ "@DESCRIPTION=DAVERAGE function returns the average of the values in a "
#~ "list or database that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DAVERAGE(A1:C7, \"Salary\", A9:A11) equals 42296.3333.\n"
#~ "DAVERAGE(A1:C7, \"Age\", A9:A11) equals 39.\n"
#~ "DAVERAGE(A1:C7, \"Salary\", A9:B11) equals 40782.5.\n"
#~ "DAVERAGE(A1:C7, \"Age\", A9:B11) equals 36.\n"
#~ "\n"
#~ "@SEEALSO=DCOUNT"
#~ msgstr ""
#~ "@FUNCTION=DAVERAGE\n"
#~ "@SYNTAX=DAVERAGE(database,field,criteria)\n"
#~ "@DESCRIPTION=DAVERAGE function returns the average of the values in a "
#~ "list or database that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DAVERAGE(A1:C7, \"Salary\", A9:A11) equals 42296.3333.\n"
#~ "DAVERAGE(A1:C7, \"Age\", A9:A11) equals 39.\n"
#~ "DAVERAGE(A1:C7, \"Salary\", A9:B11) equals 40782.5.\n"
#~ "DAVERAGE(A1:C7, \"Age\", A9:B11) equals 36.\n"
#~ "\n"
#~ "@SEEALSO=DCOUNT"

#~ msgid ""
#~ "@FUNCTION=DCOUNT\n"
#~ "@SYNTAX=DCOUNT(database,field,criteria)\n"
#~ "@DESCRIPTION=DCOUNT function counts the cells that contain numbers in a "
#~ "database that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DCOUNT(A1:C7, \"Salary\", A9:A11) equals 3.\n"
#~ "DCOUNT(A1:C7, \"Salary\", A9:B11) equals 2.\n"
#~ "DCOUNT(A1:C7, \"Name\", A9:B11) equals 0.\n"
#~ "\n"
#~ "@SEEALSO=DAVERAGE"
#~ msgstr ""
#~ "@FUNCTION=DCOUNT\n"
#~ "@SYNTAX=DCOUNT(database,field,criteria)\n"
#~ "@DESCRIPTION=DCOUNT function counts the cells that contain numbers in a "
#~ "database that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DCOUNT(A1:C7, \"Salary\", A9:A11) equals 3.\n"
#~ "DCOUNT(A1:C7, \"Salary\", A9:B11) equals 2.\n"
#~ "DCOUNT(A1:C7, \"Name\", A9:B11) equals 0.\n"
#~ "\n"
#~ "@SEEALSO=DAVERAGE"

#~ msgid ""
#~ "@FUNCTION=DCOUNTA\n"
#~ "@SYNTAX=DCOUNTA(database,field,criteria)\n"
#~ "@DESCRIPTION=DCOUNTA function counts the cells that contain data in a "
#~ "database that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DCOUNTA(A1:C7, \"Salary\", A9:A11) equals 3.\n"
#~ "DCOUNTA(A1:C7, \"Salary\", A9:B11) equals 2.\n"
#~ "DCOUNTA(A1:C7, \"Name\", A9:B11) equals 2.\n"
#~ "\n"
#~ "@SEEALSO=DCOUNT"
#~ msgstr ""
#~ "@FUNCTION=DCOUNTA\n"
#~ "@SYNTAX=DCOUNTA(database,field,criteria)\n"
#~ "@DESCRIPTION=DCOUNTA function counts the cells that contain data in a "
#~ "database that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DCOUNTA(A1:C7, \"Salary\", A9:A11) equals 3.\n"
#~ "DCOUNTA(A1:C7, \"Salary\", A9:B11) equals 2.\n"
#~ "DCOUNTA(A1:C7, \"Name\", A9:B11) equals 2.\n"
#~ "\n"
#~ "@SEEALSO=DCOUNT"

#~ msgid ""
#~ "@FUNCTION=DGET\n"
#~ "@SYNTAX=DGET(database,field,criteria)\n"
#~ "@DESCRIPTION=DGET function returns a single value from a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "* If none of the items match the conditions, DGET returns #VALUE! error.\n"
#~ "* If more than one items match the conditions, DGET returns #NUM! error.\n"
#~ "\n"
#~ "DGET(A1:C7, \"Salary\", A9:A10) equals 34323.\n"
#~ "DGET(A1:C7, \"Name\", A9:A10) equals \"Clark\".\n"
#~ "\n"
#~ "@SEEALSO=DCOUNT"
#~ msgstr ""
#~ "@FUNCTION=DGET\n"
#~ "@SYNTAX=DGET(database,field,criteria)\n"
#~ "@DESCRIPTION=DGET function returns a single value from a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "* If none of the items match the conditions, DGET returns #VALUE! error.\n"
#~ "* If more than one items match the conditions, DGET returns #NUM! error.\n"
#~ "\n"
#~ "DGET(A1:C7, \"Salary\", A9:A10) equals 34323.\n"
#~ "DGET(A1:C7, \"Name\", A9:A10) equals \"Clark\".\n"
#~ "\n"
#~ "@SEEALSO=DCOUNT"

#~ msgid ""
#~ "@FUNCTION=DMAX\n"
#~ "@SYNTAX=DMAX(database,field,criteria)\n"
#~ "@DESCRIPTION=DMAX function returns the largest number in a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DMAX(A1:C7, \"Salary\", A9:A11) equals 47242.\n"
#~ "DMAX(A1:C7, \"Age\", A9:A11) equals 45.\n"
#~ "DMAX(A1:C7, \"Age\", A9:B11) equals 43.\n"
#~ "\n"
#~ "@SEEALSO=DMIN"
#~ msgstr ""
#~ "@FUNCTION=DMAX\n"
#~ "@SYNTAX=DMAX(database,field,criteria)\n"
#~ "@DESCRIPTION=DMAX function returns the largest number in a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DMAX(A1:C7, \"Salary\", A9:A11) equals 47242.\n"
#~ "DMAX(A1:C7, \"Age\", A9:A11) equals 45.\n"
#~ "DMAX(A1:C7, \"Age\", A9:B11) equals 43.\n"
#~ "\n"
#~ "@SEEALSO=DMIN"

#~ msgid ""
#~ "@FUNCTION=DMIN\n"
#~ "@SYNTAX=DMIN(database,field,criteria)\n"
#~ "@DESCRIPTION=DMIN function returns the smallest number in a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DMIN(A1:C7, \"Salary\", A9:B11) equals 34323.\n"
#~ "DMIN(A1:C7, \"Age\", A9:B11) equals 29.\n"
#~ "\n"
#~ "@SEEALSO=DMAX"
#~ msgstr ""
#~ "@FUNCTION=DMIN\n"
#~ "@SYNTAX=DMIN(database,field,criteria)\n"
#~ "@DESCRIPTION=DMIN function returns the smallest number in a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DMIN(A1:C7, \"Salary\", A9:B11) equals 34323.\n"
#~ "DMIN(A1:C7, \"Age\", A9:B11) equals 29.\n"
#~ "\n"
#~ "@SEEALSO=DMAX"

#~ msgid ""
#~ "@FUNCTION=DPRODUCT\n"
#~ "@SYNTAX=DPRODUCT(database,field,criteria)\n"
#~ "@DESCRIPTION=DPRODUCT function returns the product of numbers in a column "
#~ "that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DPRODUCT(A1:C7, \"Age\", A9:B11) equals 1247.\n"
#~ "\n"
#~ "@SEEALSO=DSUM"
#~ msgstr ""
#~ "@FUNCTION=DPRODUCT\n"
#~ "@SYNTAX=DPRODUCT(database,field,criteria)\n"
#~ "@DESCRIPTION=DPRODUCT function returns the product of numbers in a column "
#~ "that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DPRODUCT(A1:C7, \"Age\", A9:B11) equals 1247.\n"
#~ "\n"
#~ "@SEEALSO=DSUM"

#~ msgid ""
#~ "@FUNCTION=DSTDEV\n"
#~ "@SYNTAX=DSTDEV(database,field,criteria)\n"
#~ "@DESCRIPTION=DSTDEV function returns the estimate of the standard "
#~ "deviation of a population based on a sample. The population consists of "
#~ "numbers that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DSTDEV(A1:C7, \"Age\", A9:B11) equals 9.89949.\n"
#~ "DSTDEV(A1:C7, \"Salary\", A9:B11) equals 9135.112506.\n"
#~ "\n"
#~ "@SEEALSO=DSTDEVP"
#~ msgstr ""
#~ "@FUNCTION=DSTDEV\n"
#~ "@SYNTAX=DSTDEV(database,field,criteria)\n"
#~ "@DESCRIPTION=DSTDEV function returns the estimate of the standard "
#~ "deviation of a population based on a sample. The population consists of "
#~ "numbers that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DSTDEV(A1:C7, \"Age\", A9:B11) equals 9.89949.\n"
#~ "DSTDEV(A1:C7, \"Salary\", A9:B11) equals 9135.112506.\n"
#~ "\n"
#~ "@SEEALSO=DSTDEVP"

#~ msgid ""
#~ "@FUNCTION=DSTDEVP\n"
#~ "@SYNTAX=DSTDEVP(database,field,criteria)\n"
#~ "@DESCRIPTION=DSTDEVP function returns the standard deviation of a "
#~ "population based on the entire population. The population consists of "
#~ "numbers that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DSTDEVP(A1:C7, \"Age\", A9:B11) equals 7.\n"
#~ "DSTDEVP(A1:C7, \"Salary\", A9:B11) equals 6459.5.\n"
#~ "\n"
#~ "@SEEALSO=DSTDEV"
#~ msgstr ""
#~ "@FUNCTION=DSTDEVP\n"
#~ "@SYNTAX=DSTDEVP(database,field,criteria)\n"
#~ "@DESCRIPTION=DSTDEVP function returns the standard deviation of a "
#~ "population based on the entire population. The population consists of "
#~ "numbers that match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DSTDEVP(A1:C7, \"Age\", A9:B11) equals 7.\n"
#~ "DSTDEVP(A1:C7, \"Salary\", A9:B11) equals 6459.5.\n"
#~ "\n"
#~ "@SEEALSO=DSTDEV"

#~ msgid ""
#~ "@FUNCTION=DSUM\n"
#~ "@SYNTAX=DSUM(database,field,criteria)\n"
#~ "@DESCRIPTION=DSUM function returns the sum of numbers in a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DSUM(A1:C7, \"Age\", A9:B11) equals 72.\n"
#~ "DSUM(A1:C7, \"Salary\", A9:B11) equals 81565.\n"
#~ "\n"
#~ "@SEEALSO=DPRODUCT"
#~ msgstr ""
#~ "@FUNCTION=DSUM\n"
#~ "@SYNTAX=DSUM(database,field,criteria)\n"
#~ "@DESCRIPTION=DSUM function returns the sum of numbers in a column that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DSUM(A1:C7, \"Age\", A9:B11) equals 72.\n"
#~ "DSUM(A1:C7, \"Salary\", A9:B11) equals 81565.\n"
#~ "\n"
#~ "@SEEALSO=DPRODUCT"

#~ msgid ""
#~ "@FUNCTION=DVAR\n"
#~ "@SYNTAX=DVAR(database,field,criteria)\n"
#~ "@DESCRIPTION=DVAR function returns the estimate of variance of a "
#~ "population based on a sample. The population consists of numbers that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DVAR(A1:C7, \"Age\", A9:B11) equals 98.\n"
#~ "DVAR(A1:C7, \"Salary\", A9:B11) equals 83450280.5.\n"
#~ "\n"
#~ "@SEEALSO=DVARP"
#~ msgstr ""
#~ "@FUNCTION=DVAR\n"
#~ "@SYNTAX=DVAR(database,field,criteria)\n"
#~ "@DESCRIPTION=DVAR function returns the estimate of variance of a "
#~ "population based on a sample. The population consists of numbers that "
#~ "match conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DVAR(A1:C7, \"Age\", A9:B11) equals 98.\n"
#~ "DVAR(A1:C7, \"Salary\", A9:B11) equals 83450280.5.\n"
#~ "\n"
#~ "@SEEALSO=DVARP"

#~ msgid ""
#~ "@FUNCTION=DVARP\n"
#~ "@SYNTAX=DVARP(database,field,criteria)\n"
#~ "@DESCRIPTION=DVARP function returns the variance of a population based on "
#~ "the entire population. The population consists of numbers that match "
#~ "conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DVARP(A1:C7, \"Age\", A9:B11) equals 49.\n"
#~ "DVARP(A1:C7, \"Salary\", A9:B11) equals 41725140.25.\n"
#~ "\n"
#~ "@SEEALSO=DVAR"
#~ msgstr ""
#~ "@FUNCTION=DVARP\n"
#~ "@SYNTAX=DVARP(database,field,criteria)\n"
#~ "@DESCRIPTION=DVARP function returns the variance of a population based on "
#~ "the entire population. The population consists of numbers that match "
#~ "conditions specified.\n"
#~ "\n"
#~ "@database is a range of cells in which rows of related information are "
#~ "records and columns of data are fields. The first row of a database "
#~ "contains labels for each column. \n"
#~ "\n"
#~ "@field specifies which column is used in the function.  If @field is an "
#~ "integer, for example 2, the second column is used. Field can also be the "
#~ "label of a column.  For example, ``Age'' refers to the column with the "
#~ "label ``Age'' in @database range. \n"
#~ "\n"
#~ "@criteria is the range of cells which contains the specified conditions.  "
#~ "The first row of a @criteria should contain the labels of the fields for "
#~ "which the criteria are for.  Cells below the labels specify conditions, "
#~ "for example, ``>3'' or ``<9''.  Equality condition can be given simply by "
#~ "specifying a value, e.g. ``3'' or ``John''. \n"
#~ "Each row in @criteria specifies a separate condition. If a row in "
#~ "@database matches a row in @criteria, then that row is counted. "
#~ "Technically speaking, this a boolean OR operation between the rows in "
#~ "@criteria.\n"
#~ "If @criteria specifies more than one column, then each of the conditions "
#~ "in the specified columns must be true for the row in @database to match. "
#~ "Technically speaking, this is a boolean AND operation between the columns "
#~ "in @criteria.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the range A1:C7 contain the following values:\n"
#~ "Name    Age     Salary\n"
#~ "John    34      54342\n"
#~ "Bill    35      22343\n"
#~ "Clark   29      34323\n"
#~ "Bob     43      47242\n"
#~ "Susan   37      42932\n"
#~ "Jill    45      45324\n"
#~ "\n"
#~ "In addition, the cells A9:B11 contain the following values:\n"
#~ "Age     Salary\n"
#~ "<30\n"
#~ ">40     >46000\n"
#~ "\n"
#~ "DVARP(A1:C7, \"Age\", A9:B11) equals 49.\n"
#~ "DVARP(A1:C7, \"Salary\", A9:B11) equals 41725140.25.\n"
#~ "\n"
#~ "@SEEALSO=DVAR"

#~ msgid ""
#~ "@FUNCTION=GETPIVOTDATA\n"
#~ "@SYNTAX=GETPIVOTDATA(pivot_table,field_name)\n"
#~ "@DESCRIPTION=GETPIVOTDATA function fetches summary data from a pivot "
#~ "table. @pivot_table is a cell range containing the pivot table. "
#~ "@field_name is the name of the field of which you want the summary data.\n"
#~ "\n"
#~ "* If the summary data is unavailable, GETPIVOTDATA returns #REF! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=GETPIVOTDATA\n"
#~ "@SYNTAX=GETPIVOTDATA(pivot_table,field_name)\n"
#~ "@DESCRIPTION=GETPIVOTDATA function fetches summary data from a pivot "
#~ "table. @pivot_table is a cell range containing the pivot table. "
#~ "@field_name is the name of the field of which you want the summary data.\n"
#~ "\n"
#~ "* If the summary data is unavailable, GETPIVOTDATA returns #REF! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=DATE\n"
#~ "@SYNTAX=DATE (year,month,day)\n"
#~ "@DESCRIPTION=DATE returns the number of days since the 1st of January of "
#~ "1900(the date serial number) for the given year, month and day.\n"
#~ "\n"
#~ "* If @month < 1 or @month > 12, the year will be corrected.  A similar "
#~ "correction takes place for days.\n"
#~ "* The @years should be at least 1900.  If @years < 1900, it is assumed to "
#~ "be 1900 + @years.\n"
#~ "* If the given date is not valid, DATE returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATE(2001, 3, 30) returns 'Mar 30, 2001'.\n"
#~ " \n"
#~ "@SEEALSO=TODAY, NOW"
#~ msgstr ""
#~ "@FUNCTION=DATE\n"
#~ "@SYNTAX=DATE (year,month,day)\n"
#~ "@DESCRIPTION=DATE returns the number of days since the 1st of January of "
#~ "1900(the date serial number) for the given year, month and day.\n"
#~ "\n"
#~ "* If @month < 1 or @month > 12, the year will be corrected.  A similar "
#~ "correction takes place for days.\n"
#~ "* The @years should be at least 1900.  If @years < 1900, it is assumed to "
#~ "be 1900 + @years.\n"
#~ "* If the given date is not valid, DATE returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATE(2001, 3, 30) returns 'Mar 30, 2001'.\n"
#~ " \n"
#~ "@SEEALSO=TODAY, NOW"

#~ msgid ""
#~ "@FUNCTION=UNIX2DATE\n"
#~ "@SYNTAX=UNIX2DATE(unixtime)\n"
#~ "@DESCRIPTION=UNIX2DATE converts a unix time into a spreadsheet date and "
#~ "time.\n"
#~ "\n"
#~ "A unix time is the number of seconds since midnight January 1, 1970.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NOW, DATE, DATE2UNIX"
#~ msgstr ""
#~ "@FUNCTION=UNIX2DATE\n"
#~ "@SYNTAX=UNIX2DATE(unixtime)\n"
#~ "@DESCRIPTION=UNIX2DATE converts a unix time into a spreadsheet date and "
#~ "time.\n"
#~ "\n"
#~ "A unix time is the number of seconds since midnight January 1, 1970.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NOW, DATE, DATE2UNIX"

#~ msgid ""
#~ "@FUNCTION=DATE2UNIX\n"
#~ "@SYNTAX=DATE2UNIX(serial)\n"
#~ "@DESCRIPTION=DATE2UNIX converts a spreadsheet date and time serial number "
#~ "into a unix time.\n"
#~ "\n"
#~ "A unix time is the number of seconds since midnight January 1, 1970.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATE2UNIX(\"01/01/2000\") equals 946656000.\n"
#~ "\n"
#~ "@SEEALSO=NOW, DATE, UNIX2DATE"
#~ msgstr ""
#~ "@FUNCTION=DATE2UNIX\n"
#~ "@SYNTAX=DATE2UNIX(serial)\n"
#~ "@DESCRIPTION=DATE2UNIX converts a spreadsheet date and time serial number "
#~ "into a unix time.\n"
#~ "\n"
#~ "A unix time is the number of seconds since midnight January 1, 1970.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATE2UNIX(\"01/01/2000\") equals 946656000.\n"
#~ "\n"
#~ "@SEEALSO=NOW, DATE, UNIX2DATE"

#~ msgid ""
#~ "@FUNCTION=DATEVALUE\n"
#~ "@SYNTAX=DATEVALUE(date_str)\n"
#~ "@DESCRIPTION=DATEVALUE returns the serial number of the date.  @date_str "
#~ "is the string that contains the date. The value depends on the date "
#~ "convention.  The MS Excel 1900 convention dates things from Jan 1 1900 "
#~ "while the 1904 convention uses Jan 1 1904.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATEVALUE(\"1/1/1999\") equals 36161 (in the 1900 convention).\n"
#~ "@SEEALSO=DATE"
#~ msgstr ""
#~ "@FUNCTION=DATEVALUE\n"
#~ "@SYNTAX=DATEVALUE(date_str)\n"
#~ "@DESCRIPTION=DATEVALUE returns the serial number of the date.  @date_str "
#~ "is the string that contains the date. The value depends on the date "
#~ "convention.  The MS Excel 1900 convention dates things from Jan 1 1900 "
#~ "while the 1904 convention uses Jan 1 1904.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATEVALUE(\"1/1/1999\") equals 36161 (in the 1900 convention).\n"
#~ "@SEEALSO=DATE"

#~ msgid ""
#~ "@FUNCTION=DATEDIF\n"
#~ "@SYNTAX=DATEDIF(date1,date2,interval)\n"
#~ "@DESCRIPTION=DATEDIF returns the difference between two dates.  @interval "
#~ "is one of six possible values:  \"y\", \"m\", \"d\", \"ym\", \"md\", and "
#~ "\"yd\".\n"
#~ "\n"
#~ "The first three options will return the number of complete years, months, "
#~ "or days, respectively, between the two dates specified.\n"
#~ "\n"
#~ "  \"ym\" will return the number of full months between the two dates, not "
#~ "including the difference in years.\n"
#~ "  \"md\" will return the number of full days between the two dates, not "
#~ "including the difference in months.\n"
#~ "  \"yd\" will return the number of full days between the two dates, not "
#~ "including the difference in years.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"d\") equals 1191.\n"
#~ "DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"y\") equals 3.\n"
#~ "\n"
#~ "@SEEALSO=DATE"
#~ msgstr ""
#~ "@FUNCTION=DATEDIF\n"
#~ "@SYNTAX=DATEDIF(date1,date2,interval)\n"
#~ "@DESCRIPTION=DATEDIF returns the difference between two dates.  @interval "
#~ "is one of six possible values:  \"y\", \"m\", \"d\", \"ym\", \"md\", and "
#~ "\"yd\".\n"
#~ "\n"
#~ "The first three options will return the number of complete years, months, "
#~ "or days, respectively, between the two dates specified.\n"
#~ "\n"
#~ "  \"ym\" will return the number of full months between the two dates, not "
#~ "including the difference in years.\n"
#~ "  \"md\" will return the number of full days between the two dates, not "
#~ "including the difference in months.\n"
#~ "  \"yd\" will return the number of full days between the two dates, not "
#~ "including the difference in years.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"d\") equals 1191.\n"
#~ "DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"y\") equals 3.\n"
#~ "\n"
#~ "@SEEALSO=DATE"

#~ msgid ""
#~ "@FUNCTION=EDATE\n"
#~ "@SYNTAX=EDATE(date,months)\n"
#~ "@DESCRIPTION=EDATE returns the serial number of the date that is the "
#~ "specified number of months before or after a given date.  @date is the "
#~ "serial number of the initial date and @months is the number of months "
#~ "before (negative number) or after (positive number) the initial date.\n"
#~ "\n"
#~ "* If @months is not an integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EDATE(DATE(2001,12,30),2) returns 'Feb 28, 2002'.\n"
#~ "\n"
#~ "@SEEALSO=DATE"
#~ msgstr ""
#~ "@FUNCTION=EDATE\n"
#~ "@SYNTAX=EDATE(date,months)\n"
#~ "@DESCRIPTION=EDATE returns the serial number of the date that is the "
#~ "specified number of months before or after a given date.  @date is the "
#~ "serial number of the initial date and @months is the number of months "
#~ "before (negative number) or after (positive number) the initial date.\n"
#~ "\n"
#~ "* If @months is not an integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EDATE(DATE(2001,12,30),2) returns 'Feb 28, 2002'.\n"
#~ "\n"
#~ "@SEEALSO=DATE"

#~ msgid ""
#~ "@FUNCTION=TODAY\n"
#~ "@SYNTAX=TODAY()\n"
#~ "@DESCRIPTION=TODAY returns the serial number for today (the number of "
#~ "days elapsed since the 1st of January of 1900).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TODAY() returns 'Nov 6, 2001' on that particular day.\n"
#~ " \n"
#~ "@SEEALSO=NOW"
#~ msgstr ""
#~ "@FUNCTION=TODAY\n"
#~ "@SYNTAX=TODAY()\n"
#~ "@DESCRIPTION=TODAY returns the serial number for today (the number of "
#~ "days elapsed since the 1st of January of 1900).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TODAY() returns 'Nov 6, 2001' on that particular day.\n"
#~ " \n"
#~ "@SEEALSO=NOW"

#~ msgid ""
#~ "@FUNCTION=NOW\n"
#~ "@SYNTAX=NOW ()\n"
#~ "@DESCRIPTION=NOW returns the serial number for the date and time at the "
#~ "time it is evaluated.\n"
#~ "\n"
#~ "Serial Numbers in Gnumeric are represented as follows: The integral part "
#~ "is the number of days since the 1st of January of 1900.  The decimal part "
#~ "represent the fraction of the day and is mapped into hour, minutes and "
#~ "seconds.\n"
#~ "\n"
#~ "For example: .0 represents the beginning of the day, and 0.5 represents "
#~ "noon.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NOW().\n"
#~ "\n"
#~ "@SEEALSO=TODAY"
#~ msgstr ""
#~ "@FUNCTION=NOW\n"
#~ "@SYNTAX=NOW ()\n"
#~ "@DESCRIPTION=NOW returns the serial number for the date and time at the "
#~ "time it is evaluated.\n"
#~ "\n"
#~ "Serial Numbers in Gnumeric are represented as follows: The integral part "
#~ "is the number of days since the 1st of January of 1900.  The decimal part "
#~ "represent the fraction of the day and is mapped into hour, minutes and "
#~ "seconds.\n"
#~ "\n"
#~ "For example: .0 represents the beginning of the day, and 0.5 represents "
#~ "noon.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NOW().\n"
#~ "\n"
#~ "@SEEALSO=TODAY"

#~ msgid ""
#~ "@FUNCTION=TIME\n"
#~ "@SYNTAX=TIME (hours,minutes,seconds)\n"
#~ "@DESCRIPTION=TIME returns a fraction representing the time of day.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TIME(3, 5, 23) equals 3:05AM.\n"
#~ "\n"
#~ "@SEEALSO=HOUR"
#~ msgstr ""
#~ "@FUNCTION=TIME\n"
#~ "@SYNTAX=TIME (hours,minutes,seconds)\n"
#~ "@DESCRIPTION=TIME returns a fraction representing the time of day.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TIME(3, 5, 23) equals 3:05AM.\n"
#~ "\n"
#~ "@SEEALSO=HOUR"

#~ msgid ""
#~ "@FUNCTION=TIMEVALUE\n"
#~ "@SYNTAX=TIMEVALUE (timetext)\n"
#~ "@DESCRIPTION=TIMEVALUE returns a fraction representing the time of day, a "
#~ "number between 0 and 1.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TIMEVALUE(\"3:05\") equals 0.128472.\n"
#~ "TIMEVALUE(\"2:24:53 PM\") equals 0.600613.\n"
#~ "\n"
#~ "@SEEALSO=HOUR,MINUTE"
#~ msgstr ""
#~ "@FUNCTION=TIMEVALUE\n"
#~ "@SYNTAX=TIMEVALUE (timetext)\n"
#~ "@DESCRIPTION=TIMEVALUE returns a fraction representing the time of day, a "
#~ "number between 0 and 1.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TIMEVALUE(\"3:05\") equals 0.128472.\n"
#~ "TIMEVALUE(\"2:24:53 PM\") equals 0.600613.\n"
#~ "\n"
#~ "@SEEALSO=HOUR,MINUTE"

#~ msgid ""
#~ "@FUNCTION=HOUR\n"
#~ "@SYNTAX=HOUR (date)\n"
#~ "@DESCRIPTION=HOUR converts a serial number to an hour.  The hour is "
#~ "returned as an integer in the range 0 (12:00 A.M.) to 23 (11:00 P.M.).\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HOUR(0.128472) equals 3.\n"
#~ "\n"
#~ "@SEEALSO=MINUTE, NOW, TIME, SECOND"
#~ msgstr ""
#~ "@FUNCTION=HOUR\n"
#~ "@SYNTAX=HOUR (date)\n"
#~ "@DESCRIPTION=HOUR converts a serial number to an hour.  The hour is "
#~ "returned as an integer in the range 0 (12:00 A.M.) to 23 (11:00 P.M.).\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HOUR(0.128472) equals 3.\n"
#~ "\n"
#~ "@SEEALSO=MINUTE, NOW, TIME, SECOND"

#~ msgid ""
#~ "@FUNCTION=MINUTE\n"
#~ "@SYNTAX=MINUTE (date)\n"
#~ "@DESCRIPTION=MINUTE converts a serial number to a minute.  The minute is "
#~ "returned as an integer in the range 0 to 59.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MINUTE(0.128472) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=HOUR, NOW, TIME, SECOND"
#~ msgstr ""
#~ "@FUNCTION=MINUTE\n"
#~ "@SYNTAX=MINUTE (date)\n"
#~ "@DESCRIPTION=MINUTE converts a serial number to a minute.  The minute is "
#~ "returned as an integer in the range 0 to 59.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MINUTE(0.128472) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=HOUR, NOW, TIME, SECOND"

#~ msgid ""
#~ "@FUNCTION=SECOND\n"
#~ "@SYNTAX=SECOND (date)\n"
#~ "@DESCRIPTION=SECOND converts a serial number to a second.  The second is "
#~ "returned as an integer in the range 0 to 59.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SECOND(0.600613) equals 53.\n"
#~ "\n"
#~ "@SEEALSO=HOUR, MINUTE, NOW, TIME"
#~ msgstr ""
#~ "@FUNCTION=SECOND\n"
#~ "@SYNTAX=SECOND (date)\n"
#~ "@DESCRIPTION=SECOND converts a serial number to a second.  The second is "
#~ "returned as an integer in the range 0 to 59.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SECOND(0.600613) equals 53.\n"
#~ "\n"
#~ "@SEEALSO=HOUR, MINUTE, NOW, TIME"

#~ msgid ""
#~ "@FUNCTION=2010\n"
#~ "@SYNTAX=2010 (date)\n"
#~ "@DESCRIPTION=2010 converts a serial number to a year.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "2010(DATE(2003, 4, 30)) equals 2003.\n"
#~ "\n"
#~ "@SEEALSO=DAY, MONTH, TIME, NOW"
#~ msgstr ""
#~ "@FUNCTION=2010\n"
#~ "@SYNTAX=2010 (date)\n"
#~ "@DESCRIPTION=2010 converts a serial number to a year.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "2010(DATE(2003, 4, 30)) equals 2003.\n"
#~ "\n"
#~ "@SEEALSO=DAY, MONTH, TIME, NOW"

#~ msgid ""
#~ "@FUNCTION=MONTH\n"
#~ "@SYNTAX=MONTH (date)\n"
#~ "@DESCRIPTION=MONTH converts a serial number to a month.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MONTH(DATE(2003, 4, 30)) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=DAY, TIME, NOW, 2010"
#~ msgstr ""
#~ "@FUNCTION=MONTH\n"
#~ "@SYNTAX=MONTH (date)\n"
#~ "@DESCRIPTION=MONTH converts a serial number to a month.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MONTH(DATE(2003, 4, 30)) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=DAY, TIME, NOW, 2010"

#~ msgid ""
#~ "@FUNCTION=DAY\n"
#~ "@SYNTAX=DAY (date)\n"
#~ "@DESCRIPTION=DAY converts a serial number to a day of month.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DAY(\"10/24/1968\") equals 24.\n"
#~ "\n"
#~ "@SEEALSO=MONTH, TIME, NOW, 2010"
#~ msgstr ""
#~ "@FUNCTION=DAY\n"
#~ "@SYNTAX=DAY (date)\n"
#~ "@DESCRIPTION=DAY converts a serial number to a day of month.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DAY(\"10/24/1968\") equals 24.\n"
#~ "\n"
#~ "@SEEALSO=MONTH, TIME, NOW, 2010"

#~ msgid ""
#~ "@FUNCTION=WEEKDAY\n"
#~ "@SYNTAX=WEEKDAY (date[, method])\n"
#~ "@DESCRIPTION=WEEKDAY converts a serial number to a weekday.\n"
#~ "\n"
#~ "This function returns an integer indicating the day of week.\n"
#~ "@METHOD indicates the numbering system.  It defaults to 1.\n"
#~ "\n"
#~ "  For @METHOD=1: Sunday is 1, Monday is 2, etc.\n"
#~ "  For @METHOD=2: Monday is 1, Tuesday is 2, etc.\n"
#~ "  For @METHOD=3: Monday is 0, Tuesday is 1, etc.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "WEEKDAY(\"10/24/1968\") equals 5 (Thursday).\n"
#~ "\n"
#~ "@SEEALSO=DAY, MONTH, TIME, NOW, 2010"
#~ msgstr ""
#~ "@FUNCTION=WEEKDAY\n"
#~ "@SYNTAX=WEEKDAY (date[, method])\n"
#~ "@DESCRIPTION=WEEKDAY converts a serial number to a weekday.\n"
#~ "\n"
#~ "This function returns an integer indicating the day of week.\n"
#~ "@METHOD indicates the numbering system.  It defaults to 1.\n"
#~ "\n"
#~ "  For @METHOD=1: Sunday is 1, Monday is 2, etc.\n"
#~ "  For @METHOD=2: Monday is 1, Tuesday is 2, etc.\n"
#~ "  For @METHOD=3: Monday is 0, Tuesday is 1, etc.\n"
#~ "\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "WEEKDAY(\"10/24/1968\") equals 5 (Thursday).\n"
#~ "\n"
#~ "@SEEALSO=DAY, MONTH, TIME, NOW, 2010"

#~ msgid ""
#~ "@FUNCTION=DAYS360 \n"
#~ "@SYNTAX=DAYS360 (date1,date2,method)\n"
#~ "@DESCRIPTION=DAYS360 returns the number of days from @date1 to @date2 "
#~ "following a 360-day calendar in which all months are assumed to have 30 "
#~ "days.\n"
#~ "\n"
#~ "* If @method is 1, the European method will be used.  In this case, if "
#~ "the day of the month is 31 it will be considered as 30.\n"
#~ "* If @method is 0 or omitted, the MS Excel (tm) US method will be used.  "
#~ "This is a somewhat complicated industry standard method where the last "
#~ "day of February is considered to be the 30th day of the month, but only "
#~ "for the first date.\n"
#~ "* If @method is 2, a saner version of the US method is used in which both "
#~ "dates get the same February treatment.\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is mostly Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DAYS360(DATE(2003, 2, 3), DATE(2007, 4, 2)) equals 1499.\n"
#~ "\n"
#~ "@SEEALSO=MONTH, TIME, NOW, 2010"
#~ msgstr ""
#~ "@FUNCTION=DAYS360 \n"
#~ "@SYNTAX=DAYS360 (date1,date2,method)\n"
#~ "@DESCRIPTION=DAYS360 returns the number of days from @date1 to @date2 "
#~ "following a 360-day calendar in which all months are assumed to have 30 "
#~ "days.\n"
#~ "\n"
#~ "* If @method is 1, the European method will be used.  In this case, if "
#~ "the day of the month is 31 it will be considered as 30.\n"
#~ "* If @method is 0 or omitted, the MS Excel (tm) US method will be used.  "
#~ "This is a somewhat complicated industry standard method where the last "
#~ "day of February is considered to be the 30th day of the month, but only "
#~ "for the first date.\n"
#~ "* If @method is 2, a saner version of the US method is used in which both "
#~ "dates get the same February treatment.\n"
#~ "* Note that Gnumeric will perform regular string to serial number "
#~ "conversion for you, so you can enter a date as a string.\n"
#~ "* This function is mostly Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DAYS360(DATE(2003, 2, 3), DATE(2007, 4, 2)) equals 1499.\n"
#~ "\n"
#~ "@SEEALSO=MONTH, TIME, NOW, 2010"

#~ msgid ""
#~ "@FUNCTION=EOMONTH\n"
#~ "@SYNTAX=EOMONTH (start_date,months)\n"
#~ "@DESCRIPTION=EOMONTH returns the last day of the month which is @months "
#~ "from the @start_date.\n"
#~ "\n"
#~ "* EOMONTH returns #NUM! if @start_date or @months are invalid.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/21/00 then EOMONTH(A1,0)=12/31/00, EOMONTH(A1,5)"
#~ "=5/31/01, and EOMONTH(A1,2)=2/28/01\n"
#~ "\n"
#~ "@SEEALSO=MONTH"
#~ msgstr ""
#~ "@FUNCTION=EOMONTH\n"
#~ "@SYNTAX=EOMONTH (start_date,months)\n"
#~ "@DESCRIPTION=EOMONTH returns the last day of the month which is @months "
#~ "from the @start_date.\n"
#~ "\n"
#~ "* EOMONTH returns #NUM! if @start_date or @months are invalid.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/21/00 then EOMONTH(A1,0)=12/31/00, EOMONTH(A1,5)"
#~ "=5/31/01, and EOMONTH(A1,2)=2/28/01\n"
#~ "\n"
#~ "@SEEALSO=MONTH"

#~ msgid ""
#~ "@FUNCTION=WORKDAY\n"
#~ "@SYNTAX=WORKDAY (start_date,days[,holidays])\n"
#~ "@DESCRIPTION=WORKDAY returns the date which is @days working days from "
#~ "the @start_date.  Weekends and holidays optionally supplied in @holidays "
#~ "are respected.\n"
#~ "\n"
#~ "* WORKDAY returns #NUM! if @start_date or @days are invalid.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DAY(WORKDAY(DATE(2001,1,5),30)) equals 16 and\n"
#~ "MONTH(WORKDAY(DATE(2001,1,5),30)) equals 2.\n"
#~ "\n"
#~ "@SEEALSO=NETWORKDAYS"
#~ msgstr ""
#~ "@FUNCTION=WORKDAY\n"
#~ "@SYNTAX=WORKDAY (start_date,days[,holidays])\n"
#~ "@DESCRIPTION=WORKDAY returns the date which is @days working days from "
#~ "the @start_date.  Weekends and holidays optionally supplied in @holidays "
#~ "are respected.\n"
#~ "\n"
#~ "* WORKDAY returns #NUM! if @start_date or @days are invalid.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DAY(WORKDAY(DATE(2001,1,5),30)) equals 16 and\n"
#~ "MONTH(WORKDAY(DATE(2001,1,5),30)) equals 2.\n"
#~ "\n"
#~ "@SEEALSO=NETWORKDAYS"

#~ msgid ""
#~ "@FUNCTION=NETWORKDAYS\n"
#~ "@SYNTAX=NETWORKDAYS (start_date,end_date[,holidays])\n"
#~ "@DESCRIPTION=NETWORKDAYS returns the number of non-weekend non-holidays "
#~ "between @start_date and @end_date including these dates. Holidays are "
#~ "optionally supplied in @holidays.\n"
#~ "\n"
#~ "* NETWORKDAYS returns #NUM! if @start_date or @end_date are invalid.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NETWORKDAYS(DATE(2001,1,2),DATE(2001,2,15)) equals 33.\n"
#~ "\n"
#~ "@SEEALSO=WORKDAY"
#~ msgstr ""
#~ "@FUNCTION=NETWORKDAYS\n"
#~ "@SYNTAX=NETWORKDAYS (start_date,end_date[,holidays])\n"
#~ "@DESCRIPTION=NETWORKDAYS returns the number of non-weekend non-holidays "
#~ "between @start_date and @end_date including these dates. Holidays are "
#~ "optionally supplied in @holidays.\n"
#~ "\n"
#~ "* NETWORKDAYS returns #NUM! if @start_date or @end_date are invalid.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NETWORKDAYS(DATE(2001,1,2),DATE(2001,2,15)) equals 33.\n"
#~ "\n"
#~ "@SEEALSO=WORKDAY"

#~ msgid ""
#~ "@FUNCTION=ISOWEEKNUM\n"
#~ "@SYNTAX=ISOWEEKNUM (date)\n"
#~ "@DESCRIPTION=ISOWEEKNUM returns the ISO 8601 week number of @date.\n"
#~ "\n"
#~ "An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
#~ "including days from two different years is assigned to the year which "
#~ "includes the most days. This means that Dec 31 could be in week 1 of the "
#~ "following year, and Jan 1 could be in week 52 or 53 of the previous year. "
#~ "ISOWEEKNUM returns the week number.\n"
#~ "\n"
#~ "* ISOWEEKNUM returns #NUM! if date is invalid.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/21/00 then ISOWEEKNUM(A1)=51\n"
#~ "@SEEALSO=WEEKNUM, ISO2010"
#~ msgstr ""
#~ "@FUNCTION=ISOWEEKNUM\n"
#~ "@SYNTAX=ISOWEEKNUM (date)\n"
#~ "@DESCRIPTION=ISOWEEKNUM returns the ISO 8601 week number of @date.\n"
#~ "\n"
#~ "An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
#~ "including days from two different years is assigned to the year which "
#~ "includes the most days. This means that Dec 31 could be in week 1 of the "
#~ "following year, and Jan 1 could be in week 52 or 53 of the previous year. "
#~ "ISOWEEKNUM returns the week number.\n"
#~ "\n"
#~ "* ISOWEEKNUM returns #NUM! if date is invalid.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/21/00 then ISOWEEKNUM(A1)=51\n"
#~ "@SEEALSO=WEEKNUM, ISO2010"

#~ msgid ""
#~ "@FUNCTION=ISO2010\n"
#~ "@SYNTAX=ISO2010 (date)\n"
#~ "@DESCRIPTION=ISO2010 returns the year of the ISO 8601 week number of "
#~ "@date.\n"
#~ "\n"
#~ "An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
#~ "including days from two different years is assigned to the year which "
#~ "includes the most days. This means that Dec 31 could be in week 1 of the "
#~ "following year, and Jan 1 could be in week 52 or 53 of the previous year. "
#~ "ISO2010 returns the year the week is assigned to.\n"
#~ "\n"
#~ "* ISO2010 returns #NUM! if date is invalid.\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/31/2001 then ISO2010(A1)=2002\n"
#~ "@SEEALSO=ISOWEEKNUM"
#~ msgstr ""
#~ "@FUNCTION=ISO2010\n"
#~ "@SYNTAX=ISO2010 (date)\n"
#~ "@DESCRIPTION=ISO2010 returns the year of the ISO 8601 week number of "
#~ "@date.\n"
#~ "\n"
#~ "An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
#~ "including days from two different years is assigned to the year which "
#~ "includes the most days. This means that Dec 31 could be in week 1 of the "
#~ "following year, and Jan 1 could be in week 52 or 53 of the previous year. "
#~ "ISO2010 returns the year the week is assigned to.\n"
#~ "\n"
#~ "* ISO2010 returns #NUM! if date is invalid.\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/31/2001 then ISO2010(A1)=2002\n"
#~ "@SEEALSO=ISOWEEKNUM"

#~ msgid ""
#~ "@FUNCTION=WEEKNUM\n"
#~ "@SYNTAX=WEEKNUM (date[,method])\n"
#~ "@DESCRIPTION=WEEKNUM returns the week number of @date according to the "
#~ "given @method.\n"
#~ "\n"
#~ "@method defaults to 1.\n"
#~ "\n"
#~ "  For @method=1, week starts on Sunday, and days before first Sunday are "
#~ "in week 0.\n"
#~ "  For @method=2, week starts on Monday, and days before first Monday are "
#~ "in week 0.\n"
#~ "  For @method=150, the ISO 8601 week number is returned.\n"
#~ "\n"
#~ "* WEEKNUM returns #NUM! if @date or @method is invalid.\n"
#~ "* This function is Excel compatible, except that Excel does not support "
#~ "ISO 8601 week numbers.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/21/00 then WEEKNUM(A1,2)=51\n"
#~ "@SEEALSO=ISOWEEKNUM"
#~ msgstr ""
#~ "@FUNCTION=WEEKNUM\n"
#~ "@SYNTAX=WEEKNUM (date[,method])\n"
#~ "@DESCRIPTION=WEEKNUM returns the week number of @date according to the "
#~ "given @method.\n"
#~ "\n"
#~ "@method defaults to 1.\n"
#~ "\n"
#~ "  For @method=1, week starts on Sunday, and days before first Sunday are "
#~ "in week 0.\n"
#~ "  For @method=2, week starts on Monday, and days before first Monday are "
#~ "in week 0.\n"
#~ "  For @method=150, the ISO 8601 week number is returned.\n"
#~ "\n"
#~ "* WEEKNUM returns #NUM! if @date or @method is invalid.\n"
#~ "* This function is Excel compatible, except that Excel does not support "
#~ "ISO 8601 week numbers.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 12/21/00 then WEEKNUM(A1,2)=51\n"
#~ "@SEEALSO=ISOWEEKNUM"

#~ msgid ""
#~ "@FUNCTION=2010FRAC\n"
#~ "@SYNTAX=2010FRAC (start_date, end_date [,basis])\n"
#~ "@DESCRIPTION=2010FRAC returns the number of full days between @start_date "
#~ "and @end_date according to the @basis.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DATEDIF"
#~ msgstr ""
#~ "@FUNCTION=2010FRAC\n"
#~ "@SYNTAX=2010FRAC (start_date, end_date [,basis])\n"
#~ "@DESCRIPTION=2010FRAC returns the number of full days between @start_date "
#~ "and @end_date according to the @basis.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DATEDIF"

#~ msgid ""
#~ "@FUNCTION=BASE\n"
#~ "@SYNTAX=BASE(number,base[,length])\n"
#~ "@DESCRIPTION=BASE function converts a number to a string representing "
#~ "that number in base @base.\n"
#~ "\n"
#~ "* @base must be an integer between 2 and 36.\n"
#~ "* This function is OpenOffice.Org compatible.\n"
#~ "* Optional argument @length specifies the minimum result length.  "
#~ "Leading  zeroes will be added to reach this length.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BASE(255,16,4) equals \"00FF\".\n"
#~ "\n"
#~ "@SEEALSO=DECIMAL"
#~ msgstr ""
#~ "@FUNCTION=OCT2DEC\n"
#~ "@SYNTAX=OCT2DEC(x)\n"
#~ "@DESCRIPTION=OCT2DEC function converts an octal number in a string or "
#~ "number to its decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2DEC(\"124\") equals 84.\n"
#~ "\n"
#~ "@SEEALSO=DEC2OCT, OCT2BIN, OCT2HEX"

#~ msgid ""
#~ "@FUNCTION=BIN2DEC\n"
#~ "@SYNTAX=BIN2DEC(x)\n"
#~ "@DESCRIPTION=BIN2DEC function converts a binary number in string or "
#~ "number to its decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BIN2DEC(101) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=DEC2BIN, BIN2OCT, BIN2HEX"
#~ msgstr ""
#~ "@FUNCTION=BIN2DEC\n"
#~ "@SYNTAX=BIN2DEC(x)\n"
#~ "@DESCRIPTION=BIN2DEC function converts a binary number in string or "
#~ "number to its decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BIN2DEC(101) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=DEC2BIN, BIN2OCT, BIN2HEX"

#~ msgid ""
#~ "@FUNCTION=BIN2OCT\n"
#~ "@SYNTAX=BIN2OCT(number[,places])\n"
#~ "@DESCRIPTION=BIN2OCT function converts a binary number to an octal "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BIN2OCT(110111) equals 67.\n"
#~ "\n"
#~ "@SEEALSO=OCT2BIN, BIN2DEC, BIN2HEX"
#~ msgstr ""
#~ "@FUNCTION=BIN2OCT\n"
#~ "@SYNTAX=BIN2OCT(number[,places])\n"
#~ "@DESCRIPTION=BIN2OCT function converts a binary number to an octal "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BIN2OCT(110111) equals 67.\n"
#~ "\n"
#~ "@SEEALSO=OCT2BIN, BIN2DEC, BIN2HEX"

#~ msgid ""
#~ "@FUNCTION=BIN2HEX\n"
#~ "@SYNTAX=BIN2HEX(number[,places])\n"
#~ "@DESCRIPTION=BIN2HEX function converts a binary number to a hexadecimal "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BIN2HEX(100111) equals 27.\n"
#~ "\n"
#~ "@SEEALSO=HEX2BIN, BIN2OCT, BIN2DEC"
#~ msgstr ""
#~ "@FUNCTION=BIN2HEX\n"
#~ "@SYNTAX=BIN2HEX(number[,places])\n"
#~ "@DESCRIPTION=BIN2HEX function converts a binary number to a hexadecimal "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BIN2HEX(100111) equals 27.\n"
#~ "\n"
#~ "@SEEALSO=HEX2BIN, BIN2OCT, BIN2DEC"

#~ msgid ""
#~ "@FUNCTION=DEC2BIN\n"
#~ "@SYNTAX=DEC2BIN(number[,places])\n"
#~ "@DESCRIPTION=DEC2BIN function converts a decimal number to a binary "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEC2BIN(42) equals 101010.\n"
#~ "\n"
#~ "@SEEALSO=BIN2DEC, DEC2OCT, DEC2HEX"
#~ msgstr ""
#~ "@FUNCTION=DEC2BIN\n"
#~ "@SYNTAX=DEC2BIN(number[,places])\n"
#~ "@DESCRIPTION=DEC2BIN function converts a decimal number to a binary "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEC2BIN(42) equals 101010.\n"
#~ "\n"
#~ "@SEEALSO=BIN2DEC, DEC2OCT, DEC2HEX"

#~ msgid ""
#~ "@FUNCTION=DEC2OCT\n"
#~ "@SYNTAX=DEC2OCT(number[,places])\n"
#~ "@DESCRIPTION=DEC2OCT function converts a decimal number to an octal "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEC2OCT(42) equals 52.\n"
#~ "\n"
#~ "@SEEALSO=OCT2DEC, DEC2BIN, DEC2HEX"
#~ msgstr ""
#~ "@FUNCTION=DEC2OCT\n"
#~ "@SYNTAX=DEC2OCT(number[,places])\n"
#~ "@DESCRIPTION=DEC2OCT function converts a decimal number to an octal "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEC2OCT(42) equals 52.\n"
#~ "\n"
#~ "@SEEALSO=OCT2DEC, DEC2BIN, DEC2HEX"

#~ msgid ""
#~ "@FUNCTION=DEC2HEX\n"
#~ "@SYNTAX=DEC2HEX(number[,places])\n"
#~ "@DESCRIPTION=DEC2HEX function converts a decimal number to a hexadecimal "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEC2HEX(42) equals 2A.\n"
#~ "\n"
#~ "@SEEALSO=HEX2DEC, DEC2BIN, DEC2OCT"
#~ msgstr ""
#~ "@FUNCTION=DEC2HEX\n"
#~ "@SYNTAX=DEC2HEX(number[,places])\n"
#~ "@DESCRIPTION=DEC2HEX function converts a decimal number to a hexadecimal "
#~ "number. @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEC2HEX(42) equals 2A.\n"
#~ "\n"
#~ "@SEEALSO=HEX2DEC, DEC2BIN, DEC2OCT"

#~ msgid ""
#~ "@FUNCTION=DECIMAL\n"
#~ "@SYNTAX=DECIMAL(text,base)\n"
#~ "@DESCRIPTION=DECIMAL function converts a number in base @base to "
#~ "decimal.\n"
#~ "\n"
#~ "* @base must be an integer between 2 and 36.\n"
#~ "* This function is OpenOffice.Org compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DECIMAL(\"A1\",16) equals 161.\n"
#~ "\n"
#~ "@SEEALSO=BASE"
#~ msgstr ""
#~ "@FUNCTION=OCT2DEC\n"
#~ "@SYNTAX=OCT2DEC(x)\n"
#~ "@DESCRIPTION=OCT2DEC function converts an octal number in a string or "
#~ "number to its decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2DEC(\"124\") equals 84.\n"
#~ "\n"
#~ "@SEEALSO=DEC2OCT, OCT2BIN, OCT2HEX"

#~ msgid ""
#~ "@FUNCTION=OCT2DEC\n"
#~ "@SYNTAX=OCT2DEC(x)\n"
#~ "@DESCRIPTION=OCT2DEC function converts an octal number in a string or "
#~ "number to its decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2DEC(\"124\") equals 84.\n"
#~ "\n"
#~ "@SEEALSO=DEC2OCT, OCT2BIN, OCT2HEX"
#~ msgstr ""
#~ "@FUNCTION=OCT2DEC\n"
#~ "@SYNTAX=OCT2DEC(x)\n"
#~ "@DESCRIPTION=OCT2DEC function converts an octal number in a string or "
#~ "number to its decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2DEC(\"124\") equals 84.\n"
#~ "\n"
#~ "@SEEALSO=DEC2OCT, OCT2BIN, OCT2HEX"

#~ msgid ""
#~ "@FUNCTION=OCT2BIN\n"
#~ "@SYNTAX=OCT2BIN(number[,places])\n"
#~ "@DESCRIPTION=OCT2BIN function converts an octal number to a binary "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2BIN(\"213\") equals 10001011.\n"
#~ "\n"
#~ "@SEEALSO=BIN2OCT, OCT2DEC, OCT2HEX"
#~ msgstr ""
#~ "@FUNCTION=OCT2BIN\n"
#~ "@SYNTAX=OCT2BIN(number[,places])\n"
#~ "@DESCRIPTION=OCT2BIN function converts an octal number to a binary "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2BIN(\"213\") equals 10001011.\n"
#~ "\n"
#~ "@SEEALSO=BIN2OCT, OCT2DEC, OCT2HEX"

#~ msgid ""
#~ "@FUNCTION=OCT2HEX\n"
#~ "@SYNTAX=OCT2HEX(number[,places])\n"
#~ "@DESCRIPTION=OCT2HEX function converts an octal number to a hexadecimal "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2HEX(132) equals 5A.\n"
#~ "\n"
#~ "@SEEALSO=HEX2OCT, OCT2BIN, OCT2DEC"
#~ msgstr ""
#~ "@FUNCTION=OCT2HEX\n"
#~ "@SYNTAX=OCT2HEX(number[,places])\n"
#~ "@DESCRIPTION=OCT2HEX function converts an octal number to a hexadecimal "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OCT2HEX(132) equals 5A.\n"
#~ "\n"
#~ "@SEEALSO=HEX2OCT, OCT2BIN, OCT2DEC"

#~ msgid ""
#~ "@FUNCTION=HEX2BIN\n"
#~ "@SYNTAX=HEX2BIN(number[,places])\n"
#~ "@DESCRIPTION=HEX2BIN function converts a hexadecimal number to a binary "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HEX2BIN(\"2A\") equals 101010.\n"
#~ "\n"
#~ "@SEEALSO=BIN2HEX, HEX2OCT, HEX2DEC"
#~ msgstr ""
#~ "@FUNCTION=HEX2BIN\n"
#~ "@SYNTAX=HEX2BIN(number[,places])\n"
#~ "@DESCRIPTION=HEX2BIN function converts a hexadecimal number to a binary "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HEX2BIN(\"2A\") equals 101010.\n"
#~ "\n"
#~ "@SEEALSO=BIN2HEX, HEX2OCT, HEX2DEC"

#~ msgid ""
#~ "@FUNCTION=HEX2OCT\n"
#~ "@SYNTAX=HEX2OCT(number[,places])\n"
#~ "@DESCRIPTION=HEX2OCT function converts a hexadecimal number to an octal "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HEX2OCT(\"2A\") equals 52.\n"
#~ "\n"
#~ "@SEEALSO=OCT2HEX, HEX2BIN, HEX2DEC"
#~ msgstr ""
#~ "@FUNCTION=HEX2OCT\n"
#~ "@SYNTAX=HEX2OCT(number[,places])\n"
#~ "@DESCRIPTION=HEX2OCT function converts a hexadecimal number to an octal "
#~ "number.  @places is an optional field, specifying to zero pad to that "
#~ "number of spaces.\n"
#~ "\n"
#~ "* If @places is too small or negative #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HEX2OCT(\"2A\") equals 52.\n"
#~ "\n"
#~ "@SEEALSO=OCT2HEX, HEX2BIN, HEX2DEC"

#~ msgid ""
#~ "@FUNCTION=HEX2DEC\n"
#~ "@SYNTAX=HEX2DEC(x)\n"
#~ "@DESCRIPTION=HEX2DEC function converts a hexadecimal number to its "
#~ "decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HEX2DEC(\"2A\") equals 42.\n"
#~ "\n"
#~ "@SEEALSO=DEC2HEX, HEX2BIN, HEX2OCT"
#~ msgstr ""
#~ "@FUNCTION=HEX2DEC\n"
#~ "@SYNTAX=HEX2DEC(x)\n"
#~ "@DESCRIPTION=HEX2DEC function converts a hexadecimal number to its "
#~ "decimal equivalent.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HEX2DEC(\"2A\") equals 42.\n"
#~ "\n"
#~ "@SEEALSO=DEC2HEX, HEX2BIN, HEX2OCT"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=BESSELI\n"
#~ "@SYNTAX=BESSELI(x,y)\n"
#~ "@DESCRIPTION=BESSELI function returns the Neumann, Weber or Bessel "
#~ "function.\n"
#~ "\n"
#~ "@x is where the function is evaluated. @y is the order of the Bessel "
#~ "function.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function extends the Excel function of the same name to non-"
#~ "integer orders.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELI(0.7,3) equals 0.007367374.\n"
#~ "\n"
#~ "@SEEALSO=BESSELJ,BESSELK,BESSELY"
#~ msgstr ""
#~ "@FUNCTION=BESSELI\n"
#~ "@SYNTAX=BESSELI(x,y)\n"
#~ "@DESCRIPTION=BESSELI function returns the Neumann, Weber or Bessel "
#~ "function.\n"
#~ "\n"
#~ "@x is where the function is evaluated. @y is the order of the Bessel "
#~ "function, if non-integer it is truncated.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELI(0.7,3) equals 0.007367374.\n"
#~ "\n"
#~ "@SEEALSO=BESSELJ,BESSELK,BESSELY"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=BESSELK\n"
#~ "@SYNTAX=BESSELK(x,y)\n"
#~ "@DESCRIPTION=BESSELK function returns the Neumann, Weber or Bessel "
#~ "function. @x is where the function is evaluated. @y is the order of the "
#~ "Bessel function.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function extends the Excel function of the same name to non-"
#~ "integer orders.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELK(3,9) equals 397.95880.\n"
#~ "\n"
#~ "@SEEALSO=BESSELI,BESSELJ,BESSELY"
#~ msgstr ""
#~ "@FUNCTION=BESSELK\n"
#~ "@SYNTAX=BESSELK(x,y)\n"
#~ "@DESCRIPTION=BESSELK function returns the Neumann, Weber or Bessel "
#~ "function. @x is where the function is evaluated. @y is the order of the "
#~ "Bessel function, if non-integer it is truncated.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELK(3,9) equals 397.95880.\n"
#~ "\n"
#~ "@SEEALSO=BESSELI,BESSELJ,BESSELY"

#~ msgid ""
#~ "@FUNCTION=BESSELJ\n"
#~ "@SYNTAX=BESSELJ(x,y)\n"
#~ "@DESCRIPTION=BESSELJ function returns the Bessel function with @x is "
#~ "where the function is evaluated. @y is the order of the Bessel function, "
#~ "if non-integer it is truncated.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELJ(0.89,3) equals 0.013974004.\n"
#~ "\n"
#~ "@SEEALSO=BESSELI,BESSELK,BESSELY"
#~ msgstr ""
#~ "@FUNCTION=BESSELJ\n"
#~ "@SYNTAX=BESSELJ(x,y)\n"
#~ "@DESCRIPTION=BESSELJ function returns the Bessel function with @x is "
#~ "where the function is evaluated. @y is the order of the Bessel function, "
#~ "if non-integer it is truncated.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELJ(0.89,3) equals 0.013974004.\n"
#~ "\n"
#~ "@SEEALSO=BESSELI,BESSELK,BESSELY"

#~ msgid ""
#~ "@FUNCTION=BESSELY\n"
#~ "@SYNTAX=BESSELY(x,y)\n"
#~ "@DESCRIPTION=BESSELY function returns the Neumann, Weber or Bessel "
#~ "function.\n"
#~ "\n"
#~ "@x is where the function is evaluated. @y is the order of the Bessel "
#~ "function, if non-integer it is truncated.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELY(4,2) equals 0.215903595.\n"
#~ "\n"
#~ "@SEEALSO=BESSELI,BESSELJ,BESSELK"
#~ msgstr ""
#~ "@FUNCTION=BESSELY\n"
#~ "@SYNTAX=BESSELY(x,y)\n"
#~ "@DESCRIPTION=BESSELY function returns the Neumann, Weber or Bessel "
#~ "function.\n"
#~ "\n"
#~ "@x is where the function is evaluated. @y is the order of the Bessel "
#~ "function, if non-integer it is truncated.\n"
#~ "\n"
#~ "* If @x or @y are not numeric a #VALUE! error is returned.\n"
#~ "* If @y < 0 a #NUM! error is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BESSELY(4,2) equals 0.215903595.\n"
#~ "\n"
#~ "@SEEALSO=BESSELI,BESSELJ,BESSELK"

#~ msgid ""
#~ "@FUNCTION=ERF\n"
#~ "@SYNTAX=ERF([lower limit,]upper_limit)\n"
#~ "@DESCRIPTION=ERF returns the error function.  With a single argument ERF "
#~ "returns the error function, defined as\n"
#~ "\n"
#~ "\terf(x) = 2/sqrt(pi)* integral from 0 to x of exp(-t*t) dt.\n"
#~ "\n"
#~ "If two arguments are supplied, they are the lower and upper limits of the "
#~ "integral.\n"
#~ "\n"
#~ "* If either @lower_limit or @upper_limit is not numeric a #VALUE! error "
#~ "is returned.\n"
#~ "* This function is upward-compatible with that in Excel. (If two "
#~ "arguments are supplied, Excel will not allow either to be negative.)\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ERF(0.4) equals 0.428392355.\n"
#~ "ERF(1.6448536269515/SQRT(2)) equals 0.90.\n"
#~ "\n"
#~ "The second example shows that a random variable with a normal "
#~ "distribution has a 90 percent chance of falling within approximately "
#~ "1.645 standard deviations of the mean.\n"
#~ "@SEEALSO=ERFC"
#~ msgstr ""
#~ "@FUNCTION=ERF\n"
#~ "@SYNTAX=ERF([lower limit,]upper_limit)\n"
#~ "@DESCRIPTION=ERF returns the error function.  With a single argument ERF "
#~ "returns the error function, defined as\n"
#~ "\n"
#~ "\terf(x) = 2/sqrt(pi)* integral from 0 to x of exp(-t*t) dt.\n"
#~ "\n"
#~ "If two arguments are supplied, they are the lower and upper limits of the "
#~ "integral.\n"
#~ "\n"
#~ "* If either @lower_limit or @upper_limit is not numeric a #VALUE! error "
#~ "is returned.\n"
#~ "* This function is upward-compatible with that in Excel. (If two "
#~ "arguments are supplied, Excel will not allow either to be negative.)\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ERF(0.4) equals 0.428392355.\n"
#~ "ERF(1.6448536269515/SQRT(2)) equals 0.90.\n"
#~ "\n"
#~ "The second example shows that a random variable with a normal "
#~ "distribution has a 90 percent chance of falling within approximately "
#~ "1.645 standard deviations of the mean.\n"
#~ "@SEEALSO=ERFC"

#~ msgid ""
#~ "@FUNCTION=ERFC\n"
#~ "@SYNTAX=ERFC(x)\n"
#~ "@DESCRIPTION=ERFC function returns the complementary error function, "
#~ "defined as\n"
#~ "\n"
#~ "\t1 - erf(x).\n"
#~ "\n"
#~ "erfc(x) is calculated more accurately than 1 - erf(x) for arguments "
#~ "larger than about 0.5.\n"
#~ "\n"
#~ "* If @x is not numeric a #VALUE! error is returned.  \n"
#~ "@EXAMPLES=\n"
#~ "ERFC(6) equals 2.15197367e-17.\n"
#~ "\n"
#~ "@SEEALSO=ERF"
#~ msgstr ""
#~ "@FUNCTION=ERFC\n"
#~ "@SYNTAX=ERFC(x)\n"
#~ "@DESCRIPTION=ERFC function returns the complementary error function, "
#~ "defined as\n"
#~ "\n"
#~ "\t1 - erf(x).\n"
#~ "\n"
#~ "erfc(x) is calculated more accurately than 1 - erf(x) for arguments "
#~ "larger than about 0.5.\n"
#~ "\n"
#~ "* If @x is not numeric a #VALUE! error is returned.  \n"
#~ "@EXAMPLES=\n"
#~ "ERFC(6) equals 2.15197367e-17.\n"
#~ "\n"
#~ "@SEEALSO=ERF"

#~ msgid ""
#~ "@FUNCTION=DELTA\n"
#~ "@SYNTAX=DELTA(x[,y])\n"
#~ "@DESCRIPTION=DELTA function tests for numerical equivalence of two "
#~ "arguments, returning 1 in case of equality.\n"
#~ "\n"
#~ "* @y is optional, and defaults to 0.\n"
#~ "* If either argument is non-numeric returns a #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DELTA(42.99,43) equals 0.\n"
#~ "\n"
#~ "@SEEALSO=EXACT,GESTEP"
#~ msgstr ""
#~ "@FUNCTION=DELTA\n"
#~ "@SYNTAX=DELTA(x[,y])\n"
#~ "@DESCRIPTION=DELTA function tests for numerical equivalence of two "
#~ "arguments, returning 1 in case of equality.\n"
#~ "\n"
#~ "* @y is optional, and defaults to 0.\n"
#~ "* If either argument is non-numeric returns a #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DELTA(42.99,43) equals 0.\n"
#~ "\n"
#~ "@SEEALSO=EXACT,GESTEP"

#~ msgid ""
#~ "@FUNCTION=GESTEP\n"
#~ "@SYNTAX=GESTEP(x[,y])\n"
#~ "@DESCRIPTION=GESTEP function tests if @x is >= @y, returning 1 if it is "
#~ "so, and 0 otherwise. @y is optional, and defaults to 0.\n"
#~ "\n"
#~ "* If either argument is non-numeric returns a #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "@EXAMPLES=\n"
#~ "GESTEP(5,4) equals 1.\n"
#~ "\n"
#~ "@SEEALSO=DELTA"
#~ msgstr ""
#~ "@FUNCTION=GESTEP\n"
#~ "@SYNTAX=GESTEP(x[,y])\n"
#~ "@DESCRIPTION=GESTEP function tests if @x is >= @y, returning 1 if it is "
#~ "so, and 0 otherwise. @y is optional, and defaults to 0.\n"
#~ "\n"
#~ "* If either argument is non-numeric returns a #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "@EXAMPLES=\n"
#~ "GESTEP(5,4) equals 1.\n"
#~ "\n"
#~ "@SEEALSO=DELTA"

#~ msgid ""
#~ "@FUNCTION=INVSUMINV\n"
#~ "@SYNTAX=INVSUMINV(x1,x2,...)\n"
#~ "@DESCRIPTION=INVSUMINV sum calculates the inverse of the sum of "
#~ "inverses.\n"
#~ "\n"
#~ "The primary use of this is for calculating equivalent resistance for "
#~ "parallel resistors or equivalent capacitance of a series of capacitors.\n"
#~ "\n"
#~ "* All arguments must be non-negative, or else a #VALUE! result is "
#~ "returned.\n"
#~ "* If any argument is zero, the result is zero.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "INVSUMINV(2000,2000) equals 1000.\n"
#~ "\n"
#~ "@SEEALSO=HARMEAN"
#~ msgstr ""
#~ "@FUNCTION=INVSUMINV\n"
#~ "@SYNTAX=INVSUMINV(x1,x2,...)\n"
#~ "@DESCRIPTION=INVSUMINV sum calculates the inverse of the sum of "
#~ "inverses.\n"
#~ "\n"
#~ "The primary use of this is for calculating equivalent resistance for "
#~ "parallel resistors or equivalent capacitance of a series of capacitors.\n"
#~ "\n"
#~ "* All arguments must be non-negative, or else a #VALUE! result is "
#~ "returned.\n"
#~ "* If any argument is zero, the result is zero.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "INVSUMINV(2000,2000) equals 1000.\n"
#~ "\n"
#~ "@SEEALSO=HARMEAN"

#~ msgid ""
#~ "@FUNCTION=PROBBLOCK\n"
#~ "@SYNTAX=PROBBLOCK(traffic,circuits)\n"
#~ "@DESCRIPTION=PROBBLOCK returns probability of blocking when a number of "
#~ "@traffic loads into a number of @circuits (servers).\n"
#~ "\n"
#~ "* @traffic cannot exceed @circuits\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PROBBLOCK(24,30) returns 0.4012.\n"
#~ "\n"
#~ "@SEEALSO=OFFTRAF, DIMCIRC, OFFCAP"
#~ msgstr ""
#~ "@FUNCTION=PROBBLOCK\n"
#~ "@SYNTAX=PROBBLOCK(traffic,circuits)\n"
#~ "@DESCRIPTION=PROBBLOCK returns probability of blocking when a number of "
#~ "@traffic loads into a number of @circuits (servers).\n"
#~ "\n"
#~ "* @traffic cannot exceed @circuits\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PROBBLOCK(24,30) returns 0.4012.\n"
#~ "\n"
#~ "@SEEALSO=OFFTRAF, DIMCIRC, OFFCAP"

#~ msgid ""
#~ "@FUNCTION=OFFTRAF\n"
#~ "@SYNTAX=OFFTRAF(traffic,circuits)\n"
#~ "@DESCRIPTION=OFFTRAF returns a predicted number of offered traffic from a "
#~ "number of carried @traffic (taken from measurements) on a number of "
#~ "@circuits.\n"
#~ "\n"
#~ "* @traffic cannot exceed @circuits\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OFFTRAF(24,30) returns 25.527.\n"
#~ "\n"
#~ "@SEEALSO=PROBBLOCK, DIMCIRC, OFFCAP"
#~ msgstr ""
#~ "@FUNCTION=OFFTRAF\n"
#~ "@SYNTAX=OFFTRAF(traffic,circuits)\n"
#~ "@DESCRIPTION=OFFTRAF returns a predicted number of offered traffic from a "
#~ "number of carried @traffic (taken from measurements) on a number of "
#~ "@circuits.\n"
#~ "\n"
#~ "* @traffic cannot exceed @circuits\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OFFTRAF(24,30) returns 25.527.\n"
#~ "\n"
#~ "@SEEALSO=PROBBLOCK, DIMCIRC, OFFCAP"

#~ msgid ""
#~ "@FUNCTION=DIMCIRC\n"
#~ "@SYNTAX=DIMCIRC(traffic,gos)\n"
#~ "@DESCRIPTION=DIMCIRC returns a number of circuits required from a number "
#~ "of @traffic loads with @gos grade of service.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DIMCIRC(24,1%) returns 35.\n"
#~ "\n"
#~ "@SEEALSO=OFFCAP, OFFTRAF, PROBBLOCK"
#~ msgstr ""
#~ "@FUNCTION=DIMCIRC\n"
#~ "@SYNTAX=DIMCIRC(traffic,gos)\n"
#~ "@DESCRIPTION=DIMCIRC returns a number of circuits required from a number "
#~ "of @traffic loads with @gos grade of service.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DIMCIRC(24,1%) returns 35.\n"
#~ "\n"
#~ "@SEEALSO=OFFCAP, OFFTRAF, PROBBLOCK"

#~ msgid ""
#~ "@FUNCTION=OFFCAP\n"
#~ "@SYNTAX=OFFCAP(circuits,gos)\n"
#~ "@DESCRIPTION=OFFCAP returns a number of traffic capacity given by a "
#~ "number of @circuits with @gos grade of service.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OFFCAP(30,1%) returns 20.337.\n"
#~ "\n"
#~ "@SEEALSO=DIMCIRC, OFFTRAF, PROBBLOCK"
#~ msgstr ""
#~ "@FUNCTION=OFFCAP\n"
#~ "@SYNTAX=OFFCAP(circuits,gos)\n"
#~ "@DESCRIPTION=OFFCAP returns a number of traffic capacity given by a "
#~ "number of @circuits with @gos grade of service.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OFFCAP(30,1%) returns 20.337.\n"
#~ "\n"
#~ "@SEEALSO=DIMCIRC, OFFTRAF, PROBBLOCK"

#~ msgid ""
#~ "@FUNCTION=ACCRINT\n"
#~ "@SYNTAX=ACCRINT(issue,first_interest,settlement,rate,par,frequency[,"
#~ "basis])\n"
#~ "@DESCRIPTION=ACCRINT calculates the accrued interest for a security that "
#~ "pays periodic interest.\n"
#~ "\n"
#~ "@issue is the issue date of the security.  @first_interest is the first "
#~ "interest date of the security.  @settlement is the settlement date of the "
#~ "security.  The settlement date is always after the issue date (the date "
#~ "when the security is bought). @rate is the annual rate of the security "
#~ "and @par is the par value of the security. @frequency is the number of "
#~ "coupon payments per year.\n"
#~ "\n"
#~ "Allowed frequencies are:\n"
#~ "  1 = annual,\n"
#~ "  2 = semi,\n"
#~ "  4 = quarterly.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @issue date, @first_interest date, or @settlement date is not valid, "
#~ "ACCRINT returns #NUM! error.\n"
#~ "* The dates must be @issue < @first_interest < @settlement, or ACCRINT "
#~ "returns #NUM! error.\n"
#~ "* If @rate <= 0 or @par <= 0 , ACCRINT returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, ACCRINT returns #NUM! error.\n"
#~ "* If @issue date is after @settlement date or they are the same, ACCRINT "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=ACCRINTM"
#~ msgstr ""
#~ "@FUNCTION=ACCRINT\n"
#~ "@SYNTAX=ACCRINT(issue,first_interest,settlement,rate,par,frequency[,"
#~ "basis])\n"
#~ "@DESCRIPTION=ACCRINT calculates the accrued interest for a security that "
#~ "pays periodic interest.\n"
#~ "\n"
#~ "@issue is the issue date of the security.  @first_interest is the first "
#~ "interest date of the security.  @settlement is the settlement date of the "
#~ "security.  The settlement date is always after the issue date (the date "
#~ "when the security is bought). @rate is the annual rate of the security "
#~ "and @par is the par value of the security. @frequency is the number of "
#~ "coupon payments per year.\n"
#~ "\n"
#~ "Allowed frequencies are:\n"
#~ "  1 = annual,\n"
#~ "  2 = semi,\n"
#~ "  4 = quarterly.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @issue date, @first_interest date, or @settlement date is not valid, "
#~ "ACCRINT returns #NUM! error.\n"
#~ "* The dates must be @issue < @first_interest < @settlement, or ACCRINT "
#~ "returns #NUM! error.\n"
#~ "* If @rate <= 0 or @par <= 0 , ACCRINT returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, ACCRINT returns #NUM! error.\n"
#~ "* If @issue date is after @settlement date or they are the same, ACCRINT "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=ACCRINTM"

#~ msgid ""
#~ "@FUNCTION=ACCRINTM\n"
#~ "@SYNTAX=ACCRINTM(issue,maturity,rate[,par,basis])\n"
#~ "@DESCRIPTION=ACCRINTM calculates and returns the accrued interest for a "
#~ "security from @issue to @maturity date.\n"
#~ "\n"
#~ "@issue is the issue date of the security.  @maturity is the maturity date "
#~ "of the security.  @rate is the annual rate of the security and @par is "
#~ "the par value of the security. If you omit @par, ACCRINTM applies $1,000 "
#~ "instead.  @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @issue date or @maturity date is not valid, ACCRINTM returns #NUM! "
#~ "error.\n"
#~ "* If @rate <= 0 or @par <= 0, ACCRINTM returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, ACCRINTM returns #NUM! error.\n"
#~ "* If @issue date is after @maturity date or they are the same, ACCRINTM "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=ACCRINT"
#~ msgstr ""
#~ "@FUNCTION=ACCRINTM\n"
#~ "@SYNTAX=ACCRINTM(issue,maturity,rate[,par,basis])\n"
#~ "@DESCRIPTION=ACCRINTM calculates and returns the accrued interest for a "
#~ "security from @issue to @maturity date.\n"
#~ "\n"
#~ "@issue is the issue date of the security.  @maturity is the maturity date "
#~ "of the security.  @rate is the annual rate of the security and @par is "
#~ "the par value of the security. If you omit @par, ACCRINTM applies £1,000 "
#~ "instead.  @basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @issue date or @maturity date is not valid, ACCRINTM returns #NUM! "
#~ "error.\n"
#~ "* If @rate <= 0 or @par <= 0, ACCRINTM returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, ACCRINTM returns #NUM! error.\n"
#~ "* If @issue date is after @maturity date or they are the same, ACCRINTM "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=ACCRINT"

#~ msgid ""
#~ "@FUNCTION=INTRATE\n"
#~ "@SYNTAX=INTRATE(settlement,maturity,investment,redemption[,basis])\n"
#~ "@DESCRIPTION=INTRATE calculates and returns the interest rate of a fully "
#~ "vested security.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security. @investment is the price of the security "
#~ "paid at @settlement date and @redemption is the amount to be received at "
#~ "@maturity date.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, INTRATE returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, INTRATE returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "INTRATE returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "If you had a bond with a settlement date of April 15, 2000, maturity date "
#~ "September 30, 2000, investment of $100,000, redemption value $103,525, "
#~ "using the actual/actual basis, the bond discount rate is:\n"
#~ "=INTRATE(36631, 36799, 100000, 103525, 1) which equals 0.0648 or 6.48%\n"
#~ "@SEEALSO=RECEIVED, DATE"
#~ msgstr ""
#~ "@FUNCTION=INTRATE\n"
#~ "@SYNTAX=INTRATE(settlement,maturity,investment,redemption[,basis])\n"
#~ "@DESCRIPTION=INTRATE calculates and returns the interest rate of a fully "
#~ "vested security.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security. @investment is the price of the security "
#~ "paid at @settlement date and @redemption is the amount to be received at "
#~ "@maturity date.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, INTRATE returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, INTRATE returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "INTRATE returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "If you had a bond with a settlement date of April 15, 2000, maturity date "
#~ "September 30, 2000, investment of £100,000, redemption value £103,525, "
#~ "using the actual/actual basis, the bond discount rate is:\n"
#~ "=INTRATE(36631, 36799, 100000, 103525, 1) which equals 0.0648 or 6.48%\n"
#~ "@SEEALSO=RECEIVED, DATE"

#~ msgid ""
#~ "@FUNCTION=RECEIVED\n"
#~ "@SYNTAX=RECEIVED(settlement,maturity,investment,rate[,basis])\n"
#~ "@DESCRIPTION=RECEIVED calculates and returns the amount to be received at "
#~ "maturity date for a security bond.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security.  The amount of investment is specified in "
#~ "@investment.  @rate is the security's discount rate.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, RECEIVED returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, RECEIVED returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "RECEIVED returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=INTRATE"
#~ msgstr ""
#~ "@FUNCTION=RECEIVED\n"
#~ "@SYNTAX=RECEIVED(settlement,maturity,investment,rate[,basis])\n"
#~ "@DESCRIPTION=RECEIVED calculates and returns the amount to be received at "
#~ "maturity date for a security bond.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security.  The amount of investment is specified in "
#~ "@investment.  @rate is the security's discount rate.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, RECEIVED returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, RECEIVED returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "RECEIVED returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=INTRATE"

#~ msgid ""
#~ "@FUNCTION=PRICEDISC\n"
#~ "@SYNTAX=PRICEDISC(settlement,maturity,discount,redemption[,basis])\n"
#~ "@DESCRIPTION=PRICEDISC calculates and returns the price per $100 face "
#~ "value of a security bond.  The security does not pay interest at "
#~ "maturity.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security.  @discount is the rate for which the "
#~ "security is discounted.  @redemption is the amount to be received on "
#~ "@maturity date.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, PRICEDISC returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, PRICEDISC returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "PRICEDISC returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PRICEMAT"
#~ msgstr ""
#~ "@FUNCTION=PRICEDISC\n"
#~ "@SYNTAX=PRICEDISC(settlement,maturity,discount,redemption[,basis])\n"
#~ "@DESCRIPTION=PRICEDISC calculates and returns the price per £100 face "
#~ "value of a security bond.  The security does not pay interest at "
#~ "maturity.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security. @maturity is the "
#~ "maturity date of the security.  @discount is the rate for which the "
#~ "security is discounted.  @redemption is the amount to be received on "
#~ "@maturity date.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, PRICEDISC returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, PRICEDISC returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "PRICEDISC returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PRICEMAT"

#~ msgid ""
#~ "@FUNCTION=PRICEMAT\n"
#~ "@SYNTAX=PRICEMAT(settlement,maturity,issue,rate,yield[,basis])\n"
#~ "@DESCRIPTION=PRICEMAT calculates and returns the price per $100 face "
#~ "value of a security.  The security pays interest at maturity.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security.  @issue is the issue date of the "
#~ "security.  @rate is the discount rate of the security. @yield is the "
#~ "annual yield of the security. @basis is the type of day counting system "
#~ "you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, PRICEMAT returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, PRICEMAT returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "PRICEMAT returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PRICEDISC"
#~ msgstr ""
#~ "@FUNCTION=PRICEMAT\n"
#~ "@SYNTAX=PRICEMAT(settlement,maturity,issue,rate,yield[,basis])\n"
#~ "@DESCRIPTION=PRICEMAT calculates and returns the price per £100 face "
#~ "value of a security.  The security pays interest at maturity.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.  @maturity is the "
#~ "maturity date of the security.  @issue is the issue date of the "
#~ "security.  @rate is the discount rate of the security. @yield is the "
#~ "annual yield of the security. @basis is the type of day counting system "
#~ "you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, PRICEMAT returns "
#~ "#NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, PRICEMAT returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, "
#~ "PRICEMAT returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PRICEDISC"

#~ msgid ""
#~ "@FUNCTION=DISC\n"
#~ "@SYNTAX=DISC(settlement,maturity,par,redemption[,basis])\n"
#~ "@DESCRIPTION=DISC calculates and returns the discount rate for a "
#~ "security. @settlement is the settlement date of the security.\n"
#~ "\n"
#~ "@maturity is the maturity date of the security.  @par is the price per "
#~ "$100 face value of the security.  @redemption is the redemption value per "
#~ "$100 face value of the security.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, DISC returns #NUM! "
#~ "error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, DISC returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, DISC "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=DISC\n"
#~ "@SYNTAX=DISC(settlement,maturity,par,redemption[,basis])\n"
#~ "@DESCRIPTION=DISC calculates and returns the discount rate for a "
#~ "security. @settlement is the settlement date of the security.\n"
#~ "\n"
#~ "@maturity is the maturity date of the security.  @par is the price per "
#~ "£100 face value of the security.  @redemption is the redemption value per "
#~ "£100 face value of the security.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @settlement date or @maturity date is not valid, DISC returns #NUM! "
#~ "error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis < 0 or @basis > 4, DISC returns #NUM! error.\n"
#~ "* If @settlement date is after @maturity date or they are the same, DISC "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=EFFECT\n"
#~ "@SYNTAX=EFFECT(r,nper)\n"
#~ "@DESCRIPTION=EFFECT calculates the effective interest rate from a given "
#~ "nominal rate.\n"
#~ "\n"
#~ "Effective interest rate is calculated using this formula:\n"
#~ "\n"
#~ "    (1 + @r / @nper) ^ @nper - 1\n"
#~ "\n"
#~ "where:\n"
#~ "\n"
#~ "@r = nominal interest rate (stated in yearly terms)\n"
#~ "@nper = number of periods used for compounding\n"
#~ "\n"
#~ "* If @rate < 0, EFFECT returns #NUM! error.\n"
#~ "* If @nper <= 0, EFFECT returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example credit cards will list an APR (annual percentage rate) which "
#~ "is a nominal interest rate.\n"
#~ "For example if you wanted to find out how much you are actually paying "
#~ "interest on your credit card that states an APR of 19% that is compounded "
#~ "monthly you would type in:\n"
#~ "=EFFECT(.19,12) and you would get .2075 or 20.75%. That is the effective "
#~ "percentage you will pay on your loan.\n"
#~ "@SEEALSO=NOMINAL"
#~ msgstr ""
#~ "@FUNCTION=EFFECT\n"
#~ "@SYNTAX=EFFECT(r,nper)\n"
#~ "@DESCRIPTION=EFFECT calculates the effective interest rate from a given "
#~ "nominal rate.\n"
#~ "\n"
#~ "Effective interest rate is calculated using this formula:\n"
#~ "\n"
#~ "    (1 + @r / @nper) ^ @nper - 1\n"
#~ "\n"
#~ "where:\n"
#~ "\n"
#~ "@r = nominal interest rate (stated in yearly terms)\n"
#~ "@nper = number of periods used for compounding\n"
#~ "\n"
#~ "* If @rate < 0, EFFECT returns #NUM! error.\n"
#~ "* If @nper <= 0, EFFECT returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example credit cards will list an APR (annual percentage rate) which "
#~ "is a nominal interest rate.\n"
#~ "For example if you wanted to find out how much you are actually paying "
#~ "interest on your credit card that states an APR of 19% that is compounded "
#~ "monthly you would type in:\n"
#~ "=EFFECT(.19,12) and you would get .2075 or 20.75%. That is the effective "
#~ "percentage you will pay on your loan.\n"
#~ "@SEEALSO=NOMINAL"

#~ msgid ""
#~ "@FUNCTION=NOMINAL\n"
#~ "@SYNTAX=NOMINAL(r,nper)\n"
#~ "@DESCRIPTION=NOMINAL calculates the nominal interest rate from a given "
#~ "effective rate.\n"
#~ "\n"
#~ "Nominal interest rate is given by a formula:\n"
#~ "\n"
#~ "@nper * (( 1 + @r ) ^ (1 / @nper) - 1 )\n"
#~ "where:\n"
#~ "\n"
#~ "@r = effective interest rate\n"
#~ "@nper = number of periods used for compounding\n"
#~ "\n"
#~ "* If @rate < 0, NOMINAL returns #NUM! error.\n"
#~ "* If @nper <= 0, NOMINAL returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=EFFECT"
#~ msgstr ""
#~ "@FUNCTION=NOMINAL\n"
#~ "@SYNTAX=NOMINAL(r,nper)\n"
#~ "@DESCRIPTION=NOMINAL calculates the nominal interest rate from a given "
#~ "effective rate.\n"
#~ "\n"
#~ "Nominal interest rate is given by a formula:\n"
#~ "\n"
#~ "@nper * (( 1 + @r ) ^ (1 / @nper) - 1 )\n"
#~ "where:\n"
#~ "\n"
#~ "@r = effective interest rate\n"
#~ "@nper = number of periods used for compounding\n"
#~ "\n"
#~ "* If @rate < 0, NOMINAL returns #NUM! error.\n"
#~ "* If @nper <= 0, NOMINAL returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=EFFECT"

#~ msgid ""
#~ "@FUNCTION=ISPMT\n"
#~ "@SYNTAX=ISPMT(rate,per,nper,pv)\n"
#~ "@DESCRIPTION=ISPMT function returns the interest paid on a given period.\n"
#~ "\n"
#~ "* If @per < 1 or @per > @nper, ISPMT returns #NUM! error. \n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PV"
#~ msgstr ""
#~ "@FUNCTION=ISPMT\n"
#~ "@SYNTAX=ISPMT(rate,per,nper,pv)\n"
#~ "@DESCRIPTION=ISPMT function returns the interest paid on a given period.\n"
#~ "\n"
#~ "* If @per < 1 or @per > @nper, ISPMT returns #NUM! error. \n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PV"

#~ msgid ""
#~ "@FUNCTION=DB\n"
#~ "@SYNTAX=DB(cost,salvage,life,period[,month])\n"
#~ "@DESCRIPTION=DB calculates the depreciation of an asset for a given "
#~ "period using the fixed-declining balance method.  @cost is the initial "
#~ "value of the asset.  @salvage is the value after the depreciation.\n"
#~ "\n"
#~ "@life is the number of periods overall.  @period is the period for which "
#~ "you want the depreciation to be calculated.  @month is the number of "
#~ "months in the first year of depreciation.\n"
#~ "\n"
#~ "* If @month is omitted, it is assumed to be 12.\n"
#~ "* If @cost = 0, DB returns #NUM! error.\n"
#~ "* If @life <= 0, DB returns #NUM! error.\n"
#~ "* If @salvage / @cost < 0, DB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DDB,SLN,SYD"
#~ msgstr ""
#~ "@FUNCTION=DB\n"
#~ "@SYNTAX=DB(cost,salvage,life,period[,month])\n"
#~ "@DESCRIPTION=DB calculates the depreciation of an asset for a given "
#~ "period using the fixed-declining balance method.  @cost is the initial "
#~ "value of the asset.  @salvage is the value after the depreciation.\n"
#~ "\n"
#~ "@life is the number of periods overall.  @period is the period for which "
#~ "you want the depreciation to be calculated.  @month is the number of "
#~ "months in the first year of depreciation.\n"
#~ "\n"
#~ "* If @month is omitted, it is assumed to be 12.\n"
#~ "* If @cost = 0, DB returns #NUM! error.\n"
#~ "* If @life <= 0, DB returns #NUM! error.\n"
#~ "* If @salvage / @cost < 0, DB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DDB,SLN,SYD"

#~ msgid ""
#~ "@FUNCTION=DDB\n"
#~ "@SYNTAX=DDB(cost,salvage,life,period[,factor])\n"
#~ "@DESCRIPTION=DDB returns the depreciation of an asset for a given period "
#~ "using the double-declining balance method or some other similar method "
#~ "you specify.\n"
#~ "\n"
#~ "@cost is the initial value of the asset, @salvage is the value after the "
#~ "last period, @life is the number of periods, @period is the period for "
#~ "which you want the depreciation to be calculated, and @factor is the "
#~ "factor at which the balance declines.\n"
#~ "\n"
#~ "* If @factor is omitted, it is assumed to be two (double-declining "
#~ "balance method).\n"
#~ "* If @life <= 0, DDB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=SLN,SYD"
#~ msgstr ""
#~ "@FUNCTION=DDB\n"
#~ "@SYNTAX=DDB(cost,salvage,life,period[,factor])\n"
#~ "@DESCRIPTION=DDB returns the depreciation of an asset for a given period "
#~ "using the double-declining balance method or some other similar method "
#~ "you specify.\n"
#~ "\n"
#~ "@cost is the initial value of the asset, @salvage is the value after the "
#~ "last period, @life is the number of periods, @period is the period for "
#~ "which you want the depreciation to be calculated, and @factor is the "
#~ "factor at which the balance declines.\n"
#~ "\n"
#~ "* If @factor is omitted, it is assumed to be two (double-declining "
#~ "balance method).\n"
#~ "* If @life <= 0, DDB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=SLN,SYD"

#~ msgid ""
#~ "@FUNCTION=SLN\n"
#~ "@SYNTAX=SLN(cost,salvage_value,life)\n"
#~ "@DESCRIPTION=SLN function will determine the straight line depreciation "
#~ "of an asset for a single period.\n"
#~ "\n"
#~ "The formula is:\n"
#~ "\n"
#~ "Depreciation expense = ( @cost - @salvage_value ) / @life\n"
#~ "\n"
#~ "@cost is the cost of an asset when acquired (market value).\n"
#~ "@salvage_value is the amount you get when asset is sold at the end of the "
#~ "asset's useful life.\n"
#~ "@life is the anticipated life of an asset.\n"
#~ "\n"
#~ "* If @life <= 0, SLN returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example, lets suppose your company purchases a new machine for "
#~ "$10,000, which has a salvage value of $700 and will have a useful life of "
#~ "10 years. The SLN yearly depreciation is computed as follows:\n"
#~ "=SLN(10000, 700, 10)\n"
#~ "This will return the yearly depreciation figure of $930.\n"
#~ "@SEEALSO=SYD"
#~ msgstr ""
#~ "@FUNCTION=SLN\n"
#~ "@SYNTAX=SLN(cost,salvage_value,life)\n"
#~ "@DESCRIPTION=SLN function will determine the straight line depreciation "
#~ "of an asset for a single period.\n"
#~ "\n"
#~ "The formula is:\n"
#~ "\n"
#~ "Depreciation expense = ( @cost - @salvage_value ) / @life\n"
#~ "\n"
#~ "@cost is the cost of an asset when acquired (market value).\n"
#~ "@salvage_value is the amount you get when asset is sold at the end of the "
#~ "asset's useful life.\n"
#~ "@life is the anticipated life of an asset.\n"
#~ "\n"
#~ "* If @life <= 0, SLN returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example, lets suppose your company purchases a new machine for "
#~ "£10,000, which has a salvage value of £700 and will have a useful life of "
#~ "10 years. The SLN yearly depreciation is computed as follows:\n"
#~ "=SLN(10000, 700, 10)\n"
#~ "This will return the yearly depreciation figure of £930.\n"
#~ "@SEEALSO=SYD"

#~ msgid ""
#~ "@FUNCTION=SYD\n"
#~ "@SYNTAX=SYD(cost,salvage_value,life,period)\n"
#~ "@DESCRIPTION=SYD function calculates the sum-of-years digits depreciation "
#~ "for an asset based on its cost, salvage value, anticipated life and a "
#~ "particular period. This method accelerates the rate of the depreciation, "
#~ "so that more depreciation expense occurs in earlier periods than in later "
#~ "ones. The depreciable cost is the actual cost minus the salvage value. "
#~ "The useful life is the number of periods (typically years) over which the "
#~ "asset is depreciated.\n"
#~ "\n"
#~ "The Formula used for sum-of-years digits depreciation is:\n"
#~ "\n"
#~ "Depreciation expense =\n"
#~ "\n"
#~ "\t ( @cost - @salvage_value ) * (@life - @period + 1) * 2 / @life * "
#~ "(@life + 1).\n"
#~ "\n"
#~ "@cost is the cost of an asset when acquired (market value).\n"
#~ "@salvage_value is the amount you get when asset sold at the end of its "
#~ "useful life.\n"
#~ "@life is the anticipated life of an asset.\n"
#~ "@period is the period for which we need the expense.\n"
#~ "\n"
#~ "* If @life <= 0, SYD returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example say a company purchases a new computer for $5000 which has a "
#~ "salvage value of $200, and a useful life of five years. We would use the "
#~ "following to calculate the second year's depreciation using the SYD "
#~ "method:\n"
#~ "=SYD(5000, 200, 5, 2) which returns 1,280.00.\n"
#~ "@SEEALSO=SLN"
#~ msgstr ""
#~ "@FUNCTION=SYD\n"
#~ "@SYNTAX=SYD(cost,salvage_value,life,period)\n"
#~ "@DESCRIPTION=SYD function calculates the sum-of-years digits depreciation "
#~ "for an asset based on its cost, salvage value, anticipated life and a "
#~ "particular period. This method accelerates the rate of the depreciation, "
#~ "so that more depreciation expense occurs in earlier periods than in later "
#~ "ones. The depreciable cost is the actual cost minus the salvage value. "
#~ "The useful life is the number of periods (typically years) over which the "
#~ "asset is depreciated.\n"
#~ "\n"
#~ "The Formula used for sum-of-years digits depreciation is:\n"
#~ "\n"
#~ "Depreciation expense =\n"
#~ "\n"
#~ "\t ( @cost - @salvage_value ) * (@life - @period + 1) * 2 / @life * "
#~ "(@life + 1).\n"
#~ "\n"
#~ "@cost is the cost of an asset when acquired (market value).\n"
#~ "@salvage_value is the amount you get when asset sold at the end of its "
#~ "useful life.\n"
#~ "@life is the anticipated life of an asset.\n"
#~ "@period is the period for which we need the expense.\n"
#~ "\n"
#~ "* If @life <= 0, SYD returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example say a company purchases a new computer for £5000 which has a "
#~ "salvage value of £200, and a useful life of five years. We would use the "
#~ "following to calculate the second year's depreciation using the SYD "
#~ "method:\n"
#~ "=SYD(5000, 200, 5, 2) which returns 1,280.00.\n"
#~ "@SEEALSO=SLN"

#~ msgid ""
#~ "@FUNCTION=DOLLARDE\n"
#~ "@SYNTAX=DOLLARDE(fractional_dollar,fraction)\n"
#~ "@DESCRIPTION=DOLLARDE converts a dollar price expressed as a fraction "
#~ "into a dollar price expressed as a decimal number.\n"
#~ "\n"
#~ "@fractional_dollar is the fractional number to be converted. @fraction is "
#~ "the denominator of the fraction.\n"
#~ "\n"
#~ "* If @fraction is non-integer it is truncated.\n"
#~ "* If @fraction <= 0, DOLLARDE returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DOLLARFR"
#~ msgstr ""
#~ "@FUNCTION=DOLLARDE\n"
#~ "@SYNTAX=DOLLARDE(fractional_dollar,fraction)\n"
#~ "@DESCRIPTION=DOLLARDE converts a dollar price expressed as a fraction "
#~ "into a dollar price expressed as a decimal number.\n"
#~ "\n"
#~ "@fractional_dollar is the fractional number to be converted. @fraction is "
#~ "the denominator of the fraction.\n"
#~ "\n"
#~ "* If @fraction is non-integer it is truncated.\n"
#~ "* If @fraction <= 0, DOLLARDE returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DOLLARFR"

#~ msgid ""
#~ "@FUNCTION=DOLLARFR\n"
#~ "@SYNTAX=DOLLARFR(decimal_dollar,fraction)\n"
#~ "@DESCRIPTION=DOLLARFR converts a decimal dollar price into a dollar price "
#~ "expressed as a fraction.\n"
#~ "\n"
#~ "* If @fraction is non-integer it is truncated.\n"
#~ "* If @fraction <= 0, DOLLARFR returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DOLLARDE"
#~ msgstr ""
#~ "@FUNCTION=DOLLARFR\n"
#~ "@SYNTAX=DOLLARFR(decimal_dollar,fraction)\n"
#~ "@DESCRIPTION=DOLLARFR converts a decimal dollar price into a dollar price "
#~ "expressed as a fraction.\n"
#~ "\n"
#~ "* If @fraction is non-integer it is truncated.\n"
#~ "* If @fraction <= 0, DOLLARFR returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DOLLARDE"

#~ msgid ""
#~ "@FUNCTION=MIRR\n"
#~ "@SYNTAX=MIRR(values,finance_rate,reinvest_rate)\n"
#~ "@DESCRIPTION=MIRR function returns the modified internal rate of return "
#~ "for a given periodic cash flow. \n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NPV"
#~ msgstr ""
#~ "@FUNCTION=MIRR\n"
#~ "@SYNTAX=MIRR(values,finance_rate,reinvest_rate)\n"
#~ "@DESCRIPTION=MIRR function returns the modified internal rate of return "
#~ "for a given periodic cash flow. \n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NPV"

#~ msgid ""
#~ "@FUNCTION=TBILLEQ\n"
#~ "@SYNTAX=TBILLEQ(settlement,maturity,discount)\n"
#~ "@DESCRIPTION=TBILLEQ function returns the bond-yield equivalent (BEY) for "
#~ "a treasury bill.  TBILLEQ is equivalent to\n"
#~ "\n"
#~ "\t(365 * @discount) / (360 - @discount * DSM),\n"
#~ "\n"
#~ "where DSM is the days between @settlement and @maturity.\n"
#~ "\n"
#~ "* If @settlement is after @maturity or the @maturity is set to over one "
#~ "year later than the @settlement, TBILLEQ returns #NUM! error.\n"
#~ "* If @discount is negative, TBILLEQ returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TBILLPRICE,TBILLYIELD"
#~ msgstr ""
#~ "@FUNCTION=TBILLEQ\n"
#~ "@SYNTAX=TBILLEQ(settlement,maturity,discount)\n"
#~ "@DESCRIPTION=TBILLEQ function returns the bond-yield equivalent (BEY) for "
#~ "a treasury bill.  TBILLEQ is equivalent to\n"
#~ "\n"
#~ "\t(365 * @discount) / (360 - @discount * DSM),\n"
#~ "\n"
#~ "where DSM is the days between @settlement and @maturity.\n"
#~ "\n"
#~ "* If @settlement is after @maturity or the @maturity is set to over one "
#~ "year later than the @settlement, TBILLEQ returns #NUM! error.\n"
#~ "* If @discount is negative, TBILLEQ returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TBILLPRICE,TBILLYIELD"

#~ msgid ""
#~ "@FUNCTION=TBILLPRICE\n"
#~ "@SYNTAX=TBILLPRICE(settlement,maturity,discount)\n"
#~ "@DESCRIPTION=TBILLPRICE function returns the price per $100 value for a "
#~ "treasury bill where @settlement is the settlement date and @maturity is "
#~ "the maturity date of the bill.  @discount is the treasury bill's discount "
#~ "rate.\n"
#~ "\n"
#~ "* If @settlement is after @maturity or the @maturity is set to over one "
#~ "year later than the @settlement, TBILLPRICE returns #NUM! error.\n"
#~ "* If @discount is negative, TBILLPRICE returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TBILLEQ,TBILLYIELD"
#~ msgstr ""
#~ "@FUNCTION=TBILLPRICE\n"
#~ "@SYNTAX=TBILLPRICE(settlement,maturity,discount)\n"
#~ "@DESCRIPTION=TBILLPRICE function returns the price per £100 value for a "
#~ "treasury bill where @settlement is the settlement date and @maturity is "
#~ "the maturity date of the bill.  @discount is the treasury bill's discount "
#~ "rate.\n"
#~ "\n"
#~ "* If @settlement is after @maturity or the @maturity is set to over one "
#~ "year later than the @settlement, TBILLPRICE returns #NUM! error.\n"
#~ "* If @discount is negative, TBILLPRICE returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TBILLEQ,TBILLYIELD"

#~ msgid ""
#~ "@FUNCTION=TBILLYIELD\n"
#~ "@SYNTAX=TBILLYIELD(settlement,maturity,pr)\n"
#~ "@DESCRIPTION=TBILLYIELD function returns the yield for a treasury bill. "
#~ "@settlement is the settlement date and @maturity is the maturity date of "
#~ "the bill.  @discount is the treasury bill's discount rate.\n"
#~ "\n"
#~ "* If @settlement is after @maturity or the @maturity is set to over one "
#~ "year later than the @settlement, TBILLYIELD returns #NUM! error.\n"
#~ "* If @pr is negative, TBILLYIELD returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TBILLEQ,TBILLPRICE"
#~ msgstr ""
#~ "@FUNCTION=TBILLYIELD\n"
#~ "@SYNTAX=TBILLYIELD(settlement,maturity,pr)\n"
#~ "@DESCRIPTION=TBILLYIELD function returns the yield for a treasury bill. "
#~ "@settlement is the settlement date and @maturity is the maturity date of "
#~ "the bill.  @discount is the treasury bill's discount rate.\n"
#~ "\n"
#~ "* If @settlement is after @maturity or the @maturity is set to over one "
#~ "year later than the @settlement, TBILLYIELD returns #NUM! error.\n"
#~ "* If @pr is negative, TBILLYIELD returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TBILLEQ,TBILLPRICE"

#~ msgid ""
#~ "@FUNCTION=RATE\n"
#~ "@SYNTAX=RATE(nper,pmt,pv[,fv,type,guess])\n"
#~ "@DESCRIPTION=RATE calculates the rate of an investment.\n"
#~ "\n"
#~ "* If @pmt is omitted it defaults to 0\n"
#~ "* If @nper <= 0, RATE returns #NUM! error.\n"
#~ "* If @type != 0 and @type != 1, RATE returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PV,FV"
#~ msgstr ""
#~ "@FUNCTION=RATE\n"
#~ "@SYNTAX=RATE(nper,pmt,pv[,fv,type,guess])\n"
#~ "@DESCRIPTION=RATE calculates the rate of an investment.\n"
#~ "\n"
#~ "* If @pmt is omitted it defaults to 0\n"
#~ "* If @nper <= 0, RATE returns #NUM! error.\n"
#~ "* If @type != 0 and @type != 1, RATE returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PV,FV"

#~ msgid ""
#~ "@FUNCTION=IRR\n"
#~ "@SYNTAX=IRR(values[,guess])\n"
#~ "@DESCRIPTION=IRR calculates and returns the internal rate of return of an "
#~ "investment.  This function is closely related to the net present value "
#~ "function (NPV).  The IRR is the interest rate for a series of cash flows "
#~ "where the net preset value is zero.\n"
#~ "\n"
#~ "@values contains the series of cash flows generated by the investment.  "
#~ "The payments should occur at regular intervals.  The optional @guess is "
#~ "the initial value used in calculating the IRR.  You do not have to use "
#~ "that, it is only provided for the Excel compatibility.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1:A8 contain the numbers -32432, 5324, "
#~ "7432, 9332, 12324, 4334, 1235, -3422.  Then\n"
#~ "IRR(A1:A8) returns 0.04375. \n"
#~ "@SEEALSO=FV,NPV,PV"
#~ msgstr ""
#~ "@FUNCTION=IRR\n"
#~ "@SYNTAX=IRR(values[,guess])\n"
#~ "@DESCRIPTION=IRR calculates and returns the internal rate of return of an "
#~ "investment.  This function is closely related to the net present value "
#~ "function (NPV).  The IRR is the interest rate for a series of cash flows "
#~ "where the net preset value is zero.\n"
#~ "\n"
#~ "@values contains the series of cash flows generated by the investment.  "
#~ "The payments should occur at regular intervals.  The optional @guess is "
#~ "the initial value used in calculating the IRR.  You do not have to use "
#~ "that, it is only provided for the Excel compatibility.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1:A8 contain the numbers -32432, 5324, "
#~ "7432, 9332, 12324, 4334, 1235, -3422.  Then\n"
#~ "IRR(A1:A8) returns 0.04375. \n"
#~ "@SEEALSO=FV,NPV,PV"

#~ msgid ""
#~ "@FUNCTION=PV\n"
#~ "@SYNTAX=PV(rate,nper,pmt[,fv,type])\n"
#~ "@DESCRIPTION=PV calculates the present value of an investment. @rate is "
#~ "the periodic interest rate, @nper is the number of periods used for "
#~ "compounding. @pmt is the payment made each period, @fv is the future "
#~ "value and @type is when the payment is made.\n"
#~ "\n"
#~ "* If @type = 1 then the payment is made at the beginning of the period.\n"
#~ "* If @type = 0 (or omitted) it is made at the end of each period.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=FV"
#~ msgstr ""
#~ "@FUNCTION=PV\n"
#~ "@SYNTAX=PV(rate,nper,pmt[,fv,type])\n"
#~ "@DESCRIPTION=PV calculates the present value of an investment. @rate is "
#~ "the periodic interest rate, @nper is the number of periods used for "
#~ "compounding. @pmt is the payment made each period, @fv is the future "
#~ "value and @type is when the payment is made.\n"
#~ "\n"
#~ "* If @type = 1 then the payment is made at the beginning of the period.\n"
#~ "* If @type = 0 (or omitted) it is made at the end of each period.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=FV"

#~ msgid ""
#~ "@FUNCTION=NPV\n"
#~ "@SYNTAX=NPV(rate,v1,v2,...)\n"
#~ "@DESCRIPTION=NPV calculates the net present value of an investment "
#~ "generating periodic payments.  @rate is the periodic interest rate and "
#~ "@v1, @v2, ... are the periodic payments.  If the schedule of the cash "
#~ "flows are not periodic use the XNPV function. \n"
#~ "@EXAMPLES=\n"
#~ "NPV(0.17,-10000,3340,2941,2493,3233,1732,2932) equals 186.30673.\n"
#~ "\n"
#~ "@SEEALSO=PV,XNPV"
#~ msgstr ""
#~ "@FUNCTION=NPV\n"
#~ "@SYNTAX=NPV(rate,v1,v2,...)\n"
#~ "@DESCRIPTION=NPV calculates the net present value of an investment "
#~ "generating periodic payments.  @rate is the periodic interest rate and "
#~ "@v1, @v2, ... are the periodic payments.  If the schedule of the cash "
#~ "flows are not periodic use the XNPV function. \n"
#~ "@EXAMPLES=\n"
#~ "NPV(0.17,-10000,3340,2941,2493,3233,1732,2932) equals 186.30673.\n"
#~ "\n"
#~ "@SEEALSO=PV,XNPV"

#~ msgid ""
#~ "@FUNCTION=XNPV\n"
#~ "@SYNTAX=XNPV(rate,values,dates)\n"
#~ "@DESCRIPTION=XNPV calculates the net present value of an investment.  The "
#~ "schedule of the cash flows is given in @dates array.  The first date "
#~ "indicates the beginning of the payment schedule.  @rate is the interest "
#~ "rate and @values are the payments.\n"
#~ "\n"
#~ "* If @values and @dates contain unequal number of values, XNPV returns "
#~ "the #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NPV,PV"
#~ msgstr ""
#~ "@FUNCTION=XNPV\n"
#~ "@SYNTAX=XNPV(rate,values,dates)\n"
#~ "@DESCRIPTION=XNPV calculates the net present value of an investment.  The "
#~ "schedule of the cash flows is given in @dates array.  The first date "
#~ "indicates the beginning of the payment schedule.  @rate is the interest "
#~ "rate and @values are the payments.\n"
#~ "\n"
#~ "* If @values and @dates contain unequal number of values, XNPV returns "
#~ "the #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=NPV,PV"

#~ msgid ""
#~ "@FUNCTION=XIRR\n"
#~ "@SYNTAX=XIRR(values,dates[,guess])\n"
#~ "@DESCRIPTION=XIRR calculates and returns the internal rate of return of "
#~ "an investment that has not necessarily periodic payments.  This function "
#~ "is closely related to the net present value function (NPV and XNPV).  The "
#~ "XIRR is the interest rate for a series of cash flows where the XNPV is "
#~ "zero.\n"
#~ "\n"
#~ "@values contains the series of cash flows generated by the investment.  "
#~ "@dates contains the dates of the payments.  The first date describes the "
#~ "payment day of the initial payment and thus all the other dates should be "
#~ "after this date. The optional @guess is the initial value used in "
#~ "calculating the XIRR.  You do not have to use that, it is only provided "
#~ "for the Excel compatibility.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1:A5 contain the numbers -6000, 2134, 1422, "
#~ "1933, and 1422, and the cells B1:B5 contain the dates \"1999-01-15\", "
#~ "\"1999-04-04\", \"1999-05-09\", \"2000-03-12\", and \"2000-05-1\". Then\n"
#~ "XIRR(A1:A5,B1:B5) returns 0.224838. \n"
#~ "@SEEALSO=IRR,XNPV"
#~ msgstr ""
#~ "@FUNCTION=XIRR\n"
#~ "@SYNTAX=XIRR(values,dates[,guess])\n"
#~ "@DESCRIPTION=XIRR calculates and returns the internal rate of return of "
#~ "an investment that has not necessarily periodic payments.  This function "
#~ "is closely related to the net present value function (NPV and XNPV).  The "
#~ "XIRR is the interest rate for a series of cash flows where the XNPV is "
#~ "zero.\n"
#~ "\n"
#~ "@values contains the series of cash flows generated by the investment.  "
#~ "@dates contains the dates of the payments.  The first date describes the "
#~ "payment day of the initial payment and thus all the other dates should be "
#~ "after this date. The optional @guess is the initial value used in "
#~ "calculating the XIRR.  You do not have to use that, it is only provided "
#~ "for the Excel compatibility.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1:A5 contain the numbers -6000, 2134, 1422, "
#~ "1933, and 1422, and the cells B1:B5 contain the dates \"1999-01-15\", "
#~ "\"1999-04-04\", \"1999-05-09\", \"2000-03-12\", and \"2000-05-1\". Then\n"
#~ "XIRR(A1:A5,B1:B5) returns 0.224838. \n"
#~ "@SEEALSO=IRR,XNPV"

#~ msgid ""
#~ "@FUNCTION=FV\n"
#~ "@SYNTAX=FV(rate,nper,pmt[,pv,type])\n"
#~ "@DESCRIPTION=FV computes the future value of an investment. This is based "
#~ "on periodic, constant payments and a constant interest rate. The interest "
#~ "rate per period is @rate, @nper is the number of periods in an annuity, "
#~ "@pmt is the payment made each period, @pv is the present value and @type "
#~ "is when the payment is made.\n"
#~ "\n"
#~ "* If @type = 1 then the payment is made at the beginning of the period.\n"
#~ "* If @type = 0 it is made at the end of each period.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PV,PMT,PPMT"
#~ msgstr ""
#~ "@FUNCTION=FV\n"
#~ "@SYNTAX=FV(rate,nper,pmt[,pv,type])\n"
#~ "@DESCRIPTION=FV computes the future value of an investment. This is based "
#~ "on periodic, constant payments and a constant interest rate. The interest "
#~ "rate per period is @rate, @nper is the number of periods in an annuity, "
#~ "@pmt is the payment made each period, @pv is the present value and @type "
#~ "is when the payment is made.\n"
#~ "\n"
#~ "* If @type = 1 then the payment is made at the beginning of the period.\n"
#~ "* If @type = 0 it is made at the end of each period.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PV,PMT,PPMT"

#~ msgid ""
#~ "@FUNCTION=PMT\n"
#~ "@SYNTAX=PMT(rate,nper,pv[,fv,type])\n"
#~ "@DESCRIPTION=PMT returns the amount of payment for a loan based on a "
#~ "constant interest rate and constant payments (each payment is equal "
#~ "amount).\n"
#~ "\n"
#~ "@rate is the constant interest rate.\n"
#~ "@nper is the overall number of payments.\n"
#~ "@pv is the present value.\n"
#~ "@fv is the future value.\n"
#~ "@type is the type of the payment: 0 means at the end of the period and 1 "
#~ "means at the beginning of the period.\n"
#~ "\n"
#~ "* If @fv is omitted, Gnumeric assumes it to be zero.\n"
#~ "* If @type is omitted, Gnumeric assumes it to be zero.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PPMT,PV,FV"
#~ msgstr ""
#~ "@FUNCTION=PMT\n"
#~ "@SYNTAX=PMT(rate,nper,pv[,fv,type])\n"
#~ "@DESCRIPTION=PMT returns the amount of payment for a loan based on a "
#~ "constant interest rate and constant payments (each payment is equal "
#~ "amount).\n"
#~ "\n"
#~ "@rate is the constant interest rate.\n"
#~ "@nper is the overall number of payments.\n"
#~ "@pv is the present value.\n"
#~ "@fv is the future value.\n"
#~ "@type is the type of the payment: 0 means at the end of the period and 1 "
#~ "means at the beginning of the period.\n"
#~ "\n"
#~ "* If @fv is omitted, Gnumeric assumes it to be zero.\n"
#~ "* If @type is omitted, Gnumeric assumes it to be zero.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PPMT,PV,FV"

#~ msgid ""
#~ "@FUNCTION=IPMT\n"
#~ "@SYNTAX=IPMT(rate,per,nper,pv[,fv,type])\n"
#~ "@DESCRIPTION=IPMT calculates the amount of a payment of an annuity going "
#~ "towards interest.\n"
#~ "\n"
#~ "Formula for IPMT is:\n"
#~ "\n"
#~ "IPMT(PER) = -PRINCIPAL(PER-1) * INTEREST_RATE\n"
#~ "\n"
#~ "where:\n"
#~ "\n"
#~ "PRINCIPAL(PER-1) = amount of the remaining principal from last period\n"
#~ "\n"
#~ "* If @fv is omitted, it is assumed to be 0.\n"
#~ "* If @type is omitted, it is assumed to be 0.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PPMT,PV,FV"
#~ msgstr ""
#~ "@FUNCTION=IPMT\n"
#~ "@SYNTAX=IPMT(rate,per,nper,pv[,fv,type])\n"
#~ "@DESCRIPTION=IPMT calculates the amount of a payment of an annuity going "
#~ "towards interest.\n"
#~ "\n"
#~ "Formula for IPMT is:\n"
#~ "\n"
#~ "IPMT(PER) = -PRINCIPAL(PER-1) * INTEREST_RATE\n"
#~ "\n"
#~ "where:\n"
#~ "\n"
#~ "PRINCIPAL(PER-1) = amount of the remaining principal from last period\n"
#~ "\n"
#~ "* If @fv is omitted, it is assumed to be 0.\n"
#~ "* If @type is omitted, it is assumed to be 0.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PPMT,PV,FV"

#~ msgid ""
#~ "@FUNCTION=PPMT\n"
#~ "@SYNTAX=PPMT(rate,per,nper,pv[,fv,type])\n"
#~ "@DESCRIPTION=PPMT calculates the amount of a payment of an annuity going "
#~ "towards principal.\n"
#~ "\n"
#~ "Formula for it is:\n"
#~ "PPMT(per) = PMT - IPMT(per)\n"
#~ "where:\n"
#~ "\n"
#~ "PMT = Payment received on annuity\n"
#~ "IPMT(per) = amount of interest for period @per\n"
#~ "\n"
#~ "* If @fv is omitted, it is assumed to be 0.\n"
#~ "* If @type is omitted, it is assumed to be 0.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=IPMT,PV,FV"
#~ msgstr ""
#~ "@FUNCTION=PPMT\n"
#~ "@SYNTAX=PPMT(rate,per,nper,pv[,fv,type])\n"
#~ "@DESCRIPTION=PPMT calculates the amount of a payment of an annuity going "
#~ "towards principal.\n"
#~ "\n"
#~ "Formula for it is:\n"
#~ "PPMT(per) = PMT - IPMT(per)\n"
#~ "where:\n"
#~ "\n"
#~ "PMT = Payment received on annuity\n"
#~ "IPMT(per) = amount of interest for period @per\n"
#~ "\n"
#~ "* If @fv is omitted, it is assumed to be 0.\n"
#~ "* If @type is omitted, it is assumed to be 0.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=IPMT,PV,FV"

#~ msgid ""
#~ "@FUNCTION=NPER\n"
#~ "@SYNTAX=NPER(rate,pmt,pv[,fv,type])\n"
#~ "@DESCRIPTION=NPER calculates number of periods of an investment based on "
#~ "periodic constant payments and a constant interest rate.\n"
#~ "\n"
#~ "The interest rate per period is @rate, @pmt is the payment made each "
#~ "period, @pv is the present value, @fv is the future value and @type is "
#~ "when the payments are due. If @type = 1, payments are due at the "
#~ "beginning of the period, if @type = 0, payments are due at the end of the "
#~ "period.\n"
#~ "\n"
#~ "* If @rate <= 0, NPER returns #DIV0 error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example, if you deposit $10,000 in a savings account that earns an "
#~ "interest rate of 6%. To calculate how many years it will take to double "
#~ "your investment use NPER as follows:\n"
#~ "=NPER(0.06, 0, -10000, 20000,0)returns 11.895661046 which indicates that "
#~ "you can double your money just before the end of the 12th year.\n"
#~ "@SEEALSO=PPMT,PV,FV"
#~ msgstr ""
#~ "@FUNCTION=NPER\n"
#~ "@SYNTAX=NPER(rate,pmt,pv[,fv,type])\n"
#~ "@DESCRIPTION=NPER calculates number of periods of an investment based on "
#~ "periodic constant payments and a constant interest rate.\n"
#~ "\n"
#~ "The interest rate per period is @rate, @pmt is the payment made each "
#~ "period, @pv is the present value, @fv is the future value and @type is "
#~ "when the payments are due. If @type = 1, payments are due at the "
#~ "beginning of the period, if @type = 0, payments are due at the end of the "
#~ "period.\n"
#~ "\n"
#~ "* If @rate <= 0, NPER returns #DIV0 error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "For example, if you deposit £10,000 in a savings account that earns an "
#~ "interest rate of 6%. To calculate home many years it will take to double "
#~ "your investment use NPER as follows:\n"
#~ "=NPER(0.06, 0, -10000, 20000,0)returns 11.895661046 which indicates that "
#~ "you can double your money just before the end of the 12th year.\n"
#~ "@SEEALSO=PPMT,PV,FV"

#~ msgid ""
#~ "@FUNCTION=DURATION\n"
#~ "@SYNTAX=DURATION(settlement,maturity,coup,yield,frequency[,basis])\n"
#~ "@DESCRIPTION=DURATION calculates the duration of a security.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@coup The annual coupon rate as a percentage.\n"
#~ "@yield The annualized yield of the security as a percentage.\n"
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, DURATION returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=G_DURATION,MDURATION"
#~ msgstr ""
#~ "@FUNCTION=DURATION\n"
#~ "@SYNTAX=DURATION(settlement,maturity,coup,yield,frequency[,basis])\n"
#~ "@DESCRIPTION=DURATION calculates the duration of a security.\n"
#~ "\n"
#~ "@settlement is the settlement date of the security.\n"
#~ "@maturity is the maturity date of the security.\n"
#~ "@coup The annual coupon rate as a percentage.\n"
#~ "@yield The annualised yield of the security as a percentage.\n"
#~ "@frequency is the number of coupon payments per year. Allowed frequencies "
#~ "are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day "
#~ "counting system you want to use:\n"
#~ "\n"
#~ "  0  US 30/360\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "\n"
#~ "* If @frequency is other than 1, 2, or 4, DURATION returns #NUM! error.\n"
#~ "* If @basis is omitted, US 30/360 is applied.\n"
#~ "* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=G_DURATION,MDURATION"

#~ msgid ""
#~ "@FUNCTION=G_DURATION\n"
#~ "@SYNTAX=G_DURATION(rate,pv,fv)\n"
#~ "@DESCRIPTION=G_DURATION calculates number of periods needed for an "
#~ "investment to attain a desired value. This function is similar to FV and "
#~ "PV with a difference that we do not need give the direction of cash flows "
#~ "e.g. -100 for a cash outflow and +100 for a cash inflow.\n"
#~ "\n"
#~ "* If @rate <= 0, G_DURATION returns #DIV0 error.\n"
#~ "* If @fv = 0 or @pv = 0, G_DURATION returns #DIV0 error.\n"
#~ "* If @fv / @pv < 0, G_DURATION returns #VALUE error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PPMT,PV,FV,DURATION,MDURATION"
#~ msgstr ""
#~ "@FUNCTION=G_DURATION\n"
#~ "@SYNTAX=G_DURATION(rate,pv,fv)\n"
#~ "@DESCRIPTION=G_DURATION calculates number of periods needed for an "
#~ "investment to attain a desired value. This function is similar to FV and "
#~ "PV with a difference that we do not need give the direction of cash flows "
#~ "e.g. -100 for a cash outflow and +100 for a cash inflow.\n"
#~ "\n"
#~ "* If @rate <= 0, G_DURATION returns #DIV0 error.\n"
#~ "* If @fv = 0 or @pv = 0, G_DURATION returns #DIV0 error.\n"
#~ "* If @fv / @pv < 0, G_DURATION returns #VALUE error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=PPMT,PV,FV,DURATION,MDURATION"

#~ msgid ""
#~ "@FUNCTION=FVSCHEDULE\n"
#~ "@SYNTAX=FVSCHEDULE(principal,schedule)\n"
#~ "@DESCRIPTION=FVSCHEDULE returns the future value of given initial value "
#~ "after applying a series of compound periodic interest rates. The argument "
#~ "@principal is the present value; @schedule is an array of interest rates "
#~ "to apply. The @schedule argument must be a range of cells.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain interest rates 0.11, "
#~ "0.13, 0.09, 0.17, and 0.03.  Then\n"
#~ "FVSCHEDULE(3000,A1:A5) equals 4942.7911611.\n"
#~ "@SEEALSO=PV,FV"
#~ msgstr ""
#~ "@FUNCTION=FVSCHEDULE\n"
#~ "@SYNTAX=FVSCHEDULE(principal,schedule)\n"
#~ "@DESCRIPTION=FVSCHEDULE returns the future value of given initial value "
#~ "after applying a series of compound periodic interest rates. The argument "
#~ "@principal is the present value; @schedule is an array of interest rates "
#~ "to apply. The @schedule argument must be a range of cells.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain interest rates 0.11, "
#~ "0.13, 0.09, 0.17, and 0.03.  Then\n"
#~ "FVSCHEDULE(3000,A1:A5) equals 4942.7911611.\n"
#~ "@SEEALSO=PV,FV"

#~ msgid ""
#~ "@FUNCTION=EURO\n"
#~ "@SYNTAX=EURO(currency)\n"
#~ "@DESCRIPTION=EURO converts one Euro to a given national currency in the "
#~ "European monetary union.\n"
#~ "\n"
#~ "@currency is one of the following:\n"
#~ "\n"
#~ "    ATS\t(Austria)\n"
#~ "    BEF\t(Belgium)\n"
#~ "    DEM\t(Germany)\n"
#~ "    ESP\t(Spain)\n"
#~ "    EUR\t(Euro)\n"
#~ "    FIM\t(Finland)\n"
#~ "    FRF\t(France)\n"
#~ "    GRD\t(Greek)\n"
#~ "    IEP\t(Ireland)\n"
#~ "    ITL\t(Italy)\n"
#~ "    LUF\t(Luxembourg)\n"
#~ "    NLG\t(Netherlands)\n"
#~ "    PTE\t(Portugal)\n"
#~ "\n"
#~ "* If the given @currency is other than one of the above, EURO returns "
#~ "#NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EURO(\"DEM\") returns 1.95583.\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=EURO\n"
#~ "@SYNTAX=EURO(currency)\n"
#~ "@DESCRIPTION=EURO converts one Euro to a given national currency in the "
#~ "European monetary union.\n"
#~ "\n"
#~ "@currency is one of the following:\n"
#~ "\n"
#~ "    ATS\t(Austria)\n"
#~ "    BEF\t(Belgium)\n"
#~ "    DEM\t(Germany)\n"
#~ "    ESP\t(Spain)\n"
#~ "    EUR\t(Euro)\n"
#~ "    FIM\t(Finland)\n"
#~ "    FRF\t(France)\n"
#~ "    GRD\t(Greek)\n"
#~ "    IEP\t(Ireland)\n"
#~ "    ITL\t(Italy)\n"
#~ "    LUF\t(Luxembourg)\n"
#~ "    NLG\t(Netherlands)\n"
#~ "    PTE\t(Portugal)\n"
#~ "\n"
#~ "* If the given @currency is other than one of the above, EURO returns "
#~ "#NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EURO(\"DEM\") returns 1.95583.\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=EUROCONVERT\n"
#~ "@SYNTAX=EUROCONVERT(n,source,target)\n"
#~ "@DESCRIPTION=EUROCONVERT converts the currency value @n of @source "
#~ "currency to a target currency @target. Both currencies are given as three-"
#~ "letter strings using the ISO code system names.  The following currencies "
#~ "are available:\n"
#~ "\n"
#~ "    ATS\t(Austria)\n"
#~ "    BEF\t(Belgium)\n"
#~ "    DEM\t(Germany)\n"
#~ "    ESP\t(Spain)\n"
#~ "    EUR\t(Euro)\n"
#~ "    FIM\t(Finland)\n"
#~ "    FRF\t(France)\n"
#~ "    GRD\t(Greek)\n"
#~ "    IEP\t(Ireland)\n"
#~ "    ITL\t(Italy)\n"
#~ "    LUF\t(Luxembourg)\n"
#~ "    NLG\t(Netherlands)\n"
#~ "    PTE\t(Portugal)\n"
#~ "\n"
#~ "* If the given @source or @target is other than one of the above, "
#~ "EUROCONVERT returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EUROCONVERT(2.1,\"DEM\",\"EUR\") returns 1.07.\n"
#~ "@SEEALSO=EURO"
#~ msgstr ""
#~ "@FUNCTION=EUROCONVERT\n"
#~ "@SYNTAX=EUROCONVERT(n,source,target)\n"
#~ "@DESCRIPTION=EUROCONVERT converts the currency value @n of @source "
#~ "currency to a target currency @target. Both currencies are given as three-"
#~ "letter strings using the ISO code system names.  The following currencies "
#~ "are available:\n"
#~ "\n"
#~ "    ATS\t(Austria)\n"
#~ "    BEF\t(Belgium)\n"
#~ "    DEM\t(Germany)\n"
#~ "    ESP\t(Spain)\n"
#~ "    EUR\t(Euro)\n"
#~ "    FIM\t(Finland)\n"
#~ "    FRF\t(France)\n"
#~ "    GRD\t(Greek)\n"
#~ "    IEP\t(Ireland)\n"
#~ "    ITL\t(Italy)\n"
#~ "    LUF\t(Luxembourg)\n"
#~ "    NLG\t(Netherlands)\n"
#~ "    PTE\t(Portugal)\n"
#~ "\n"
#~ "* If the given @source or @target is other than one of the above, "
#~ "EUROCONVERT returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EUROCONVERT(2.1,\"DEM\",\"EUR\") returns 1.07.\n"
#~ "@SEEALSO=EURO"

#~ msgid ""
#~ "@FUNCTION=CUMIPMT\n"
#~ "@SYNTAX=CUMIPMT(rate,nper,pv,start_period,end_period,type)\n"
#~ "@DESCRIPTION=CUMIPMT returns the cumulative interest paid on a loan "
#~ "between @start_period and @end_period.\n"
#~ "\n"
#~ "* If @rate <= 0, CUMIPMT returns #NUM! error.\n"
#~ "* If @nper <= 0, CUMIPMT returns #NUM! error.\n"
#~ "* If @pv <= 0, CUMIPMT returns #NUM! error.\n"
#~ "* If @start_period < 1, CUMIPMT returns #NUM! error.\n"
#~ "* If @end_period < @start_period, CUMIPMT returns #NUM! error.\n"
#~ "* If @end_period > @nper, CUMIPMT returns #NUM! error.\n"
#~ "* If @type <> 0 and @type <> 1, CUMIPMT returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=CUMIPMT\n"
#~ "@SYNTAX=CUMIPMT(rate,nper,pv,start_period,end_period,type)\n"
#~ "@DESCRIPTION=CUMIPMT returns the cumulative interest paid on a loan "
#~ "between @start_period and @end_period.\n"
#~ "\n"
#~ "* If @rate <= 0, CUMIPMT returns #NUM! error.\n"
#~ "* If @nper <= 0, CUMIPMT returns #NUM! error.\n"
#~ "* If @pv <= 0, CUMIPMT returns #NUM! error.\n"
#~ "* If @start_period < 1, CUMIPMT returns #NUM! error.\n"
#~ "* If @end_period < @start_period, CUMIPMT returns #NUM! error.\n"
#~ "* If @end_period > @nper, CUMIPMT returns #NUM! error.\n"
#~ "* If @type <> 0 and @type <> 1, CUMIPMT returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=CUMPRINC\n"
#~ "@SYNTAX=CUMPRINC(rate,nper,pv,start_period,end_period,type)\n"
#~ "@DESCRIPTION=CUMPRINC returns the cumulative principal paid on a loan "
#~ "between @start_period and @end_period.\n"
#~ "\n"
#~ "* If @rate <= 0, CUMPRINC returns #NUM! error.\n"
#~ "* If @nper <= 0, CUMPRINC returns #NUM! error.\n"
#~ "* If @pv <= 0, CUMPRINC returns #NUM! error.\n"
#~ "* If @start_period < 1, CUMPRINC returns #NUM! error.\n"
#~ "* If @end_period < @start_period, CUMPRINC returns #NUM! error.\n"
#~ "* If @end_period > @nper, CUMPRINC returns #NUM! error.\n"
#~ "* If @type <> 0 and @type <> 1, CUMPRINC returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=CUMPRINC\n"
#~ "@SYNTAX=CUMPRINC(rate,nper,pv,start_period,end_period,type)\n"
#~ "@DESCRIPTION=CUMPRINC returns the cumulative principal paid on a loan "
#~ "between @start_period and @end_period.\n"
#~ "\n"
#~ "* If @rate <= 0, CUMPRINC returns #NUM! error.\n"
#~ "* If @nper <= 0, CUMPRINC returns #NUM! error.\n"
#~ "* If @pv <= 0, CUMPRINC returns #NUM! error.\n"
#~ "* If @start_period < 1, CUMPRINC returns #NUM! error.\n"
#~ "* If @end_period < @start_period, CUMPRINC returns #NUM! error.\n"
#~ "* If @end_period > @nper, CUMPRINC returns #NUM! error.\n"
#~ "* If @type <> 0 and @type <> 1, CUMPRINC returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=MDURATION\n"
#~ "@SYNTAX=MDURATION(settlement,maturity,coupon,yield,frequency[,basis])\n"
#~ "@DESCRIPTION=MDURATION returns the Macauley duration for a security with "
#~ "par value 100.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "* If @settlement or @maturity are not valid dates, MDURATION returns "
#~ "#NUM! error.\n"
#~ "* If @frequency is other than 1, 2, or 4, MDURATION returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DURATION,G_DURATION"
#~ msgstr ""
#~ "@FUNCTION=MDURATION\n"
#~ "@SYNTAX=MDURATION(settlement,maturity,coupon,yield,frequency[,basis])\n"
#~ "@DESCRIPTION=MDURATION returns the Macauley duration for a security with "
#~ "par value 100.\n"
#~ "\n"
#~ "@basis is the type of day counting system you want to use:\n"
#~ "\n"
#~ "  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
#~ "  1  actual days/actual days\n"
#~ "  2  actual days/360\n"
#~ "  3  actual days/365\n"
#~ "  4  European 30/360\n"
#~ "  5  European+ 30/360\n"
#~ "\n"
#~ "* If @settlement or @maturity are not valid dates, MDURATION returns "
#~ "#NUM! error.\n"
#~ "* If @frequency is other than 1, 2, or 4, MDURATION returns #NUM! error.\n"
#~ "* If @basis is omitted, MSRB 30/360 is applied.\n"
#~ "* If @basis is invalid, #NUM! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DURATION,G_DURATION"

#~ msgid ""
#~ "@FUNCTION=VDB\n"
#~ "@SYNTAX=VDB(cost,salvage,life,start_period,end_period[,factor,switch])\n"
#~ "@DESCRIPTION=VDB calculates the depreciation of an asset for a given "
#~ "period or partial period using the double-declining balance method.\n"
#~ "\n"
#~ "* If @start_period < 0, VDB returns #NUM! error.\n"
#~ "* If @start_period > @end_period, VDB returns #NUM! error.\n"
#~ "* If @end_period > @life, VDB returns #NUM! error.\n"
#~ "* If @cost < 0, VDB returns #NUM! error.\n"
#~ "* If @salvage > @cost, VDB returns #NUM! error.\n"
#~ "* If @factor <= 0, VDB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DB"
#~ msgstr ""
#~ "@FUNCTION=VDB\n"
#~ "@SYNTAX=VDB(cost,salvage,life,start_period,end_period[,factor,switch])\n"
#~ "@DESCRIPTION=VDB calculates the depreciation of an asset for a given "
#~ "period or partial period using the double-declining balance method.\n"
#~ "\n"
#~ "* If @start_period < 0, VDB returns #NUM! error.\n"
#~ "* If @start_period > @end_period, VDB returns #NUM! error.\n"
#~ "* If @end_period > @life, VDB returns #NUM! error.\n"
#~ "* If @cost < 0, VDB returns #NUM! error.\n"
#~ "* If @salvage > @cost, VDB returns #NUM! error.\n"
#~ "* If @factor <= 0, VDB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=DB"

#~ msgid ""
#~ "@FUNCTION=CELL\n"
#~ "@SYNTAX=CELL(type,ref)\n"
#~ "@DESCRIPTION=CELL returns information about the formatting, location, or "
#~ "contents of a cell.\n"
#~ "\n"
#~ "@type specifies the type of information you want to obtain:\n"
#~ "\n"
#~ "  address    \tReturns the given cell reference as text.\n"
#~ "  col        \t\tReturns the number of the column in @ref.\n"
#~ "  contents   \tReturns the contents of the cell in @ref.\n"
#~ "  format     \t\tReturns the code of the format of the cell.\n"
#~ "  parentheses\tReturns 1 if @ref contains a negative value\n"
#~ "             \t\tand its format displays it with parentheses.\n"
#~ "  row        \t\tReturns the number of the row in @ref.\n"
#~ "  width      \t\tReturns the column width.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Cell(\"format\",A1) returns the code of the format of the cell A1.\n"
#~ "\n"
#~ "@SEEALSO=INDIRECT"
#~ msgstr ""
#~ "@FUNCTION=CELL\n"
#~ "@SYNTAX=CELL(type,ref)\n"
#~ "@DESCRIPTION=CELL returns information about the formatting, location, or "
#~ "contents of a cell.\n"
#~ "\n"
#~ "@type specifies the type of information you want to obtain:\n"
#~ "\n"
#~ "  address    \tReturns the given cell reference as text.\n"
#~ "  col        \t\tReturns the number of the column in @ref.\n"
#~ "  contents   \tReturns the contents of the cell in @ref.\n"
#~ "  format     \t\tReturns the code of the format of the cell.\n"
#~ "  parentheses\tReturns 1 if @ref contains a negative value\n"
#~ "             \t\tand its format displays it with parentheses.\n"
#~ "  row        \t\tReturns the number of the row in @ref.\n"
#~ "  width      \t\tReturns the column width.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Cell(\"format\",A1) returns the code of the format of the cell A1.\n"
#~ "\n"
#~ "@SEEALSO=INDIRECT"

#~ msgid ""
#~ "@FUNCTION=EXPRESSION\n"
#~ "@SYNTAX=EXPRESSION(cell)\n"
#~ "@DESCRIPTION=EXPRESSION returns expression in @cell as a string, or empty "
#~ "if the cell is not an expression.\n"
#~ "@EXAMPLES=\n"
#~ "entering '=EXPRESSION(A3)' in A2 = empty (assuming there is nothing in "
#~ "A3).\n"
#~ "entering '=EXPRESSION(A2)' in A1 = 'EXPRESSION(A3)'.\n"
#~ "\n"
#~ "@SEEALSO=TEXT"
#~ msgstr ""
#~ "@FUNCTION=EXPRESSION\n"
#~ "@SYNTAX=EXPRESSION(cell)\n"
#~ "@DESCRIPTION=EXPRESSION returns expression in @cell as a string, or empty "
#~ "if the cell is not an expression.\n"
#~ "@EXAMPLES=\n"
#~ "entering '=EXPRESSION(A3)' in A2 = empty (assuming there is nothing in "
#~ "A3).\n"
#~ "entering '=EXPRESSION(A2)' in A1 = 'EXPRESSION(A3)'.\n"
#~ "\n"
#~ "@SEEALSO=TEXT"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=GET.FORMULA\n"
#~ "@SYNTAX=GET.FORMULA(cell)\n"
#~ "@DESCRIPTION=EXPRESSION returns expression in @cell as a string, or empty "
#~ "if the cell is not an expression.\n"
#~ "@EXAMPLES=\n"
#~ "entering '=GET.FORMULA(A3)' in A2 = empty (assuming there is nothing in "
#~ "A3).\n"
#~ "entering '=GET.FORMULA(A2)' in A1 = '=GET.FORMULA(A3)'.\n"
#~ "\n"
#~ "@SEEALSO=EXPRESSION"
#~ msgstr ""
#~ "@FUNCTION=EXPRESSION\n"
#~ "@SYNTAX=EXPRESSION(cell)\n"
#~ "@DESCRIPTION=EXPRESSION returns expression in @cell as a string, or empty "
#~ "if the cell is not an expression.\n"
#~ "@EXAMPLES=\n"
#~ "entering '=EXPRESSION(A3)' in A2 = empty (assuming there is nothing in "
#~ "A3).\n"
#~ "entering '=EXPRESSION(A2)' in A1 = 'EXPRESSION(A3)'.\n"
#~ "\n"
#~ "@SEEALSO=TEXT"

#~ msgid ""
#~ "@FUNCTION=COUNTBLANK\n"
#~ "@SYNTAX=COUNTBLANK(range)\n"
#~ "@DESCRIPTION=COUNTBLANK returns the number of blank cells in a @range.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUNTBLANK(A1:A20) returns the number of blank cell in A1:A20.\n"
#~ "\n"
#~ "@SEEALSO=COUNT"
#~ msgstr ""
#~ "@FUNCTION=COUNTBLANK\n"
#~ "@SYNTAX=COUNTBLANK(range)\n"
#~ "@DESCRIPTION=COUNTBLANK returns the number of blank cells in a @range.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COUNTBLANK(A1:A20) returns the number of blank cell in A1:A20.\n"
#~ "\n"
#~ "@SEEALSO=COUNT"

#~ msgid ""
#~ "@FUNCTION=ISERROR\n"
#~ "@SYNTAX=ISERROR(value)\n"
#~ "@DESCRIPTION=ISERROR returns a TRUE value if the expression has an "
#~ "error.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISERROR(NA()) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ERROR"
#~ msgstr ""
#~ "@FUNCTION=ISERROR\n"
#~ "@SYNTAX=ISERROR(value)\n"
#~ "@DESCRIPTION=ISERROR returns a TRUE value if the expression has an "
#~ "error.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISERROR(NA()) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ERROR"

#~ msgid ""
#~ "@FUNCTION=ISNA\n"
#~ "@SYNTAX=ISNA(value)\n"
#~ "@DESCRIPTION=ISNA returns TRUE if the value is the #N/A error value.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISNA(NA()) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=NA"
#~ msgstr ""
#~ "@FUNCTION=ISNA\n"
#~ "@SYNTAX=ISNA(value)\n"
#~ "@DESCRIPTION=ISNA returns TRUE if the value is the #N/A error value.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISNA(NA()) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=NA"

#~ msgid ""
#~ "@FUNCTION=ISERR\n"
#~ "@SYNTAX=ISERR(value)\n"
#~ "@DESCRIPTION=ISERR returns TRUE if the value is any error value except #N/"
#~ "A.\n"
#~ "\n"
#~ "* This function is Excel compatible. \n"
#~ "@EXAMPLES=\n"
#~ "ISERR(NA()) return FALSE.\n"
#~ "\n"
#~ "@SEEALSO=ISERROR"
#~ msgstr ""
#~ "@FUNCTION=ISERR\n"
#~ "@SYNTAX=ISERR(value)\n"
#~ "@DESCRIPTION=ISERR returns TRUE if the value is any error value except #N/"
#~ "A.\n"
#~ "\n"
#~ "* This function is Excel compatible. \n"
#~ "@EXAMPLES=\n"
#~ "ISERR(NA()) return FALSE.\n"
#~ "\n"
#~ "@SEEALSO=ISERROR"

#~ msgid ""
#~ "@FUNCTION=NA\n"
#~ "@SYNTAX=NA()\n"
#~ "@DESCRIPTION=NA returns the error value #N/A.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NA() equals #N/A error.\n"
#~ "\n"
#~ "@SEEALSO=ISNA"
#~ msgstr ""
#~ "@FUNCTION=NA\n"
#~ "@SYNTAX=NA()\n"
#~ "@DESCRIPTION=NA returns the error value #N/A.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NA() equals #N/A error.\n"
#~ "\n"
#~ "@SEEALSO=ISNA"

#~ msgid ""
#~ "@FUNCTION=ERROR\n"
#~ "@SYNTAX=ERROR(text)\n"
#~ "@DESCRIPTION=ERROR return the specified error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ERROR(\"#OWN ERROR\").\n"
#~ "\n"
#~ "@SEEALSO=ISERROR"
#~ msgstr ""
#~ "@FUNCTION=ERROR\n"
#~ "@SYNTAX=ERROR(text)\n"
#~ "@DESCRIPTION=ERROR return the specified error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ERROR(\"#OWN ERROR\").\n"
#~ "\n"
#~ "@SEEALSO=ISERROR"

#~ msgid ""
#~ "@FUNCTION=ISBLANK\n"
#~ "@SYNTAX=ISBLANK(value)\n"
#~ "@DESCRIPTION=ISBLANK returns TRUE if the value is blank.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISBLANK(A1).\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ISBLANK\n"
#~ "@SYNTAX=ISBLANK(value)\n"
#~ "@DESCRIPTION=ISBLANK returns TRUE if the value is blank.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISBLANK(A1).\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ISEVEN\n"
#~ "@SYNTAX=ISEVEN(value)\n"
#~ "@DESCRIPTION=ISEVEN returns TRUE if the number is even.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISEVEN(4) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ISODD"
#~ msgstr ""
#~ "@FUNCTION=ISEVEN\n"
#~ "@SYNTAX=ISEVEN(value)\n"
#~ "@DESCRIPTION=ISEVEN returns TRUE if the number is even.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISEVEN(4) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ISODD"

#~ msgid ""
#~ "@FUNCTION=ISLOGICAL\n"
#~ "@SYNTAX=ISLOGICAL(value)\n"
#~ "@DESCRIPTION=ISLOGICAL returns TRUE if the value is a logical value.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISLOGICAL(A1).\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ISLOGICAL\n"
#~ "@SYNTAX=ISLOGICAL(value)\n"
#~ "@DESCRIPTION=ISLOGICAL returns TRUE if the value is a logical value.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISLOGICAL(A1).\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ISNONTEXT\n"
#~ "@SYNTAX=ISNONTEXT(value)\n"
#~ "@DESCRIPTION=ISNONTEXT Returns TRUE if the value is not text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISNONTEXT(\"text\") equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=ISTEXT"
#~ msgstr ""
#~ "@FUNCTION=ISNONTEXT\n"
#~ "@SYNTAX=ISNONTEXT(value)\n"
#~ "@DESCRIPTION=ISNONTEXT Returns TRUE if the value is not text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISNONTEXT(\"text\") equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=ISTEXT"

#~ msgid ""
#~ "@FUNCTION=ISNUMBER\n"
#~ "@SYNTAX=ISNUMBER(value)\n"
#~ "@DESCRIPTION=ISNUMBER returns TRUE if the value is a number.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISNUMBER(\"text\") equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ISNUMBER\n"
#~ "@SYNTAX=ISNUMBER(value)\n"
#~ "@DESCRIPTION=ISNUMBER returns TRUE if the value is a number.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISNUMBER(\"text\") equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ISODD\n"
#~ "@SYNTAX=ISODD(value)\n"
#~ "@DESCRIPTION=ISODD returns TRUE if the number is odd.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISODD(3) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ISEVEN"
#~ msgstr ""
#~ "@FUNCTION=ISODD\n"
#~ "@SYNTAX=ISODD(value)\n"
#~ "@DESCRIPTION=ISODD returns TRUE if the number is odd.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISODD(3) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ISEVEN"

#~ msgid ""
#~ "@FUNCTION=ISREF\n"
#~ "@SYNTAX=ISREF(value)\n"
#~ "@DESCRIPTION=ISREF returns TRUE if the value is a reference.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISREF(A1) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ISREF\n"
#~ "@SYNTAX=ISREF(value)\n"
#~ "@DESCRIPTION=ISREF returns TRUE if the value is a reference.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISREF(A1) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=ISTEXT\n"
#~ "@SYNTAX=ISTEXT(value)\n"
#~ "@DESCRIPTION=ISTEXT returns TRUE if the value is text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISTEXT(\"text\") equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ISNONTEXT"
#~ msgstr ""
#~ "@FUNCTION=ISTEXT\n"
#~ "@SYNTAX=ISTEXT(value)\n"
#~ "@DESCRIPTION=ISTEXT returns TRUE if the value is text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ISTEXT(\"text\") equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=ISNONTEXT"

#~ msgid ""
#~ "@FUNCTION=N\n"
#~ "@SYNTAX=N(value)\n"
#~ "@DESCRIPTION=N returns a value converted to a number.  Strings containing "
#~ "text are converted to the zero value.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "N(\"42\") equals 42.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=N\n"
#~ "@SYNTAX=N(value)\n"
#~ "@DESCRIPTION=N returns a value converted to a number.  Strings containing "
#~ "text are converted to the zero value.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "N(\"42\") equals 42.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=TYPE\n"
#~ "@SYNTAX=TYPE(value)\n"
#~ "@DESCRIPTION=TYPE returns a number indicating the data type of a value.\n"
#~ "\n"
#~ "1  == number\n"
#~ "2  == text\n"
#~ "4  == boolean\n"
#~ "16 == error\n"
#~ "64 == array\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TYPE(3) equals 1.\n"
#~ "TYPE(\"text\") equals 2.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=TYPE\n"
#~ "@SYNTAX=TYPE(value)\n"
#~ "@DESCRIPTION=TYPE returns a number indicating the data type of a value.\n"
#~ "\n"
#~ "1  == number\n"
#~ "2  == text\n"
#~ "4  == boolean\n"
#~ "16 == error\n"
#~ "64 == array\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TYPE(3) equals 1.\n"
#~ "TYPE(\"text\") equals 2.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=GETENV\n"
#~ "@SYNTAX=GETENV(string)\n"
#~ "@DESCRIPTION=GETENV retrieves a value from the execution environment.\n"
#~ "\n"
#~ "* If the variable specified by @string does not exist, #N/A! will be "
#~ "returned.  Note, that variable names are case sensitive.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=GETENV\n"
#~ "@SYNTAX=GETENV(string)\n"
#~ "@DESCRIPTION=GETENV retrieves a value from the execution environment.\n"
#~ "\n"
#~ "* If the variable specified by @string does not exist, #N/A! will be "
#~ "returned.  Note, that variable names are case sensitive.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=AND\n"
#~ "@SYNTAX=AND(b1, b2, ...)\n"
#~ "@DESCRIPTION=AND implements the logical AND function: the result is TRUE "
#~ "if all of the expressions evaluate to TRUE, otherwise it returns FALSE.\n"
#~ "\n"
#~ "@b1 through @bN are expressions that should evaluate to TRUE or FALSE.  "
#~ "If an integer or floating point value is provided, zero is considered "
#~ "FALSE and anything else is TRUE.\n"
#~ "\n"
#~ "* If the values contain strings or empty cells those values are ignored.\n"
#~ "* If no logical values are provided, then the error #VALUE! is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AND(TRUE,TRUE) equals TRUE.\n"
#~ "AND(TRUE,FALSE) equals FALSE.\n"
#~ "\n"
#~ "Let us assume that A1 holds number five and A2 number one.  Then\n"
#~ "AND(A1>3,A2<2) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=OR, NOT"
#~ msgstr ""
#~ "@FUNCTION=AND\n"
#~ "@SYNTAX=AND(b1, b2, ...)\n"
#~ "@DESCRIPTION=AND implements the logical AND function: the result is TRUE "
#~ "if all of the expressions evaluate to TRUE, otherwise it returns FALSE.\n"
#~ "\n"
#~ "@b1 through @bN are expressions that should evaluate to TRUE or FALSE.  "
#~ "If an integer or floating point value is provided, zero is considered "
#~ "FALSE and anything else is TRUE.\n"
#~ "\n"
#~ "* If the values contain strings or empty cells those values are ignored.\n"
#~ "* If no logical values are provided, then the error #VALUE! is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AND(TRUE,TRUE) equals TRUE.\n"
#~ "AND(TRUE,FALSE) equals FALSE.\n"
#~ "\n"
#~ "Let us assume that A1 holds number five and A2 number one.  Then\n"
#~ "AND(A1>3,A2<2) equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=OR, NOT"

#~ msgid ""
#~ "@FUNCTION=NOT\n"
#~ "@SYNTAX=NOT(number)\n"
#~ "@DESCRIPTION=NOT implements the logical NOT function: the result is TRUE "
#~ "if the @number is zero;  otherwise the result is FALSE.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NOT(0) equals TRUE.\n"
#~ "NOT(TRUE) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=AND, OR"
#~ msgstr ""
#~ "@FUNCTION=NOT\n"
#~ "@SYNTAX=NOT(number)\n"
#~ "@DESCRIPTION=NOT implements the logical NOT function: the result is TRUE "
#~ "if the @number is zero;  otherwise the result is FALSE.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NOT(0) equals TRUE.\n"
#~ "NOT(TRUE) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=AND, OR"

#~ msgid ""
#~ "@FUNCTION=OR\n"
#~ "@SYNTAX=OR(b1, b2, ...)\n"
#~ "@DESCRIPTION=OR implements the logical OR function: the result is TRUE if "
#~ "any of the values evaluated to TRUE.\n"
#~ "\n"
#~ "@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If "
#~ "an integer or floating point value is provided, zero is considered FALSE "
#~ "and anything else is TRUE.\n"
#~ "\n"
#~ "* If the values contain strings or empty cells those values are ignored.\n"
#~ "* If no logical values are provided, then the error #VALUE! is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OR(TRUE,FALSE) equals TRUE.\n"
#~ "OR(3>4,4<3) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=AND, NOT"
#~ msgstr ""
#~ "@FUNCTION=OR\n"
#~ "@SYNTAX=OR(b1, b2, ...)\n"
#~ "@DESCRIPTION=OR implements the logical OR function: the result is TRUE if "
#~ "any of the values evaluated to TRUE.\n"
#~ "\n"
#~ "@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If "
#~ "an integer or floating point value is provided, zero is considered FALSE "
#~ "and anything else is TRUE.\n"
#~ "\n"
#~ "* If the values contain strings or empty cells those values are ignored.\n"
#~ "* If no logical values are provided, then the error #VALUE! is returned.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "OR(TRUE,FALSE) equals TRUE.\n"
#~ "OR(3>4,4<3) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=AND, NOT"

#~ msgid ""
#~ "@FUNCTION=XOR\n"
#~ "@SYNTAX=XOR(b1, b2, ...)\n"
#~ "@DESCRIPTION=XOR implements the logical exclusive OR function: the result "
#~ "is TRUE if an odd number of the values evaluated to TRUE.\n"
#~ "\n"
#~ "@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If "
#~ "an integer or floating point value is provided, zero is considered FALSE "
#~ "and anything else is TRUE.\n"
#~ "\n"
#~ "* If the values contain strings or empty cells those values are ignored.\n"
#~ "* If no logical values are provided, then the error #VALUE! is returned.\n"
#~ "@EXAMPLES=\n"
#~ "XOR(TRUE,FALSE) equals TRUE.\n"
#~ "XOR(3>4,4<3) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=OR, AND, NOT"
#~ msgstr ""
#~ "@FUNCTION=XOR\n"
#~ "@SYNTAX=XOR(b1, b2, ...)\n"
#~ "@DESCRIPTION=XOR implements the logical exclusive OR function: the result "
#~ "is TRUE if an odd number of the values evaluated to TRUE.\n"
#~ "\n"
#~ "@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If "
#~ "an integer or floating point value is provided, zero is considered FALSE "
#~ "and anything else is TRUE.\n"
#~ "\n"
#~ "* If the values contain strings or empty cells those values are ignored.\n"
#~ "* If no logical values are provided, then the error #VALUE! is returned.\n"
#~ "@EXAMPLES=\n"
#~ "XOR(TRUE,FALSE) equals TRUE.\n"
#~ "XOR(3>4,4<3) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=OR, AND, NOT"

#~ msgid ""
#~ "@FUNCTION=IF\n"
#~ "@SYNTAX=IF(condition[,if-true,if-false])\n"
#~ "@DESCRIPTION=IF function can be used to evaluate conditionally other "
#~ "expressions. IF evaluates @condition.  If @condition returns a non-zero "
#~ "value the result of the IF expression is the @if-true expression, "
#~ "otherwise IF evaluates to the value of @if-false.\n"
#~ "\n"
#~ "* If omitted @if-true defaults to TRUE and @if-false to FALSE.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IF(FALSE,TRUE,FALSE) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=IF\n"
#~ "@SYNTAX=IF(condition[,if-true,if-false])\n"
#~ "@DESCRIPTION=IF function can be used to evaluate conditionally other "
#~ "expressions. IF evaluates @condition.  If @condition returns a non-zero "
#~ "value the result of the IF expression is the @if-true expression, "
#~ "otherwise IF evaluates to the value of @if-false.\n"
#~ "\n"
#~ "* If omitted @if-true defaults to TRUE and @if-false to FALSE.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "IF(FALSE,TRUE,FALSE) equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=TRUE\n"
#~ "@SYNTAX=TRUE()\n"
#~ "@DESCRIPTION=TRUE returns boolean value true.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TRUE() equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=FALSE"
#~ msgstr ""
#~ "@FUNCTION=TRUE\n"
#~ "@SYNTAX=TRUE()\n"
#~ "@DESCRIPTION=TRUE returns boolean value true.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TRUE() equals TRUE.\n"
#~ "\n"
#~ "@SEEALSO=FALSE"

#~ msgid ""
#~ "@FUNCTION=FALSE\n"
#~ "@SYNTAX=FALSE()\n"
#~ "@DESCRIPTION=FALSE returns boolean value false.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FALSE() equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=TRUE"
#~ msgstr ""
#~ "@FUNCTION=FALSE\n"
#~ "@SYNTAX=FALSE()\n"
#~ "@DESCRIPTION=FALSE returns boolean value false.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FALSE() equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=TRUE"

#~ msgid ""
#~ "@FUNCTION=ADDRESS\n"
#~ "@SYNTAX=ADDRESS(row_num,col_num[,abs_num,a1,text])\n"
#~ "@DESCRIPTION=ADDRESS returns a cell address as text for specified row and "
#~ "column numbers.\n"
#~ "\n"
#~ "@a1 is a logical value that specifies the reference style.  If @a1 is "
#~ "TRUE or omitted, ADDRESS returns an A1-style reference, i.e. $D$4.  "
#~ "Otherwise ADDRESS returns an R1C1-style reference, i.e. R4C4.\n"
#~ "\n"
#~ "@text specifies the name of the worksheet to be used as the external "
#~ "reference.\n"
#~ "\n"
#~ "* If @abs_num is 1 or omitted, ADDRESS returns absolute reference.\n"
#~ "* If @abs_num is 2 ADDRESS returns absolute row and relative column.\n"
#~ "* If @abs_num is 3 ADDRESS returns relative row and absolute column.\n"
#~ "* If @abs_num is 4 ADDRESS returns relative reference.\n"
#~ "* If @abs_num is greater than 4 ADDRESS returns #VALUE! error.\n"
#~ "* If @row_num or @col_num is less than one, ADDRESS returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ADDRESS(5,4) equals \"$D$5\".\n"
#~ "ADDRESS(5,4,4) equals \"D5\".\n"
#~ "ADDRESS(5,4,3,FALSE) equals \"R[5]C4\".\n"
#~ "\n"
#~ "@SEEALSO=COLUMNNUMBER"
#~ msgstr ""
#~ "@FUNCTION=ADDRESS\n"
#~ "@SYNTAX=ADDRESS(row_num,col_num[,abs_num,a1,text])\n"
#~ "@DESCRIPTION=ADDRESS returns a cell address as text for specified row and "
#~ "column numbers.\n"
#~ "\n"
#~ "@a1 is a logical value that specifies the reference style.  If @a1 is "
#~ "TRUE or omitted, ADDRESS returns an A1-style reference, i.e. $D$4.  "
#~ "Otherwise ADDRESS returns an R1C1-style reference, i.e. R4C4.\n"
#~ "\n"
#~ "@text specifies the name of the worksheet to be used as the external "
#~ "reference.\n"
#~ "\n"
#~ "* If @abs_num is 1 or omitted, ADDRESS returns absolute reference.\n"
#~ "* If @abs_num is 2 ADDRESS returns absolute row and relative column.\n"
#~ "* If @abs_num is 3 ADDRESS returns relative row and absolute column.\n"
#~ "* If @abs_num is 4 ADDRESS returns relative reference.\n"
#~ "* If @abs_num is greater than 4 ADDRESS returns #VALUE! error.\n"
#~ "* If @row_num or @col_num is less than one, ADDRESS returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ADDRESS(5,4) equals \"$D$5\".\n"
#~ "ADDRESS(5,4,4) equals \"D5\".\n"
#~ "ADDRESS(5,4,3,FALSE) equals \"R[5]C4\".\n"
#~ "\n"
#~ "@SEEALSO=COLUMNNUMBER"

#~ msgid ""
#~ "@FUNCTION=AREAS\n"
#~ "@SYNTAX=AREAS(reference)\n"
#~ "@DESCRIPTION=AREAS returns the number of areas in @reference. \n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AREAS((A1,B2,C3)) equals 3.\n"
#~ "\n"
#~ "@SEEALSO=ADDRESS,INDEX,INDIRECT,OFFSET"
#~ msgstr ""
#~ "@FUNCTION=AREAS\n"
#~ "@SYNTAX=AREAS(reference)\n"
#~ "@DESCRIPTION=AREAS returns the number of areas in @reference. \n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "AREAS((A1,B2,C3)) equals 3.\n"
#~ "\n"
#~ "@SEEALSO=ADDRESS,INDEX,INDIRECT,OFFSET"

#~ msgid ""
#~ "@FUNCTION=CHOOSE\n"
#~ "@SYNTAX=CHOOSE(index[,value1][,value2]...)\n"
#~ "@DESCRIPTION=CHOOSE returns the value of index @index. @index is rounded "
#~ "to an integer if it is not.\n"
#~ "\n"
#~ "* If @index < 1 or @index > number of values, CHOOSE returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHOOSE(3,\"Apple\",\"Orange\",\"Grape\",\"Perry\") equals \"Grape\".\n"
#~ "\n"
#~ "@SEEALSO=IF"
#~ msgstr ""
#~ "@FUNCTION=CHOOSE\n"
#~ "@SYNTAX=CHOOSE(index[,value1][,value2]...)\n"
#~ "@DESCRIPTION=CHOOSE returns the value of index @index. @index is rounded "
#~ "to an integer if it is not.\n"
#~ "\n"
#~ "* If @index < 1 or @index > number of values, CHOOSE returns #VALUE! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHOOSE(3,\"Apple\",\"Orange\",\"Grape\",\"Perry\") equals \"Grape\".\n"
#~ "\n"
#~ "@SEEALSO=IF"

#~ msgid ""
#~ "@FUNCTION=VLOOKUP\n"
#~ "@SYNTAX=VLOOKUP(value,range,column[,approximate,as_index])\n"
#~ "@DESCRIPTION=VLOOKUP function finds the row in range that has a first "
#~ "column similar to @value.  If @approximate is not true it finds the row "
#~ "with an exact equivalence.  If @approximate is true, then the values must "
#~ "be sorted in order of ascending value for correct function; in this case "
#~ "it finds the row with value less than @value.  It returns the value in "
#~ "the row found at a 1-based offset in @column columns into the @range.  "
#~ "@as_index returns the 0-based offset that matched rather than the value.\n"
#~ "\n"
#~ "* VLOOKUP returns #NUM! if @column < 0.\n"
#~ "* VLOOKUP returns #REF! if @column falls outside @range.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=HLOOKUP"
#~ msgstr ""
#~ "@FUNCTION=VLOOKUP\n"
#~ "@SYNTAX=VLOOKUP(value,range,column[,approximate,as_index])\n"
#~ "@DESCRIPTION=VLOOKUP function finds the row in range that has a first "
#~ "column similar to @value.  If @approximate is not true it finds the row "
#~ "with an exact equivalence.  If @approximate is true, then the values must "
#~ "be sorted in order of ascending value for correct function; in this case "
#~ "it finds the row with value less than @value.  It returns the value in "
#~ "the row found at a 1-based offset in @column columns into the @range.  "
#~ "@as_index returns the 0-based offset that matched rather than the value.\n"
#~ "\n"
#~ "* VLOOKUP returns #NUM! if @column < 0.\n"
#~ "* VLOOKUP returns #REF! if @column falls outside @range.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=HLOOKUP"

#~ msgid ""
#~ "@FUNCTION=HLOOKUP\n"
#~ "@SYNTAX=HLOOKUP(value,range,row[,approximate,as_index])\n"
#~ "@DESCRIPTION=HLOOKUP function finds the col in range that has a first row "
#~ "cell similar to @value.  If @approximate is not true it finds the col "
#~ "with an exact equivalence.  If @approximate is true, then the values must "
#~ "be sorted in order of ascending value for correct function; in this case "
#~ "it finds the col with value less than @value it returns the value in the "
#~ "col found at a 1-based offset in @row rows into the @range.  @as_index "
#~ "returns the 0-based offset that matched rather than the value.\n"
#~ "\n"
#~ "* HLOOKUP returns #NUM! if @row < 0.\n"
#~ "* HLOOKUP returns #REF! if @row falls outside @range.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=VLOOKUP"
#~ msgstr ""
#~ "@FUNCTION=HLOOKUP\n"
#~ "@SYNTAX=HLOOKUP(value,range,row[,approximate,as_index])\n"
#~ "@DESCRIPTION=HLOOKUP function finds the col in range that has a first row "
#~ "cell similar to @value.  If @approximate is not true it finds the col "
#~ "with an exact equivalence.  If @approximate is true, then the values must "
#~ "be sorted in order of ascending value for correct function; in this case "
#~ "it finds the col with value less than @value it returns the value in the "
#~ "col found at a 1-based offset in @row rows into the @range.  @as_index "
#~ "returns the 0-based offset that matched rather than the value.\n"
#~ "\n"
#~ "* HLOOKUP returns #NUM! if @row < 0.\n"
#~ "* HLOOKUP returns #REF! if @row falls outside @range.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=VLOOKUP"

#~ msgid ""
#~ "@FUNCTION=LOOKUP\n"
#~ "@SYNTAX=LOOKUP(value,vector1[,vector2])\n"
#~ "@DESCRIPTION=LOOKUP function finds the row index of @value in @vector1 "
#~ "and returns the contents of @vector2 at that row index. Alternatively a "
#~ "single array can be used for @vector1. If the area is longer than it is "
#~ "wide then the sense of the search is rotated. \n"
#~ "\n"
#~ "* If LOOKUP can't find @value it uses the largest value less than "
#~ "@value.\n"
#~ "* The data must be sorted.\n"
#~ "* If @value is smaller than the first value it returns #N/A.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=VLOOKUP,HLOOKUP"
#~ msgstr ""
#~ "@FUNCTION=LOOKUP\n"
#~ "@SYNTAX=LOOKUP(value,vector1[,vector2])\n"
#~ "@DESCRIPTION=LOOKUP function finds the row index of @value in @vector1 "
#~ "and returns the contents of @vector2 at that row index. Alternatively a "
#~ "single array can be used for @vector1. If the area is longer than it is "
#~ "wide then the sense of the search is rotated. \n"
#~ "\n"
#~ "* If LOOKUP can't find @value it uses the largest value less than "
#~ "@value.\n"
#~ "* The data must be sorted.\n"
#~ "* If @value is smaller than the first value it returns #N/A.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=VLOOKUP,HLOOKUP"

#~ msgid ""
#~ "@FUNCTION=MATCH\n"
#~ "@SYNTAX=MATCH(seek,vector[,type])\n"
#~ "@DESCRIPTION=MATCH function finds the row index of @seek in @vector and "
#~ "returns it.\n"
#~ "\n"
#~ "If the area is longer than it is wide then the sense of the search is "
#~ "rotated. Alternatively a single array can be used.\n"
#~ "\n"
#~ "* The @type parameter, which defaults to +1, controls the search:\n"
#~ "* If @type = 1, MATCH finds largest value <= @seek.\n"
#~ "* If @type = 0, MATCH finds first value == @seek.\n"
#~ "* If @type = -1, MATCH finds smallest value >= @seek.\n"
#~ "* For @type = 0, the data can be in any order.  * For @type = -1 and "
#~ "@type = +1, the data must be sorted.  (And in these cases, MATCH uses a "
#~ "binary search to locate the index.)\n"
#~ "* If @seek could not be found, #N/A is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOOKUP"
#~ msgstr ""
#~ "@FUNCTION=MATCH\n"
#~ "@SYNTAX=MATCH(seek,vector[,type])\n"
#~ "@DESCRIPTION=MATCH function finds the row index of @seek in @vector and "
#~ "returns it.\n"
#~ "\n"
#~ "If the area is longer than it is wide then the sense of the search is "
#~ "rotated. Alternatively a single array can be used.\n"
#~ "\n"
#~ "* The @type parameter, which defaults to +1, controls the search:\n"
#~ "* If @type = 1, MATCH finds largest value <= @seek.\n"
#~ "* If @type = 0, MATCH finds first value == @seek.\n"
#~ "* If @type = -1, MATCH finds smallest value >= @seek.\n"
#~ "* For @type = 0, the data can be in any order.  * For @type = -1 and "
#~ "@type = +1, the data must be sorted.  (And in these cases, MATCH uses a "
#~ "binary search to locate the index.)\n"
#~ "* If @seek could not be found, #N/A is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOOKUP"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=INDIRECT\n"
#~ "@SYNTAX=INDIRECT(ref_text[,format])\n"
#~ "@DESCRIPTION=INDIRECT function returns the contents of the cell pointed "
#~ "to by the @ref_text string. The string specifies a single cell reference "
#~ "the format of which is either A1 or R1C1 style. The boolean @format "
#~ "controls how @ref_text is to be interpreted: TRUE (the default) for A1 "
#~ "style and FALSE for R1C1 style.\n"
#~ "\n"
#~ "* If @ref_text is not a valid reference in the style controlled by "
#~ "@format, returns #REF! \n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 3.14 and A2 contains \"A1\", then\n"
#~ "INDIRECT(A2) equals 3.14.\n"
#~ "\n"
#~ "If B1 contains 23 and A1 contains \"R1C2\", then\n"
#~ "INDIRECT(A1,FALSE) equals 23.\n"
#~ "@SEEALSO=AREAS,INDEX,CELL"
#~ msgstr ""
#~ "@FUNCTION=INDIRECT\n"
#~ "@SYNTAX=INDIRECT(ref_text[,format])\n"
#~ "@DESCRIPTION=INDIRECT function returns the contents of the cell pointed "
#~ "to by the @ref_text string. The string specifies a single cell reference "
#~ "the format of which is either A1 or R1C1 style. The style is set by the "
#~ "@format boolean, which defaults to the A1 style.\n"
#~ "\n"
#~ "* If @ref_text is not a valid reference returns #REF! \n"
#~ "@EXAMPLES=\n"
#~ "If A1 contains 3.14 and A2 contains A1, then\n"
#~ "INDIRECT(A2) equals 3.14.\n"
#~ "\n"
#~ "@SEEALSO=AREAS,INDEX,CELL"

#~ msgid ""
#~ "@FUNCTION=INDEX\n"
#~ "@SYNTAX=INDEX(array[,row, col, area])\n"
#~ "@DESCRIPTION=INDEX gives a reference to a cell in the given @array.The "
#~ "cell is pointed out by @row and @col, which count the rows and columns in "
#~ "the array.\n"
#~ "\n"
#~ "* If @row and @col are omitted the are assumed to be 1.\n"
#~ "* If the reference falls outside the range of the @array, INDEX returns a "
#~ "#REF! error.\n"
#~ "\n"
#~ "@EXAMPLES=Let us assume that the cells A1, A2, ..., A5 contain numbers "
#~ "11.4, 17.3, 21.3, 25.9, and 40.1. Then INDEX(A1:A5,4,1,1) equals 25.9\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=INDEX\n"
#~ "@SYNTAX=INDEX(array[,row, col, area])\n"
#~ "@DESCRIPTION=INDEX gives a reference to a cell in the given @array.The "
#~ "cell is pointed out by @row and @col, which count the rows and columns in "
#~ "the array.\n"
#~ "\n"
#~ "* If @row and @col are omitted the are assumed to be 1.\n"
#~ "* If the reference falls outside the range of the @array, INDEX returns a "
#~ "#REF! error.\n"
#~ "\n"
#~ "@EXAMPLES=Let us assume that the cells A1, A2, ..., A5 contain numbers "
#~ "11.4, 17.3, 21.3, 25.9, and 40.1. Then INDEX(A1:A5,4,1,1) equals 25.9\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COLUMNNUMBER\n"
#~ "@SYNTAX=COLUMNNUMBER(name)\n"
#~ "@DESCRIPTION=COLUMNNUMBER function returns an integer corresponding to "
#~ "the column name supplied as a string.\n"
#~ "\n"
#~ "* If @name is invalid, COLUMNNUMBER returns the #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMNNUMBER(\"E\") equals 5.\n"
#~ "\n"
#~ "@SEEALSO=ADDRESS"
#~ msgstr ""
#~ "@FUNCTION=COLUMNNUMBER\n"
#~ "@SYNTAX=COLUMNNUMBER(name)\n"
#~ "@DESCRIPTION=COLUMNNUMBER function returns an integer corresponding to "
#~ "the column name supplied as a string.\n"
#~ "\n"
#~ "* If @name is invalid, COLUMNNUMBER returns the #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMNNUMBER(\"E\") equals 5.\n"
#~ "\n"
#~ "@SEEALSO=ADDRESS"

#~ msgid ""
#~ "@FUNCTION=COLUMNS\n"
#~ "@SYNTAX=COLUMNS(reference)\n"
#~ "@DESCRIPTION=COLUMNS function returns the number of columns in area or "
#~ "array reference.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, COLUMNS "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMNS(H2:J3) equals 3.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,ROW,ROWS"
#~ msgstr ""
#~ "@FUNCTION=COLUMNS\n"
#~ "@SYNTAX=COLUMNS(reference)\n"
#~ "@DESCRIPTION=COLUMNS function returns the number of columns in area or "
#~ "array reference.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, COLUMNS "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMNS(H2:J3) equals 3.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,ROW,ROWS"

#~ msgid ""
#~ "@FUNCTION=OFFSET\n"
#~ "@SYNTAX=OFFSET(range,row,col[,height[,width]])\n"
#~ "@DESCRIPTION=OFFSET function returns a cell range. The cell range starts "
#~ "at offset (@row,@col) from @range, and is of height @height and width "
#~ "@width.\n"
#~ "\n"
#~ "* If @range is neither a reference nor a range, OFFSET returns #VALUE!.\n"
#~ "* If either @height or @width is omitted, the height or width of the "
#~ "reference is used.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROWS,INDEX,INDIRECT,ADDRESS"
#~ msgstr ""
#~ "@FUNCTION=OFFSET\n"
#~ "@SYNTAX=OFFSET(range,row,col[,height[,width]])\n"
#~ "@DESCRIPTION=OFFSET function returns a cell range. The cell range starts "
#~ "at offset (@row,@col) from @range, and is of height @height and width "
#~ "@width.\n"
#~ "\n"
#~ "* If @range is neither a reference nor a range, OFFSET returns #VALUE!.\n"
#~ "* If either @height or @width is omitted, the height or width of the "
#~ "reference is used.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROWS,INDEX,INDIRECT,ADDRESS"

#~ msgid ""
#~ "@FUNCTION=ROWS\n"
#~ "@SYNTAX=ROWS(reference)\n"
#~ "@DESCRIPTION=ROWS function returns the number of rows in area or array "
#~ "reference.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, ROWS "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROWS(H7:I13) equals 7.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROW"
#~ msgstr ""
#~ "@FUNCTION=ROWS\n"
#~ "@SYNTAX=ROWS(reference)\n"
#~ "@DESCRIPTION=ROWS function returns the number of rows in area or array "
#~ "reference.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, ROWS "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROWS(H7:I13) equals 7.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROW"

#~ msgid ""
#~ "@FUNCTION=HYPERLINK\n"
#~ "@SYNTAX=HYPERLINK(link_location[,optional_label])\n"
#~ "@DESCRIPTION=HYPERLINK function currently returns its 2nd argument, or if "
#~ "that is omitted the 1st argument.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HYPERLINK(\"www.gnome.org\",\"GNOME\").\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=HYPERLINK\n"
#~ "@SYNTAX=HYPERLINK(link_location[,optional_label])\n"
#~ "@DESCRIPTION=HYPERLINK function currently returns its 2nd argument, or if "
#~ "that is omitted the 1st argument.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HYPERLINK(\"www.gnome.org\",\"GNOME\").\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=TRANSPOSE\n"
#~ "@SYNTAX=TRANSPOSE(matrix)\n"
#~ "@DESCRIPTION=TRANSPOSE function returns the transpose of the input "
#~ "@matrix.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=MMULT"
#~ msgstr ""
#~ "@FUNCTION=TRANSPOSE\n"
#~ "@SYNTAX=TRANSPOSE(matrix)\n"
#~ "@DESCRIPTION=TRANSPOSE function returns the transpose of the input "
#~ "@matrix.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=MMULT"

#~ msgid ""
#~ "@FUNCTION=GCD\n"
#~ "@SYNTAX=GCD(number1,number2,...)\n"
#~ "@DESCRIPTION=GCD returns the greatest common divisor of given numbers.\n"
#~ "\n"
#~ "* If any of the arguments is less than one, GCD returns #NUM! error.\n"
#~ "* If any of the arguments is non-integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GCD(470,770) equals 10.\n"
#~ "GCD(470,770,1495) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=LCM"
#~ msgstr ""
#~ "@FUNCTION=GCD\n"
#~ "@SYNTAX=GCD(number1,number2,...)\n"
#~ "@DESCRIPTION=GCD returns the greatest common divisor of given numbers.\n"
#~ "\n"
#~ "* If any of the arguments is less than one, GCD returns #NUM! error.\n"
#~ "* If any of the arguments is non-integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GCD(470,770) equals 10.\n"
#~ "GCD(470,770,1495) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=LCM"

#~ msgid ""
#~ "@FUNCTION=LCM\n"
#~ "@SYNTAX=LCM(number1,number2,...)\n"
#~ "@DESCRIPTION=LCM returns the least common multiple of integers.  The "
#~ "least common multiple is the smallest positive number that is a multiple "
#~ "of all integer arguments given.\n"
#~ "\n"
#~ "* If any of the arguments is less than one, LCM returns #NUM!.\n"
#~ "* If any of the arguments is non-integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LCM(2,13) equals 26.\n"
#~ "LCM(4,7,5) equals 140.\n"
#~ "\n"
#~ "@SEEALSO=GCD"
#~ msgstr ""
#~ "@FUNCTION=LCM\n"
#~ "@SYNTAX=LCM(number1,number2,...)\n"
#~ "@DESCRIPTION=LCM returns the least common multiple of integers.  The "
#~ "least common multiple is the smallest positive number that is a multiple "
#~ "of all integer arguments given.\n"
#~ "\n"
#~ "* If any of the arguments is less than one, LCM returns #NUM!.\n"
#~ "* If any of the arguments is non-integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LCM(2,13) equals 26.\n"
#~ "LCM(4,7,5) equals 140.\n"
#~ "\n"
#~ "@SEEALSO=GCD"

#~ msgid ""
#~ "@FUNCTION=HYPOT\n"
#~ "@SYNTAX=HYPOT(number1,number2,...)\n"
#~ "@DESCRIPTION=HYPOT returns the square root of the sum of the squares of "
#~ "the arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HYPOT(3,4) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=MIN,MAX"
#~ msgstr ""
#~ "@FUNCTION=HYPOT\n"
#~ "@SYNTAX=HYPOT(number1,number2,...)\n"
#~ "@DESCRIPTION=HYPOT returns the square root of the sum of the squares of "
#~ "the arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HYPOT(3,4) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=MIN,MAX"

#~ msgid ""
#~ "@FUNCTION=ABS\n"
#~ "@SYNTAX=ABS(b1)\n"
#~ "@DESCRIPTION=ABS implements the Absolute Value function:  the result is "
#~ "to drop the negative sign (if present).  This can be done for integers "
#~ "and floating point numbers.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ABS(7) equals 7.\n"
#~ "ABS(-3.14) equals 3.14.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, FLOOR, INT, MOD"
#~ msgstr ""
#~ "@FUNCTION=ABS\n"
#~ "@SYNTAX=ABS(b1)\n"
#~ "@DESCRIPTION=ABS implements the Absolute Value function:  the result is "
#~ "to drop the negative sign (if present).  This can be done for integers "
#~ "and floating point numbers.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ABS(7) equals 7.\n"
#~ "ABS(-3.14) equals 3.14.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, FLOOR, INT, MOD"

#~ msgid ""
#~ "@FUNCTION=ACOS\n"
#~ "@SYNTAX=ACOS(x)\n"
#~ "@DESCRIPTION=ACOS function calculates the arc cosine of @x; that is the "
#~ "value whose cosine is @x.\n"
#~ "\n"
#~ "* The value it returns is in radians.\n"
#~ "* If @x falls outside the range -1 to 1, ACOS returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ACOS(0.1) equals 1.470629.\n"
#~ "ACOS(-0.1) equals 1.670964.\n"
#~ "\n"
#~ "@SEEALSO=COS, SIN, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=ACOS\n"
#~ "@SYNTAX=ACOS(x)\n"
#~ "@DESCRIPTION=ACOS function calculates the arc cosine of @x; that is the "
#~ "value whose cosine is @x.\n"
#~ "\n"
#~ "* The value it returns is in radians.\n"
#~ "* If @x falls outside the range -1 to 1, ACOS returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ACOS(0.1) equals 1.470629.\n"
#~ "ACOS(-0.1) equals 1.670964.\n"
#~ "\n"
#~ "@SEEALSO=COS, SIN, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=ACOSH\n"
#~ "@SYNTAX=ACOSH(x)\n"
#~ "@DESCRIPTION=ACOSH  function  calculates  the inverse hyperbolic cosine "
#~ "of @x; that is the value whose hyperbolic cosine is @x.\n"
#~ "\n"
#~ "* If @x is less than 1.0, ACOSH() returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "ACOSH(2) equals 1.31696.\n"
#~ "ACOSH(5.3) equals 2.35183.\n"
#~ "\n"
#~ "@SEEALSO=ACOS, ASINH, DEGREES, RADIANS "
#~ msgstr ""
#~ "@FUNCTION=ACOSH\n"
#~ "@SYNTAX=ACOSH(x)\n"
#~ "@DESCRIPTION=ACOSH  function  calculates  the inverse hyperbolic cosine "
#~ "of @x; that is the value whose hyperbolic cosine is @x.\n"
#~ "\n"
#~ "* If @x is less than 1.0, ACOSH() returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "ACOSH(2) equals 1.31696.\n"
#~ "ACOSH(5.3) equals 2.35183.\n"
#~ "\n"
#~ "@SEEALSO=ACOS, ASINH, DEGREES, RADIANS "

#~ msgid ""
#~ "@FUNCTION=ASIN\n"
#~ "@SYNTAX=ASIN(x)\n"
#~ "@DESCRIPTION=ASIN function calculates the arc sine of @x; that is the "
#~ "value whose sine is @x.\n"
#~ "\n"
#~ "* If @x falls outside the range -1 to 1, ASIN returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ASIN(0.5) equals 0.523599.\n"
#~ "ASIN(1) equals 1.570797.\n"
#~ "\n"
#~ "@SEEALSO=SIN, COS, ASINH, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=ASIN\n"
#~ "@SYNTAX=ASIN(x)\n"
#~ "@DESCRIPTION=ASIN function calculates the arc sine of @x; that is the "
#~ "value whose sine is @x.\n"
#~ "\n"
#~ "* If @x falls outside the range -1 to 1, ASIN returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ASIN(0.5) equals 0.523599.\n"
#~ "ASIN(1) equals 1.570797.\n"
#~ "\n"
#~ "@SEEALSO=SIN, COS, ASINH, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=ASINH\n"
#~ "@SYNTAX=ASINH(x)\n"
#~ "@DESCRIPTION=ASINH function calculates the inverse hyperbolic sine of @x; "
#~ "that is the value whose hyperbolic sine is @x.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ASINH(0.5) equals 0.481212.\n"
#~ "ASINH(1.0) equals 0.881374.\n"
#~ "\n"
#~ "@SEEALSO=ASIN, ACOSH, SIN, COS, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=ASINH\n"
#~ "@SYNTAX=ASINH(x)\n"
#~ "@DESCRIPTION=ASINH function calculates the inverse hyperbolic sine of @x; "
#~ "that is the value whose hyperbolic sine is @x.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ASINH(0.5) equals 0.481212.\n"
#~ "ASINH(1.0) equals 0.881374.\n"
#~ "\n"
#~ "@SEEALSO=ASIN, ACOSH, SIN, COS, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=ATAN\n"
#~ "@SYNTAX=ATAN(x)\n"
#~ "@DESCRIPTION=ATAN function calculates the arc tangent of @x; that is the "
#~ "value whose tangent is @x.\n"
#~ "\n"
#~ "* Return value is in radians.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ATAN(0.5) equals 0,463648.\n"
#~ "ATAN(1) equals 0,785398.\n"
#~ "\n"
#~ "@SEEALSO=TAN, COS, SIN, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=ATAN\n"
#~ "@SYNTAX=ATAN(x)\n"
#~ "@DESCRIPTION=ATAN function calculates the arc tangent of @x; that is the "
#~ "value whose tangent is @x.\n"
#~ "\n"
#~ "* Return value is in radians.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ATAN(0.5) equals 0,463648.\n"
#~ "ATAN(1) equals 0,785398.\n"
#~ "\n"
#~ "@SEEALSO=TAN, COS, SIN, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=ATANH\n"
#~ "@SYNTAX=ATANH(x)\n"
#~ "@DESCRIPTION=ATANH function calculates the inverse hyperbolic tangent of "
#~ "@x; that is the value whose hyperbolic tangent is @x.\n"
#~ "\n"
#~ "* If the absolute value of @x is greater than 1.0, ATANH returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ATANH(0.5) equals 0.549306.\n"
#~ "ATANH(0.8) equals 1.098612.\n"
#~ "\n"
#~ "@SEEALSO=ATAN, TAN, SIN, COS, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=ATANH\n"
#~ "@SYNTAX=ATANH(x)\n"
#~ "@DESCRIPTION=ATANH function calculates the inverse hyperbolic tangent of "
#~ "@x; that is the value whose hyperbolic tangent is @x.\n"
#~ "\n"
#~ "* If the absolute value of @x is greater than 1.0, ATANH returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ATANH(0.5) equals 0.549306.\n"
#~ "ATANH(0.8) equals 1.098612.\n"
#~ "\n"
#~ "@SEEALSO=ATAN, TAN, SIN, COS, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=ATAN2\n"
#~ "@SYNTAX=ATAN2(b1,b2)\n"
#~ "@DESCRIPTION=ATAN2 function calculates the arc tangent of the two "
#~ "variables @b1 and @b2.  It is similar to calculating the arc tangent of "
#~ "@b2 / @b1, except that the signs of both arguments are used to determine "
#~ "the quadrant of the result.\n"
#~ "\n"
#~ "* The result is in radians.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ATAN2(0.5,1.0) equals 1.107149.\n"
#~ "ATAN2(-0.5,2.0) equals 1.815775.\n"
#~ "\n"
#~ "@SEEALSO=ATAN, ATANH, COS, SIN, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=ATAN2\n"
#~ "@SYNTAX=ATAN2(b1,b2)\n"
#~ "@DESCRIPTION=ATAN2 function calculates the arc tangent of the two "
#~ "variables @b1 and @b2.  It is similar to calculating the arc tangent of "
#~ "@b2 / @b1, except that the signs of both arguments are used to determine "
#~ "the quadrant of the result.\n"
#~ "\n"
#~ "* The result is in radians.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ATAN2(0.5,1.0) equals 1.107149.\n"
#~ "ATAN2(-0.5,2.0) equals 1.815775.\n"
#~ "\n"
#~ "@SEEALSO=ATAN, ATANH, COS, SIN, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=CEIL\n"
#~ "@SYNTAX=CEIL(x)\n"
#~ "@DESCRIPTION=CEIL function rounds @x up to the next nearest integer.\n"
#~ "\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CEIL(0.4) equals 1.\n"
#~ "CEIL(-1.1) equals -1.\n"
#~ "CEIL(-2.9) equals -2.\n"
#~ "\n"
#~ "@SEEALSO=CEILING, FLOOR, ABS, INT, MOD"
#~ msgstr ""
#~ "@FUNCTION=CEIL\n"
#~ "@SYNTAX=CEIL(x)\n"
#~ "@DESCRIPTION=CEIL function rounds @x up to the next nearest integer.\n"
#~ "\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CEIL(0.4) equals 1.\n"
#~ "CEIL(-1.1) equals -1.\n"
#~ "CEIL(-2.9) equals -2.\n"
#~ "\n"
#~ "@SEEALSO=CEILING, FLOOR, ABS, INT, MOD"

#~ msgid ""
#~ "@FUNCTION=COUNTIF\n"
#~ "@SYNTAX=COUNTIF(range,criteria)\n"
#~ "@DESCRIPTION=COUNTIF function counts the number of cells in the given "
#~ "@range that meet the given @criteria.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, "
#~ "33, and 39.  Then\n"
#~ "COUNTIF(A1:A5,\"<=28\") equals 3.\n"
#~ "COUNTIF(A1:A5,\"<28\") equals 2.\n"
#~ "COUNTIF(A1:A5,\"28\") equals 1.\n"
#~ "COUNTIF(A1:A5,\">28\") equals 2.\n"
#~ "\n"
#~ "@SEEALSO=COUNT,SUMIF"
#~ msgstr ""
#~ "@FUNCTION=COUNTIF\n"
#~ "@SYNTAX=COUNTIF(range,criteria)\n"
#~ "@DESCRIPTION=COUNTIF function counts the number of cells in the given "
#~ "@range that meet the given @criteria.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, "
#~ "33, and 39.  Then\n"
#~ "COUNTIF(A1:A5,\"<=28\") equals 3.\n"
#~ "COUNTIF(A1:A5,\"<28\") equals 2.\n"
#~ "COUNTIF(A1:A5,\"28\") equals 1.\n"
#~ "COUNTIF(A1:A5,\">28\") equals 2.\n"
#~ "\n"
#~ "@SEEALSO=COUNT,SUMIF"

#~ msgid ""
#~ "@FUNCTION=SUMIF\n"
#~ "@SYNTAX=SUMIF(range,criteria[,actual_range])\n"
#~ "@DESCRIPTION=SUMIF function sums the values in the given @range that meet "
#~ "the given @criteria.  If @actual_range is given, SUMIF sums the values in "
#~ "the @actual_range whose corresponding components in @range meet the given "
#~ "@criteria.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, "
#~ "33, and 39.  Then\n"
#~ "SUMIF(A1:A5,\"<=28\") equals 78.\n"
#~ "SUMIF(A1:A5,\"<28\") equals 50.\n"
#~ "In addition, if the cells B1, B2, ..., B5 hold numbers 5, 3, 2, 6, and 7 "
#~ "then:\n"
#~ "SUMIF(A1:A5,\"<=27\",B1:B5) equals 8.\n"
#~ "\n"
#~ "@SEEALSO=COUNTIF, SUM"
#~ msgstr ""
#~ "@FUNCTION=SUMIF\n"
#~ "@SYNTAX=SUMIF(range,criteria[,actual_range])\n"
#~ "@DESCRIPTION=SUMIF function sums the values in the given @range that meet "
#~ "the given @criteria.  If @actual_range is given, SUMIF sums the values in "
#~ "the @actual_range whose corresponding components in @range meet the given "
#~ "@criteria.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, "
#~ "33, and 39.  Then\n"
#~ "SUMIF(A1:A5,\"<=28\") equals 78.\n"
#~ "SUMIF(A1:A5,\"<28\") equals 50.\n"
#~ "In addition, if the cells B1, B2, ..., B5 hold numbers 5, 3, 2, 6, and 7 "
#~ "then:\n"
#~ "SUMIF(A1:A5,\"<=27\",B1:B5) equals 8.\n"
#~ "\n"
#~ "@SEEALSO=COUNTIF, SUM"

#~ msgid ""
#~ "@FUNCTION=CEILING\n"
#~ "@SYNTAX=CEILING(x[,significance])\n"
#~ "@DESCRIPTION=CEILING function rounds @x up to the nearest multiple of "
#~ "@significance.\n"
#~ "\n"
#~ "* If @x or @significance is non-numeric CEILING returns #VALUE! error.\n"
#~ "* If @x and @significance have different signs CEILING returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CEILING(2.43,1) equals 3.\n"
#~ "CEILING(123.123,3) equals 126.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, FLOOR, ABS, INT, MOD"
#~ msgstr ""
#~ "@FUNCTION=CEILING\n"
#~ "@SYNTAX=CEILING(x,significance)\n"
#~ "@DESCRIPTION=CEILING function rounds @x up to the nearest multiple of "
#~ "@significance.\n"
#~ "\n"
#~ "* If @x or @significance is non-numeric CEILING returns #VALUE! error.\n"
#~ "* If @x and @significance have different signs CEILING returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CEILING(2.43,1) equals 3.\n"
#~ "CEILING(123.123,3) equals 126.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, FLOOR, ABS, INT, MOD"

#~ msgid ""
#~ "@FUNCTION=COS\n"
#~ "@SYNTAX=COS(x)\n"
#~ "@DESCRIPTION=COS function returns the cosine of @x, where @x is given in "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COS(0.5) equals 0.877583.\n"
#~ "COS(1) equals 0.540302.\n"
#~ "\n"
#~ "@SEEALSO=COSH, SIN, SINH, TAN, TANH, RADIANS, DEGREES"
#~ msgstr ""
#~ "@FUNCTION=COS\n"
#~ "@SYNTAX=COS(x)\n"
#~ "@DESCRIPTION=COS function returns the cosine of @x, where @x is given in "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COS(0.5) equals 0.877583.\n"
#~ "COS(1) equals 0.540302.\n"
#~ "\n"
#~ "@SEEALSO=COSH, SIN, SINH, TAN, TANH, RADIANS, DEGREES"

#~ msgid ""
#~ "@FUNCTION=COSH\n"
#~ "@SYNTAX=COSH(x)\n"
#~ "@DESCRIPTION=COSH function returns the hyperbolic cosine of @x, which is "
#~ "defined mathematically as\n"
#~ "\n"
#~ "\t(exp(@x) + exp(-@x)) / 2.\n"
#~ "\n"
#~ "* @x is in radians.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COSH(0.5) equals 1.127626.\n"
#~ "COSH(1) equals 1.543081.\n"
#~ "\n"
#~ "@SEEALSO=COS, SIN, SINH, TAN, TANH, RADIANS, DEGREES, EXP"
#~ msgstr ""
#~ "@FUNCTION=COSH\n"
#~ "@SYNTAX=COSH(x)\n"
#~ "@DESCRIPTION=COSH function returns the hyperbolic cosine of @x, which is "
#~ "defined mathematically as\n"
#~ "\n"
#~ "\t(exp(@x) + exp(-@x)) / 2.\n"
#~ "\n"
#~ "* @x is in radians.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COSH(0.5) equals 1.127626.\n"
#~ "COSH(1) equals 1.543081.\n"
#~ "\n"
#~ "@SEEALSO=COS, SIN, SINH, TAN, TANH, RADIANS, DEGREES, EXP"

#~ msgid ""
#~ "@FUNCTION=DEGREES\n"
#~ "@SYNTAX=DEGREES(x)\n"
#~ "@DESCRIPTION=DEGREES computes the number of degrees equivalent to @x "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEGREES(2.5) equals 143.2394.\n"
#~ "\n"
#~ "@SEEALSO=RADIANS, PI"
#~ msgstr ""
#~ "@FUNCTION=DEGREES\n"
#~ "@SYNTAX=DEGREES(x)\n"
#~ "@DESCRIPTION=DEGREES computes the number of degrees equivalent to @x "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DEGREES(2.5) equals 143.2394.\n"
#~ "\n"
#~ "@SEEALSO=RADIANS, PI"

#~ msgid ""
#~ "@FUNCTION=EXP\n"
#~ "@SYNTAX=EXP(x)\n"
#~ "@DESCRIPTION=EXP computes the value of e (the base of natural logarithms) "
#~ "raised to the power of @x.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXP(2) equals 7.389056.\n"
#~ "\n"
#~ "@SEEALSO=LOG, LOG2, LOG10"
#~ msgstr ""
#~ "@FUNCTION=EXP\n"
#~ "@SYNTAX=EXP(x)\n"
#~ "@DESCRIPTION=EXP computes the value of e (the base of natural logarithms) "
#~ "raised to the power of @x.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXP(2) equals 7.389056.\n"
#~ "\n"
#~ "@SEEALSO=LOG, LOG2, LOG10"

#~ msgid ""
#~ "@FUNCTION=EXPM1\n"
#~ "@SYNTAX=EXPM1(x)\n"
#~ "@DESCRIPTION=EXPM1 computes EXP(@x)-1 with higher resulting precision "
#~ "than the direct formula.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXPM1(0.01) equals 0.01005.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LN1P"
#~ msgstr ""
#~ "@FUNCTION=EXPM1\n"
#~ "@SYNTAX=EXPM1(x)\n"
#~ "@DESCRIPTION=EXPM1 computes EXP(@x)-1 with higher resulting precision "
#~ "than the direct formula.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXPM1(0.01) equals 0.01005.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LN1P"

#~ msgid ""
#~ "@FUNCTION=FACT\n"
#~ "@SYNTAX=FACT(x)\n"
#~ "@DESCRIPTION=FACT computes the factorial of @x. ie, @x!\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FACT(3) equals 6.\n"
#~ "FACT(9) equals 362880.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=FACT\n"
#~ "@SYNTAX=FACT(x)\n"
#~ "@DESCRIPTION=FACT computes the factorial of @x. ie, @x!\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FACT(3) equals 6.\n"
#~ "FACT(9) equals 362880.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=BETA\n"
#~ "@SYNTAX=BETA(a,b)\n"
#~ "@DESCRIPTION=BETA function returns the value of the mathematical beta "
#~ "function extended to all real numbers except 0 and negative integers.\n"
#~ "\n"
#~ "* If @a, @b, or (@a + @b) are non-positive integers, BETA returns #NUM! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BETA(2,3) equals 0.083333.\n"
#~ "BETA(-0.5,0.5) equals #NUM!.\n"
#~ "\n"
#~ "@SEEALSO=BETALN,GAMMALN"
#~ msgstr ""
#~ "@FUNCTION=BETA\n"
#~ "@SYNTAX=BETA(a,b)\n"
#~ "@DESCRIPTION=BETA function returns the value of the mathematical beta "
#~ "function extended to all real numbers except 0 and negative integers.\n"
#~ "\n"
#~ "* If @a, @b, or (@a + @b) are non-positive integers, BETA returns #NUM! "
#~ "error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BETA(2,3) equals 0.083333.\n"
#~ "BETA(-0.5,0.5) equals #NUM!.\n"
#~ "\n"
#~ "@SEEALSO=BETALN,GAMMALN"

#~ msgid ""
#~ "@FUNCTION=BETALN\n"
#~ "@SYNTAX=BETALN(a,b)\n"
#~ "@DESCRIPTION=BETALN function returns the natural logarithm of the "
#~ "absolute value of the beta function.\n"
#~ "\n"
#~ "* If @a, @b, or (@a + @b) are non-positive integers, BETALN returns "
#~ "#NUM! \n"
#~ "@EXAMPLES=\n"
#~ "BETALN(2,3) equals -2.48.\n"
#~ "BETALN(-0.5,0.5) equals #NUM!.\n"
#~ "\n"
#~ "@SEEALSO=BETA,GAMMALN"
#~ msgstr ""
#~ "@FUNCTION=BETALN\n"
#~ "@SYNTAX=BETALN(a,b)\n"
#~ "@DESCRIPTION=BETALN function returns the natural logarithm of the "
#~ "absolute value of the beta function.\n"
#~ "\n"
#~ "* If @a, @b, or (@a + @b) are non-positive integers, BETALN returns "
#~ "#NUM! \n"
#~ "@EXAMPLES=\n"
#~ "BETALN(2,3) equals -2.48.\n"
#~ "BETALN(-0.5,0.5) equals #NUM!.\n"
#~ "\n"
#~ "@SEEALSO=BETA,GAMMALN"

#~ msgid ""
#~ "@FUNCTION=COMBIN\n"
#~ "@SYNTAX=COMBIN(n,k)\n"
#~ "@DESCRIPTION=COMBIN computes the number of combinations.\n"
#~ "\n"
#~ "* Performing this function on a non-integer or a negative number returns "
#~ "#NUM! error.\n"
#~ "* If @n is less than @k COMBIN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COMBIN(8,6) equals 28.\n"
#~ "COMBIN(6,2) equals 15.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=COMBIN\n"
#~ "@SYNTAX=COMBIN(n,k)\n"
#~ "@DESCRIPTION=COMBIN computes the number of combinations.\n"
#~ "\n"
#~ "* Performing this function on a non-integer or a negative number returns "
#~ "#NUM! error.\n"
#~ "* If @n is less than @k COMBIN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COMBIN(8,6) equals 28.\n"
#~ "COMBIN(6,2) equals 15.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid "FLOOR:rounds down."
#~ msgstr "FLOOR:rounds down."

#~ msgid ""
#~ "FLOOR function rounds @x down to the next nearest multiple of "
#~ "@significance."
#~ msgstr ""
#~ "FLOOR function rounds @x down to the next nearest multiple of "
#~ "@significance."

#~ msgid "FLOOR(-5,-2) equals -4."
#~ msgstr "FLOOR(-5,-2) equals -4."

#~ msgid "FLOOR(-5,2) equals #NUM!."
#~ msgstr "FLOOR(-5,2) equals #NUM!."

#~ msgid ""
#~ "@FUNCTION=INT\n"
#~ "@SYNTAX=INT(a)\n"
#~ "@DESCRIPTION=INT function returns the largest integer that is not bigger "
#~ "than its argument.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "INT(7.2) equals 7.\n"
#~ "INT(-5.5) equals -6.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, FLOOR, ABS, MOD"
#~ msgstr ""
#~ "@FUNCTION=INT\n"
#~ "@SYNTAX=INT(a)\n"
#~ "@DESCRIPTION=INT function returns the largest integer that is not bigger "
#~ "than its argument.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "INT(7.2) equals 7.\n"
#~ "INT(-5.5) equals -6.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, FLOOR, ABS, MOD"

#~ msgid ""
#~ "@FUNCTION=LOG\n"
#~ "@SYNTAX=LOG(x[,base])\n"
#~ "@DESCRIPTION=LOG computes the logarithm of @x in the given base @base.  "
#~ "If no @base is given LOG returns the logarithm in base 10. @base must be "
#~ "> 0. and cannot equal 1.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOG(2) equals 0.30103.\n"
#~ "LOG(8192,2) equals 13.\n"
#~ "\n"
#~ "@SEEALSO=LN, LOG2, LOG10"
#~ msgstr ""
#~ "@FUNCTION=LOG\n"
#~ "@SYNTAX=LOG(x[,base])\n"
#~ "@DESCRIPTION=LOG computes the logarithm of @x in the given base @base.  "
#~ "If no @base is given LOG returns the logarithm in base 10. @base must be "
#~ "> 0. and cannot equal 1.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOG(2) equals 0.30103.\n"
#~ "LOG(8192,2) equals 13.\n"
#~ "\n"
#~ "@SEEALSO=LN, LOG2, LOG10"

#~ msgid ""
#~ "@FUNCTION=LN\n"
#~ "@SYNTAX=LN(x)\n"
#~ "@DESCRIPTION=LN returns the natural logarithm of @x.\n"
#~ "\n"
#~ "* If @x <= 0, LN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LN(7) equals 1.94591.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LOG2, LOG10"
#~ msgstr ""
#~ "@FUNCTION=LN\n"
#~ "@SYNTAX=LN(x)\n"
#~ "@DESCRIPTION=LN returns the natural logarithm of @x.\n"
#~ "\n"
#~ "* If @x <= 0, LN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LN(7) equals 1.94591.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LOG2, LOG10"

#~ msgid ""
#~ "@FUNCTION=LN1P\n"
#~ "@SYNTAX=LN1P(x)\n"
#~ "@DESCRIPTION=LN1P computes LN(1+@x) with higher resulting precision than "
#~ "the direct formula.\n"
#~ "\n"
#~ "* If @x <= -1, LN1P returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LN1P(0.01) equals 0.00995.\n"
#~ "\n"
#~ "@SEEALSO=LN, EXPM1"
#~ msgstr ""
#~ "@FUNCTION=LN1P\n"
#~ "@SYNTAX=LN1P(x)\n"
#~ "@DESCRIPTION=LN1P computes LN(1+@x) with higher resulting precision than "
#~ "the direct formula.\n"
#~ "\n"
#~ "* If @x <= -1, LN1P returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LN1P(0.01) equals 0.00995.\n"
#~ "\n"
#~ "@SEEALSO=LN, EXPM1"

#~ msgid ""
#~ "@FUNCTION=POWER\n"
#~ "@SYNTAX=POWER(x,y)\n"
#~ "@DESCRIPTION=POWER returns the value of @x raised to the power @y.\n"
#~ "\n"
#~ "\n"
#~ "* If both @x and @y equal 0, POWER returns #NUM! error.\n"
#~ "* If @x = 0 and @y < 0, POWER returns #DIV/0! error.\n"
#~ "* If @x < 0 and @y is non-integer, POWER returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "POWER(2,7) equals 128.\n"
#~ "POWER(3,3.141) equals 31.523749.\n"
#~ "\n"
#~ "@SEEALSO=EXP"
#~ msgstr ""
#~ "@FUNCTION=POWER\n"
#~ "@SYNTAX=POWER(x,y)\n"
#~ "@DESCRIPTION=POWER returns the value of @x raised to the power @y.\n"
#~ "\n"
#~ "\n"
#~ "* If both @x and @y equal 0, POWER returns #NUM! error.\n"
#~ "* If @x = 0 and @y < 0, POWER returns #DIV/0! error.\n"
#~ "* If @x < 0 and @y is non-integer, POWER returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "POWER(2,7) equals 128.\n"
#~ "POWER(3,3.141) equals 31.523749.\n"
#~ "\n"
#~ "@SEEALSO=EXP"

#~ msgid ""
#~ "@FUNCTION=LOG2\n"
#~ "@SYNTAX=LOG2(x)\n"
#~ "@DESCRIPTION=LOG2 computes the base-2 logarithm of @x.\n"
#~ "\n"
#~ "* If @x <= 0, LOG2 returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOG2(1024) equals 10.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LOG10, LOG"
#~ msgstr ""
#~ "@FUNCTION=LOG2\n"
#~ "@SYNTAX=LOG2(x)\n"
#~ "@DESCRIPTION=LOG2 computes the base-2 logarithm of @x.\n"
#~ "\n"
#~ "* If @x <= 0, LOG2 returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOG2(1024) equals 10.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LOG10, LOG"

#~ msgid ""
#~ "@FUNCTION=LOG10\n"
#~ "@SYNTAX=LOG10(x)\n"
#~ "@DESCRIPTION=LOG10 computes the base-10 logarithm of @x.\n"
#~ "\n"
#~ "* If @x <= 0, LOG10 returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "LOG10(7) equals 0.845098.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LOG2, LOG"
#~ msgstr ""
#~ "@FUNCTION=LOG10\n"
#~ "@SYNTAX=LOG10(x)\n"
#~ "@DESCRIPTION=LOG10 computes the base-10 logarithm of @x.\n"
#~ "\n"
#~ "* If @x <= 0, LOG10 returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "LOG10(7) equals 0.845098.\n"
#~ "\n"
#~ "@SEEALSO=EXP, LOG2, LOG"

#~ msgid ""
#~ "@FUNCTION=MOD\n"
#~ "@SYNTAX=MOD(number,divisor)\n"
#~ "@DESCRIPTION=MOD function returns the remainder when @divisor is divided "
#~ "into @number.\n"
#~ "\n"
#~ "* MOD returns #DIV/0! if @divisor is zero.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "MOD(23,7) equals 2.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, FLOOR, ABS, INT, ABS"
#~ msgstr ""
#~ "@FUNCTION=MOD\n"
#~ "@SYNTAX=MOD(number,divisor)\n"
#~ "@DESCRIPTION=MOD function returns the remainder when @divisor is divided "
#~ "into @number.\n"
#~ "\n"
#~ "* MOD returns #DIV/0! if @divisor is zero.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "MOD(23,7) equals 2.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, FLOOR, ABS, INT, ABS"

#~ msgid ""
#~ "@FUNCTION=RADIANS\n"
#~ "@SYNTAX=RADIANS(x)\n"
#~ "@DESCRIPTION=RADIANS computes the number of radians equivalent to @x "
#~ "degrees.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RADIANS(180) equals 3.14159.\n"
#~ "\n"
#~ "@SEEALSO=PI,DEGREES"
#~ msgstr ""
#~ "@FUNCTION=RADIANS\n"
#~ "@SYNTAX=RADIANS(x)\n"
#~ "@DESCRIPTION=RADIANS computes the number of radians equivalent to @x "
#~ "degrees.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RADIANS(180) equals 3.14159.\n"
#~ "\n"
#~ "@SEEALSO=PI,DEGREES"

#~ msgid ""
#~ "@FUNCTION=SIN\n"
#~ "@SYNTAX=SIN(x)\n"
#~ "@DESCRIPTION=SIN function returns the sine of @x, where @x is given in "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SIN(0.5) equals 0.479426.\n"
#~ "\n"
#~ "@SEEALSO=COS, COSH, SINH, TAN, TANH, RADIANS, DEGREES"
#~ msgstr ""
#~ "@FUNCTION=SIN\n"
#~ "@SYNTAX=SIN(x)\n"
#~ "@DESCRIPTION=SIN function returns the sine of @x, where @x is given in "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SIN(0.5) equals 0.479426.\n"
#~ "\n"
#~ "@SEEALSO=COS, COSH, SINH, TAN, TANH, RADIANS, DEGREES"

#~ msgid ""
#~ "@FUNCTION=SINH\n"
#~ "@SYNTAX=SINH(x)\n"
#~ "@DESCRIPTION=SINH function returns the hyperbolic sine of @x, which is "
#~ "defined mathematically as\n"
#~ "\n"
#~ "\t(exp(@x) - exp(-@x)) / 2.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SINH(0.5) equals 0.521095.\n"
#~ "\n"
#~ "@SEEALSO=SIN, COS, COSH, TAN, TANH, DEGREES, RADIANS, EXP"
#~ msgstr ""
#~ "@FUNCTION=SINH\n"
#~ "@SYNTAX=SINH(x)\n"
#~ "@DESCRIPTION=SINH function returns the hyperbolic sine of @x, which is "
#~ "defined mathematically as\n"
#~ "\n"
#~ "\t(exp(@x) - exp(-@x)) / 2.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SINH(0.5) equals 0.521095.\n"
#~ "\n"
#~ "@SEEALSO=SIN, COS, COSH, TAN, TANH, DEGREES, RADIANS, EXP"

#~ msgid ""
#~ "@FUNCTION=SQRT\n"
#~ "@SYNTAX=SQRT(x)\n"
#~ "@DESCRIPTION=SQRT function returns the square root of @x.\n"
#~ "\n"
#~ "* If @x is negative, SQRT returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SQRT(2) equals 1.4142136.\n"
#~ "\n"
#~ "@SEEALSO=POWER"
#~ msgstr ""
#~ "@FUNCTION=SQRT\n"
#~ "@SYNTAX=SQRT(x)\n"
#~ "@DESCRIPTION=SQRT function returns the square root of @x.\n"
#~ "\n"
#~ "* If @x is negative, SQRT returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SQRT(2) equals 1.4142136.\n"
#~ "\n"
#~ "@SEEALSO=POWER"

#~ msgid ""
#~ "@FUNCTION=SUMSQ\n"
#~ "@SYNTAX=SUMSQ(value1, value2, ...)\n"
#~ "@DESCRIPTION=SUMSQ returns the sum of the squares of all the values and "
#~ "cells referenced in the argument list.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43.  Then\n"
#~ "SUMSQ(A1:A5) equals 2925.\n"
#~ "\n"
#~ "@SEEALSO=SUM, COUNT"
#~ msgstr ""
#~ "@FUNCTION=SUMSQ\n"
#~ "@SYNTAX=SUMSQ(value1, value2, ...)\n"
#~ "@DESCRIPTION=SUMSQ returns the sum of the squares of all the values and "
#~ "cells referenced in the argument list.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43.  Then\n"
#~ "SUMSQ(A1:A5) equals 2925.\n"
#~ "\n"
#~ "@SEEALSO=SUM, COUNT"

#~ msgid ""
#~ "@FUNCTION=MULTINOMIAL\n"
#~ "@SYNTAX=MULTINOMIAL(value1, value2, ...)\n"
#~ "@DESCRIPTION=MULTINOMIAL returns the ratio of the factorial of a sum of "
#~ "values to the product of factorials.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "MULTINOMIAL(2,3,4) equals 1260.\n"
#~ "\n"
#~ "@SEEALSO=SUM"
#~ msgstr ""
#~ "@FUNCTION=MULTINOMIAL\n"
#~ "@SYNTAX=MULTINOMIAL(value1, value2, ...)\n"
#~ "@DESCRIPTION=MULTINOMIAL returns the ratio of the factorial of a sum of "
#~ "values to the product of factorials.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "MULTINOMIAL(2,3,4) equals 1260.\n"
#~ "\n"
#~ "@SEEALSO=SUM"

#~ msgid ""
#~ "@FUNCTION=G_PRODUCT\n"
#~ "@SYNTAX=G_PRODUCT(value1, value2, ...)\n"
#~ "@DESCRIPTION=G_PRODUCT returns the product of all the values and cells "
#~ "referenced in the argument list.\n"
#~ "\n"
#~ "* Empty cells are ignored and the empty product is 1.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "G_PRODUCT(2,5,9) equals 90.\n"
#~ "\n"
#~ "@SEEALSO=SUM, COUNT"
#~ msgstr ""
#~ "@FUNCTION=G_PRODUCT\n"
#~ "@SYNTAX=G_PRODUCT(value1, value2, ...)\n"
#~ "@DESCRIPTION=G_PRODUCT returns the product of all the values and cells "
#~ "referenced in the argument list.\n"
#~ "\n"
#~ "* Empty cells are ignored and the empty product is 1.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "G_PRODUCT(2,5,9) equals 90.\n"
#~ "\n"
#~ "@SEEALSO=SUM, COUNT"

#~ msgid ""
#~ "@FUNCTION=TAN\n"
#~ "@SYNTAX=TAN(x)\n"
#~ "@DESCRIPTION=TAN function returns the tangent of @x, where @x is given in "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TAN(3) equals -0.1425465.\n"
#~ "\n"
#~ "@SEEALSO=TANH, COS, COSH, SIN, SINH, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=TAN\n"
#~ "@SYNTAX=TAN(x)\n"
#~ "@DESCRIPTION=TAN function returns the tangent of @x, where @x is given in "
#~ "radians.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TAN(3) equals -0.1425465.\n"
#~ "\n"
#~ "@SEEALSO=TANH, COS, COSH, SIN, SINH, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=TANH\n"
#~ "@SYNTAX=TANH(x)\n"
#~ "@DESCRIPTION=TANH function returns the hyperbolic tangent of @x, which is "
#~ "defined mathematically as \n"
#~ "\n"
#~ "\tsinh(@x) / cosh(@x).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TANH(2) equals 0.96402758.\n"
#~ "\n"
#~ "@SEEALSO=TAN, SIN, SINH, COS, COSH, DEGREES, RADIANS"
#~ msgstr ""
#~ "@FUNCTION=TANH\n"
#~ "@SYNTAX=TANH(x)\n"
#~ "@DESCRIPTION=TANH function returns the hyperbolic tangent of @x, which is "
#~ "defined mathematically as \n"
#~ "\n"
#~ "\tsinh(@x) / cosh(@x).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TANH(2) equals 0.96402758.\n"
#~ "\n"
#~ "@SEEALSO=TAN, SIN, SINH, COS, COSH, DEGREES, RADIANS"

#~ msgid ""
#~ "@FUNCTION=PI\n"
#~ "@SYNTAX=PI()\n"
#~ "@DESCRIPTION=PI functions returns the value of pi.\n"
#~ "\n"
#~ "* This function is called with no arguments.\n"
#~ "* This function is Excel compatible, except that it returns pi with a "
#~ "better precision.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PI() equals about 3.141593.\n"
#~ "\n"
#~ "@SEEALSO=SQRTPI"
#~ msgstr ""
#~ "@FUNCTION=PI\n"
#~ "@SYNTAX=PI()\n"
#~ "@DESCRIPTION=PI functions returns the value of pi.\n"
#~ "\n"
#~ "* This function is called with no arguments.\n"
#~ "* This function is Excel compatible, except that it returns pi with a "
#~ "better precision.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PI() equals about 3.141593.\n"
#~ "\n"
#~ "@SEEALSO=SQRTPI"

#~ msgid ""
#~ "@FUNCTION=TRUNC\n"
#~ "@SYNTAX=TRUNC(number[,digits])\n"
#~ "@DESCRIPTION=TRUNC function returns the value of @number truncated to the "
#~ "number of digits specified.\n"
#~ "\n"
#~ "* If @digits is omitted or negative then @digits defaults to zero.\n"
#~ "* If @digits is not an integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "TRUNC(3.12) equals 3.\n"
#~ "TRUNC(4.15,1) equals 4.1.\n"
#~ "\n"
#~ "@SEEALSO=INT"
#~ msgstr ""
#~ "@FUNCTION=TRUNC\n"
#~ "@SYNTAX=TRUNC(number[,digits])\n"
#~ "@DESCRIPTION=TRUNC function returns the value of @number truncated to the "
#~ "number of digits specified.\n"
#~ "\n"
#~ "* If @digits is omitted or negative then @digits defaults to zero.\n"
#~ "* If @digits is not an integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "TRUNC(3.12) equals 3.\n"
#~ "TRUNC(4.15,1) equals 4.1.\n"
#~ "\n"
#~ "@SEEALSO=INT"

#~ msgid ""
#~ "@FUNCTION=EVEN\n"
#~ "@SYNTAX=EVEN(number)\n"
#~ "@DESCRIPTION=EVEN function returns the number rounded up to the nearest "
#~ "even integer.  Negative numbers are rounded down.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "EVEN(5.4) equals 6.\n"
#~ "EVEN(-5.4) equals -6.\n"
#~ "\n"
#~ "@SEEALSO=ODD"
#~ msgstr ""
#~ "@FUNCTION=EVEN\n"
#~ "@SYNTAX=EVEN(number)\n"
#~ "@DESCRIPTION=EVEN function returns the number rounded up to the nearest "
#~ "even integer.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "EVEN(5.4) equals 6.\n"
#~ "\n"
#~ "@SEEALSO=ODD"

#~ msgid ""
#~ "@FUNCTION=ODD\n"
#~ "@SYNTAX=ODD(number)\n"
#~ "@DESCRIPTION=ODD function returns the @number rounded up to the nearest "
#~ "odd integer.  Negative numbers are rounded down.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "ODD(4.4) equals 5.\n"
#~ "ODD(-4.4) equals -5.\n"
#~ "\n"
#~ "@SEEALSO=EVEN"
#~ msgstr ""
#~ "@FUNCTION=ODD\n"
#~ "@SYNTAX=ODD(number)\n"
#~ "@DESCRIPTION=ODD function returns the @number rounded up to the nearest "
#~ "odd integer.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "ODD(4.4) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=EVEN"

#~ msgid ""
#~ "@FUNCTION=FACTDOUBLE\n"
#~ "@SYNTAX=FACTDOUBLE(number)\n"
#~ "@DESCRIPTION=FACTDOUBLE function returns the double factorial of a "
#~ "@number, i.e., x!!.\n"
#~ "\n"
#~ "* If @number is not an integer, it is truncated.\n"
#~ "* If @number is negative FACTDOUBLE returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "FACTDOUBLE(5) equals 15.\n"
#~ "\n"
#~ "@SEEALSO=FACT"
#~ msgstr ""
#~ "@FUNCTION=FACTDOUBLE\n"
#~ "@SYNTAX=FACTDOUBLE(number)\n"
#~ "@DESCRIPTION=FACTDOUBLE function returns the double factorial of a "
#~ "@number, i.e., x!!.\n"
#~ "\n"
#~ "* If @number is not an integer, it is truncated.\n"
#~ "* If @number is negative FACTDOUBLE returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "FACTDOUBLE(5) equals 15.\n"
#~ "\n"
#~ "@SEEALSO=FACT"

#~ msgid ""
#~ "@FUNCTION=FIB\n"
#~ "@SYNTAX=FIB(number)\n"
#~ "@DESCRIPTION=FIB function computes Fibonacci numbers.\n"
#~ "\n"
#~ "* If @number is not an integer, it is truncated.\n"
#~ "* If @number is negative or zero FIB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FIB(12) equals 144.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=FIB\n"
#~ "@SYNTAX=FIB(number)\n"
#~ "@DESCRIPTION=FIB function computes Fibonacci numbers.\n"
#~ "\n"
#~ "* If @number is not an integer, it is truncated.\n"
#~ "* If @number is negative or zero FIB returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FIB(12) equals 144.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=QUOTIENT\n"
#~ "@SYNTAX=QUOTIENT(numerator,denominator)\n"
#~ "@DESCRIPTION=QUOTIENT function returns the integer portion of a "
#~ "division.  @numerator is the divided number and @denominator is the "
#~ "divisor.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "QUOTIENT(23,5) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=MOD"
#~ msgstr ""
#~ "@FUNCTION=QUOTIENT\n"
#~ "@SYNTAX=QUOTIENT(numerator,denominator)\n"
#~ "@DESCRIPTION=QUOTIENT function returns the integer portion of a "
#~ "division.  @numerator is the divided number and @denominator is the "
#~ "divisor.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "QUOTIENT(23,5) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=MOD"

#~ msgid ""
#~ "@FUNCTION=SIGN\n"
#~ "@SYNTAX=SIGN(number)\n"
#~ "@DESCRIPTION=SIGN function returns 1 if the @number is positive, zero if "
#~ "the @number is 0, and -1 if the @number is negative.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "SIGN(3) equals 1.\n"
#~ "SIGN(-3) equals -1.\n"
#~ "SIGN(0) equals 0.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=SIGN\n"
#~ "@SYNTAX=SIGN(number)\n"
#~ "@DESCRIPTION=SIGN function returns 1 if the @number is positive, zero if "
#~ "the @number is 0, and -1 if the @number is negative.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "SIGN(3) equals 1.\n"
#~ "SIGN(-3) equals -1.\n"
#~ "SIGN(0) equals 0.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=SQRTPI\n"
#~ "@SYNTAX=SQRTPI(number)\n"
#~ "@DESCRIPTION=SQRTPI function returns the square root of a @number "
#~ "multiplied by pi.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SQRTPI(2) equals 2.506628275.\n"
#~ "\n"
#~ "@SEEALSO=PI"
#~ msgstr ""
#~ "@FUNCTION=SQRTPI\n"
#~ "@SYNTAX=SQRTPI(number)\n"
#~ "@DESCRIPTION=SQRTPI function returns the square root of a @number "
#~ "multiplied by pi.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SQRTPI(2) equals 2.506628275.\n"
#~ "\n"
#~ "@SEEALSO=PI"

#~ msgid ""
#~ "@FUNCTION=ROUNDDOWN\n"
#~ "@SYNTAX=ROUNDDOWN(number[,digits])\n"
#~ "@DESCRIPTION=ROUNDDOWN function rounds a given @number towards 0.\n"
#~ "\n"
#~ "@number is the number you want rounded toward 0 and @digits is the number "
#~ "of digits to which you want to round that number.\n"
#~ "\n"
#~ "* If @digits is greater than zero, @number is rounded toward 0 to the "
#~ "given number of digits.\n"
#~ "* If @digits is zero or omitted, @number is rounded toward 0 to the next "
#~ "integer.\n"
#~ "* If @digits is less than zero, @number is rounded toward 0 to the left "
#~ "of the decimal point.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROUNDDOWN(5.5) equals 5.\n"
#~ "ROUNDDOWN(-3.3) equals -3.\n"
#~ "ROUNDDOWN(1501.15,1) equals 1501.1.\n"
#~ "ROUNDDOWN(1501.15,-2) equals 1500.0.\n"
#~ "\n"
#~ "@SEEALSO=ROUND,ROUNDUP"
#~ msgstr ""
#~ "@FUNCTION=ROUNDDOWN\n"
#~ "@SYNTAX=ROUNDDOWN(number[,digits])\n"
#~ "@DESCRIPTION=ROUNDDOWN function rounds a given @number down. @number is "
#~ "the number you want rounded down and @digits is the number of digits to "
#~ "which you want to round that number.\n"
#~ "\n"
#~ "* If @digits is greater than zero, @number is rounded down to the given "
#~ "number of digits.\n"
#~ "* If @digits is zero or omitted, @number is rounded down to the nearest "
#~ "integer.\n"
#~ "* If @digits is less than zero, @number is rounded down to the left of "
#~ "the decimal point.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROUNDDOWN(5.5) equals 5.\n"
#~ "ROUNDDOWN(-3.3) equals -4.\n"
#~ "ROUNDDOWN(1501.15,1) equals 1501.1.\n"
#~ "ROUNDDOWN(1501.15,-2) equals 1500.0.\n"
#~ "\n"
#~ "@SEEALSO=ROUND,ROUNDUP"

#~ msgid ""
#~ "@FUNCTION=ROUND\n"
#~ "@SYNTAX=ROUND(number[,digits])\n"
#~ "@DESCRIPTION=ROUND function rounds a given number.\n"
#~ "\n"
#~ "@number is the number you want rounded and @digits is the number of "
#~ "digits to which you want to round that number.\n"
#~ "\n"
#~ "* If @digits is greater than zero, @number is rounded to the given number "
#~ "of digits.\n"
#~ "* If @digits is zero or omitted, @number is rounded to the nearest "
#~ "integer.\n"
#~ "* If @digits is less than zero, @number is rounded to the left of the "
#~ "decimal point.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROUND(5.5) equals 6.\n"
#~ "ROUND(-3.3) equals -3.\n"
#~ "ROUND(1501.15,1) equals 1501.2.\n"
#~ "ROUND(1501.15,-2) equals 1500.0.\n"
#~ "\n"
#~ "@SEEALSO=ROUNDDOWN,ROUNDUP"
#~ msgstr ""
#~ "@FUNCTION=ROUND\n"
#~ "@SYNTAX=ROUND(number[,digits])\n"
#~ "@DESCRIPTION=ROUND function rounds a given number.\n"
#~ "\n"
#~ "@number is the number you want rounded and @digits is the number of "
#~ "digits to which you want to round that number.\n"
#~ "\n"
#~ "* If @digits is greater than zero, @number is rounded to the given number "
#~ "of digits.\n"
#~ "* If @digits is zero or omitted, @number is rounded to the nearest "
#~ "integer.\n"
#~ "* If @digits is less than zero, @number is rounded to the left of the "
#~ "decimal point.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROUND(5.5) equals 6.\n"
#~ "ROUND(-3.3) equals -3.\n"
#~ "ROUND(1501.15,1) equals 1501.2.\n"
#~ "ROUND(1501.15,-2) equals 1500.0.\n"
#~ "\n"
#~ "@SEEALSO=ROUNDDOWN,ROUNDUP"

#~ msgid ""
#~ "@FUNCTION=ROUNDUP\n"
#~ "@SYNTAX=ROUNDUP(number[,digits])\n"
#~ "@DESCRIPTION=ROUNDUP function rounds a given number away from 0.\n"
#~ "\n"
#~ "@number is the number you want rounded away from 0 and @digits is the "
#~ "number of digits to which you want to round that number.\n"
#~ "\n"
#~ "* If @digits is greater than zero, @number is rounded away from 0 to the "
#~ "given number of digits.\n"
#~ "* If @digits is zero or omitted, @number is rounded away from 0 to the "
#~ "next integer.\n"
#~ "* If @digits is less than zero, @number is rounded away from 0 to the "
#~ "left of the decimal point.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROUNDUP(5.5) equals 6.\n"
#~ "ROUNDUP(-3.3) equals -4.\n"
#~ "ROUNDUP(1501.15,1) equals 1501.2.\n"
#~ "ROUNDUP(1501.15,-2) equals 1600.0.\n"
#~ "\n"
#~ "@SEEALSO=ROUND,ROUNDDOWN"
#~ msgstr ""
#~ "@FUNCTION=ROUNDUP\n"
#~ "@SYNTAX=ROUNDUP(number[,digits])\n"
#~ "@DESCRIPTION=ROUNDUP function rounds a given number up.\n"
#~ "\n"
#~ "@number is the number you want rounded up and @digits is the number of "
#~ "digits to which you want to round that number.\n"
#~ "\n"
#~ "* If @digits is greater than zero, @number is rounded up to the given "
#~ "number of digits.\n"
#~ "* If @digits is zero or omitted, @number is rounded up to the nearest "
#~ "integer.\n"
#~ "* If @digits is less than zero, @number is rounded up to the left of the "
#~ "decimal point.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROUNDUP(5.5) equals 6.\n"
#~ "ROUNDUP(-3.3) equals -3.\n"
#~ "ROUNDUP(1501.15,1) equals 1501.2.\n"
#~ "ROUNDUP(1501.15,-2) equals 1600.0.\n"
#~ "\n"
#~ "@SEEALSO=ROUND,ROUNDDOWN"

#~ msgid ""
#~ "@FUNCTION=MROUND\n"
#~ "@SYNTAX=MROUND(number,multiple)\n"
#~ "@DESCRIPTION=MROUND function rounds a given number to the desired "
#~ "multiple.\n"
#~ "\n"
#~ "@number is the number you want rounded and @multiple is the the multiple "
#~ "to which you want to round the number.\n"
#~ "\n"
#~ "* If @number and @multiple have different sign, MROUND returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MROUND(1.7,0.2) equals 1.8.\n"
#~ "MROUND(321.123,0.12) equals 321.12.\n"
#~ "\n"
#~ "@SEEALSO=ROUNDDOWN,ROUND,ROUNDUP"
#~ msgstr ""
#~ "@FUNCTION=MROUND\n"
#~ "@SYNTAX=MROUND(number,multiple)\n"
#~ "@DESCRIPTION=MROUND function rounds a given number to the desired "
#~ "multiple.\n"
#~ "\n"
#~ "@number is the number you want rounded and @multiple is the the multiple "
#~ "to which you want to round the number.\n"
#~ "\n"
#~ "* If @number and @multiple have different sign, MROUND returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MROUND(1.7,0.2) equals 1.8.\n"
#~ "MROUND(321.123,0.12) equals 321.12.\n"
#~ "\n"
#~ "@SEEALSO=ROUNDDOWN,ROUND,ROUNDUP"

#~ msgid ""
#~ "@FUNCTION=ROMAN\n"
#~ "@SYNTAX=ROMAN(number[,type])\n"
#~ "@DESCRIPTION=ROMAN function returns an arabic number in the roman numeral "
#~ "style, as text. @number is the number you want to convert and @type is "
#~ "the type of roman numeral you want.\n"
#~ "\n"
#~ "* If @type is 0 or it is omitted, ROMAN returns classic roman numbers.\n"
#~ "* Type 1 is more concise than classic type, type 2 is more concise than "
#~ "type 1, and type 3 is more concise than type 2.  Type 4 is simplified "
#~ "type.\n"
#~ "* If @number is negative or greater than 3999, ROMAN returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROMAN(999) equals CMXCIX.\n"
#~ "ROMAN(999,1) equals LMVLIV.\n"
#~ "ROMAN(999,2) equals XMIX.\n"
#~ "ROMAN(999,3) equals VMIV.\n"
#~ "ROMAN(999,4) equals IM.\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ROMAN\n"
#~ "@SYNTAX=ROMAN(number[,type])\n"
#~ "@DESCRIPTION=ROMAN function returns an arabic number in the roman numeral "
#~ "style, as text. @number is the number you want to convert and @type is "
#~ "the type of roman numeral you want.\n"
#~ "\n"
#~ "* If @type is 0 or it is omitted, ROMAN returns classic roman numbers.\n"
#~ "* Type 1 is more concise than classic type, type 2 is more concise than "
#~ "type 1, and type 3 is more concise than type 2.  Type 4 is simplified "
#~ "type.\n"
#~ "* If @number is negative or greater than 3999, ROMAN returns #VALUE! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROMAN(999) equals CMXCIX.\n"
#~ "ROMAN(999,1) equals LMVLIV.\n"
#~ "ROMAN(999,2) equals XMIX.\n"
#~ "ROMAN(999,3) equals VMIV.\n"
#~ "ROMAN(999,4) equals IM.\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=SUMX2MY2\n"
#~ "@SYNTAX=SUMX2MY2(array1,array2)\n"
#~ "@DESCRIPTION=SUMX2MY2 function returns the sum of the difference of "
#~ "squares of corresponding values in two arrays. @array1 is the first array "
#~ "or range of data points and @array2 is the second array or range of data "
#~ "points. The equation of SUMX2MY2 is SUM (x^2-y^2).\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If @array1 and @array2 have different number of data points, SUMX2MY2 "
#~ "returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMX2MY2(A1:A5,B1:B5) equals -1299.\n"
#~ "\n"
#~ "@SEEALSO=SUMSQ,SUMX2PY2"
#~ msgstr ""
#~ "@FUNCTION=SUMX2MY2\n"
#~ "@SYNTAX=SUMX2MY2(array1,array2)\n"
#~ "@DESCRIPTION=SUMX2MY2 function returns the sum of the difference of "
#~ "squares of corresponding values in two arrays. @array1 is the first array "
#~ "or range of data points and @array2 is the second array or range of data "
#~ "points. The equation of SUMX2MY2 is SUM (x^2-y^2).\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If @array1 and @array2 have different number of data points, SUMX2MY2 "
#~ "returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMX2MY2(A1:A5,B1:B5) equals -1299.\n"
#~ "\n"
#~ "@SEEALSO=SUMSQ,SUMX2PY2"

#~ msgid ""
#~ "@FUNCTION=SUMX2PY2\n"
#~ "@SYNTAX=SUMX2PY2(array1,array2)\n"
#~ "@DESCRIPTION=SUMX2PY2 function returns the sum of the sum of squares of "
#~ "corresponding values in two arrays. @array1 is the first array or range "
#~ "of data points and @array2 is the second array or range of data points. "
#~ "The equation of SUMX2PY2 is SUM (x^2+y^2).\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If @array1 and @array2 have different number of data points, SUMX2PY2 "
#~ "returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMX2PY2(A1:A5,B1:B5) equals 7149.\n"
#~ "\n"
#~ "@SEEALSO=SUMSQ,SUMX2MY2"
#~ msgstr ""
#~ "@FUNCTION=SUMX2PY2\n"
#~ "@SYNTAX=SUMX2PY2(array1,array2)\n"
#~ "@DESCRIPTION=SUMX2PY2 function returns the sum of the sum of squares of "
#~ "corresponding values in two arrays. @array1 is the first array or range "
#~ "of data points and @array2 is the second array or range of data points. "
#~ "The equation of SUMX2PY2 is SUM (x^2+y^2).\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If @array1 and @array2 have different number of data points, SUMX2PY2 "
#~ "returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMX2PY2(A1:A5,B1:B5) equals 7149.\n"
#~ "\n"
#~ "@SEEALSO=SUMSQ,SUMX2MY2"

#~ msgid ""
#~ "@FUNCTION=SUMXMY2\n"
#~ "@SYNTAX=SUMXMY2(array1,array2)\n"
#~ "@DESCRIPTION=SUMXMY2 function returns the sum of squares of differences "
#~ "of corresponding values in two arrays. @array1 is the first array or "
#~ "range of data points and @array2 is the second array or range of data "
#~ "points. The equation of SUMXMY2 is SUM (x-y)^2.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If @array1 and @array2 have different number of data points, SUMXMY2 "
#~ "returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMXMY2(A1:A5,B1:B5) equals 409.\n"
#~ "\n"
#~ "@SEEALSO=SUMSQ,SUMX2MY2,SUMX2PY2"
#~ msgstr ""
#~ "@FUNCTION=SUMXMY2\n"
#~ "@SYNTAX=SUMXMY2(array1,array2)\n"
#~ "@DESCRIPTION=SUMXMY2 function returns the sum of squares of differences "
#~ "of corresponding values in two arrays. @array1 is the first array or "
#~ "range of data points and @array2 is the second array or range of data "
#~ "points. The equation of SUMXMY2 is SUM (x-y)^2.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If @array1 and @array2 have different number of data points, SUMXMY2 "
#~ "returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMXMY2(A1:A5,B1:B5) equals 409.\n"
#~ "\n"
#~ "@SEEALSO=SUMSQ,SUMX2MY2,SUMX2PY2"

#~ msgid ""
#~ "@FUNCTION=SERIESSUM\n"
#~ "@SYNTAX=SERIESSUM(x,n,m,coefficients)\n"
#~ "@DESCRIPTION=SERIESSUM function returns the sum of a power series.  @x is "
#~ "the base of the power series, @n is the initial power to raise @x, @m is "
#~ "the increment to the power for each term in the series, and @coefficients "
#~ "are the coefficients by which each successive power of @x is multiplied.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 1.23, 2.32, "
#~ "2.98, 3.42, and 4.33.  Then\n"
#~ "SERIESSUM(3,1,2.23,A1:A5) equals 251416.43018.\n"
#~ "\n"
#~ "@SEEALSO=COUNT,SUM"
#~ msgstr ""
#~ "@FUNCTION=SERIESSUM\n"
#~ "@SYNTAX=SERIESSUM(x,n,m,coefficients)\n"
#~ "@DESCRIPTION=SERIESSUM function returns the sum of a power series.  @x is "
#~ "the base of the power series, @n is the initial power to raise @x, @m is "
#~ "the increment to the power for each term in the series, and @coefficients "
#~ "are the coefficients by which each successive power of @x is multiplied.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 1.23, 2.32, "
#~ "2.98, 3.42, and 4.33.  Then\n"
#~ "SERIESSUM(3,1,2.23,A1:A5) equals 251416.43018.\n"
#~ "\n"
#~ "@SEEALSO=COUNT,SUM"

#~ msgid ""
#~ "@FUNCTION=MINVERSE\n"
#~ "@SYNTAX=MINVERSE(matrix)\n"
#~ "@DESCRIPTION=MINVERSE function returns the inverse matrix of @matrix.\n"
#~ "\n"
#~ "* If @matrix cannot be inverted, MINVERSE returns #NUM! error.\n"
#~ "* If @matrix does not contain equal number of columns and rows, MINVERSE "
#~ "returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=MMULT, MDETERM"
#~ msgstr ""
#~ "@FUNCTION=MINVERSE\n"
#~ "@SYNTAX=MINVERSE(matrix)\n"
#~ "@DESCRIPTION=MINVERSE function returns the inverse matrix of @matrix.\n"
#~ "\n"
#~ "* If @matrix cannot be inverted, MINVERSE returns #NUM! error.\n"
#~ "* If @matrix does not contain equal number of columns and rows, MINVERSE "
#~ "returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=MMULT, MDETERM"

#~ msgid ""
#~ "@FUNCTION=MMULT\n"
#~ "@SYNTAX=MMULT(array1,array2)\n"
#~ "@DESCRIPTION=MMULT function returns the matrix product of two arrays. The "
#~ "result is an array with the same number of rows as @array1 and the same "
#~ "number of columns as @array2.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TRANSPOSE,MINVERSE"
#~ msgstr ""
#~ "@FUNCTION=MMULT\n"
#~ "@SYNTAX=MMULT(array1,array2)\n"
#~ "@DESCRIPTION=MMULT function returns the matrix product of two arrays. The "
#~ "result is an array with the same number of rows as @array1 and the same "
#~ "number of columns as @array2.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=TRANSPOSE,MINVERSE"

#~ msgid ""
#~ "@FUNCTION=MDETERM\n"
#~ "@SYNTAX=MDETERM(matrix)\n"
#~ "@DESCRIPTION=MDETERM function returns the determinant of a given matrix.\n"
#~ "\n"
#~ "* If the @matrix does not contain equal number of columns and rows, "
#~ "MDETERM returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that A1, ..., A4 contain numbers 2, 3, 7, and 3, B1, ..., "
#~ "B4 4, 2, 4, and 1, C1, ..., C4 9, 4, 3, and 2, and D1, ..., D4 7, 3, 6, "
#~ "and 5. Then\n"
#~ "MDETERM(A1:D4) equals 148.\n"
#~ "\n"
#~ "@SEEALSO=MMULT, MINVERSE"
#~ msgstr ""
#~ "@FUNCTION=MDETERM\n"
#~ "@SYNTAX=MDETERM(matrix)\n"
#~ "@DESCRIPTION=MDETERM function returns the determinant of a given matrix.\n"
#~ "\n"
#~ "* If the @matrix does not contain equal number of columns and rows, "
#~ "MDETERM returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that A1, ..., A4 contain numbers 2, 3, 7, and 3, B1, ..., "
#~ "B4 4, 2, 4, and 1, C1, ..., C4 9, 4, 3, and 2, and D1, ..., D4 7, 3, 6, "
#~ "and 5. Then\n"
#~ "MDETERM(A1:D4) equals 148.\n"
#~ "\n"
#~ "@SEEALSO=MMULT, MINVERSE"

#~ msgid ""
#~ "give_log:if true, log of the result will be returned instead.  This is "
#~ "useful if the result would otherwise underflow to 0.  Defaults to false."
#~ msgstr ""
#~ "give_log:if true, log of the result will be returned instead.  This is "
#~ "useful if the result would otherwise underflow to 0.  Defaults to false."

#~ msgid ""
#~ "log_p:if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false."
#~ msgstr ""
#~ "log_p:if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false."

#~ msgid ""
#~ "@FUNCTION=RAND\n"
#~ "@SYNTAX=RAND()\n"
#~ "@DESCRIPTION=RAND returns a random number between zero and one.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RAND() returns a random number greater than zero but less than one.\n"
#~ "\n"
#~ "@SEEALSO=RANDBETWEEN"
#~ msgstr ""
#~ "@FUNCTION=RAND\n"
#~ "@SYNTAX=RAND()\n"
#~ "@DESCRIPTION=RAND returns a random number between zero and one.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RAND() returns a random number greater than zero but less than one.\n"
#~ "\n"
#~ "@SEEALSO=RANDBETWEEN"

#~ msgid ""
#~ "@FUNCTION=RANDUNIFORM\n"
#~ "@SYNTAX=RANDUNIFORM(a,b)\n"
#~ "@DESCRIPTION=RANDUNIFORM returns a random variate from the uniform (flat) "
#~ "distribution from a to b. The distribution is,\n"
#~ "\n"
#~ "\tp(x) dx = {1 over (b-a)} dx : for a <= x < b.\n"
#~ "p(x) dx = 0 : for x < a or b <= x.\n"
#~ "* If @a > @b RANDUNIFORM returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDUNIFORM(1.4,4.2) returns a random number greater than or equal to 1.4 "
#~ "but less than 4.2.\n"
#~ "\n"
#~ "@SEEALSO=RANDBETWEEN,RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDUNIFORM\n"
#~ "@SYNTAX=RANDUNIFORM(a,b)\n"
#~ "@DESCRIPTION=RANDUNIFORM returns a random variate from the uniform (flat) "
#~ "distribution from a to b. The distribution is,\n"
#~ "\n"
#~ "\tp(x) dx = {1 over (b-a)} dx : for a <= x < b.\n"
#~ "p(x) dx = 0 : for x < a or b <= x.\n"
#~ "* If @a > @b RANDUNIFORM returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDUNIFORM(1.4,4.2) returns a random number greater than or equal to 1.4 "
#~ "but less than 4.2.\n"
#~ "\n"
#~ "@SEEALSO=RANDBETWEEN,RAND"

#~ msgid ""
#~ "@FUNCTION=RANDDISCRETE\n"
#~ "@SYNTAX=RANDDISCRETE(val_range[,prob_range])\n"
#~ "@DESCRIPTION=RANDDISCRETE returns one of the values in the @val_range. "
#~ "The probabilities for each value are given in the @prob_range.\n"
#~ "\n"
#~ "* If @prob_range is omitted, the uniform discrete distribution is "
#~ "assumed.\n"
#~ "* If the sum of all values in @prob_range is other than one, RANDDISCRETE "
#~ "returns #NUM! error.\n"
#~ "* If @val_range and @prob_range are not the same size, RANDDISCRETE "
#~ "returns #NUM! error.\n"
#~ "* If @val_range or @prob_range is not a range, RANDDISCRETE returns "
#~ "#VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDDISCRETE(A1:A6) returns one of the values in the range A1:A6.\n"
#~ "\n"
#~ "@SEEALSO=RANDBETWEEN,RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDDISCRETE\n"
#~ "@SYNTAX=RANDDISCRETE(val_range[,prob_range])\n"
#~ "@DESCRIPTION=RANDDISCRETE returns one of the values in the @val_range. "
#~ "The probabilities for each value are given in the @prob_range.\n"
#~ "\n"
#~ "* If @prob_range is omitted, the uniform discrete distribution is "
#~ "assumed.\n"
#~ "* If the sum of all values in @prob_range is other than one, RANDDISCRETE "
#~ "returns #NUM! error.\n"
#~ "* If @val_range and @prob_range are not the same size, RANDDISCRETE "
#~ "returns #NUM! error.\n"
#~ "* If @val_range or @prob_range is not a range, RANDDISCRETE returns "
#~ "#VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDDISCRETE(A1:A6) returns one of the values in the range A1:A6.\n"
#~ "\n"
#~ "@SEEALSO=RANDBETWEEN,RAND"

#~ msgid ""
#~ "@FUNCTION=RANDEXP\n"
#~ "@SYNTAX=RANDEXP(b)\n"
#~ "@DESCRIPTION=RANDEXP returns a exponentially-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDEXP(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"
#~ msgstr ""
#~ "@FUNCTION=RANDEXP\n"
#~ "@SYNTAX=RANDEXP(b)\n"
#~ "@DESCRIPTION=RANDEXP returns a exponentially-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDEXP(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"

#~ msgid ""
#~ "@FUNCTION=RANDPOISSON\n"
#~ "@SYNTAX=RANDPOISSON(lambda)\n"
#~ "@DESCRIPTION=RANDPOISSON returns a Poisson-distributed random number.\n"
#~ "\n"
#~ "* If @lambda < 0 RANDPOISSON returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDPOISSON(3).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"
#~ msgstr ""
#~ "@FUNCTION=RANDPOISSON\n"
#~ "@SYNTAX=RANDPOISSON(lambda)\n"
#~ "@DESCRIPTION=RANDPOISSON returns a Poisson-distributed random number.\n"
#~ "\n"
#~ "* If @lambda < 0 RANDPOISSON returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDPOISSON(3).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"

#~ msgid ""
#~ "@FUNCTION=RANDBINOM\n"
#~ "@SYNTAX=RANDBINOM(p,trials)\n"
#~ "@DESCRIPTION=RANDBINOM returns a binomially-distributed random number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDBINOM returns #NUM! error.\n"
#~ "* If @trials < 0 RANDBINOM returns #NUM! error. \n"
#~ "@EXAMPLES=\n"
#~ "RANDBINOM(0.5,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"
#~ msgstr ""
#~ "@FUNCTION=RANDBINOM\n"
#~ "@SYNTAX=RANDBINOM(p,trials)\n"
#~ "@DESCRIPTION=RANDBINOM returns a binomially-distributed random number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDBINOM returns #NUM! error.\n"
#~ "* If @trials < 0 RANDBINOM returns #NUM! error. \n"
#~ "@EXAMPLES=\n"
#~ "RANDBINOM(0.5,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"

#~ msgid ""
#~ "@FUNCTION=RANDBETWEEN\n"
#~ "@SYNTAX=RANDBETWEEN(bottom,top)\n"
#~ "@DESCRIPTION=RANDBETWEEN function returns a random integer number between "
#~ "and including @bottom and @top.\n"
#~ "\n"
#~ "* If @bottom is non-integer, it is rounded up.\n"
#~ "* If @top is non-integer, it is rounded down.\n"
#~ "* If @bottom > @top, RANDBETWEEN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDBETWEEN(3,7).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDUNIFORM"
#~ msgstr ""
#~ "@FUNCTION=RANDBETWEEN\n"
#~ "@SYNTAX=RANDBETWEEN(bottom,top)\n"
#~ "@DESCRIPTION=RANDBETWEEN function returns a random integer number between "
#~ "and including @bottom and @top.\n"
#~ "\n"
#~ "* If @bottom is non-integer, it is rounded up.\n"
#~ "* If @top is non-integer, it is rounded down.\n"
#~ "* If @bottom > @top, RANDBETWEEN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDBETWEEN(3,7).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDUNIFORM"

#~ msgid ""
#~ "@FUNCTION=RANDNEGBINOM\n"
#~ "@SYNTAX=RANDNEGBINOM(p,failures)\n"
#~ "@DESCRIPTION=RANDNEGBINOM returns a negative binomially-distributed "
#~ "random number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1, RANDNEGBINOM returns #NUM! error.\n"
#~ "* If @failures < 1, RANDNEGBINOM returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDNEGBINOM(0.5,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"
#~ msgstr ""
#~ "@FUNCTION=RANDNEGBINOM\n"
#~ "@SYNTAX=RANDNEGBINOM(p,failures)\n"
#~ "@DESCRIPTION=RANDNEGBINOM returns a negative binomially-distributed "
#~ "random number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1, RANDNEGBINOM returns #NUM! error.\n"
#~ "* If @failures < 1, RANDNEGBINOM returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDNEGBINOM(0.5,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"

#~ msgid ""
#~ "@FUNCTION=RANDBERNOULLI\n"
#~ "@SYNTAX=RANDBERNOULLI(p)\n"
#~ "@DESCRIPTION=RANDBERNOULLI returns a Bernoulli-distributed random "
#~ "number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDBERNOULLI returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDBERNOULLI(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"
#~ msgstr ""
#~ "@FUNCTION=RANDBERNOULLI\n"
#~ "@SYNTAX=RANDBERNOULLI(p)\n"
#~ "@DESCRIPTION=RANDBERNOULLI returns a Bernoulli-distributed random "
#~ "number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDBERNOULLI returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDBERNOULLI(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDBETWEEN"

#~ msgid ""
#~ "@FUNCTION=RANDNORM\n"
#~ "@SYNTAX=RANDNORM(mean,stdev)\n"
#~ "@DESCRIPTION=RANDNORM returns a normal-distributed random number.\n"
#~ "\n"
#~ "* If @stdev < 0 RANDNORM returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDNORM(0,1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDNORM\n"
#~ "@SYNTAX=RANDNORM(mean,stdev)\n"
#~ "@DESCRIPTION=RANDNORM returns a normal-distributed random number.\n"
#~ "\n"
#~ "* If @stdev < 0 RANDNORM returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDNORM(0,1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDCAUCHY\n"
#~ "@SYNTAX=RANDCAUCHY(a)\n"
#~ "@DESCRIPTION=RANDCAUCHY returns a Cauchy-distributed random number with "
#~ "scale parameter a. The Cauchy distribution is also known as the Lorentz "
#~ "distribution.\n"
#~ "\n"
#~ "* If @a < 0 RANDCAUCHY returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDCAUCHY(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDCAUCHY\n"
#~ "@SYNTAX=RANDCAUCHY(a)\n"
#~ "@DESCRIPTION=RANDCAUCHY returns a Cauchy-distributed random number with "
#~ "scale parameter a. The Cauchy distribution is also known as the Lorentz "
#~ "distribution.\n"
#~ "\n"
#~ "* If @a < 0 RANDCAUCHY returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDCAUCHY(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDLOGNORM\n"
#~ "@SYNTAX=RANDLOGNORM(zeta,sigma)\n"
#~ "@DESCRIPTION=RANDLOGNORM returns a lognormal-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLOGNORM(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDLOGNORM\n"
#~ "@SYNTAX=RANDLOGNORM(zeta,sigma)\n"
#~ "@DESCRIPTION=RANDLOGNORM returns a lognormal-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLOGNORM(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDWEIBULL\n"
#~ "@SYNTAX=RANDWEIBULL(a,b)\n"
#~ "@DESCRIPTION=RANDWEIBULL returns a Weibull-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDWEIBULL(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDWEIBULL\n"
#~ "@SYNTAX=RANDWEIBULL(a,b)\n"
#~ "@DESCRIPTION=RANDWEIBULL returns a Weibull-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDWEIBULL(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDLAPLACE\n"
#~ "@SYNTAX=RANDLAPLACE(a)\n"
#~ "@DESCRIPTION=RANDLAPLACE returns a Laplace-distributed random number. "
#~ "Laplace distribution is also known as two-sided exponential probability "
#~ "distribution.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLAPLACE(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDLAPLACE\n"
#~ "@SYNTAX=RANDLAPLACE(a)\n"
#~ "@DESCRIPTION=RANDLAPLACE returns a Laplace-distributed random number. "
#~ "Laplace distribution is also known as two-sided exponential probability "
#~ "distribution.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLAPLACE(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDRAYLEIGH\n"
#~ "@SYNTAX=RANDRAYLEIGH(sigma)\n"
#~ "@DESCRIPTION=RANDRAYLEIGH returns a Rayleigh-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDRAYLEIGH(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDRAYLEIGH\n"
#~ "@SYNTAX=RANDRAYLEIGH(sigma)\n"
#~ "@DESCRIPTION=RANDRAYLEIGH returns a Rayleigh-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDRAYLEIGH(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDRAYLEIGHTAIL\n"
#~ "@SYNTAX=RANDRAYLEIGHTAIL(a,sigma)\n"
#~ "@DESCRIPTION=RANDRAYLEIGHTAIL returns  a random variate from the tail of "
#~ "the Rayleigh distribution with scale parameter sigma and a lower limit of "
#~ "a. The distribution is,\n"
#~ "\n"
#~ "\tp(x) dx = {x over sigma^2} exp ((a^2 - x^2) /(2 sigma^2)) dx,\n"
#~ "\n"
#~ "for x > a.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDRAYLEIGHTAIL(0.3,1).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDRAYLEIGH"
#~ msgstr ""
#~ "@FUNCTION=RANDRAYLEIGHTAIL\n"
#~ "@SYNTAX=RANDRAYLEIGHTAIL(a,sigma)\n"
#~ "@DESCRIPTION=RANDRAYLEIGHTAIL returns  a random variate from the tail of "
#~ "the Rayleigh distribution with scale parameter sigma and a lower limit of "
#~ "a. The distribution is,\n"
#~ "\n"
#~ "\tp(x) dx = {x over sigma^2} exp ((a^2 - x^2) /(2 sigma^2)) dx,\n"
#~ "\n"
#~ "for x > a.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDRAYLEIGHTAIL(0.3,1).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDRAYLEIGH"

#~ msgid ""
#~ "@FUNCTION=RANDGAMMA\n"
#~ "@SYNTAX=RANDGAMMA(a,b)\n"
#~ "@DESCRIPTION=RANDGAMMA returns a Gamma-distributed random number.\n"
#~ "\n"
#~ "* If @a <= 0 RANDGAMMA returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDGAMMA(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDGAMMA\n"
#~ "@SYNTAX=RANDGAMMA(a,b)\n"
#~ "@DESCRIPTION=RANDGAMMA returns a Gamma-distributed random number.\n"
#~ "\n"
#~ "* If @a <= 0 RANDGAMMA returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDGAMMA(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDPARETO\n"
#~ "@SYNTAX=RANDPARETO(a,b)\n"
#~ "@DESCRIPTION=RANDPARETO returns a Pareto-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDPARETO(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDPARETO\n"
#~ "@SYNTAX=RANDPARETO(a,b)\n"
#~ "@DESCRIPTION=RANDPARETO returns a Pareto-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDPARETO(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDFDIST\n"
#~ "@SYNTAX=RANDFDIST(nu1,nu2)\n"
#~ "@DESCRIPTION=RANDFDIST returns a F-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDFDIST(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDGAMMA"
#~ msgstr ""
#~ "@FUNCTION=RANDFDIST\n"
#~ "@SYNTAX=RANDFDIST(nu1,nu2)\n"
#~ "@DESCRIPTION=RANDFDIST returns a F-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDFDIST(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDGAMMA"

#~ msgid ""
#~ "@FUNCTION=RANDBETA\n"
#~ "@SYNTAX=RANDBETA(a,b)\n"
#~ "@DESCRIPTION=RANDBETA returns a Beta-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDBETA(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDGAMMA"
#~ msgstr ""
#~ "@FUNCTION=RANDBETA\n"
#~ "@SYNTAX=RANDBETA(a,b)\n"
#~ "@DESCRIPTION=RANDBETA returns a Beta-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDBETA(1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDGAMMA"

#~ msgid ""
#~ "@FUNCTION=RANDLOGISTIC\n"
#~ "@SYNTAX=RANDLOGISTIC(a)\n"
#~ "@DESCRIPTION=RANDLOGISTIC returns a logistic-distributed random number.  "
#~ "The distribution function is,\n"
#~ "\n"
#~ "\tp(x) dx = { exp(-x/a) over a (1 + exp(-x/a))^2 } dx for -infty < x < "
#~ "+infty.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLOGISTIC(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDLOGISTIC\n"
#~ "@SYNTAX=RANDLOGISTIC(a)\n"
#~ "@DESCRIPTION=RANDLOGISTIC returns a logistic-distributed random number.  "
#~ "The distribution function is,\n"
#~ "\n"
#~ "\tp(x) dx = { exp(-x/a) over a (1 + exp(-x/a))^2 } dx for -infty < x < "
#~ "+infty.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLOGISTIC(1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDGEOM\n"
#~ "@SYNTAX=RANDGEOM(p)\n"
#~ "@DESCRIPTION=RANDGEOM returns a geometric-distributed random number. The "
#~ "number of independent trials with probability @p until the first success. "
#~ "The probability distribution for geometric variates is, \n"
#~ "\n"
#~ "\tp(k) =  p (1-p)^(k-1), for k >= 1.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDGEOM returns #NUM! error. \n"
#~ "@EXAMPLES=\n"
#~ "RANDGEOM(0.4).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDGEOM\n"
#~ "@SYNTAX=RANDGEOM(p)\n"
#~ "@DESCRIPTION=RANDGEOM returns a geometric-distributed random number. The "
#~ "number of independent trials with probability @p until the first success. "
#~ "The probability distribution for geometric variates is, \n"
#~ "\n"
#~ "\tp(k) =  p (1-p)^(k-1), for k >= 1.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDGEOM returns #NUM! error. \n"
#~ "@EXAMPLES=\n"
#~ "RANDGEOM(0.4).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDHYPERG\n"
#~ "@SYNTAX=RANDHYPERG(n1,n2,t)\n"
#~ "@DESCRIPTION=RANDHYPERG returns a hypergeometric-distributed random "
#~ "number. The probability distribution for hypergeometric random variates "
#~ "is,\n"
#~ "\n"
#~ "\tp(k) =  C(n_1,k) C(n_2, t-k) / C(n_1 + n_2,k), \n"
#~ "\n"
#~ "where C(a,b) = a!/(b!(a-b)!). \n"
#~ "\n"
#~ "The domain of k is max(0,t-n_2), ..., max(t,n_1).\n"
#~ "@EXAMPLES=\n"
#~ "RANDHYPERG(21,1,9).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDHYPERG\n"
#~ "@SYNTAX=RANDHYPERG(n1,n2,t)\n"
#~ "@DESCRIPTION=RANDHYPERG returns a hypergeometric-distributed random "
#~ "number. The probability distribution for hypergeometric random variates "
#~ "is,\n"
#~ "\n"
#~ "\tp(k) =  C(n_1,k) C(n_2, t-k) / C(n_1 + n_2,k), \n"
#~ "\n"
#~ "where C(a,b) = a!/(b!(a-b)!). \n"
#~ "\n"
#~ "The domain of k is max(0,t-n_2), ..., max(t,n_1).\n"
#~ "@EXAMPLES=\n"
#~ "RANDHYPERG(21,1,9).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDLOG\n"
#~ "@SYNTAX=RANDLOG(p)\n"
#~ "@DESCRIPTION=RANDLOG returns a logarithmic-distributed random number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDLOG returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLOG(0.72).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDLOG\n"
#~ "@SYNTAX=RANDLOG(p)\n"
#~ "@DESCRIPTION=RANDLOG returns a logarithmic-distributed random number.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 RANDLOG returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLOG(0.72).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDCHISQ\n"
#~ "@SYNTAX=RANDCHISQ(nu)\n"
#~ "@DESCRIPTION=RANDCHISQ returns a Chi-Square-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDCHISQ(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDGAMMA"
#~ msgstr ""
#~ "@FUNCTION=RANDCHISQ\n"
#~ "@SYNTAX=RANDCHISQ(nu)\n"
#~ "@DESCRIPTION=RANDCHISQ returns a Chi-Square-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDCHISQ(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND,RANDGAMMA"

#~ msgid ""
#~ "@FUNCTION=RANDTDIST\n"
#~ "@SYNTAX=RANDTDIST(nu)\n"
#~ "@DESCRIPTION=RANDTDIST returns a T-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDTDIST(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDTDIST\n"
#~ "@SYNTAX=RANDTDIST(nu)\n"
#~ "@DESCRIPTION=RANDTDIST returns a T-distributed random number.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDTDIST(0.5).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDGUMBEL\n"
#~ "@SYNTAX=RANDGUMBEL(a,b[,type])\n"
#~ "@DESCRIPTION=RANDGUMBEL returns a Type I or Type II Gumbel-distributed "
#~ "random number. @type is either 1 or 2 and specifies the type of the "
#~ "distribution (Type I or Type II).\n"
#~ "\n"
#~ "* If @type is neither 1 nor 2, RANDGUMBEL returns #NUM! error.\n"
#~ "* If @type is omitted, Type I is assumed.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDGUMBEL(0.5,1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDGUMBEL\n"
#~ "@SYNTAX=RANDGUMBEL(a,b[,type])\n"
#~ "@DESCRIPTION=RANDGUMBEL returns a Type I or Type II Gumbel-distributed "
#~ "random number. @type is either 1 or 2 and specifies the type of the "
#~ "distribution (Type I or Type II).\n"
#~ "\n"
#~ "* If @type is neither 1 nor 2, RANDGUMBEL returns #NUM! error.\n"
#~ "* If @type is omitted, Type I is assumed.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDGUMBEL(0.5,1,2).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDLEVY\n"
#~ "@SYNTAX=RANDLEVY(c,alpha[,beta])\n"
#~ "@DESCRIPTION=RANDLEVY returns a Levy-distributed random number. If @beta "
#~ "is omitted, it is assumed to be 0.\n"
#~ "\n"
#~ "* For @alpha = 1, @beta=0, we get the Lorentz distribution.\n"
#~ "* For @alpha = 2, @beta=0, we get the normal distribution.\n"
#~ "\n"
#~ "* If @alpha <= 0 or @alpha > 2, RANDLEVY returns #NUM! error.\n"
#~ "* If @beta < -1 or @beta > 1, RANDLEVY returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLEVY(0.5,0.1,1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDLEVY\n"
#~ "@SYNTAX=RANDLEVY(c,alpha[,beta])\n"
#~ "@DESCRIPTION=RANDLEVY returns a Levy-distributed random number. If @beta "
#~ "is omitted, it is assumed to be 0.\n"
#~ "\n"
#~ "* For @alpha = 1, @beta=0, we get the Lorentz distribution.\n"
#~ "* For @alpha = 2, @beta=0, we get the normal distribution.\n"
#~ "\n"
#~ "* If @alpha <= 0 or @alpha > 2, RANDLEVY returns #NUM! error.\n"
#~ "* If @beta < -1 or @beta > 1, RANDLEVY returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLEVY(0.5,0.1,1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDEXPPOW\n"
#~ "@SYNTAX=RANDEXPPOW(a,b)\n"
#~ "@DESCRIPTION=RANDEXPPOW returns a random variate from the exponential "
#~ "power distribution with scale parameter @a and exponent @b. The "
#~ "distribution is,\n"
#~ "\n"
#~ "\tp(x) dx = {1 over 2 a Gamma(1+1/b)} exp(-|x/a|^b) dx, for x >= 0.\n"
#~ "\n"
#~ "* For @b = 1 this reduces to the Laplace distribution.\n"
#~ "* For @b = 2 it has the same form as a normal distribution with sigma = a/"
#~ "sqrt(2).\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDEXPPOW(0.5,0.1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDEXPPOW\n"
#~ "@SYNTAX=RANDEXPPOW(a,b)\n"
#~ "@DESCRIPTION=RANDEXPPOW returns a random variate from the exponential "
#~ "power distribution with scale parameter @a and exponent @b. The "
#~ "distribution is,\n"
#~ "\n"
#~ "\tp(x) dx = {1 over 2 a Gamma(1+1/b)} exp(-|x/a|^b) dx, for x >= 0.\n"
#~ "\n"
#~ "* For @b = 1 this reduces to the Laplace distribution.\n"
#~ "* For @b = 2 it has the same form as a normal distribution with sigma = a/"
#~ "sqrt(2).\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDEXPPOW(0.5,0.1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDLANDAU\n"
#~ "@SYNTAX=RANDLANDAU()\n"
#~ "@DESCRIPTION=RANDLANDAU returns a random variate from the Landau "
#~ "distribution. The probability distribution for Landau random variates is "
#~ "defined analytically by the complex integral,\n"
#~ "\n"
#~ "\tp(x) = (1/(2 pi i)) int_{c-i infty}^{c+i infty} ds exp(s log(s) + x "
#~ "s).\n"
#~ "\n"
#~ "For numerical purposes it is more convenient to use the following "
#~ "equivalent form of the integral,\n"
#~ "\n"
#~ "\tp(x) = (1/pi) int_0^ infty dt exp(-t log(t) - x t) sin(pi t).\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLANDAU().\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDLANDAU\n"
#~ "@SYNTAX=RANDLANDAU()\n"
#~ "@DESCRIPTION=RANDLANDAU returns a random variate from the Landau "
#~ "distribution. The probability distribution for Landau random variates is "
#~ "defined analytically by the complex integral,\n"
#~ "\n"
#~ "\tp(x) = (1/(2 pi i)) int_{c-i infty}^{c+i infty} ds exp(s log(s) + x "
#~ "s).\n"
#~ "\n"
#~ "For numerical purposes it is more convenient to use the following "
#~ "equivalent form of the integral,\n"
#~ "\n"
#~ "\tp(x) = (1/pi) int_0^ infty dt exp(-t log(t) - x t) sin(pi t).\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDLANDAU().\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=RANDNORMTAIL\n"
#~ "@SYNTAX=RANDNORMTAIL(a,sigma)\n"
#~ "@DESCRIPTION=RANDNORMTAIL returns a random variates from the upper tail "
#~ "of a normal distribution with standard deviation @sigma. The values "
#~ "returned are larger than the lower limit @a, which must be positive. The "
#~ "method is based on Marsaglia's famous rectangle-wedge-tail algorithm (Ann "
#~ "Math Stat 32, 894-899 (1961)), with this aspect explained in Knuth, v2, "
#~ "3rd ed, p139, 586 (exercise 11).\n"
#~ "\n"
#~ "The probability distribution for normal tail random variates is,\n"
#~ "\n"
#~ "\tp(x) dx = {1 over N(a;sigma)} exp (- x^2/(2 sigma^2)) dx,\n"
#~ "\n"
#~ "for x > a where N(a;sigma) is the normalization constant, N(a;sigma) = "
#~ "(1/2) erfc(a / sqrt(2 sigma^2)).\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDNORMTAIL(0.5,0.1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"
#~ msgstr ""
#~ "@FUNCTION=RANDNORMTAIL\n"
#~ "@SYNTAX=RANDNORMTAIL(a,sigma)\n"
#~ "@DESCRIPTION=RANDNORMTAIL returns a random variates from the upper tail "
#~ "of a normal distribution with standard deviation @sigma. The values "
#~ "returned are larger than the lower limit @a, which must be positive. The "
#~ "method is based on Marsaglia's famous rectangle-wedge-tail algorithm (Ann "
#~ "Math Stat 32, 894-899 (1961)), with this aspect explained in Knuth, v2, "
#~ "3rd ed, p139, 586 (exercise 11).\n"
#~ "\n"
#~ "The probability distribution for normal tail random variates is,\n"
#~ "\n"
#~ "\tp(x) dx = {1 over N(a;sigma)} exp (- x^2/(2 sigma^2)) dx,\n"
#~ "\n"
#~ "for x > a where N(a;sigma) is the normalisation constant, N(a;sigma) = "
#~ "(1/2) erfc(a / sqrt(2 sigma^2)).\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RANDNORMTAIL(0.5,0.1).\n"
#~ "\n"
#~ "@SEEALSO=RAND"

#~ msgid ""
#~ "@FUNCTION=VARP\n"
#~ "@SYNTAX=VARP(b1, b2, ...)\n"
#~ "@DESCRIPTION=VARP calculates the variance of an entire population.\n"
#~ "VARP is also known as the N-variance.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "VARP(A1:A5) equals 94.112.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,DVAR,DVARP,STDEV,VAR"
#~ msgstr ""
#~ "@FUNCTION=VARP\n"
#~ "@SYNTAX=VARP(b1, b2, ...)\n"
#~ "@DESCRIPTION=VARP calculates the variance of an entire population.\n"
#~ "VARP is also known as the N-variance.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "VARP(A1:A5) equals 94.112.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,DVAR,DVARP,STDEV,VAR"

#~ msgid ""
#~ "@FUNCTION=VAR\n"
#~ "@SYNTAX=VAR(b1, b2, ...)\n"
#~ "@DESCRIPTION=VAR calculates sample variance of the given sample. To get "
#~ "the true variance of a complete population use VARP.\n"
#~ "VAR is also known as the N-1-variance. Under reasonable conditions, it is "
#~ "the maximum-likelihood estimator for the true variance.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "VAR(A1:A5) equals 117.64.\n"
#~ "\n"
#~ "@SEEALSO=VARP,STDEV"
#~ msgstr ""
#~ "@FUNCTION=VAR\n"
#~ "@SYNTAX=VAR(b1, b2, ...)\n"
#~ "@DESCRIPTION=VAR calculates sample variance of the given sample. To get "
#~ "the true variance of a complete population use VARP.\n"
#~ "VAR is also known as the N-1-variance. Under reasonable conditions, it is "
#~ "the maximum-likelihood estimator for the true variance.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "VAR(A1:A5) equals 117.64.\n"
#~ "\n"
#~ "@SEEALSO=VARP,STDEV"

#~ msgid ""
#~ "@FUNCTION=STDEV\n"
#~ "@SYNTAX=STDEV(b1, b2, ...)\n"
#~ "@DESCRIPTION=STDEV returns the sample standard deviation of the given "
#~ "sample.\n"
#~ "To obtain the population standard deviation of a whole population use "
#~ "STDEVP.\n"
#~ "STDEV is also known as the N-1-standard deviation.\n"
#~ "Under reasonable conditions, it is the maximum-likelihood estimator for "
#~ "the true population standard deviation.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "STDEV(A1:A5) equals 10.84619749.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,DSTDEV,DSTDEVP,STDEVA,STDEVPA,VAR"
#~ msgstr ""
#~ "@FUNCTION=STDEV\n"
#~ "@SYNTAX=STDEV(b1, b2, ...)\n"
#~ "@DESCRIPTION=STDEV returns the sample standard deviation of the given "
#~ "sample.\n"
#~ "To obtain the population standard deviation of a whole population use "
#~ "STDEVP.\n"
#~ "STDEV is also known as the N-1-standard deviation.\n"
#~ "Under reasonable conditions, it is the maximum-likelihood estimator for "
#~ "the true population standard deviation.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "STDEV(A1:A5) equals 10.84619749.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,DSTDEV,DSTDEVP,STDEVA,STDEVPA,VAR"

#~ msgid ""
#~ "@FUNCTION=STDEVP\n"
#~ "@SYNTAX=STDEVP(b1, b2, ...)\n"
#~ "@DESCRIPTION=STDEVP returns the population standard deviation of the "
#~ "given population. \n"
#~ "This is also known as the N-standard deviation\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "STDEVP(A1:A5) equals 9.701133954.\n"
#~ "\n"
#~ "@SEEALSO=STDEV,STDEVA,STDEVPA"
#~ msgstr ""
#~ "@FUNCTION=STDEVP\n"
#~ "@SYNTAX=STDEVP(b1, b2, ...)\n"
#~ "@DESCRIPTION=STDEVP returns the population standard deviation of the "
#~ "given population. \n"
#~ "This is also known as the N-standard deviation\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "STDEVP(A1:A5) equals 9.701133954.\n"
#~ "\n"
#~ "@SEEALSO=STDEV,STDEVA,STDEVPA"

#~ msgid ""
#~ "@FUNCTION=RANK\n"
#~ "@SYNTAX=RANK(x,ref[,order])\n"
#~ "@DESCRIPTION=RANK returns the rank of a number in a list of numbers.  @x "
#~ "is the number whose rank you want to find, @ref is the list of numbers, "
#~ "and @order specifies how to rank numbers.  If @order is 0, numbers are "
#~ "ranked in descending order, otherwise numbers are ranked in ascending "
#~ "order.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "RANK(17.3,A1:A5) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=PERCENTRANK"
#~ msgstr ""
#~ "@FUNCTION=RANK\n"
#~ "@SYNTAX=RANK(x,ref[,order])\n"
#~ "@DESCRIPTION=RANK returns the rank of a number in a list of numbers.  @x "
#~ "is the number whose rank you want to find, @ref is the list of numbers, "
#~ "and @order specifies how to rank numbers.  If @order is 0, numbers are "
#~ "ranked in descending order, otherwise numbers are ranked in ascending "
#~ "order.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "RANK(17.3,A1:A5) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=PERCENTRANK"

#~ msgid ""
#~ "@FUNCTION=TRIMMEAN\n"
#~ "@SYNTAX=TRIMMEAN(ref,fraction)\n"
#~ "@DESCRIPTION=TRIMMEAN returns the mean of the interior of a data set. "
#~ "@ref is the list of numbers whose mean you want to calculate and "
#~ "@fraction is the fraction of the data set excluded from the mean. For "
#~ "example, if @fraction=0.2 and the data set contains 40 numbers, 8 numbers "
#~ "are trimmed from the data set (40 x 0.2): the 4 largest and the 4 "
#~ "smallest.  To avoid a bias, the number of points to be excluded is always "
#~ "rounded down to the nearest even number.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "TRIMMEAN(A1:A5,0.2) equals 23.2.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,GEOMEAN,HARMEAN,MEDIAN,MODE"
#~ msgstr ""
#~ "@FUNCTION=TRIMMEAN\n"
#~ "@SYNTAX=TRIMMEAN(ref,fraction)\n"
#~ "@DESCRIPTION=TRIMMEAN returns the mean of the interior of a data set. "
#~ "@ref is the list of numbers whose mean you want to calculate and "
#~ "@fraction is the fraction of the data set excluded from the mean. For "
#~ "example, if @fraction=0.2 and the data set contains 40 numbers, 8 numbers "
#~ "are trimmed from the data set (40 x 0.2): the 4 largest and the 4 "
#~ "smallest.  To avoid a bias, the number of points to be excluded is always "
#~ "rounded down to the nearest even number.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "TRIMMEAN(A1:A5,0.2) equals 23.2.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,GEOMEAN,HARMEAN,MEDIAN,MODE"

#~ msgid ""
#~ "@FUNCTION=COVAR\n"
#~ "@SYNTAX=COVAR(array1,array2)\n"
#~ "@DESCRIPTION=COVAR returns the covariance of two data sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "COVAR(A1:A5,B1:B5) equals 65.858.\n"
#~ "\n"
#~ "@SEEALSO=CORREL,FISHER,FISHERINV"
#~ msgstr ""
#~ "@FUNCTION=COVAR\n"
#~ "@SYNTAX=COVAR(array1,array2)\n"
#~ "@DESCRIPTION=COVAR returns the covariance of two data sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "COVAR(A1:A5,B1:B5) equals 65.858.\n"
#~ "\n"
#~ "@SEEALSO=CORREL,FISHER,FISHERINV"

#~ msgid ""
#~ "@FUNCTION=CORREL\n"
#~ "@SYNTAX=CORREL(array1,array2)\n"
#~ "@DESCRIPTION=CORREL returns the correlation coefficient of two data "
#~ "sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "CORREL(A1:A5,B1:B5) equals 0.996124788.\n"
#~ "\n"
#~ "@SEEALSO=COVAR,FISHER,FISHERINV"
#~ msgstr ""
#~ "@FUNCTION=CORREL\n"
#~ "@SYNTAX=CORREL(array1,array2)\n"
#~ "@DESCRIPTION=CORREL returns the correlation coefficient of two data "
#~ "sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "CORREL(A1:A5,B1:B5) equals 0.996124788.\n"
#~ "\n"
#~ "@SEEALSO=COVAR,FISHER,FISHERINV"

#~ msgid ""
#~ "@FUNCTION=NEGBINOMDIST\n"
#~ "@SYNTAX=NEGBINOMDIST(f,t,p)\n"
#~ "@DESCRIPTION=NEGBINOMDIST function returns the negative binomial "
#~ "distribution. @f is the number of failures, @t is the threshold number of "
#~ "successes, and @p is the probability of a success.\n"
#~ "\n"
#~ "* If @f or @t is a non-integer it is truncated.\n"
#~ "* If (@f + @t -1) <= 0 NEGBINOMDIST returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 NEGBINOMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NEGBINOMDIST(2,5,0.55) equals 0.152872629.\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST,COMBIN,FACT,HYPGEOMDIST,PERMUT"
#~ msgstr ""
#~ "@FUNCTION=NEGBINOMDIST\n"
#~ "@SYNTAX=NEGBINOMDIST(f,t,p)\n"
#~ "@DESCRIPTION=NEGBINOMDIST function returns the negative binomial "
#~ "distribution. @f is the number of failures, @t is the threshold number of "
#~ "successes, and @p is the probability of a success.\n"
#~ "\n"
#~ "* If @f or @t is a non-integer it is truncated.\n"
#~ "* If (@f + @t -1) <= 0 NEGBINOMDIST returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 NEGBINOMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NEGBINOMDIST(2,5,0.55) equals 0.152872629.\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST,COMBIN,FACT,HYPGEOMDIST,PERMUT"

#~ msgid ""
#~ "@FUNCTION=NORMSDIST\n"
#~ "@SYNTAX=NORMSDIST(x)\n"
#~ "@DESCRIPTION=NORMSDIST function returns the standard normal cumulative "
#~ "distribution. @x is the value for which you want the distribution.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMSDIST(2) equals 0.977249868.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST"
#~ msgstr ""
#~ "@FUNCTION=NORMSDIST\n"
#~ "@SYNTAX=NORMSDIST(x)\n"
#~ "@DESCRIPTION=NORMSDIST function returns the standard normal cumulative "
#~ "distribution. @x is the value for which you want the distribution.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMSDIST(2) equals 0.977249868.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST"

#~ msgid ""
#~ "@FUNCTION=NORMSINV\n"
#~ "@SYNTAX=NORMSINV(p)\n"
#~ "@DESCRIPTION=NORMSINV function returns the inverse of the standard normal "
#~ "cumulative distribution. @p is the given probability corresponding to the "
#~ "normal distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 NORMSINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMSINV(0.2) equals -0.841621234.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST,NORMINV,NORMSDIST,STANDARDIZE,ZTEST"
#~ msgstr ""
#~ "@FUNCTION=NORMSINV\n"
#~ "@SYNTAX=NORMSINV(p)\n"
#~ "@DESCRIPTION=NORMSINV function returns the inverse of the standard normal "
#~ "cumulative distribution. @p is the given probability corresponding to the "
#~ "normal distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 NORMSINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMSINV(0.2) equals -0.841621234.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST,NORMINV,NORMSDIST,STANDARDIZE,ZTEST"

#~ msgid ""
#~ "@FUNCTION=LOGNORMDIST\n"
#~ "@SYNTAX=LOGNORMDIST(x,mean,stddev)\n"
#~ "@DESCRIPTION=LOGNORMDIST function returns the lognormal distribution. @x "
#~ "is the value for which you want the distribution, @mean is the mean of "
#~ "the distribution, and @stddev is the standard deviation of the "
#~ "distribution.\n"
#~ "\n"
#~ "* If @stddev = 0 LOGNORMDIST returns #DIV/0! error.\n"
#~ "* If @x <= 0, @mean < 0 or @stddev < 0 LOGNORMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOGNORMDIST(3,1,2) equals 0.519662338.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST"
#~ msgstr ""
#~ "@FUNCTION=LOGNORMDIST\n"
#~ "@SYNTAX=LOGNORMDIST(x,mean,stddev)\n"
#~ "@DESCRIPTION=LOGNORMDIST function returns the lognormal distribution. @x "
#~ "is the value for which you want the distribution, @mean is the mean of "
#~ "the distribution, and @stddev is the standard deviation of the "
#~ "distribution.\n"
#~ "\n"
#~ "* If @stddev = 0 LOGNORMDIST returns #DIV/0! error.\n"
#~ "* If @x <= 0, @mean < 0 or @stddev < 0 LOGNORMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOGNORMDIST(3,1,2) equals 0.519662338.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST"

#~ msgid ""
#~ "@FUNCTION=LOGINV\n"
#~ "@SYNTAX=LOGINV(p,mean,stddev)\n"
#~ "@DESCRIPTION=LOGINV function returns the inverse of the lognormal "
#~ "cumulative distribution. @p is the given probability corresponding to the "
#~ "normal distribution, @mean is the arithmetic mean of the distribution, "
#~ "and @stddev is the standard deviation of the distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @stddev <= 0 LOGINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOGINV(0.5,2,3) equals 7.389056099.\n"
#~ "\n"
#~ "@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMDIST"
#~ msgstr ""
#~ "@FUNCTION=LOGINV\n"
#~ "@SYNTAX=LOGINV(p,mean,stddev)\n"
#~ "@DESCRIPTION=LOGINV function returns the inverse of the lognormal "
#~ "cumulative distribution. @p is the given probability corresponding to the "
#~ "normal distribution, @mean is the arithmetic mean of the distribution, "
#~ "and @stddev is the standard deviation of the distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @stddev <= 0 LOGINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOGINV(0.5,2,3) equals 7.389056099.\n"
#~ "\n"
#~ "@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMDIST"

#~ msgid ""
#~ "@FUNCTION=FISHERINV\n"
#~ "@SYNTAX=FISHERINV(x)\n"
#~ "@DESCRIPTION=FISHERINV function returns the inverse of the Fisher "
#~ "transformation at @x.\n"
#~ "\n"
#~ "* If @x is non-number FISHERINV returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FISHERINV(2) equals 0.96402758.\n"
#~ "\n"
#~ "@SEEALSO=FISHER"
#~ msgstr ""
#~ "@FUNCTION=FISHERINV\n"
#~ "@SYNTAX=FISHERINV(x)\n"
#~ "@DESCRIPTION=FISHERINV function returns the inverse of the Fisher "
#~ "transformation at @x.\n"
#~ "\n"
#~ "* If @x is non-number FISHERINV returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FISHERINV(2) equals 0.96402758.\n"
#~ "\n"
#~ "@SEEALSO=FISHER"

#~ msgid ""
#~ "@FUNCTION=MODE\n"
#~ "@SYNTAX=MODE(n1, n2, ...)\n"
#~ "@DESCRIPTION=MODE returns the most common number of the data set. If the "
#~ "data set has many most common numbers MODE returns the first one of "
#~ "them.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If the data set does not contain any duplicates MODE returns #N/A "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "11.4, 25.9, and 40.1.  Then\n"
#~ "MODE(A1:A5) equals 11.4.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,MEDIAN"
#~ msgstr ""
#~ "@FUNCTION=MODE\n"
#~ "@SYNTAX=MODE(n1, n2, ...)\n"
#~ "@DESCRIPTION=MODE returns the most common number of the data set. If the "
#~ "data set has many most common numbers MODE returns the first one of "
#~ "them.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If the data set does not contain any duplicates MODE returns #N/A "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "11.4, 25.9, and 40.1.  Then\n"
#~ "MODE(A1:A5) equals 11.4.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,MEDIAN"

#~ msgid ""
#~ "@FUNCTION=HARMEAN\n"
#~ "@SYNTAX=HARMEAN(b1, b2, ...)\n"
#~ "@DESCRIPTION=HARMEAN returns the harmonic mean of the N data points (that "
#~ "is, N divided by the sum of the inverses of the data points).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "HARMEAN(A1:A5) equals 19.529814427.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,GEOMEAN,MEDIAN,MODE,TRIMMEAN"
#~ msgstr ""
#~ "@FUNCTION=HARMEAN\n"
#~ "@SYNTAX=HARMEAN(b1, b2, ...)\n"
#~ "@DESCRIPTION=HARMEAN returns the harmonic mean of the N data points (that "
#~ "is, N divided by the sum of the inverses of the data points).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "HARMEAN(A1:A5) equals 19.529814427.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,GEOMEAN,MEDIAN,MODE,TRIMMEAN"

#~ msgid ""
#~ "@FUNCTION=GEOMEAN\n"
#~ "@SYNTAX=GEOMEAN(b1, b2, ...)\n"
#~ "@DESCRIPTION=GEOMEAN returns the geometric mean of the given arguments. "
#~ "This is equal to the Nth root of the product of the terms.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "GEOMEAN(A1:A5) equals 21.279182482.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,HARMEAN,MEDIAN,MODE,TRIMMEAN"
#~ msgstr ""
#~ "@FUNCTION=GEOMEAN\n"
#~ "@SYNTAX=GEOMEAN(b1, b2, ...)\n"
#~ "@DESCRIPTION=GEOMEAN returns the geometric mean of the given arguments. "
#~ "This is equal to the Nth root of the product of the terms.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "GEOMEAN(A1:A5) equals 21.279182482.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,HARMEAN,MEDIAN,MODE,TRIMMEAN"

#~ msgid ""
#~ "@FUNCTION=COUNT\n"
#~ "@SYNTAX=COUNT(b1, b2, ...)\n"
#~ "@DESCRIPTION=COUNT returns the total number of integer or floating point "
#~ "arguments passed.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "COUNT(A1:A5) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"
#~ msgstr ""
#~ "@FUNCTION=COUNT\n"
#~ "@SYNTAX=COUNT(b1, b2, ...)\n"
#~ "@DESCRIPTION=COUNT returns the total number of integer or floating point "
#~ "arguments passed.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "COUNT(A1:A5) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"

#~ msgid ""
#~ "@FUNCTION=COUNTA\n"
#~ "@SYNTAX=COUNTA(b1, b2, ...)\n"
#~ "@DESCRIPTION=COUNTA returns the number of arguments passed not including "
#~ "empty cells.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, \"missing\", \"missing\", 25.9, and 40.1.  Then\n"
#~ "COUNTA(A1:A5) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,COUNT,DCOUNT,DCOUNTA,PRODUCT,SUM"
#~ msgstr ""
#~ "@FUNCTION=COUNTA\n"
#~ "@SYNTAX=COUNTA(b1, b2, ...)\n"
#~ "@DESCRIPTION=COUNTA returns the number of arguments passed not including "
#~ "empty cells.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, \"missing\", \"missing\", 25.9, and 40.1.  Then\n"
#~ "COUNTA(A1:A5) equals 5.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,COUNT,DCOUNT,DCOUNTA,PRODUCT,SUM"

#~ msgid ""
#~ "@FUNCTION=AVERAGE\n"
#~ "@SYNTAX=AVERAGE(value1, value2,...)\n"
#~ "@DESCRIPTION=AVERAGE computes the average of all the values and cells "
#~ "referenced in the argument list.  This is equivalent to the sum of the "
#~ "arguments divided by the count of the arguments.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "AVERAGE(A1:A5) equals 23.2.\n"
#~ "\n"
#~ "@SEEALSO=SUM, COUNT"
#~ msgstr ""
#~ "@FUNCTION=AVERAGE\n"
#~ "@SYNTAX=AVERAGE(value1, value2,...)\n"
#~ "@DESCRIPTION=AVERAGE computes the average of all the values and cells "
#~ "referenced in the argument list.  This is equivalent to the sum of the "
#~ "arguments divided by the count of the arguments.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "AVERAGE(A1:A5) equals 23.2.\n"
#~ "\n"
#~ "@SEEALSO=SUM, COUNT"

#~ msgid ""
#~ "@FUNCTION=MIN\n"
#~ "@SYNTAX=MIN(b1, b2, ...)\n"
#~ "@DESCRIPTION=MIN returns the value of the element of the values passed "
#~ "that has the smallest value, with negative numbers considered smaller "
#~ "than positive numbers.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "MIN(A1:A5) equals 11.4.\n"
#~ "\n"
#~ "@SEEALSO=MAX,ABS"
#~ msgstr ""
#~ "@FUNCTION=MIN\n"
#~ "@SYNTAX=MIN(b1, b2, ...)\n"
#~ "@DESCRIPTION=MIN returns the value of the element of the values passed "
#~ "that has the smallest value, with negative numbers considered smaller "
#~ "than positive numbers.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "MIN(A1:A5) equals 11.4.\n"
#~ "\n"
#~ "@SEEALSO=MAX,ABS"

#~ msgid ""
#~ "@FUNCTION=MAX\n"
#~ "@SYNTAX=MAX(b1, b2, ...)\n"
#~ "@DESCRIPTION=MAX returns the value of the element of the values passed "
#~ "that has the largest value, with negative numbers considered smaller than "
#~ "positive numbers.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "MAX(A1:A5) equals 40.1.\n"
#~ "\n"
#~ "@SEEALSO=MIN,ABS"
#~ msgstr ""
#~ "@FUNCTION=MAX\n"
#~ "@SYNTAX=MAX(b1, b2, ...)\n"
#~ "@DESCRIPTION=MAX returns the value of the element of the values passed "
#~ "that has the largest value, with negative numbers considered smaller than "
#~ "positive numbers.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "MAX(A1:A5) equals 40.1.\n"
#~ "\n"
#~ "@SEEALSO=MIN,ABS"

#~ msgid ""
#~ "@FUNCTION=SKEW\n"
#~ "@SYNTAX=SKEW(n1, n2, ...)\n"
#~ "@DESCRIPTION=SKEW returns an unbiased estimate for skewness of a "
#~ "distribution.\n"
#~ "\n"
#~ "Note, that this is only meaningful if the underlying distribution really "
#~ "has a third moment.  The skewness of a symmetric (e.g., normal) "
#~ "distribution is zero.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If less than three numbers are given, SKEW returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "SKEW(A1:A5) equals 0.976798268.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VAR,SKEWP,KURT"
#~ msgstr ""
#~ "@FUNCTION=SKEW\n"
#~ "@SYNTAX=SKEW(n1, n2, ...)\n"
#~ "@DESCRIPTION=SKEW returns an unbiased estimate for skewness of a "
#~ "distribution.\n"
#~ "\n"
#~ "Note, that this is only meaningful if the underlying distribution really "
#~ "has a third moment.  The skewness of a symmetric (e.g., normal) "
#~ "distribution is zero.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If less than three numbers are given, SKEW returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "SKEW(A1:A5) equals 0.976798268.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VAR,SKEWP,KURT"

#~ msgid ""
#~ "@FUNCTION=SKEWP\n"
#~ "@SYNTAX=SKEWP(n1, n2, ...)\n"
#~ "@DESCRIPTION=SKEWP returns the population skewness of a data set.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If less than two numbers are given, SKEWP returns #DIV/0! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "SKEWP(A1:A5) equals 0.655256198.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VARP,SKEW,KURTP"
#~ msgstr ""
#~ "@FUNCTION=SKEWP\n"
#~ "@SYNTAX=SKEWP(n1, n2, ...)\n"
#~ "@DESCRIPTION=SKEWP returns the population skewness of a data set.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If less than two numbers are given, SKEWP returns #DIV/0! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "SKEWP(A1:A5) equals 0.655256198.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VARP,SKEW,KURTP"

#~ msgid ""
#~ "@FUNCTION=EXPONDIST\n"
#~ "@SYNTAX=EXPONDIST(x,y,cumulative)\n"
#~ "@DESCRIPTION=EXPONDIST function returns the exponential distribution. If "
#~ "the @cumulative boolean is false it will return:\n"
#~ "\n"
#~ "\t@y * exp (-@y*@x),\n"
#~ "\n"
#~ "otherwise it will return\n"
#~ "\n"
#~ "\t1 - exp (-@y*@x).\n"
#~ "\n"
#~ "* If @x < 0 or @y <= 0 this will return an error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXPONDIST(2,4,0) equals 0.001341851.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"
#~ msgstr ""
#~ "@FUNCTION=EXPONDIST\n"
#~ "@SYNTAX=EXPONDIST(x,y,cumulative)\n"
#~ "@DESCRIPTION=EXPONDIST function returns the exponential distribution. If "
#~ "the @cumulative boolean is false it will return:\n"
#~ "\n"
#~ "\t@y * exp (-@y*@x),\n"
#~ "\n"
#~ "otherwise it will return\n"
#~ "\n"
#~ "\t1 - exp (-@y*@x).\n"
#~ "\n"
#~ "* If @x < 0 or @y <= 0 this will return an error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXPONDIST(2,4,0) equals 0.001341851.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"

#~ msgid ""
#~ "@FUNCTION=BERNOULLI\n"
#~ "@SYNTAX=BERNOULLI(k,p)\n"
#~ "@DESCRIPTION=BERNOULLI returns the probability p(k) of obtaining @k from "
#~ "a Bernoulli distribution with probability parameter @p.\n"
#~ "\n"
#~ "* If @k != 0 and @k != 1 BERNOULLI returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 BERNOULLI returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BERNOULLI(0,0.5).\n"
#~ "\n"
#~ "@SEEALSO=RANDBERNOULLI"
#~ msgstr ""
#~ "@FUNCTION=BERNOULLI\n"
#~ "@SYNTAX=BERNOULLI(k,p)\n"
#~ "@DESCRIPTION=BERNOULLI returns the probability p(k) of obtaining @k from "
#~ "a Bernoulli distribution with probability parameter @p.\n"
#~ "\n"
#~ "* If @k != 0 and @k != 1 BERNOULLI returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 BERNOULLI returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BERNOULLI(0,0.5).\n"
#~ "\n"
#~ "@SEEALSO=RANDBERNOULLI"

#~ msgid ""
#~ "@FUNCTION=GAMMALN\n"
#~ "@SYNTAX=GAMMALN(x)\n"
#~ "@DESCRIPTION=GAMMALN function returns the natural logarithm of the gamma "
#~ "function.\n"
#~ "\n"
#~ "* If @x is non-number then GAMMALN returns #VALUE! error.\n"
#~ "* If @x <= 0 then GAMMALN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GAMMALN(23) equals 48.471181352.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"
#~ msgstr ""
#~ "@FUNCTION=GAMMALN\n"
#~ "@SYNTAX=GAMMALN(x)\n"
#~ "@DESCRIPTION=GAMMALN function returns the natural logarithm of the gamma "
#~ "function.\n"
#~ "\n"
#~ "* If @x is non-number then GAMMALN returns #VALUE! error.\n"
#~ "* If @x <= 0 then GAMMALN returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GAMMALN(23) equals 48.471181352.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"

#~ msgid ""
#~ "@FUNCTION=GAMMADIST\n"
#~ "@SYNTAX=GAMMADIST(x,alpha,beta,cum)\n"
#~ "@DESCRIPTION=GAMMADIST function returns the gamma distribution. If @cum "
#~ "is TRUE, GAMMADIST returns the incomplete gamma function, otherwise it "
#~ "returns the probability mass function.\n"
#~ "\n"
#~ "* If @x < 0 GAMMADIST returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0, GAMMADIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GAMMADIST(1,2,3,0) equals 0.07961459.\n"
#~ "\n"
#~ "@SEEALSO=GAMMAINV"
#~ msgstr ""
#~ "@FUNCTION=GAMMADIST\n"
#~ "@SYNTAX=GAMMADIST(x,alpha,beta,cum)\n"
#~ "@DESCRIPTION=GAMMADIST function returns the gamma distribution. If @cum "
#~ "is TRUE, GAMMADIST returns the incomplete gamma function, otherwise it "
#~ "returns the probability mass function.\n"
#~ "\n"
#~ "* If @x < 0 GAMMADIST returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0, GAMMADIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GAMMADIST(1,2,3,0) equals 0.07961459.\n"
#~ "\n"
#~ "@SEEALSO=GAMMAINV"

#~ msgid ""
#~ "@FUNCTION=GAMMAINV\n"
#~ "@SYNTAX=GAMMAINV(p,alpha,beta)\n"
#~ "@DESCRIPTION=GAMMAINV function returns the inverse of the cumulative "
#~ "gamma distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 GAMMAINV returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0 GAMMAINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GAMMAINV(0.34,2,4) equals 4.829093908.\n"
#~ "\n"
#~ "@SEEALSO=GAMMADIST"
#~ msgstr ""
#~ "@FUNCTION=GAMMAINV\n"
#~ "@SYNTAX=GAMMAINV(p,alpha,beta)\n"
#~ "@DESCRIPTION=GAMMAINV function returns the inverse of the cumulative "
#~ "gamma distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 GAMMAINV returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0 GAMMAINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GAMMAINV(0.34,2,4) equals 4.829093908.\n"
#~ "\n"
#~ "@SEEALSO=GAMMADIST"

#~ msgid ""
#~ "@FUNCTION=CHIDIST\n"
#~ "@SYNTAX=CHIDIST(x,dof)\n"
#~ "@DESCRIPTION=CHIDIST function returns the one-tailed probability of the "
#~ "chi-squared distribution. @dof is the number of degrees of freedom.\n"
#~ "\n"
#~ "* If @dof is non-integer it is truncated.\n"
#~ "* If @dof < 1 CHIDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHIDIST(5.3,2) equals 0.070651213.\n"
#~ "\n"
#~ "@SEEALSO=CHIINV,CHITEST"
#~ msgstr ""
#~ "@FUNCTION=CHIDIST\n"
#~ "@SYNTAX=CHIDIST(x,dof)\n"
#~ "@DESCRIPTION=CHIDIST function returns the one-tailed probability of the "
#~ "chi-squared distribution. @dof is the number of degrees of freedom.\n"
#~ "\n"
#~ "* If @dof is non-integer it is truncated.\n"
#~ "* If @dof < 1 CHIDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHIDIST(5.3,2) equals 0.070651213.\n"
#~ "\n"
#~ "@SEEALSO=CHIINV,CHITEST"

#~ msgid ""
#~ "@FUNCTION=CHIINV\n"
#~ "@SYNTAX=CHIINV(p,dof)\n"
#~ "@DESCRIPTION=CHIINV function returns the inverse of the one-tailed "
#~ "probability of the chi-squared distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @dof < 1 CHIINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHIINV(0.98,7) equals 1.564293004.\n"
#~ "\n"
#~ "@SEEALSO=CHIDIST,CHITEST"
#~ msgstr ""
#~ "@FUNCTION=CHIINV\n"
#~ "@SYNTAX=CHIINV(p,dof)\n"
#~ "@DESCRIPTION=CHIINV function returns the inverse of the one-tailed "
#~ "probability of the chi-squared distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @dof < 1 CHIINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHIINV(0.98,7) equals 1.564293004.\n"
#~ "\n"
#~ "@SEEALSO=CHIDIST,CHITEST"

#~ msgid ""
#~ "@FUNCTION=CHITEST\n"
#~ "@SYNTAX=CHITEST(actual_range,theoretical_range)\n"
#~ "@DESCRIPTION=CHITEST function returns the test for independence of chi-"
#~ "squared distribution.\n"
#~ "\n"
#~ "@actual_range is a range that contains the observed data points. "
#~ "@theoretical_range is a range that contains the expected values of the "
#~ "data points.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=CHIDIST,CHIINV"
#~ msgstr ""
#~ "@FUNCTION=CHITEST\n"
#~ "@SYNTAX=CHITEST(actual_range,theoretical_range)\n"
#~ "@DESCRIPTION=CHITEST function returns the test for independence of chi-"
#~ "squared distribution.\n"
#~ "\n"
#~ "@actual_range is a range that contains the observed data points. "
#~ "@theoretical_range is a range that contains the expected values of the "
#~ "data points.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=CHIDIST,CHIINV"

#~ msgid ""
#~ "@FUNCTION=BETADIST\n"
#~ "@SYNTAX=BETADIST(x,alpha,beta[,a,b])\n"
#~ "@DESCRIPTION=BETADIST function returns the cumulative beta distribution. "
#~ "@a is the optional lower bound of @x and @b is the optional upper bound "
#~ "of @x.\n"
#~ "* If @a is not given, BETADIST uses 0.\n"
#~ "* If @b is not given, BETADIST uses 1.\n"
#~ "* If @x < @a or @x > @b BETADIST returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0, BETADIST returns #NUM! error.\n"
#~ "* If @a >= @b BETADIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BETADIST(0.12,2,3) equals 0.07319808.\n"
#~ "\n"
#~ "@SEEALSO=BETAINV"
#~ msgstr ""
#~ "@FUNCTION=BETADIST\n"
#~ "@SYNTAX=BETADIST(x,alpha,beta[,a,b])\n"
#~ "@DESCRIPTION=BETADIST function returns the cumulative beta distribution. "
#~ "@a is the optional lower bound of @x and @b is the optional upper bound "
#~ "of @x.\n"
#~ "* If @a is not given, BETADIST uses 0.\n"
#~ "* If @b is not given, BETADIST uses 1.\n"
#~ "* If @x < @a or @x > @b BETADIST returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0, BETADIST returns #NUM! error.\n"
#~ "* If @a >= @b BETADIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BETADIST(0.12,2,3) equals 0.07319808.\n"
#~ "\n"
#~ "@SEEALSO=BETAINV"

#~ msgid ""
#~ "@FUNCTION=BETAINV\n"
#~ "@SYNTAX=BETAINV(p,alpha,beta[,a,b])\n"
#~ "@DESCRIPTION=BETAINV function returns the inverse of cumulative beta "
#~ "distribution.  @a is the optional lower bound of @x and @b is the "
#~ "optional upper bound of @x.\n"
#~ "\n"
#~ "* If @a is not given, BETAINV uses 0.\n"
#~ "* If @b is not given, BETAINV uses 1.\n"
#~ "* If @p < 0 or @p > 1 BETAINV returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0, BETAINV returns #NUM! error.\n"
#~ "* If @a >= @b BETAINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BETAINV(0.45,1.6,1) equals 0.607096629.\n"
#~ "\n"
#~ "@SEEALSO=BETADIST"
#~ msgstr ""
#~ "@FUNCTION=BETAINV\n"
#~ "@SYNTAX=BETAINV(p,alpha,beta[,a,b])\n"
#~ "@DESCRIPTION=BETAINV function returns the inverse of cumulative beta "
#~ "distribution.  @a is the optional lower bound of @x and @b is the "
#~ "optional upper bound of @x.\n"
#~ "\n"
#~ "* If @a is not given, BETAINV uses 0.\n"
#~ "* If @b is not given, BETAINV uses 1.\n"
#~ "* If @p < 0 or @p > 1 BETAINV returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0, BETAINV returns #NUM! error.\n"
#~ "* If @a >= @b BETAINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BETAINV(0.45,1.6,1) equals 0.607096629.\n"
#~ "\n"
#~ "@SEEALSO=BETADIST"

#~ msgid ""
#~ "@FUNCTION=TDIST\n"
#~ "@SYNTAX=TDIST(x,dof,tails)\n"
#~ "@DESCRIPTION=TDIST function returns the Student's t-distribution. @dof is "
#~ "the degree of freedom and @tails is 1 or 2 depending on whether you want "
#~ "one-tailed or two-tailed distribution.\n"
#~ "@tails = 1 returns the size of the right tail.\n"
#~ "\n"
#~ "* If @dof < 1 TDIST returns #NUM! error.\n"
#~ "* If @tails is neither 1 or 2 TDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible for non-negative @x.\n"
#~ "\n"
#~ "Warning: the parameterization of this function is different from what is "
#~ "used for, e.g., NORMSDIST.  This is a common source of mistakes, but "
#~ "necessary for compatibility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TDIST(2,5,1) equals 0.050969739.\n"
#~ "TDIST(-2,5,1) equals 0.949030261.\n"
#~ "TDIST(0,5,2) equals 1.\n"
#~ "\n"
#~ "@SEEALSO=TINV,TTEST"
#~ msgstr ""
#~ "@FUNCTION=TDIST\n"
#~ "@SYNTAX=TDIST(x,dof,tails)\n"
#~ "@DESCRIPTION=TDIST function returns the Student's t-distribution. @dof is "
#~ "the degree of freedom and @tails is 1 or 2 depending on whether you want "
#~ "one-tailed or two-tailed distribution.\n"
#~ "@tails = 1 returns the size of the right tail.\n"
#~ "\n"
#~ "* If @dof < 1 TDIST returns #NUM! error.\n"
#~ "* If @tails is neither 1 or 2 TDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible for non-negative @x.\n"
#~ "\n"
#~ "Warning: the parameterisation of this function is different from what is "
#~ "used for, e.g., NORMSDIST.  This is a common source of mistakes, but "
#~ "necessary for compatibility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TDIST(2,5,1) equals 0.050969739.\n"
#~ "TDIST(-2,5,1) equals 0.949030261.\n"
#~ "TDIST(0,5,2) equals 1.\n"
#~ "\n"
#~ "@SEEALSO=TINV,TTEST"

#~ msgid ""
#~ "@FUNCTION=TINV\n"
#~ "@SYNTAX=TINV(p,dof)\n"
#~ "@DESCRIPTION=TINV function returns the inverse of the two-tailed "
#~ "Student's t-distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @dof < 1 TINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "Warning: the parameterization of this function is different from what is "
#~ "used for, e.g., NORMSINV.  This is a common source of mistakes, but "
#~ "necessary for compatibility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TINV(0.4,32) equals 0.852998454.\n"
#~ "\n"
#~ "@SEEALSO=TDIST,TTEST"
#~ msgstr ""
#~ "@FUNCTION=TINV\n"
#~ "@SYNTAX=TINV(p,dof)\n"
#~ "@DESCRIPTION=TINV function returns the inverse of the two-tailed "
#~ "Student's t-distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @dof < 1 TINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "Warning: the parameterisation of this function is different from what is "
#~ "used for, e.g., NORMSINV.  This is a common source of mistakes, but "
#~ "necessary for compatibility.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TINV(0.4,32) equals 0.852998454.\n"
#~ "\n"
#~ "@SEEALSO=TDIST,TTEST"

#~ msgid ""
#~ "@FUNCTION=FDIST\n"
#~ "@SYNTAX=FDIST(x,dof1,dof2)\n"
#~ "@DESCRIPTION=FDIST function returns the F probability distribution. @dof1 "
#~ "is the numerator degrees of freedom and @dof2 is the denominator degrees "
#~ "of freedom.\n"
#~ "\n"
#~ "* If @x < 0 FDIST returns #NUM! error.\n"
#~ "* If @dof1 < 1 or @dof2 < 1, FDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FDIST(2,5,5) equals 0.232511319.\n"
#~ "\n"
#~ "@SEEALSO=FINV"
#~ msgstr ""
#~ "@FUNCTION=FDIST\n"
#~ "@SYNTAX=FDIST(x,dof1,dof2)\n"
#~ "@DESCRIPTION=FDIST function returns the F probability distribution. @dof1 "
#~ "is the numerator degrees of freedom and @dof2 is the denominator degrees "
#~ "of freedom.\n"
#~ "\n"
#~ "* If @x < 0 FDIST returns #NUM! error.\n"
#~ "* If @dof1 < 1 or @dof2 < 1, FDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FDIST(2,5,5) equals 0.232511319.\n"
#~ "\n"
#~ "@SEEALSO=FINV"

#~ msgid ""
#~ "@FUNCTION=LANDAU\n"
#~ "@SYNTAX=LANDAU(x)\n"
#~ "@DESCRIPTION=LANDAU returns the probability density p(x) at @x for the "
#~ "Landau distribution using an approximation method. \n"
#~ "@EXAMPLES=\n"
#~ "LANDAU(0.34).\n"
#~ "\n"
#~ "@SEEALSO=RANDLANDAU"
#~ msgstr ""
#~ "@FUNCTION=LANDAU\n"
#~ "@SYNTAX=LANDAU(x)\n"
#~ "@DESCRIPTION=LANDAU returns the probability density p(x) at @x for the "
#~ "Landau distribution using an approximation method. \n"
#~ "@EXAMPLES=\n"
#~ "LANDAU(0.34).\n"
#~ "\n"
#~ "@SEEALSO=RANDLANDAU"

#~ msgid ""
#~ "@FUNCTION=FINV\n"
#~ "@SYNTAX=FINV(p,dof1,dof2)\n"
#~ "@DESCRIPTION=FINV function returns the inverse of the F probability "
#~ "distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 FINV returns #NUM! error.\n"
#~ "* If @dof1 < 1 or @dof2 < 1 FINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FINV(0.2,2,4) equals 2.472135955.\n"
#~ "\n"
#~ "@SEEALSO=FDIST"
#~ msgstr ""
#~ "@FUNCTION=FINV\n"
#~ "@SYNTAX=FINV(p,dof1,dof2)\n"
#~ "@DESCRIPTION=FINV function returns the inverse of the F probability "
#~ "distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 FINV returns #NUM! error.\n"
#~ "* If @dof1 < 1 or @dof2 < 1 FINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FINV(0.2,2,4) equals 2.472135955.\n"
#~ "\n"
#~ "@SEEALSO=FDIST"

#~ msgid ""
#~ "@FUNCTION=BINOMDIST\n"
#~ "@SYNTAX=BINOMDIST(n,trials,p,cumulative)\n"
#~ "@DESCRIPTION=BINOMDIST function returns the binomial distribution. @n is "
#~ "the number of successes, @trials is the total number of independent "
#~ "trials, @p is the probability of success in trials, and @cumulative "
#~ "describes whether to return the sum of the binomial function from 0 to "
#~ "@n.\n"
#~ "\n"
#~ "* If @n or @trials are non-integer they are truncated.\n"
#~ "* If @n < 0 or @trials < 0 BINOMDIST returns #NUM! error.\n"
#~ "* If @n > @trials BINOMDIST returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 BINOMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BINOMDIST(3,5,0.8,0) equals 0.2048.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"
#~ msgstr ""
#~ "@FUNCTION=BINOMDIST\n"
#~ "@SYNTAX=BINOMDIST(n,trials,p,cumulative)\n"
#~ "@DESCRIPTION=BINOMDIST function returns the binomial distribution. @n is "
#~ "the number of successes, @trials is the total number of independent "
#~ "trials, @p is the probability of success in trials, and @cumulative "
#~ "describes whether to return the sum of the binomial function from 0 to "
#~ "@n.\n"
#~ "\n"
#~ "* If @n or @trials are non-integer they are truncated.\n"
#~ "* If @n < 0 or @trials < 0 BINOMDIST returns #NUM! error.\n"
#~ "* If @n > @trials BINOMDIST returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 BINOMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "BINOMDIST(3,5,0.8,0) equals 0.2048.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"

#~ msgid ""
#~ "@FUNCTION=CAUCHY\n"
#~ "@SYNTAX=CAUCHY(x,a,cum)\n"
#~ "@DESCRIPTION=CAUCHY returns the Cauchy distribution with scale parameter "
#~ "@a. If @cum is TRUE, CAUCHY returns the cumulative distribution.\n"
#~ "\n"
#~ "* If @a < 0 CAUCHY returns #NUM! error.\n"
#~ "* If @cum != TRUE and @cum != FALSE CAUCHY returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CAUCHY(0.43,1,TRUE) returns 0.370735.\n"
#~ "\n"
#~ "@SEEALSO=RANDCAUCHY"
#~ msgstr ""
#~ "@FUNCTION=CAUCHY\n"
#~ "@SYNTAX=CAUCHY(x,a,cum)\n"
#~ "@DESCRIPTION=CAUCHY returns the Cauchy distribution with scale parameter "
#~ "@a. If @cum is TRUE, CAUCHY returns the cumulative distribution.\n"
#~ "\n"
#~ "* If @a < 0 CAUCHY returns #NUM! error.\n"
#~ "* If @cum != TRUE and @cum != FALSE CAUCHY returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CAUCHY(0.43,1,TRUE) returns 0.370735.\n"
#~ "\n"
#~ "@SEEALSO=RANDCAUCHY"

#~ msgid ""
#~ "@FUNCTION=CRITBINOM\n"
#~ "@SYNTAX=CRITBINOM(trials,p,alpha)\n"
#~ "@DESCRIPTION=CRITBINOM function returns the smallest value for which the "
#~ "cumulative is greater than or equal to a given value. @n is the number of "
#~ "trials, @p is the probability of success in trials, and @alpha is the "
#~ "criterion value.\n"
#~ "\n"
#~ "* If @trials is a non-integer it is truncated.\n"
#~ "* If @trials < 0 CRITBINOM returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 CRITBINOM returns #NUM! error.\n"
#~ "* If @alpha < 0 or @alpha > 1 CRITBINOM returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CRITBINOM(10,0.5,0.75) equals 6.\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST"
#~ msgstr ""
#~ "@FUNCTION=CRITBINOM\n"
#~ "@SYNTAX=CRITBINOM(trials,p,alpha)\n"
#~ "@DESCRIPTION=CRITBINOM function returns the smallest value for which the "
#~ "cumulative is greater than or equal to a given value. @n is the number of "
#~ "trials, @p is the probability of success in trials, and @alpha is the "
#~ "criterion value.\n"
#~ "\n"
#~ "* If @trials is a non-integer it is truncated.\n"
#~ "* If @trials < 0 CRITBINOM returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 CRITBINOM returns #NUM! error.\n"
#~ "* If @alpha < 0 or @alpha > 1 CRITBINOM returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CRITBINOM(10,0.5,0.75) equals 6.\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST"

#~ msgid ""
#~ "@FUNCTION=PERMUT\n"
#~ "@SYNTAX=PERMUT(n,k)\n"
#~ "@DESCRIPTION=PERMUT function returns the number of permutations. @n is "
#~ "the number of objects, @k is the number of objects in each permutation.\n"
#~ "\n"
#~ "* If @n = 0 PERMUT returns #NUM! error.\n"
#~ "* If @n < @k PERMUT returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PERMUT(7,3) equals 210.\n"
#~ "\n"
#~ "@SEEALSO=COMBIN"
#~ msgstr ""
#~ "@FUNCTION=PERMUT\n"
#~ "@SYNTAX=PERMUT(n,k)\n"
#~ "@DESCRIPTION=PERMUT function returns the number of permutations. @n is "
#~ "the number of objects, @k is the number of objects in each permutation.\n"
#~ "\n"
#~ "* If @n = 0 PERMUT returns #NUM! error.\n"
#~ "* If @n < @k PERMUT returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PERMUT(7,3) equals 210.\n"
#~ "\n"
#~ "@SEEALSO=COMBIN"

#~ msgid ""
#~ "@FUNCTION=HYPGEOMDIST\n"
#~ "@SYNTAX=HYPGEOMDIST(x,n,M,N[,cumulative])\n"
#~ "@DESCRIPTION=HYPGEOMDIST function returns the hypergeometric "
#~ "distribution. @x is the number of successes in the sample, @n is the "
#~ "number of trials, @M is the number of successes overall, and @N is the "
#~ "population size.\n"
#~ "\n"
#~ "If the optional argument @cumulative is TRUE, the cumulative left tail "
#~ "will be returned.\n"
#~ "\n"
#~ "* If @x,@n,@M or @N is a non-integer it is truncated.\n"
#~ "* If @x,@n,@M or @N < 0 HYPGEOMDIST returns #NUM! error.\n"
#~ "* If @x > @M or @n > @N HYPGEOMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HYPGEOMDIST(1,2,3,10) equals 0.4666667.\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST,POISSON"
#~ msgstr ""
#~ "@FUNCTION=HYPGEOMDIST\n"
#~ "@SYNTAX=HYPGEOMDIST(x,n,M,N[,cumulative])\n"
#~ "@DESCRIPTION=HYPGEOMDIST function returns the hypergeometric "
#~ "distribution. @x is the number of successes in the sample, @n is the "
#~ "number of trials, @M is the number of successes overall, and @N is the "
#~ "population size.\n"
#~ "\n"
#~ "If the optional argument @cumulative is TRUE, the cumulative left tail "
#~ "will be returned.\n"
#~ "\n"
#~ "* If @x,@n,@M or @N is a non-integer it is truncated.\n"
#~ "* If @x,@n,@M or @N < 0 HYPGEOMDIST returns #NUM! error.\n"
#~ "* If @x > @M or @n > @N HYPGEOMDIST returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "HYPGEOMDIST(1,2,3,10) equals 0.4666667.\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST,POISSON"

#~ msgid ""
#~ "@FUNCTION=CONFIDENCE\n"
#~ "@SYNTAX=CONFIDENCE(x,stddev,size)\n"
#~ "@DESCRIPTION=CONFIDENCE function returns the confidence interval for a "
#~ "mean. @x is the significance level, @stddev is the population standard "
#~ "deviation, and @size is the size of the sample.\n"
#~ "\n"
#~ "* If @size is non-integer it is truncated.\n"
#~ "* If @size < 0 CONFIDENCE returns #NUM! error.\n"
#~ "* If @size is 0 CONFIDENCE returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CONFIDENCE(0.05,1,33) equals 0.341185936.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"
#~ msgstr ""
#~ "@FUNCTION=CONFIDENCE\n"
#~ "@SYNTAX=CONFIDENCE(x,stddev,size)\n"
#~ "@DESCRIPTION=CONFIDENCE function returns the confidence interval for a "
#~ "mean. @x is the significance level, @stddev is the population standard "
#~ "deviation, and @size is the size of the sample.\n"
#~ "\n"
#~ "* If @size is non-integer it is truncated.\n"
#~ "* If @size < 0 CONFIDENCE returns #NUM! error.\n"
#~ "* If @size is 0 CONFIDENCE returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CONFIDENCE(0.05,1,33) equals 0.341185936.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"

#~ msgid ""
#~ "@FUNCTION=STANDARDIZE\n"
#~ "@SYNTAX=STANDARDIZE(x,mean,stddev)\n"
#~ "@DESCRIPTION=STANDARDIZE function returns a normalized value. @x is the "
#~ "number to be normalized, @mean is the mean of the distribution, @stddev "
#~ "is the standard deviation of the distribution.\n"
#~ "\n"
#~ "* If @stddev is 0 STANDARDIZE returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "STANDARDIZE(3,2,4) equals 0.25.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"
#~ msgstr ""
#~ "@FUNCTION=STANDARDIZE\n"
#~ "@SYNTAX=STANDARDIZE(x,mean,stddev)\n"
#~ "@DESCRIPTION=STANDARDIZE function returns a normalised value. @x is the "
#~ "number to be normalised, @mean is the mean of the distribution, @stddev "
#~ "is the standard deviation of the distribution.\n"
#~ "\n"
#~ "* If @stddev is 0 STANDARDIZE returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "STANDARDIZE(3,2,4) equals 0.25.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"

#~ msgid ""
#~ "@FUNCTION=WEIBULL\n"
#~ "@SYNTAX=WEIBULL(x,alpha,beta,cumulative)\n"
#~ "@DESCRIPTION=WEIBULL function returns the Weibull distribution. If the "
#~ "@cumulative boolean is true it will return:\n"
#~ "\n"
#~ "\t1 - exp (-(@x/@beta)^@alpha),\n"
#~ "\n"
#~ "otherwise it will return\n"
#~ "\n"
#~ "\t(@alpha/@beta^@alpha) * @x^(@alpha-1) * exp(-(@x/@beta^@alpha)).\n"
#~ "\n"
#~ "* If @x < 0 WEIBULL returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0 WEIBULL returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "WEIBULL(3,2,4,0) equals 0.213668559.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"
#~ msgstr ""
#~ "@FUNCTION=WEIBULL\n"
#~ "@SYNTAX=WEIBULL(x,alpha,beta,cumulative)\n"
#~ "@DESCRIPTION=WEIBULL function returns the Weibull distribution. If the "
#~ "@cumulative boolean is true it will return:\n"
#~ "\n"
#~ "\t1 - exp (-(@x/@beta)^@alpha),\n"
#~ "\n"
#~ "otherwise it will return\n"
#~ "\n"
#~ "\t(@alpha/@beta^@alpha) * @x^(@alpha-1) * exp(-(@x/@beta^@alpha)).\n"
#~ "\n"
#~ "* If @x < 0 WEIBULL returns #NUM! error.\n"
#~ "* If @alpha <= 0 or @beta <= 0 WEIBULL returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "WEIBULL(3,2,4,0) equals 0.213668559.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"

#~ msgid ""
#~ "@FUNCTION=NORMDIST\n"
#~ "@SYNTAX=NORMDIST(x,mean,stddev,cumulative)\n"
#~ "@DESCRIPTION=The NORMDIST function returns the value of the probability "
#~ "density function or the cumulative distribution function for the normal "
#~ "distribution with the mean given by @mean, and the standard deviation "
#~ "given by @stddev. If @cumulative is FALSE, NORMDIST returns the value of "
#~ "the probability density function at the value @x. If @cumulative is TRUE, "
#~ "NORMDIST returns the value of the cumulative distribution function at "
#~ "@x.\n"
#~ "\n"
#~ "* If @stddev is 0 NORMDIST returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMDIST(2,1,2,0) equals 0.176032663.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"
#~ msgstr ""
#~ "@FUNCTION=NORMDIST\n"
#~ "@SYNTAX=NORMDIST(x,mean,stddev,cumulative)\n"
#~ "@DESCRIPTION=The NORMDIST function returns the value of the probability "
#~ "density function or the cumulative distribution function for the normal "
#~ "distribution with the mean given by @mean, and the standard deviation "
#~ "given by @stddev. If @cumulative is FALSE, NORMDIST returns the value of "
#~ "the probability density function at the value @x. If @cumulative is TRUE, "
#~ "NORMDIST returns the value of the cumulative distribution function at "
#~ "@x.\n"
#~ "\n"
#~ "* If @stddev is 0 NORMDIST returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMDIST(2,1,2,0) equals 0.176032663.\n"
#~ "\n"
#~ "@SEEALSO=POISSON"

#~ msgid ""
#~ "@FUNCTION=NORMINV\n"
#~ "@SYNTAX=NORMINV(p,mean,stddev)\n"
#~ "@DESCRIPTION=NORMINV function returns the inverse of the normal "
#~ "cumulative distribution. @p is the given probability corresponding to the "
#~ "normal distribution, @mean is the arithmetic mean of the distribution, "
#~ "and @stddev is the standard deviation of the distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @stddev <= 0 NORMINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMINV(0.76,2,3) equals 4.118907689.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST,NORMSDIST,NORMSINV,STANDARDIZE,ZTEST"
#~ msgstr ""
#~ "@FUNCTION=NORMINV\n"
#~ "@SYNTAX=NORMINV(p,mean,stddev)\n"
#~ "@DESCRIPTION=NORMINV function returns the inverse of the normal "
#~ "cumulative distribution. @p is the given probability corresponding to the "
#~ "normal distribution, @mean is the arithmetic mean of the distribution, "
#~ "and @stddev is the standard deviation of the distribution.\n"
#~ "\n"
#~ "* If @p < 0 or @p > 1 or @stddev <= 0 NORMINV returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "NORMINV(0.76,2,3) equals 4.118907689.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST,NORMSDIST,NORMSINV,STANDARDIZE,ZTEST"

#~ msgid ""
#~ "@FUNCTION=KURT\n"
#~ "@SYNTAX=KURT(n1, n2, ...)\n"
#~ "@DESCRIPTION=KURT returns an unbiased estimate of the kurtosis of a data "
#~ "set.\n"
#~ "Note, that this is only meaningful if the underlying distribution really "
#~ "has a fourth moment.  The kurtosis is offset by three such that a normal "
#~ "distribution will have zero kurtosis.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If fewer than four numbers are given or all of them are equal KURT "
#~ "returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "KURT(A1:A5) equals 1.234546305.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VAR,SKEW,KURTP"
#~ msgstr ""
#~ "@FUNCTION=KURT\n"
#~ "@SYNTAX=KURT(n1, n2, ...)\n"
#~ "@DESCRIPTION=KURT returns an unbiased estimate of the kurtosis of a data "
#~ "set.\n"
#~ "Note, that this is only meaningful if the underlying distribution really "
#~ "has a fourth moment.  The kurtosis is offset by three such that a normal "
#~ "distribution will have zero kurtosis.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If fewer than four numbers are given or all of them are equal KURT "
#~ "returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "KURT(A1:A5) equals 1.234546305.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VAR,SKEW,KURTP"

#~ msgid ""
#~ "@FUNCTION=KURTP\n"
#~ "@SYNTAX=KURTP(n1, n2, ...)\n"
#~ "@DESCRIPTION=KURTP returns the population kurtosis of a data set.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If fewer than two numbers are given or all of them are equal KURTP "
#~ "returns #DIV/0! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "KURTP(A1:A5) equals -0.691363424.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VARP,SKEWP,KURT"
#~ msgstr ""
#~ "@FUNCTION=KURTP\n"
#~ "@SYNTAX=KURTP(n1, n2, ...)\n"
#~ "@DESCRIPTION=KURTP returns the population kurtosis of a data set.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If fewer than two numbers are given or all of them are equal KURTP "
#~ "returns #DIV/0! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "KURTP(A1:A5) equals -0.691363424.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,VARP,SKEWP,KURT"

#~ msgid ""
#~ "@FUNCTION=AVEDEV\n"
#~ "@SYNTAX=AVEDEV(n1, n2, ...)\n"
#~ "@DESCRIPTION=AVEDEV returns the average of the absolute deviations of a "
#~ "data set from their mean.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "AVEDEV(A1:A5) equals 7.84.\n"
#~ "\n"
#~ "@SEEALSO=STDEV"
#~ msgstr ""
#~ "@FUNCTION=AVEDEV\n"
#~ "@SYNTAX=AVEDEV(n1, n2, ...)\n"
#~ "@DESCRIPTION=AVEDEV returns the average of the absolute deviations of a "
#~ "data set from their mean.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "AVEDEV(A1:A5) equals 7.84.\n"
#~ "\n"
#~ "@SEEALSO=STDEV"

#~ msgid ""
#~ "@FUNCTION=DEVSQ\n"
#~ "@SYNTAX=DEVSQ(n1, n2, ...)\n"
#~ "@DESCRIPTION=DEVSQ returns the sum of squares of deviations of a data set "
#~ "from the sample mean.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "DEVSQ(A1:A5) equals 470.56.\n"
#~ "\n"
#~ "@SEEALSO=STDEV"
#~ msgstr ""
#~ "@FUNCTION=DEVSQ\n"
#~ "@SYNTAX=DEVSQ(n1, n2, ...)\n"
#~ "@DESCRIPTION=DEVSQ returns the sum of squares of deviations of a data set "
#~ "from the sample mean.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "DEVSQ(A1:A5) equals 470.56.\n"
#~ "\n"
#~ "@SEEALSO=STDEV"

#~ msgid ""
#~ "@FUNCTION=FISHER\n"
#~ "@SYNTAX=FISHER(x)\n"
#~ "@DESCRIPTION=FISHER function returns the Fisher transformation at @x.\n"
#~ "\n"
#~ "* If @x is not a number, FISHER returns #VALUE! error.\n"
#~ "* If @x <= -1 or @x >= 1, FISHER returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FISHER(0.332) equals 0.345074339.\n"
#~ "\n"
#~ "@SEEALSO=SKEW"
#~ msgstr ""
#~ "@FUNCTION=FISHER\n"
#~ "@SYNTAX=FISHER(x)\n"
#~ "@DESCRIPTION=FISHER function returns the Fisher transformation at @x.\n"
#~ "\n"
#~ "* If @x is not a number, FISHER returns #VALUE! error.\n"
#~ "* If @x <= -1 or @x >= 1, FISHER returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FISHER(0.332) equals 0.345074339.\n"
#~ "\n"
#~ "@SEEALSO=SKEW"

#~ msgid ""
#~ "@FUNCTION=POISSON\n"
#~ "@SYNTAX=POISSON(x,mean,cumulative)\n"
#~ "@DESCRIPTION=POISSON function returns the Poisson distribution. @x is the "
#~ "number of events, @mean is the expected numeric value @cumulative "
#~ "describes whether to return the sum of the Poisson function from 0 to "
#~ "@x.\n"
#~ "\n"
#~ "* If @x is a non-integer it is truncated.\n"
#~ "* If @x < 0 POISSON returns #NUM! error.\n"
#~ "* If @mean <= 0 POISSON returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "POISSON(3,6,0) equals 0.089235078.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST, WEIBULL"
#~ msgstr ""
#~ "@FUNCTION=POISSON\n"
#~ "@SYNTAX=POISSON(x,mean,cumulative)\n"
#~ "@DESCRIPTION=POISSON function returns the Poisson distribution. @x is the "
#~ "number of events, @mean is the expected numeric value @cumulative "
#~ "describes whether to return the sum of the Poisson function from 0 to "
#~ "@x.\n"
#~ "\n"
#~ "* If @x is a non-integer it is truncated.\n"
#~ "* If @x < 0 POISSON returns #NUM! error.\n"
#~ "* If @mean <= 0 POISSON returns the #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "POISSON(3,6,0) equals 0.089235078.\n"
#~ "\n"
#~ "@SEEALSO=NORMDIST, WEIBULL"

#~ msgid ""
#~ "@FUNCTION=PEARSON\n"
#~ "@SYNTAX=PEARSON(array1,array2)\n"
#~ "@DESCRIPTION=PEARSON returns the Pearson correlation coefficient of two "
#~ "data sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=INTERCEPT,LINEST,RSQ,SLOPE,STEYX"
#~ msgstr ""
#~ "@FUNCTION=PEARSON\n"
#~ "@SYNTAX=PEARSON(array1,array2)\n"
#~ "@DESCRIPTION=PEARSON returns the Pearson correlation coefficient of two "
#~ "data sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=INTERCEPT,LINEST,RSQ,SLOPE,STEYX"

#~ msgid ""
#~ "@FUNCTION=RSQ\n"
#~ "@SYNTAX=RSQ(array1,array2)\n"
#~ "@DESCRIPTION=RSQ returns the square of the Pearson correlation "
#~ "coefficient of two data sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=CORREL,COVAR,INTERCEPT,LINEST,LOGEST,PEARSON,SLOPE,STEYX,TREND"
#~ msgstr ""
#~ "@FUNCTION=RSQ\n"
#~ "@SYNTAX=RSQ(array1,array2)\n"
#~ "@DESCRIPTION=RSQ returns the square of the Pearson correlation "
#~ "coefficient of two data sets.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=CORREL,COVAR,INTERCEPT,LINEST,LOGEST,PEARSON,SLOPE,STEYX,TREND"

#~ msgid ""
#~ "@FUNCTION=MEDIAN\n"
#~ "@SYNTAX=MEDIAN(n1, n2, ...)\n"
#~ "@DESCRIPTION=MEDIAN returns the median of the given data set.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If even numbers are given MEDIAN returns the average of the two numbers "
#~ "in the middle.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "MEDIAN(A1:A5) equals 21.3.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,COUNT,COUNTA,DAVERAGE,MODE,SSMEDIAN,SUM"
#~ msgstr ""
#~ "@FUNCTION=MEDIAN\n"
#~ "@SYNTAX=MEDIAN(n1, n2, ...)\n"
#~ "@DESCRIPTION=MEDIAN returns the median of the given data set.\n"
#~ "\n"
#~ "* Strings and empty cells are simply ignored.\n"
#~ "* If even numbers are given MEDIAN returns the average of the two numbers "
#~ "in the middle.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "MEDIAN(A1:A5) equals 21.3.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE,COUNT,COUNTA,DAVERAGE,MODE,SSMEDIAN,SUM"

#~ msgid ""
#~ "@FUNCTION=SSMEDIAN\n"
#~ "@SYNTAX=SSMEDIAN(array[,interval)]\n"
#~ "@DESCRIPTION=The SSMEDIAN function returns the median for grouped data as "
#~ "commonly determined in the social sciences. The data points given in "
#~ "@array are assumed to be the result of grouping data into intervals of "
#~ "length @interval\n"
#~ "\n"
#~ "* If @interval is not given, SSMEDIAN uses 1.\n"
#~ "* If @array is empty, SSMEDIAN returns #NUM! error.\n"
#~ "* If @interval <= 0, SSMEDIAN returns #NUM! error.\n"
#~ "* SSMEDIAN does not check whether the data points are at least @interval "
#~ "apart.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, A3 contain numbers 7, 8, 8.  Then\n"
#~ "SSMEDIAN(A1:A3, 1) equals 7.75.\n"
#~ "\n"
#~ "@SEEALSO=MEDIAN"
#~ msgstr ""
#~ "@FUNCTION=SSMEDIAN\n"
#~ "@SYNTAX=SSMEDIAN(array[,interval)]\n"
#~ "@DESCRIPTION=The SSMEDIAN function returns the median for grouped data as "
#~ "commonly determined in the social sciences. The data points given in "
#~ "@array are assumed to be the result of grouping data into intervals of "
#~ "length @interval\n"
#~ "\n"
#~ "* If @interval is not given, SSMEDIAN uses 1.\n"
#~ "* If @array is empty, SSMEDIAN returns #NUM! error.\n"
#~ "* If @interval <= 0, SSMEDIAN returns #NUM! error.\n"
#~ "* SSMEDIAN does not check whether the data points are at least @interval "
#~ "apart.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, A3 contain numbers 7, 8, 8.  Then\n"
#~ "SSMEDIAN(A1:A3, 1) equals 7.75.\n"
#~ "\n"
#~ "@SEEALSO=MEDIAN"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=LARGE\n"
#~ "@SYNTAX=LARGE(n, k)\n"
#~ "@DESCRIPTION=LARGE returns the k-th largest value in a data set.\n"
#~ "\n"
#~ "* If data set is empty LARGE returns #NUM! error.\n"
#~ "* If @k <= 0 or @k is greater than the number of data items given LARGE "
#~ "returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "LARGE(A1:A5,2) equals 25.9.\n"
#~ "LARGE(A1:A5,4) equals 17.3.\n"
#~ "\n"
#~ "@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,SMALL"
#~ msgstr ""
#~ "@FUNCTION=LARGE\n"
#~ "@SYNTAX=LARGE(n1, n2, ..., k)\n"
#~ "@DESCRIPTION=LARGE returns the k-th largest value in a data set.\n"
#~ "\n"
#~ "* If data set is empty LARGE returns #NUM! error.\n"
#~ "* If @k <= 0 or @k is greater than the number of data items given LARGE "
#~ "returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "LARGE(A1:A5,2) equals 25.9.\n"
#~ "LARGE(A1:A5,4) equals 17.3.\n"
#~ "\n"
#~ "@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,SMALL"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=SMALL\n"
#~ "@SYNTAX=SMALL(n, k)\n"
#~ "@DESCRIPTION=SMALL returns the k-th smallest value in a data set.\n"
#~ "\n"
#~ "* If data set is empty SMALL returns #NUM! error.\n"
#~ "* If @k <= 0 or @k is greater than the number of data items given SMALL "
#~ "returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "SMALL(A1:A5,2) equals 17.3.\n"
#~ "SMALL(A1:A5,4) equals 25.9.\n"
#~ "\n"
#~ "@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,LARGE"
#~ msgstr ""
#~ "@FUNCTION=SMALL\n"
#~ "@SYNTAX=SMALL(n1, n2, ..., k)\n"
#~ "@DESCRIPTION=SMALL returns the k-th smallest value in a data set.\n"
#~ "\n"
#~ "* If data set is empty SMALL returns #NUM! error.\n"
#~ "* If @k <= 0 or @k is greater than the number of data items given SMALL "
#~ "returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "SMALL(A1:A5,2) equals 17.3.\n"
#~ "SMALL(A1:A5,4) equals 25.9.\n"
#~ "\n"
#~ "@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,LARGE"

#~ msgid ""
#~ "@FUNCTION=PROB\n"
#~ "@SYNTAX=PROB(x_range,prob_range,lower_limit[,upper_limit])\n"
#~ "@DESCRIPTION=PROB function returns the probability that values in a range "
#~ "or an array are between two limits. If @upper_limit is not given, PROB "
#~ "returns the probability that values in @x_range are equal to "
#~ "@lower_limit.\n"
#~ "\n"
#~ "* If the sum of the probabilities in @prob_range is not equal to 1 PROB "
#~ "returns #NUM! error.\n"
#~ "* If any value in @prob_range is <=0 or > 1, PROB returns #NUM! error.\n"
#~ "* If @x_range and @prob_range contain a different number of data entries, "
#~ "PROB returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST,CRITBINOM"
#~ msgstr ""
#~ "@FUNCTION=PROB\n"
#~ "@SYNTAX=PROB(x_range,prob_range,lower_limit[,upper_limit])\n"
#~ "@DESCRIPTION=PROB function returns the probability that values in a range "
#~ "or an array are between two limits. If @upper_limit is not given, PROB "
#~ "returns the probability that values in @x_range are equal to "
#~ "@lower_limit.\n"
#~ "\n"
#~ "* If the sum of the probabilities in @prob_range is not equal to 1 PROB "
#~ "returns #NUM! error.\n"
#~ "* If any value in @prob_range is <=0 or > 1, PROB returns #NUM! error.\n"
#~ "* If @x_range and @prob_range contain a different number of data entries, "
#~ "PROB returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=BINOMDIST,CRITBINOM"

#~ msgid ""
#~ "@FUNCTION=STEYX\n"
#~ "@SYNTAX=STEYX(known_y's,known_x's)\n"
#~ "@DESCRIPTION=STEYX function returns the standard error of the predicted y-"
#~ "value for each x in the regression.\n"
#~ "\n"
#~ "* If @known_y's and @known_x's are empty or have a different number of "
#~ "arguments then STEYX returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "STEYX(A1:A5,B1:B5) equals 1.101509979.\n"
#~ "\n"
#~ "@SEEALSO=PEARSON,RSQ,SLOPE"
#~ msgstr ""
#~ "@FUNCTION=STEYX\n"
#~ "@SYNTAX=STEYX(known_y's,known_x's)\n"
#~ "@DESCRIPTION=STEYX function returns the standard error of the predicted y-"
#~ "value for each x in the regression.\n"
#~ "\n"
#~ "* If @known_y's and @known_x's are empty or have a different number of "
#~ "arguments then STEYX returns #N/A error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "STEYX(A1:A5,B1:B5) equals 1.101509979.\n"
#~ "\n"
#~ "@SEEALSO=PEARSON,RSQ,SLOPE"

#, fuzzy
#~ msgid ""
#~ "@FUNCTION=ZTEST\n"
#~ "@SYNTAX=ZTEST(ref,x[,stddev])\n"
#~ "@DESCRIPTION=ZTEST returns the two-tailed probability of a z-test.\n"
#~ "\n"
#~ "@ref is the data set and @x is the value to be tested.\n"
#~ "@stddev is optionally an assumed standard deviation.\n"
#~ "\n"
#~ "* If @ref contains less than two data items ZTEST returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "ZTEST(A1:A5,20) equals 0.254717826.\n"
#~ "\n"
#~ "@SEEALSO=CONFIDENCE,NORMDIST,NORMINV,NORMSDIST,NORMSINV,STANDARDIZE"
#~ msgstr ""
#~ "@FUNCTION=ZTEST\n"
#~ "@SYNTAX=ZTEST(ref,x)\n"
#~ "@DESCRIPTION=ZTEST returns the two-tailed probability of a z-test.\n"
#~ "\n"
#~ "@ref is the data set and @x is the value to be tested.\n"
#~ "\n"
#~ "* If @ref contains less than two data items ZTEST returns #DIV/0! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "ZTEST(A1:A5,20) equals 0.254717826.\n"
#~ "\n"
#~ "@SEEALSO=CONFIDENCE,NORMDIST,NORMINV,NORMSDIST,NORMSINV,STANDARDIZE"

#~ msgid ""
#~ "@FUNCTION=AVERAGEA\n"
#~ "@SYNTAX=AVERAGEA(number1,number2,...)\n"
#~ "@DESCRIPTION=AVERAGEA returns the average of the given arguments.  "
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "AVERAGEA(A1:A5) equals 18.94.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"
#~ msgstr ""
#~ "@FUNCTION=AVERAGEA\n"
#~ "@SYNTAX=AVERAGEA(number1,number2,...)\n"
#~ "@DESCRIPTION=AVERAGEA returns the average of the given arguments.  "
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "AVERAGEA(A1:A5) equals 18.94.\n"
#~ "\n"
#~ "@SEEALSO=AVERAGE"

#~ msgid ""
#~ "@FUNCTION=MAXA\n"
#~ "@SYNTAX=MAXA(number1,number2,...)\n"
#~ "@DESCRIPTION=MAXA returns the largest value of the given arguments.  "
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "MAXA(A1:A5) equals 40.1.\n"
#~ "\n"
#~ "@SEEALSO=MAX,MINA"
#~ msgstr ""
#~ "@FUNCTION=MAXA\n"
#~ "@SYNTAX=MAXA(number1,number2,...)\n"
#~ "@DESCRIPTION=MAXA returns the largest value of the given arguments.  "
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "MAXA(A1:A5) equals 40.1.\n"
#~ "\n"
#~ "@SEEALSO=MAX,MINA"

#~ msgid ""
#~ "@FUNCTION=MINA\n"
#~ "@SYNTAX=MINA(number1,number2,...)\n"
#~ "@DESCRIPTION=MINA returns the smallest value of the given arguments.  "
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "MINA(A1:A5) equals 0.\n"
#~ "\n"
#~ "@SEEALSO=MIN,MAXA"
#~ msgstr ""
#~ "@FUNCTION=MINA\n"
#~ "@SYNTAX=MINA(number1,number2,...)\n"
#~ "@DESCRIPTION=MINA returns the smallest value of the given arguments.  "
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "MINA(A1:A5) equals 0.\n"
#~ "\n"
#~ "@SEEALSO=MIN,MAXA"

#~ msgid ""
#~ "@FUNCTION=VARA\n"
#~ "@SYNTAX=VARA(number1,number2,...)\n"
#~ "@DESCRIPTION=VARA calculates sample variance of the given sample.\n"
#~ "To get the true variance of a complete population use VARPA.\n"
#~ "VARA is also known as the N-1-variance.\n"
#~ "Under reasonable conditions, it is the maximum-likelihood estimator for "
#~ "the true variance.\n"
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "VARA(A1:A5) equals 228.613.\n"
#~ "\n"
#~ "@SEEALSO=VAR,VARPA"
#~ msgstr ""
#~ "@FUNCTION=VARA\n"
#~ "@SYNTAX=VARA(number1,number2,...)\n"
#~ "@DESCRIPTION=VARA calculates sample variance of the given sample.\n"
#~ "To get the true variance of a complete population use VARPA.\n"
#~ "VARA is also known as the N-1-variance.\n"
#~ "Under reasonable conditions, it is the maximum-likelihood estimator for "
#~ "the true variance.\n"
#~ "Numbers, text and logical values are included in the calculation too. If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "VARA(A1:A5) equals 228.613.\n"
#~ "\n"
#~ "@SEEALSO=VAR,VARPA"

#~ msgid ""
#~ "@FUNCTION=VARPA\n"
#~ "@SYNTAX=VARPA(number1,number2,...)\n"
#~ "@DESCRIPTION=VARPA calculates the variance of an entire population.\n"
#~ "VARPA is also known as the N-variance.\n"
#~ "Numbers, text and logical values are included in the calculation too.  If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "VARPA(A1:A5) equals 182.8904.\n"
#~ "\n"
#~ "@SEEALSO=VARA,VARP"
#~ msgstr ""
#~ "@FUNCTION=VARPA\n"
#~ "@SYNTAX=VARPA(number1,number2,...)\n"
#~ "@DESCRIPTION=VARPA calculates the variance of an entire population.\n"
#~ "VARPA is also known as the N-variance.\n"
#~ "Numbers, text and logical values are included in the calculation too.  If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "VARPA(A1:A5) equals 182.8904.\n"
#~ "\n"
#~ "@SEEALSO=VARA,VARP"

#~ msgid ""
#~ "@FUNCTION=STDEVA\n"
#~ "@SYNTAX=STDEVA(number1,number2,...)\n"
#~ "@DESCRIPTION=STDEVA returns the sample standard deviation of the given "
#~ "sample.\n"
#~ "To obtain the population standard deviation of a whole population use "
#~ "STDEVPA.\n"
#~ "STDEVA is also known as the N-1-standard deviation.\n"
#~ "Under reasonable conditions, it is the maximum-likelihood estimator for "
#~ "the true population standard deviation.\n"
#~ "Numbers, text and logical values are included in the calculation too.  If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "STDEVA(A1:A5) equals 15.119953704.\n"
#~ "\n"
#~ "@SEEALSO=STDEV,STDEVPA"
#~ msgstr ""
#~ "@FUNCTION=STDEVA\n"
#~ "@SYNTAX=STDEVA(number1,number2,...)\n"
#~ "@DESCRIPTION=STDEVA returns the sample standard deviation of the given "
#~ "sample.\n"
#~ "To obtain the population standard deviation of a whole population use "
#~ "STDEVPA.\n"
#~ "STDEVA is also known as the N-1-standard deviation.\n"
#~ "Under reasonable conditions, it is the maximum-likelihood estimator for "
#~ "the true population standard deviation.\n"
#~ "Numbers, text and logical values are included in the calculation too.  If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "STDEVA(A1:A5) equals 15.119953704.\n"
#~ "\n"
#~ "@SEEALSO=STDEV,STDEVPA"

#~ msgid ""
#~ "@FUNCTION=STDEVPA\n"
#~ "@SYNTAX=STDEVPA(number1,number2,...)\n"
#~ "@DESCRIPTION=STDEVPA returns the population standard deviation of an "
#~ "entire population.\n"
#~ "This is also known as the N-standard deviation\n"
#~ "Numbers, text and logical values are included in the calculation too.  If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "STDEVPA(A1:A5) equals 13.523697719.\n"
#~ "\n"
#~ "@SEEALSO=STDEVA,STDEVP"
#~ msgstr ""
#~ "@FUNCTION=STDEVPA\n"
#~ "@SYNTAX=STDEVPA(number1,number2,...)\n"
#~ "@DESCRIPTION=STDEVPA returns the population standard deviation of an "
#~ "entire population.\n"
#~ "This is also known as the N-standard deviation\n"
#~ "Numbers, text and logical values are included in the calculation too.  If "
#~ "the cell contains text or the argument evaluates to FALSE, it is counted "
#~ "as value zero (0).  If the argument evaluates to TRUE, it is counted as "
#~ "one (1).  Note that empty cells are not counted.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
#~ "11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
#~ "STDEVPA(A1:A5) equals 13.523697719.\n"
#~ "\n"
#~ "@SEEALSO=STDEVA,STDEVP"

#~ msgid ""
#~ "@FUNCTION=PERCENTRANK\n"
#~ "@SYNTAX=PERCENTRANK(array,x[,significance])\n"
#~ "@DESCRIPTION=PERCENTRANK function returns the rank of a data point in a "
#~ "data set.  @array is the range of numeric values, @x is the data point "
#~ "which you want to rank, and the optional @significance specifies the "
#~ "number of significant digits for the returned value, truncating the "
#~ "remainder.  If @significance is omitted, PERCENTRANK uses three digits.\n"
#~ "\n"
#~ "* If @array contains no data points, PERCENTRANK returns #NUM! error.\n"
#~ "* If @significance is less than one, PERCENTRANK returns #NUM! error.\n"
#~ "* If @x exceeds the largest value or is less than the smallest value in "
#~ "@array, PERCENTRANK returns #NUM! error.\n"
#~ "* If @x does not match any of the values in @array or @x matches more "
#~ "than once, PERCENTRANK interpolates the returned value.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,QUARTILE,SMALL"
#~ msgstr ""
#~ "@FUNCTION=PERCENTRANK\n"
#~ "@SYNTAX=PERCENTRANK(array,x[,significance])\n"
#~ "@DESCRIPTION=PERCENTRANK function returns the rank of a data point in a "
#~ "data set.  @array is the range of numeric values, @x is the data point "
#~ "which you want to rank, and the optional @significance specifies the "
#~ "number of significant digits for the returned value, truncating the "
#~ "remainder.  If @significance is omitted, PERCENTRANK uses three digits.\n"
#~ "\n"
#~ "* If @array contains no data points, PERCENTRANK returns #NUM! error.\n"
#~ "* If @significance is less than one, PERCENTRANK returns #NUM! error.\n"
#~ "* If @x exceeds the largest value or is less than the smallest value in "
#~ "@array, PERCENTRANK returns #NUM! error.\n"
#~ "* If @x does not match any of the values in @array or @x matches more "
#~ "than once, PERCENTRANK interpolates the returned value.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,QUARTILE,SMALL"

#~ msgid ""
#~ "@FUNCTION=PERCENTILE\n"
#~ "@SYNTAX=PERCENTILE(array,k)\n"
#~ "@DESCRIPTION=PERCENTILE function returns the 100*@k-th percentile of the "
#~ "given data points (that is, a number x such that a fraction @k of the "
#~ "data points are less than x).\n"
#~ "\n"
#~ "* If @array is empty, PERCENTILE returns #NUM! error.\n"
#~ "* If @k < 0 or @k > 1, PERCENTILE returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "PERCENTILE(A1:A5,0.42) equals 20.02.\n"
#~ "\n"
#~ "@SEEALSO=QUARTILE"
#~ msgstr ""
#~ "@FUNCTION=PERCENTILE\n"
#~ "@SYNTAX=PERCENTILE(array,k)\n"
#~ "@DESCRIPTION=PERCENTILE function returns the 100*@k-th percentile of the "
#~ "given data points (that is, a number x such that a fraction @k of the "
#~ "data points are less than x).\n"
#~ "\n"
#~ "* If @array is empty, PERCENTILE returns #NUM! error.\n"
#~ "* If @k < 0 or @k > 1, PERCENTILE returns #NUM! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "PERCENTILE(A1:A5,0.42) equals 20.02.\n"
#~ "\n"
#~ "@SEEALSO=QUARTILE"

#~ msgid ""
#~ "@FUNCTION=QUARTILE\n"
#~ "@SYNTAX=QUARTILE(array,quart)\n"
#~ "@DESCRIPTION=QUARTILE function returns the quartile of the given data "
#~ "points.\n"
#~ "\n"
#~ "If @quart is equal to: QUARTILE returns:\n"
#~ "0                      the smallest value of @array.\n"
#~ "1                      the first quartile\n"
#~ "2                      the second quartile\n"
#~ "3                      the third quartile\n"
#~ "4                      the largest value of @array.\n"
#~ "\n"
#~ "* If @array is empty, QUARTILE returns #NUM! error.\n"
#~ "* If @quart < 0 or @quart > 4, QUARTILE returns #NUM! error.\n"
#~ "* If @quart is not an integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "QUARTILE(A1:A5,1) equals 17.3.\n"
#~ "\n"
#~ "@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,SMALL"
#~ msgstr ""
#~ "@FUNCTION=QUARTILE\n"
#~ "@SYNTAX=QUARTILE(array,quart)\n"
#~ "@DESCRIPTION=QUARTILE function returns the quartile of the given data "
#~ "points.\n"
#~ "\n"
#~ "If @quart is equal to: QUARTILE returns:\n"
#~ "0                      the smallest value of @array.\n"
#~ "1                      the first quartile\n"
#~ "2                      the second quartile\n"
#~ "3                      the third quartile\n"
#~ "4                      the largest value of @array.\n"
#~ "\n"
#~ "* If @array is empty, QUARTILE returns #NUM! error.\n"
#~ "* If @quart < 0 or @quart > 4, QUARTILE returns #NUM! error.\n"
#~ "* If @quart is not an integer, it is truncated.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1.  Then\n"
#~ "QUARTILE(A1:A5,1) equals 17.3.\n"
#~ "\n"
#~ "@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,SMALL"

#~ msgid ""
#~ "@FUNCTION=FTEST\n"
#~ "@SYNTAX=FTEST(array1,array2)\n"
#~ "@DESCRIPTION=FTEST function returns the two-tailed probability that the "
#~ "variances in the given two data sets are not significantly different.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "FTEST(A1:A5,B1:B5) equals 0.510815017.\n"
#~ "\n"
#~ "@SEEALSO=FDIST,FINV"
#~ msgstr ""
#~ "@FUNCTION=FTEST\n"
#~ "@SYNTAX=FTEST(array1,array2)\n"
#~ "@DESCRIPTION=FTEST function returns the two-tailed probability that the "
#~ "variances in the given two data sets are not significantly different.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "FTEST(A1:A5,B1:B5) equals 0.510815017.\n"
#~ "\n"
#~ "@SEEALSO=FDIST,FINV"

#~ msgid ""
#~ "@FUNCTION=TTEST\n"
#~ "@SYNTAX=TTEST(array1,array2,tails,type)\n"
#~ "@DESCRIPTION=TTEST function returns the probability of a Student's t-"
#~ "Test. \n"
#~ "@array1 is the first data set and @array2 is the second data set.  If "
#~ "@tails is one, TTEST uses the one-tailed distribution and if @tails is "
#~ "two, TTEST uses the two-tailed distribution.  @type determines the kind "
#~ "of the test:\n"
#~ "\n"
#~ "\t1  Paired test\n"
#~ "\t2  Two-sample equal variance\n"
#~ "\t3  Two-sample unequal variance\n"
#~ "\n"
#~ "* If the data sets contain a different number of data points and the test "
#~ "is paired (@type one), TTEST returns the #N/A error.\n"
#~ "* @tails and @type are truncated to integers.\n"
#~ "* If @tails is not one or two, TTEST returns #NUM! error.\n"
#~ "* If @type is any other than one, two, or three, TTEST returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.\n"
#~ "TTEST(A1:A5,B1:B5,2,1) equals 0.006255239.\n"
#~ "TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.\n"
#~ "TTEST(A1:A5,B1:B5,1,3) equals 0.113821797.\n"
#~ "\n"
#~ "@SEEALSO=FDIST,FINV"
#~ msgstr ""
#~ "@FUNCTION=TTEST\n"
#~ "@SYNTAX=TTEST(array1,array2,tails,type)\n"
#~ "@DESCRIPTION=TTEST function returns the probability of a Student's t-"
#~ "Test. \n"
#~ "@array1 is the first data set and @array2 is the second data set.  If "
#~ "@tails is one, TTEST uses the one-tailed distribution and if @tails is "
#~ "two, TTEST uses the two-tailed distribution.  @type determines the kind "
#~ "of the test:\n"
#~ "\n"
#~ "\t1  Paired test\n"
#~ "\t2  Two-sample equal variance\n"
#~ "\t3  Two-sample unequal variance\n"
#~ "\n"
#~ "* If the data sets contain a different number of data points and the test "
#~ "is paired (@type one), TTEST returns the #N/A error.\n"
#~ "* @tails and @type are truncated to integers.\n"
#~ "* If @tails is not one or two, TTEST returns #NUM! error.\n"
#~ "* If @type is any other than one, two, or three, TTEST returns #NUM! "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.\n"
#~ "TTEST(A1:A5,B1:B5,2,1) equals 0.006255239.\n"
#~ "TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.\n"
#~ "TTEST(A1:A5,B1:B5,1,3) equals 0.113821797.\n"
#~ "\n"
#~ "@SEEALSO=FDIST,FINV"

#~ msgid ""
#~ "@FUNCTION=FREQUENCY\n"
#~ "@SYNTAX=FREQUENCY(data_array,bins_array)\n"
#~ "@DESCRIPTION=FREQUENCY function counts how often given values occur "
#~ "within a range of values.  The results are given as an array.\n"
#~ "\n"
#~ "@data_array is a data array for which you want to count the frequencies.  "
#~ "@bin_array is an array containing the intervals into which you want to "
#~ "group the values in data_array.  If the @bin_array is empty, FREQUENCY "
#~ "returns the number of data points in @data_array.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=FREQUENCY\n"
#~ "@SYNTAX=FREQUENCY(data_array,bins_array)\n"
#~ "@DESCRIPTION=FREQUENCY function counts how often given values occur "
#~ "within a range of values.  The results are given as an array.\n"
#~ "\n"
#~ "@data_array is a data array for which you want to count the frequencies.  "
#~ "@bin_array is an array containing the intervals into which you want to "
#~ "group the values in data_array.  If the @bin_array is empty, FREQUENCY "
#~ "returns the number of data points in @data_array.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=LINEST\n"
#~ "@SYNTAX=LINEST(known_y's[,known_x's[,const[,stat]]])\n"
#~ "@DESCRIPTION=LINEST function calculates the ``least squares'' line that "
#~ "best fit to your data in @known_y's.  @known_x's contains the "
#~ "corresponding x's where y=mx+b.\n"
#~ "\n"
#~ "LINEST returns an array having two columns and one row.  The slope (m) of "
#~ "the regression line y=mx+b is given in the first column and the y-"
#~ "intercept (b) in the second.\n"
#~ "\n"
#~ "If @stat is TRUE, extra statistical information will be returned. Extra "
#~ "statistical information is written below the regression line coefficients "
#~ "in the result array.  Extra statistical information consists of four rows "
#~ "of data.  In the first row the standard error values for the coefficients "
#~ "m1, (m2, ...), b are represented.  The second row contains the square of "
#~ "R and the standard error for the y estimate.  The third row contains the "
#~ "F-observed value and the degrees of freedom.  The last row contains the "
#~ "regression sum of squares and the residual sum of squares.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, LINEST "
#~ "returns #NUM! error.\n"
#~ "* If @const is FALSE, the line will be forced to go through the origin, i."
#~ "e., b will be zero. The default is TRUE.\n"
#~ "* The default of @stat is FALSE.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGEST,TREND"
#~ msgstr ""
#~ "@FUNCTION=LINEST\n"
#~ "@SYNTAX=LINEST(known_y's[,known_x's[,const[,stat]]])\n"
#~ "@DESCRIPTION=LINEST function calculates the ``least squares'' line that "
#~ "best fit to your data in @known_y's.  @known_x's contains the "
#~ "corresponding x's where y=mx+b.\n"
#~ "\n"
#~ "LINEST returns an array having two columns and one row.  The slope (m) of "
#~ "the regression line y=mx+b is given in the first column and the y-"
#~ "intercept (b) in the second.\n"
#~ "\n"
#~ "If @stat is TRUE, extra statistical information will be returned. Extra "
#~ "statistical information is written below the regression line coefficients "
#~ "in the result array.  Extra statistical information consists of four rows "
#~ "of data.  In the first row the standard error values for the coefficients "
#~ "m1, (m2, ...), b are represented.  The second row contains the square of "
#~ "R and the standard error for the y estimate.  The third row contains the "
#~ "F-observed value and the degrees of freedom.  The last row contains the "
#~ "regression sum of squares and the residual sum of squares.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, LINEST "
#~ "returns #NUM! error.\n"
#~ "* If @const is FALSE, the line will be forced to go through the origin, i."
#~ "e., b will be zero. The default is TRUE.\n"
#~ "* The default of @stat is FALSE.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGEST,TREND"

#~ msgid ""
#~ "@FUNCTION=LOGREG\n"
#~ "@SYNTAX=LOGREG(known_y's[,known_x's[,const[,stat]]])\n"
#~ "@DESCRIPTION=LOGREG function transforms your x's to z=ln(x) and applies "
#~ "the ``least squares'' method to fit the linear equation\n"
#~ "y = m * z + b \n"
#~ "to your y's and z's --- equivalent to fitting the equation\n"
#~ "y = m * ln(x) + b \n"
#~ "to y's and x's. \n"
#~ "\n"
#~ "If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGREG returns "
#~ "an array having two columns and one row. m is given in the first column "
#~ "and b in the second. \n"
#~ "\n"
#~ "If @known_y's and @known_x's have unequal number of data points, LOGREG "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "If @const is FALSE, the curve will be forced to go through [1; 0], i.e., "
#~ "b will be zero. The default is TRUE.\n"
#~ "\n"
#~ "If @stat is TRUE, extra statistical information will be returned which "
#~ "applies to the state AFTER transformation to z. Extra statistical "
#~ "information is written below m and b in the result array.  Extra "
#~ "statistical information consists of four rows of data.  In the first row "
#~ "the standard error values for the coefficients m, b are represented.  The "
#~ "second row contains the square of R and the standard error for the y "
#~ "estimate. The third row contains the F-observed value and the degrees of "
#~ "freedom.  The last row contains the regression sum of squares and the "
#~ "residual sum of squares.The default of @stat is FALSE.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGFIT,LINEST,LOGEST"
#~ msgstr ""
#~ "@FUNCTION=LOGREG\n"
#~ "@SYNTAX=LOGREG(known_y's[,known_x's[,const[,stat]]])\n"
#~ "@DESCRIPTION=LOGREG function transforms your x's to z=ln(x) and applies "
#~ "the ``least squares'' method to fit the linear equation\n"
#~ "y = m * z + b \n"
#~ "to your y's and z's --- equivalent to fitting the equation\n"
#~ "y = m * ln(x) + b \n"
#~ "to y's and x's. \n"
#~ "\n"
#~ "If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGREG returns "
#~ "an array having two columns and one row. m is given in the first column "
#~ "and b in the second. \n"
#~ "\n"
#~ "If @known_y's and @known_x's have unequal number of data points, LOGREG "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "If @const is FALSE, the curve will be forced to go through [1; 0], i.e., "
#~ "b will be zero. The default is TRUE.\n"
#~ "\n"
#~ "If @stat is TRUE, extra statistical information will be returned which "
#~ "applies to the state AFTER transformation to z. Extra statistical "
#~ "information is written below m and b in the result array.  Extra "
#~ "statistical information consists of four rows of data.  In the first row "
#~ "the standard error values for the coefficients m, b are represented.  The "
#~ "second row contains the square of R and the standard error for the y "
#~ "estimate. The third row contains the F-observed value and the degrees of "
#~ "freedom.  The last row contains the regression sum of squares and the "
#~ "residual sum of squares.The default of @stat is FALSE.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGFIT,LINEST,LOGEST"

#~ msgid ""
#~ "@FUNCTION=LOGFIT\n"
#~ "@SYNTAX=LOGFIT(known_y's,known_x's)\n"
#~ "@DESCRIPTION=LOGFIT function applies the ``least squares'' method to fit "
#~ "the logarithmic equation\n"
#~ "y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 \n"
#~ "to your data. The graph of the equation is a logarithmic curve moved "
#~ "horizontally by c and possibly mirrored across the y-axis (if sign = "
#~ "-1).\n"
#~ "\n"
#~ "LOGFIT returns an array having five columns and one row. `Sign' is given "
#~ "in the first column, `a', `b', and `c' are given in columns 2 to 4. "
#~ "Column 5 holds the sum of squared residuals.\n"
#~ "\n"
#~ "An error is returned when there are less than 3 different x's or y's, or "
#~ "when the shape of the point cloud is too different from a ``logarithmic'' "
#~ "one.\n"
#~ "\n"
#~ "You can use the above formula \n"
#~ "= a + b * ln(sign * (x - c)) \n"
#~ "or rearrange it to \n"
#~ "= (exp((y - a) / b)) / sign + c \n"
#~ "to compute unknown y's or x's, respectively. \n"
#~ "\n"
#~ "Technically, this is non-linear fitting by trial-and-error. The accuracy "
#~ "of `c' is: width of x-range -> rounded to the next smaller (10^integer), "
#~ "times 0.000001. There might be cases in which the returned fit is not the "
#~ "best possible.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGREG,LINEST,LOGEST"
#~ msgstr ""
#~ "@FUNCTION=LOGFIT\n"
#~ "@SYNTAX=LOGFIT(known_y's,known_x's)\n"
#~ "@DESCRIPTION=LOGFIT function applies the ``least squares'' method to fit "
#~ "the logarithmic equation\n"
#~ "y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 \n"
#~ "to your data. The graph of the equation is a logarithmic curve moved "
#~ "horizontally by c and possibly mirrored across the y-axis (if sign = "
#~ "-1).\n"
#~ "\n"
#~ "LOGFIT returns an array having five columns and one row. `Sign' is given "
#~ "in the first column, `a', `b', and `c' are given in columns 2 to 4. "
#~ "Column 5 holds the sum of squared residuals.\n"
#~ "\n"
#~ "An error is returned when there are less than 3 different x's or y's, or "
#~ "when the shape of the point cloud is too different from a ``logarithmic'' "
#~ "one.\n"
#~ "\n"
#~ "You can use the above formula \n"
#~ "= a + b * ln(sign * (x - c)) \n"
#~ "or rearrange it to \n"
#~ "= (exp((y - a) / b)) / sign + c \n"
#~ "to compute unknown y's or x's, respectively. \n"
#~ "\n"
#~ "Technically, this is non-linear fitting by trial-and-error. The accuracy "
#~ "of `c' is: width of x-range -> rounded to the next smaller (10^integer), "
#~ "times 0.000001. There might be cases in which the returned fit is not the "
#~ "best possible.\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGREG,LINEST,LOGEST"

#~ msgid ""
#~ "@FUNCTION=TREND\n"
#~ "@SYNTAX=TREND(known_y's[,known_x's[,new_x's[,const]]])\n"
#~ "@DESCRIPTION=TREND function estimates future values of a given data set "
#~ "using the ``least squares'' line that best fit to your data. @known_y's "
#~ "is the y-values where y=mx+b and @known_x's contains the corresponding x-"
#~ "values.  @new_x's contains the x-values for which you want to estimate "
#~ "the y-values. If @const is FALSE, the line will be forced to go through "
#~ "the origin, i.e., b will be zero.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
#~ "* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
#~ "* If @const is omitted, it is assumed to be TRUE.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, TREND "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}.\n"
#~ "\n"
#~ "@SEEALSO=LINEST"
#~ msgstr ""
#~ "@FUNCTION=TREND\n"
#~ "@SYNTAX=TREND(known_y's[,known_x's[,new_x's[,const]]])\n"
#~ "@DESCRIPTION=TREND function estimates future values of a given data set "
#~ "using the ``least squares'' line that best fit to your data. @known_y's "
#~ "is the y-values where y=mx+b and @known_x's contains the corresponding x-"
#~ "values.  @new_x's contains the x-values for which you want to estimate "
#~ "the y-values. If @const is FALSE, the line will be forced to go through "
#~ "the origin, i.e., b will be zero.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
#~ "* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
#~ "* If @const is omitted, it is assumed to be TRUE.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, TREND "
#~ "returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}.\n"
#~ "\n"
#~ "@SEEALSO=LINEST"

#~ msgid ""
#~ "@FUNCTION=LOGEST\n"
#~ "@SYNTAX=LOGEST(known_y's[,known_x's,const,stat])\n"
#~ "@DESCRIPTION=LOGEST function applies the ``least squares'' method to fit "
#~ "an exponential curve of the form\n"
#~ "\n"
#~ "\ty = b * m{1}^x{1} * m{2}^x{2}... to your data.\n"
#~ "\n"
#~ "If @stat is TRUE, extra statistical information will be returned. Extra "
#~ "statistical information is written below the regression line coefficients "
#~ "in the result array.  Extra statistical information consists of four rows "
#~ "of data.  In the first row the standard error values for the coefficients "
#~ "m1, (m2, ...), b are represented.  The second row contains the square of "
#~ "R and the standard error for the y estimate.  The third row contains the "
#~ "F-observed value and the degrees of freedom.  The last row contains the "
#~ "regression sum of squares and the residual sum of squares.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGEST "
#~ "returns an array { m{n},m{n-1}, ...,m{1},b }.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, LOGEST "
#~ "returns #NUM! error.\n"
#~ "* If @const is FALSE, the line will be forced to go through (0,1),i.e., b "
#~ "will be one.  The default is TRUE.\n"
#~ "* The default of @stat is FALSE.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=GROWTH,TREND"
#~ msgstr ""
#~ "@FUNCTION=LOGEST\n"
#~ "@SYNTAX=LOGEST(known_y's[,known_x's,const,stat])\n"
#~ "@DESCRIPTION=LOGEST function applies the ``least squares'' method to fit "
#~ "an exponential curve of the form\n"
#~ "\n"
#~ "\ty = b * m{1}^x{1} * m{2}^x{2}... to your data.\n"
#~ "\n"
#~ "If @stat is TRUE, extra statistical information will be returned. Extra "
#~ "statistical information is written below the regression line coefficients "
#~ "in the result array.  Extra statistical information consists of four rows "
#~ "of data.  In the first row the standard error values for the coefficients "
#~ "m1, (m2, ...), b are represented.  The second row contains the square of "
#~ "R and the standard error for the y estimate.  The third row contains the "
#~ "F-observed value and the degrees of freedom.  The last row contains the "
#~ "regression sum of squares and the residual sum of squares.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGEST "
#~ "returns an array { m{n},m{n-1}, ...,m{1},b }.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, LOGEST "
#~ "returns #NUM! error.\n"
#~ "* If @const is FALSE, the line will be forced to go through (0,1),i.e., b "
#~ "will be one.  The default is TRUE.\n"
#~ "* The default of @stat is FALSE.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=GROWTH,TREND"

#~ msgid ""
#~ "@FUNCTION=GROWTH\n"
#~ "@SYNTAX=GROWTH(known_y's[,known_x's,new_x's,const])\n"
#~ "@DESCRIPTION=GROWTH function applies the ``least squares'' method to fit "
#~ "an exponential curve to your data and predicts the exponential growth by "
#~ "using this curve. \n"
#~ "GROWTH returns an array having one column and a row for each data point "
#~ "in @new_x.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
#~ "* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, GROWTH "
#~ "returns #NUM! error.\n"
#~ "* If @const is FALSE, the line will be forced to go through the origin, i."
#~ "e., b will be zero. The default is TRUE.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGEST,GROWTH,TREND"
#~ msgstr ""
#~ "@FUNCTION=GROWTH\n"
#~ "@SYNTAX=GROWTH(known_y's[,known_x's,new_x's,const])\n"
#~ "@DESCRIPTION=GROWTH function applies the ``least squares'' method to fit "
#~ "an exponential curve to your data and predicts the exponential growth by "
#~ "using this curve. \n"
#~ "GROWTH returns an array having one column and a row for each data point "
#~ "in @new_x.\n"
#~ "\n"
#~ "* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
#~ "* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
#~ "* If @known_y's and @known_x's have unequal number of data points, GROWTH "
#~ "returns #NUM! error.\n"
#~ "* If @const is FALSE, the line will be forced to go through the origin, i."
#~ "e., b will be zero. The default is TRUE.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=LOGEST,GROWTH,TREND"

#~ msgid ""
#~ "@FUNCTION=FORECAST\n"
#~ "@SYNTAX=FORECAST(x,known_y's,known_x's)\n"
#~ "@DESCRIPTION=FORECAST function estimates a future value according to "
#~ "existing values using simple linear regression.  The estimated future "
#~ "value is a y-value for a given x-value (@x).\n"
#~ "\n"
#~ "* If @known_x or @known_y contains no data entries or different number of "
#~ "data entries, FORECAST returns #N/A error.\n"
#~ "* If the variance of the @known_x is zero, FORECAST returns #DIV/0 "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "FORECAST(7,A1:A5,B1:B5) equals -10.859397661.\n"
#~ "\n"
#~ "@SEEALSO=INTERCEPT,TREND"
#~ msgstr ""
#~ "@FUNCTION=FORECAST\n"
#~ "@SYNTAX=FORECAST(x,known_y's,known_x's)\n"
#~ "@DESCRIPTION=FORECAST function estimates a future value according to "
#~ "existing values using simple linear regression.  The estimated future "
#~ "value is a y-value for a given x-value (@x).\n"
#~ "\n"
#~ "* If @known_x or @known_y contains no data entries or different number of "
#~ "data entries, FORECAST returns #N/A error.\n"
#~ "* If the variance of the @known_x is zero, FORECAST returns #DIV/0 "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "FORECAST(7,A1:A5,B1:B5) equals -10.859397661.\n"
#~ "\n"
#~ "@SEEALSO=INTERCEPT,TREND"

#~ msgid ""
#~ "@FUNCTION=INTERCEPT\n"
#~ "@SYNTAX=INTERCEPT(known_y's,known_x's)\n"
#~ "@DESCRIPTION=INTERCEPT function calculates the point where the linear "
#~ "regression line intersects the y-axis.\n"
#~ "\n"
#~ "* If @known_x or @known_y contains no data entries or different number of "
#~ "data entries, INTERCEPT returns #N/A error.\n"
#~ "* If the variance of the @known_x is zero, INTERCEPT returns #DIV/0 "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "INTERCEPT(A1:A5,B1:B5) equals -20.785117212.\n"
#~ "\n"
#~ "@SEEALSO=FORECAST,TREND"
#~ msgstr ""
#~ "@FUNCTION=INTERCEPT\n"
#~ "@SYNTAX=INTERCEPT(known_y's,known_x's)\n"
#~ "@DESCRIPTION=INTERCEPT function calculates the point where the linear "
#~ "regression line intersects the y-axis.\n"
#~ "\n"
#~ "* If @known_x or @known_y contains no data entries or different number of "
#~ "data entries, INTERCEPT returns #N/A error.\n"
#~ "* If the variance of the @known_x is zero, INTERCEPT returns #DIV/0 "
#~ "error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "INTERCEPT(A1:A5,B1:B5) equals -20.785117212.\n"
#~ "\n"
#~ "@SEEALSO=FORECAST,TREND"

#~ msgid ""
#~ "@FUNCTION=SLOPE\n"
#~ "@SYNTAX=SLOPE(known_y's,known_x's)\n"
#~ "@DESCRIPTION=SLOPE returns the slope of the linear regression line.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "SLOPE(A1:A5,B1:B5) equals 1.417959936.\n"
#~ "\n"
#~ "@SEEALSO=STDEV,STDEVPA"
#~ msgstr ""
#~ "@FUNCTION=SLOPE\n"
#~ "@SYNTAX=SLOPE(known_y's,known_x's)\n"
#~ "@DESCRIPTION=SLOPE returns the slope of the linear regression line.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
#~ "21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, "
#~ "33.5, and 42.7.  Then\n"
#~ "SLOPE(A1:A5,B1:B5) equals 1.417959936.\n"
#~ "\n"
#~ "@SEEALSO=STDEV,STDEVPA"

#~ msgid ""
#~ "@FUNCTION=SUBTOTAL\n"
#~ "@SYNTAX=SUBTOTAL(function_nbr,ref1,ref2,...)\n"
#~ "@DESCRIPTION=SUBTOTAL function returns a subtotal of given list of "
#~ "arguments. @function_nbr is the number that specifies which function to "
#~ "use in calculating the subtotal.\n"
#~ "\n"
#~ "The following functions are available:\n"
#~ "\n"
#~ "\t1   AVERAGE\n"
#~ "\t2   COUNT\n"
#~ "\t3   COUNTA\n"
#~ "\t4   MAX\n"
#~ "\t5   MIN\n"
#~ "\t6   PRODUCT\n"
#~ "\t7   STDEV\n"
#~ "\t8   STDEVP\n"
#~ "\t9   SUM\n"
#~ "\t10   VAR\n"
#~ "\t11   VARP\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, "
#~ "33, and 39.  Then\n"
#~ "SUBTOTAL(1,A1:A5) equals 30.\n"
#~ "SUBTOTAL(6,A1:A5) equals 22378356.\n"
#~ "SUBTOTAL(7,A1:A5) equals 6.164414003.\n"
#~ "SUBTOTAL(9,A1:A5) equals 150.\n"
#~ "SUBTOTAL(11,A1:A5) equals 30.4.\n"
#~ "\n"
#~ "@SEEALSO=COUNT,SUM"
#~ msgstr ""
#~ "@FUNCTION=SUBTOTAL\n"
#~ "@SYNTAX=SUBTOTAL(function_nbr,ref1,ref2,...)\n"
#~ "@DESCRIPTION=SUBTOTAL function returns a subtotal of given list of "
#~ "arguments. @function_nbr is the number that specifies which function to "
#~ "use in calculating the subtotal.\n"
#~ "\n"
#~ "The following functions are available:\n"
#~ "\n"
#~ "\t1   AVERAGE\n"
#~ "\t2   COUNT\n"
#~ "\t3   COUNTA\n"
#~ "\t4   MAX\n"
#~ "\t5   MIN\n"
#~ "\t6   PRODUCT\n"
#~ "\t7   STDEV\n"
#~ "\t8   STDEVP\n"
#~ "\t9   SUM\n"
#~ "\t10   VAR\n"
#~ "\t11   VARP\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, "
#~ "33, and 39.  Then\n"
#~ "SUBTOTAL(1,A1:A5) equals 30.\n"
#~ "SUBTOTAL(6,A1:A5) equals 22378356.\n"
#~ "SUBTOTAL(7,A1:A5) equals 6.164414003.\n"
#~ "SUBTOTAL(9,A1:A5) equals 150.\n"
#~ "SUBTOTAL(11,A1:A5) equals 30.4.\n"
#~ "\n"
#~ "@SEEALSO=COUNT,SUM"

#~ msgid ""
#~ "@FUNCTION=CRONBACH\n"
#~ "@SYNTAX=CRONBACH(ref1,ref2,...)\n"
#~ "@DESCRIPTION=CRONBACH returns Cronbach's alpha for the given cases.\n"
#~ "@ref1 is a data set, @ref2 the second data set, etc..\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=CRONBACH\n"
#~ "@SYNTAX=CRONBACH(ref1,ref2,...)\n"
#~ "@DESCRIPTION=CRONBACH returns Cronbach's alpha for the given cases.\n"
#~ "@ref1 is a data set, @ref2 the second data set, etc..\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=GEOMDIST\n"
#~ "@SYNTAX=GEOMDIST(k,p,cum)\n"
#~ "@DESCRIPTION=GEOMDIST returns the probability p(k) of obtaining @k from a "
#~ "geometric distribution with probability parameter @p.\n"
#~ "\n"
#~ "* If @k < 0 GEOMDIST returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 GEOMDIST returns #NUM! error.\n"
#~ "* If @cum != TRUE and @cum != FALSE GEOMDIST returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GEOMDIST(2,10.4,TRUE).\n"
#~ "\n"
#~ "@SEEALSO=RANDGEOM"
#~ msgstr ""
#~ "@FUNCTION=GEOMDIST\n"
#~ "@SYNTAX=GEOMDIST(k,p,cum)\n"
#~ "@DESCRIPTION=GEOMDIST returns the probability p(k) of obtaining @k from a "
#~ "geometric distribution with probability parameter @p.\n"
#~ "\n"
#~ "* If @k < 0 GEOMDIST returns #NUM! error.\n"
#~ "* If @p < 0 or @p > 1 GEOMDIST returns #NUM! error.\n"
#~ "* If @cum != TRUE and @cum != FALSE GEOMDIST returns #NUM! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "GEOMDIST(2,10.4,TRUE).\n"
#~ "\n"
#~ "@SEEALSO=RANDGEOM"

#~ msgid ""
#~ "@FUNCTION=LOGISTIC\n"
#~ "@SYNTAX=LOGISTIC(x,a)\n"
#~ "@DESCRIPTION=LOGISTIC returns the probability density p(x) at @x for a "
#~ "logistic distribution with scale parameter @a.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOGISTIC(0.4,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDLOGISTIC"
#~ msgstr ""
#~ "@FUNCTION=LOGISTIC\n"
#~ "@SYNTAX=LOGISTIC(x,a)\n"
#~ "@DESCRIPTION=LOGISTIC returns the probability density p(x) at @x for a "
#~ "logistic distribution with scale parameter @a.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOGISTIC(0.4,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDLOGISTIC"

#~ msgid ""
#~ "@FUNCTION=PARETO\n"
#~ "@SYNTAX=PARETO(x,a,b)\n"
#~ "@DESCRIPTION=PARETO returns the probability density p(x) at @x for a "
#~ "Pareto distribution with exponent @a and scale @b.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PARETO(0.6,1,2).\n"
#~ "\n"
#~ "@SEEALSO=RANDPARETO"
#~ msgstr ""
#~ "@FUNCTION=PARETO\n"
#~ "@SYNTAX=PARETO(x,a,b)\n"
#~ "@DESCRIPTION=PARETO returns the probability density p(x) at @x for a "
#~ "Pareto distribution with exponent @a and scale @b.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PARETO(0.6,1,2).\n"
#~ "\n"
#~ "@SEEALSO=RANDPARETO"

#~ msgid ""
#~ "@FUNCTION=RAYLEIGH\n"
#~ "@SYNTAX=RAYLEIGH(x,sigma)\n"
#~ "@DESCRIPTION=RAYLEIGH returns the probability density p(x) at @x for a "
#~ "Rayleigh distribution with scale parameter @sigma.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RAYLEIGH(0.4,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDRAYLEIGH"
#~ msgstr ""
#~ "@FUNCTION=RAYLEIGH\n"
#~ "@SYNTAX=RAYLEIGH(x,sigma)\n"
#~ "@DESCRIPTION=RAYLEIGH returns the probability density p(x) at @x for a "
#~ "Rayleigh distribution with scale parameter @sigma.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RAYLEIGH(0.4,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDRAYLEIGH"

#~ msgid ""
#~ "@FUNCTION=RAYLEIGHTAIL\n"
#~ "@SYNTAX=RAYLEIGHTAIL(x,a,sigma)\n"
#~ "@DESCRIPTION=RAYLEIGHTAIL returns the probability density p(x) at @x for "
#~ "a Rayleigh tail distribution with scale parameter @sigma and lower limit "
#~ "@a.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RAYLEIGHTAIL(0.6,0.3,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDRAYLEIGHTAIL"
#~ msgstr ""
#~ "@FUNCTION=RAYLEIGHTAIL\n"
#~ "@SYNTAX=RAYLEIGHTAIL(x,a,sigma)\n"
#~ "@DESCRIPTION=RAYLEIGHTAIL returns the probability density p(x) at @x for "
#~ "a Rayleigh tail distribution with scale parameter @sigma and lower limit "
#~ "@a.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RAYLEIGHTAIL(0.6,0.3,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDRAYLEIGHTAIL"

#~ msgid ""
#~ "@FUNCTION=LAPLACE\n"
#~ "@SYNTAX=LAPLACE(x,a)\n"
#~ "@DESCRIPTION=LAPLACE returns the probability density p(x) at @x for "
#~ "Laplace distribution with mean @a. \n"
#~ "@EXAMPLES=\n"
#~ "LAPLACE(0.4,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDLAPLACE"
#~ msgstr ""
#~ "@FUNCTION=LAPLACE\n"
#~ "@SYNTAX=LAPLACE(x,a)\n"
#~ "@DESCRIPTION=LAPLACE returns the probability density p(x) at @x for "
#~ "Laplace distribution with mean @a. \n"
#~ "@EXAMPLES=\n"
#~ "LAPLACE(0.4,1).\n"
#~ "\n"
#~ "@SEEALSO=RANDLAPLACE"

#~ msgid ""
#~ "@FUNCTION=CHAR\n"
#~ "@SYNTAX=CHAR(x)\n"
#~ "@DESCRIPTION=CHAR returns the ASCII character represented by the number "
#~ "@x.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHAR(65) equals A.\n"
#~ "\n"
#~ "@SEEALSO=CODE"
#~ msgstr ""
#~ "@FUNCTION=CHAR\n"
#~ "@SYNTAX=CHAR(x)\n"
#~ "@DESCRIPTION=CHAR returns the ASCII character represented by the number "
#~ "@x.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHAR(65) equals A.\n"
#~ "\n"
#~ "@SEEALSO=CODE"

#~ msgid ""
#~ "@FUNCTION=UNICHAR\n"
#~ "@SYNTAX=UNICHAR(x)\n"
#~ "@DESCRIPTION=UNICHAR returns the Unicode character represented by the "
#~ "number @x.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "UNICHAR(65) equals A.\n"
#~ "UNICHAR(960) equals a small Greek pi.\n"
#~ "\n"
#~ "@SEEALSO=CHAR,UNICODE,CODE"
#~ msgstr ""
#~ "@FUNCTION=UNICHAR\n"
#~ "@SYNTAX=UNICHAR(x)\n"
#~ "@DESCRIPTION=UNICHAR returns the Unicode character represented by the "
#~ "number @x.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "UNICHAR(65) equals A.\n"
#~ "UNICHAR(960) equals a small Greek pi.\n"
#~ "\n"
#~ "@SEEALSO=CHAR,UNICODE,CODE"

#~ msgid ""
#~ "@FUNCTION=CODE\n"
#~ "@SYNTAX=CODE(char)\n"
#~ "@DESCRIPTION=CODE returns the ASCII number for the character @char.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CODE(\"A\") equals 65.\n"
#~ "\n"
#~ "@SEEALSO=CHAR"
#~ msgstr ""
#~ "@FUNCTION=CODE\n"
#~ "@SYNTAX=CODE(char)\n"
#~ "@DESCRIPTION=CODE returns the ASCII number for the character @char.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CODE(\"A\") equals 65.\n"
#~ "\n"
#~ "@SEEALSO=CHAR"

#~ msgid ""
#~ "@FUNCTION=UNICODE\n"
#~ "@SYNTAX=UNICODE(char)\n"
#~ "@DESCRIPTION=UNICODE returns the Unicode number for the character @char.\n"
#~ "\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "UNICODE(\"A\") equals 65.\n"
#~ "\n"
#~ "@SEEALSO=UNICHAR,CODE,CHAR"
#~ msgstr ""
#~ "@FUNCTION=UNICODE\n"
#~ "@SYNTAX=UNICODE(char)\n"
#~ "@DESCRIPTION=UNICODE returns the Unicode number for the character @char.\n"
#~ "\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "UNICODE(\"A\") equals 65.\n"
#~ "\n"
#~ "@SEEALSO=UNICHAR,CODE,CHAR"

#~ msgid ""
#~ "@FUNCTION=EXACT\n"
#~ "@SYNTAX=EXACT(string1, string2)\n"
#~ "@DESCRIPTION=EXACT returns true if @string1 is exactly equal to @string2 "
#~ "(this routine is case sensitive).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXACT(\"key\",\"key\") equals TRUE.\n"
#~ "EXACT(\"key\",\"Key\") equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=LEN, SEARCH, DELTA"
#~ msgstr ""
#~ "@FUNCTION=EXACT\n"
#~ "@SYNTAX=EXACT(string1, string2)\n"
#~ "@DESCRIPTION=EXACT returns true if @string1 is exactly equal to @string2 "
#~ "(this routine is case sensitive).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "EXACT(\"key\",\"key\") equals TRUE.\n"
#~ "EXACT(\"key\",\"Key\") equals FALSE.\n"
#~ "\n"
#~ "@SEEALSO=LEN, SEARCH, DELTA"

#~ msgid ""
#~ "@FUNCTION=LEN\n"
#~ "@SYNTAX=LEN(string)\n"
#~ "@DESCRIPTION=LEN returns the length in characters of the string @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LEN(\"Helsinki\") equals 8.\n"
#~ "\n"
#~ "@SEEALSO=CHAR, CODE, LENB"
#~ msgstr ""
#~ "@FUNCTION=LEN\n"
#~ "@SYNTAX=LEN(string)\n"
#~ "@DESCRIPTION=LEN returns the length in characters of the string @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LEN(\"Helsinki\") equals 8.\n"
#~ "\n"
#~ "@SEEALSO=CHAR, CODE, LENB"

#~ msgid ""
#~ "@FUNCTION=LENB\n"
#~ "@SYNTAX=LENB(string)\n"
#~ "@DESCRIPTION=LENB returns the length in bytes of the string @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LENB(\"Helsinki\") equals 8.\n"
#~ "\n"
#~ "@SEEALSO=CHAR, CODE, LEN"
#~ msgstr ""
#~ "@FUNCTION=LENB\n"
#~ "@SYNTAX=LENB(string)\n"
#~ "@DESCRIPTION=LENB returns the length in bytes of the string @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LENB(\"Helsinki\") equals 8.\n"
#~ "\n"
#~ "@SEEALSO=CHAR, CODE, LEN"

#~ msgid ""
#~ "@FUNCTION=LEFT\n"
#~ "@SYNTAX=LEFT(text[,num_chars])\n"
#~ "@DESCRIPTION=LEFT returns the leftmost @num_chars characters or the left "
#~ "character if @num_chars is not specified.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LEFT(\"Directory\",3) equals \"Dir\".\n"
#~ "\n"
#~ "@SEEALSO=MID, RIGHT"
#~ msgstr ""
#~ "@FUNCTION=LEFT\n"
#~ "@SYNTAX=LEFT(text[,num_chars])\n"
#~ "@DESCRIPTION=LEFT returns the leftmost @num_chars characters or the left "
#~ "character if @num_chars is not specified.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LEFT(\"Directory\",3) equals \"Dir\".\n"
#~ "\n"
#~ "@SEEALSO=MID, RIGHT"

#~ msgid ""
#~ "@FUNCTION=LOWER\n"
#~ "@SYNTAX=LOWER(text)\n"
#~ "@DESCRIPTION=LOWER returns a lower-case version of the string in @text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOWER(\"J. F. Kennedy\") equals \"j. f. kennedy\".\n"
#~ "\n"
#~ "@SEEALSO=UPPER"
#~ msgstr ""
#~ "@FUNCTION=LOWER\n"
#~ "@SYNTAX=LOWER(text)\n"
#~ "@DESCRIPTION=LOWER returns a lower-case version of the string in @text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "LOWER(\"J. F. Kennedy\") equals \"j. f. kennedy\".\n"
#~ "\n"
#~ "@SEEALSO=UPPER"

#~ msgid ""
#~ "@FUNCTION=MID\n"
#~ "@SYNTAX=MID(string, position, length)\n"
#~ "@DESCRIPTION=MID returns a substring from @string starting at @position "
#~ "for @length characters.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MID(\"testing\",2,3) equals \"est\".\n"
#~ "\n"
#~ "@SEEALSO=LEFT, RIGHT"
#~ msgstr ""
#~ "@FUNCTION=MID\n"
#~ "@SYNTAX=MID(string, position, length)\n"
#~ "@DESCRIPTION=MID returns a substring from @string starting at @position "
#~ "for @length characters.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "MID(\"testing\",2,3) equals \"est\".\n"
#~ "\n"
#~ "@SEEALSO=LEFT, RIGHT"

#~ msgid ""
#~ "@FUNCTION=RIGHT\n"
#~ "@SYNTAX=RIGHT(text[,num_chars])\n"
#~ "@DESCRIPTION=RIGHT returns the rightmost @num_chars characters or the "
#~ "right character if @num_chars is not specified.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RIGHT(\"end\") equals \"d\".\n"
#~ "RIGHT(\"end\",2) equals \"nd\".\n"
#~ "\n"
#~ "@SEEALSO=MID, LEFT"
#~ msgstr ""
#~ "@FUNCTION=RIGHT\n"
#~ "@SYNTAX=RIGHT(text[,num_chars])\n"
#~ "@DESCRIPTION=RIGHT returns the rightmost @num_chars characters or the "
#~ "right character if @num_chars is not specified.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "RIGHT(\"end\") equals \"d\".\n"
#~ "RIGHT(\"end\",2) equals \"nd\".\n"
#~ "\n"
#~ "@SEEALSO=MID, LEFT"

#~ msgid ""
#~ "@FUNCTION=UPPER\n"
#~ "@SYNTAX=UPPER(text)\n"
#~ "@DESCRIPTION=UPPER returns a upper-case version of the string in @text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "UPPER(\"cancelled\") equals \"CANCELLED\".\n"
#~ "\n"
#~ "@SEEALSO=LOWER"
#~ msgstr ""
#~ "@FUNCTION=UPPER\n"
#~ "@SYNTAX=UPPER(text)\n"
#~ "@DESCRIPTION=UPPER returns a upper-case version of the string in @text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "UPPER(\"cancelled\") equals \"CANCELLED\".\n"
#~ "\n"
#~ "@SEEALSO=LOWER"

#~ msgid ""
#~ "@FUNCTION=CONCATENATE\n"
#~ "@SYNTAX=CONCATENATE(string1[,string2...])\n"
#~ "@DESCRIPTION=CONCATENATE returns the string obtained by concatenation of "
#~ "the given strings.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CONCATENATE(\"aa\",\"bb\") equals \"aabb\".\n"
#~ "\n"
#~ "@SEEALSO=LEFT, MID, RIGHT"
#~ msgstr ""
#~ "@FUNCTION=CONCATENATE\n"
#~ "@SYNTAX=CONCATENATE(string1[,string2...])\n"
#~ "@DESCRIPTION=CONCATENATE returns the string obtained by concatenation of "
#~ "the given strings.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CONCATENATE(\"aa\",\"bb\") equals \"aabb\".\n"
#~ "\n"
#~ "@SEEALSO=LEFT, MID, RIGHT"

#~ msgid ""
#~ "@FUNCTION=REPT\n"
#~ "@SYNTAX=REPT(string,num)\n"
#~ "@DESCRIPTION=REPT returns @num repetitions of @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "REPT(\".\",3) equals \"...\".\n"
#~ "\n"
#~ "@SEEALSO=CONCATENATE"
#~ msgstr ""
#~ "@FUNCTION=REPT\n"
#~ "@SYNTAX=REPT(string,num)\n"
#~ "@DESCRIPTION=REPT returns @num repetitions of @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ " \n"
#~ "@EXAMPLES=\n"
#~ "REPT(\".\",3) equals \"...\".\n"
#~ "\n"
#~ "@SEEALSO=CONCATENATE"

#~ msgid ""
#~ "@FUNCTION=CLEAN\n"
#~ "@SYNTAX=CLEAN(string)\n"
#~ "@DESCRIPTION=CLEAN removes any non-printable characters from @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CLEAN(\"one\"\\&char(7)) equals \"one\".\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=CLEAN\n"
#~ "@SYNTAX=CLEAN(string)\n"
#~ "@DESCRIPTION=CLEAN removes any non-printable characters from @string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CLEAN(\"one\"\\&char(7)) equals \"one\".\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=FIND\n"
#~ "@SYNTAX=FIND(string1,string2[,start])\n"
#~ "@DESCRIPTION=FIND returns position of @string1 in @string2 (case-"
#~ "sensitive), searching only from character @start onwards (assuming 1 if "
#~ "omitted).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FIND(\"ac\",\"Jack\") equals 2.\n"
#~ "\n"
#~ "@SEEALSO=EXACT, LEN, MID, SEARCH"
#~ msgstr ""
#~ "@FUNCTION=FIND\n"
#~ "@SYNTAX=FIND(string1,string2[,start])\n"
#~ "@DESCRIPTION=FIND returns position of @string1 in @string2 (case-"
#~ "sensitive), searching only from character @start onwards (assuming 1 if "
#~ "omitted).\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FIND(\"ac\",\"Jack\") equals 2.\n"
#~ "\n"
#~ "@SEEALSO=EXACT, LEN, MID, SEARCH"

#~ msgid ""
#~ "@FUNCTION=FIXED\n"
#~ "@SYNTAX=FIXED(num,[decimals, no_commas])\n"
#~ "@DESCRIPTION=FIXED returns @num as a formatted string with @decimals "
#~ "numbers after the decimal point, omitting commas if requested by "
#~ "@no_commas.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FIXED(1234.567,2) equals \"1,234.57\".\n"
#~ "\n"
#~ "@SEEALSO=TEXT, VALUE, DOLLAR"
#~ msgstr ""
#~ "@FUNCTION=FIXED\n"
#~ "@SYNTAX=FIXED(num,[decimals, no_commas])\n"
#~ "@DESCRIPTION=FIXED returns @num as a formatted string with @decimals "
#~ "numbers after the decimal point, omitting commas if requested by "
#~ "@no_commas.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FIXED(1234.567,2) equals \"1,234.57\".\n"
#~ "\n"
#~ "@SEEALSO=TEXT, VALUE, DOLLAR"

#~ msgid ""
#~ "@FUNCTION=PROPER\n"
#~ "@SYNTAX=PROPER(string)\n"
#~ "@DESCRIPTION=PROPER returns @string with initial of each word "
#~ "capitalised.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PROPER(\"j. f. kennedy\") equals \"J. F. Kennedy\".\n"
#~ "\n"
#~ "@SEEALSO=LOWER, UPPER"
#~ msgstr ""
#~ "@FUNCTION=PROPER\n"
#~ "@SYNTAX=PROPER(string)\n"
#~ "@DESCRIPTION=PROPER returns @string with initial of each word "
#~ "capitalised.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "PROPER(\"j. f. kennedy\") equals \"J. F. Kennedy\".\n"
#~ "\n"
#~ "@SEEALSO=LOWER, UPPER"

#~ msgid ""
#~ "@FUNCTION=REPLACE\n"
#~ "@SYNTAX=REPLACE(old,start,num,new)\n"
#~ "@DESCRIPTION=REPLACE returns @old with @new replacing @num characters "
#~ "from @start.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "REPLACE(\"testing\",2,3,\"*****\") equals \"t*****ing\".\n"
#~ "\n"
#~ "@SEEALSO=MID, SEARCH, SUBSTITUTE, TRIM"
#~ msgstr ""
#~ "@FUNCTION=REPLACE\n"
#~ "@SYNTAX=REPLACE(old,start,num,new)\n"
#~ "@DESCRIPTION=REPLACE returns @old with @new replacing @num characters "
#~ "from @start.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "REPLACE(\"testing\",2,3,\"*****\") equals \"t*****ing\".\n"
#~ "\n"
#~ "@SEEALSO=MID, SEARCH, SUBSTITUTE, TRIM"

#~ msgid ""
#~ "@FUNCTION=T\n"
#~ "@SYNTAX=T(value)\n"
#~ "@DESCRIPTION=T returns @value if and only if it is text, otherwise a "
#~ "blank string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "T(\"text\") equals \"text\".\n"
#~ "T(64) returns an empty cell.\n"
#~ "\n"
#~ "@SEEALSO=CELL, N, VALUE"
#~ msgstr ""
#~ "@FUNCTION=T\n"
#~ "@SYNTAX=T(value)\n"
#~ "@DESCRIPTION=T returns @value if and only if it is text, otherwise a "
#~ "blank string.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "T(\"text\") equals \"text\".\n"
#~ "T(64) returns an empty cell.\n"
#~ "\n"
#~ "@SEEALSO=CELL, N, VALUE"

#~ msgid ""
#~ "@FUNCTION=TEXT\n"
#~ "@SYNTAX=TEXT(value,format_text)\n"
#~ "@DESCRIPTION=TEXT returns @value as a string with the specified format.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TEXT(3.223,\"$0.00\") equals \"$3.22\".\n"
#~ "TEXT(date(1999,4,15),\"mmmm, dd, yy\") equals \"April, 15, 99\".\n"
#~ "\n"
#~ "@SEEALSO=DOLLAR, FIXED, VALUE"
#~ msgstr ""
#~ "@FUNCTION=TEXT\n"
#~ "@SYNTAX=TEXT(value,format_text)\n"
#~ "@DESCRIPTION=TEXT returns @value as a string with the specified format.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TEXT(3.223,\"£0.00\") equals \"£3.22\".\n"
#~ "TEXT(date(1999,4,15),\"mmmm, dd, yy\") equals \"April, 15, 99\".\n"
#~ "\n"
#~ "@SEEALSO=DOLLAR, FIXED, VALUE"

#~ msgid ""
#~ "@FUNCTION=TRIM\n"
#~ "@SYNTAX=TRIM(text)\n"
#~ "@DESCRIPTION=TRIM returns @text with only single spaces between words.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TRIM(\"  a bbb  cc\") equals \"a bbb cc\".\n"
#~ "\n"
#~ "@SEEALSO=CLEAN, MID, REPLACE, SUBSTITUTE"
#~ msgstr ""
#~ "@FUNCTION=TRIM\n"
#~ "@SYNTAX=TRIM(text)\n"
#~ "@DESCRIPTION=TRIM returns @text with only single spaces between words.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "TRIM(\"  a bbb  cc\") equals \"a bbb cc\".\n"
#~ "\n"
#~ "@SEEALSO=CLEAN, MID, REPLACE, SUBSTITUTE"

#~ msgid ""
#~ "@FUNCTION=VALUE\n"
#~ "@SYNTAX=VALUE(text)\n"
#~ "@DESCRIPTION=VALUE returns numeric value of @text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "VALUE(\"$1,000\") equals 1000.\n"
#~ "\n"
#~ "@SEEALSO=DOLLAR, FIXED, TEXT"
#~ msgstr ""
#~ "@FUNCTION=VALUE\n"
#~ "@SYNTAX=VALUE(text)\n"
#~ "@DESCRIPTION=VALUE returns numeric value of @text.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "VALUE(\"£1,000\") equals 1000.\n"
#~ "\n"
#~ "@SEEALSO=DOLLAR, FIXED, TEXT"

#~ msgid ""
#~ "@FUNCTION=SUBSTITUTE\n"
#~ "@SYNTAX=SUBSTITUTE(text, old, new [,num])\n"
#~ "@DESCRIPTION=SUBSTITUTE replaces @old with @new in @text.  Substitutions "
#~ "are only applied to instance @num of @old in @text, otherwise every one "
#~ "is changed.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SUBSTITUTE(\"testing\",\"test\",\"wait\") equals \"waiting\".\n"
#~ "\n"
#~ "@SEEALSO=REPLACE, TRIM"
#~ msgstr ""
#~ "@FUNCTION=SUBSTITUTE\n"
#~ "@SYNTAX=SUBSTITUTE(text, old, new [,num])\n"
#~ "@DESCRIPTION=SUBSTITUTE replaces @old with @new in @text.  Substitutions "
#~ "are only applied to instance @num of @old in @text, otherwise every one "
#~ "is changed.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SUBSTITUTE(\"testing\",\"test\",\"wait\") equals \"waiting\".\n"
#~ "\n"
#~ "@SEEALSO=REPLACE, TRIM"

#~ msgid ""
#~ "@FUNCTION=DOLLAR\n"
#~ "@SYNTAX=DOLLAR(num[,decimals])\n"
#~ "@DESCRIPTION=DOLLAR returns @num formatted as currency.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DOLLAR(12345) equals \"$12,345.00\".\n"
#~ "\n"
#~ "@SEEALSO=FIXED, TEXT, VALUE"
#~ msgstr ""
#~ "@FUNCTION=DOLLAR\n"
#~ "@SYNTAX=DOLLAR(num[,decimals])\n"
#~ "@DESCRIPTION=DOLLAR returns @num formatted as currency.\n"
#~ "\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "DOLLAR(12345) equals \"£12,345.00\".\n"
#~ "\n"
#~ "@SEEALSO=FIXED, TEXT, VALUE"

#~ msgid ""
#~ "@FUNCTION=SEARCH\n"
#~ "@SYNTAX=SEARCH(search_string,text[,start_num])\n"
#~ "@DESCRIPTION=SEARCH returns the location of the @search_ string within "
#~ "@text. The search starts  with the @start_num character of text @text.  "
#~ "If @start_num is omitted, it is assumed to be one.  The search is not "
#~ "case sensitive.\n"
#~ "\n"
#~ "@search_string can contain wildcard characters (*) and question marks "
#~ "(?). A question mark matches any character and a wildcard matches any "
#~ "string including the empty string.  If you want the actual wildcard or "
#~ "question mark to be found, use tilde (~) before the character.\n"
#~ "\n"
#~ "* If @search_string is not found, SEARCH returns #VALUE! error.\n"
#~ "* If @start_num is less than one or it is greater than the length of "
#~ "@text, SEARCH returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SEARCH(\"c\",\"Cancel\") equals 1.\n"
#~ "SEARCH(\"c\",\"Cancel\",2) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=FIND"
#~ msgstr ""
#~ "@FUNCTION=SEARCH\n"
#~ "@SYNTAX=SEARCH(search_string,text[,start_num])\n"
#~ "@DESCRIPTION=SEARCH returns the location of the @search_ string within "
#~ "@text. The search starts  with the @start_num character of text @text.  "
#~ "If @start_num is omitted, it is assumed to be one.  The search is not "
#~ "case sensitive.\n"
#~ "\n"
#~ "@search_string can contain wildcard characters (*) and question marks "
#~ "(?). A question mark matches any character and a wildcard matches any "
#~ "string including the empty string.  If you want the actual wildcard or "
#~ "question mark to be found, use tilde (~) before the character.\n"
#~ "\n"
#~ "* If @search_string is not found, SEARCH returns #VALUE! error.\n"
#~ "* If @start_num is less than one or it is greater than the length of "
#~ "@text, SEARCH returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SEARCH(\"c\",\"Cancel\") equals 1.\n"
#~ "SEARCH(\"c\",\"Cancel\",2) equals 4.\n"
#~ "\n"
#~ "@SEEALSO=FIND"

#~ msgid ""
#~ "@FUNCTION=ASC\n"
#~ "@SYNTAX=ASC(string)\n"
#~ "@DESCRIPTION=ASC a compatibility function that is meaningless in "
#~ "Gnumeric.  In MS Excel (tm) it converts 2 byte @string into single byte "
#~ "text.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHAR(\"Foo\") equals \"Foo\".\n"
#~ "\n"
#~ "@SEEALSO="
#~ msgstr ""
#~ "@FUNCTION=ASC\n"
#~ "@SYNTAX=ASC(string)\n"
#~ "@DESCRIPTION=ASC a compatibility function that is meaningless in "
#~ "Gnumeric.  In MS Excel (tm) it converts 2 byte @string into single byte "
#~ "text.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "CHAR(\"Foo\") equals \"Foo\".\n"
#~ "\n"
#~ "@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=EXECSQL\n"
#~ "@SYNTAX=EXECSQL(dsn,username,password,sql)\n"
#~ "@DESCRIPTION=The EXECSQL function lets you execute a command in a "
#~ "database server, and show the results returned in current sheet. It uses "
#~ "libgda as the means for accessing the databases.\n"
#~ "For using it, you need first to set up a libgda data source.\n"
#~ "@EXAMPLES=\n"
#~ "To get all the data from the table \"Customers\" present in the "
#~ "\"mydatasource\" GDA data source, you would use:\n"
#~ "EXECSQL(\"mydatasource\",\"username\",\"password\",\"SELECT * FROM "
#~ "customers\")\n"
#~ "@SEEALSO=READDBTABLE"
#~ msgstr ""
#~ "@FUNCTION=EXECSQL\n"
#~ "@SYNTAX=EXECSQL(dsn,username,password,sql)\n"
#~ "@DESCRIPTION=The EXECSQL function lets you execute a command in a "
#~ "database server, and show the results returned in current sheet. It uses "
#~ "libgda as the means for accessing the databases.\n"
#~ "For using it, you need first to set up a libgda data source.\n"
#~ "@EXAMPLES=\n"
#~ "To get all the data from the table \"Customers\" present in the "
#~ "\"mydatasource\" GDA data source, you would use:\n"
#~ "EXECSQL(\"mydatasource\",\"username\",\"password\",\"SELECT * FROM "
#~ "customers\")\n"
#~ "@SEEALSO=READDBTABLE"

#~ msgid ""
#~ "@FUNCTION=READDBTABLE\n"
#~ "@SYNTAX=READDBTABLE(dsn,username,password,table)\n"
#~ "@DESCRIPTION=The READDBTABLE function lets you get the contents of a "
#~ "table, as stored in a database. For using it, you need first to set up a "
#~ "libgda data source.\n"
#~ "Note that this function returns all the rows in the given table. If you "
#~ "want to get data from more than one table or want a more precise "
#~ "selection (conditions), use the EXECSQL function.\n"
#~ "@EXAMPLES=\n"
#~ "To get all the data from the table \"Customers\" present in the "
#~ "\"mydatasource\" GDA data source, you would use:\n"
#~ "READDBTABLE(\"mydatasource\",\"username\",\"password\",\"customers\")\n"
#~ "@SEEALSO=EXECSQL"
#~ msgstr ""
#~ "@FUNCTION=READDBTABLE\n"
#~ "@SYNTAX=READDBTABLE(dsn,username,password,table)\n"
#~ "@DESCRIPTION=The READDBTABLE function lets you get the contents of a "
#~ "table, as stored in a database. For using it, you need first to set up a "
#~ "libgda data source.\n"
#~ "Note that this function returns all the rows in the given table. If you "
#~ "want to get data from more than one table or want a more precise "
#~ "selection (conditions), use the EXECSQL function.\n"
#~ "@EXAMPLES=\n"
#~ "To get all the data from the table \"Customers\" present in the "
#~ "\"mydatasource\" GDA data source, you would use:\n"
#~ "READDBTABLE(\"mydatasource\",\"username\",\"password\",\"customers\")\n"
#~ "@SEEALSO=EXECSQL"

#~ msgid ""
#~ "@FUNCTION=NT_PHI\n"
#~ "@SYNTAX=NT_PHI(n)\n"
#~ "@DESCRIPTION=NT_PHI function calculates the number of integers less than "
#~ "or equal to @n that are relatively prime to @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=NT_D, ITHPRIME, NT_SIGMA"
#~ msgstr ""
#~ "@FUNCTION=NT_PHI\n"
#~ "@SYNTAX=NT_PHI(n)\n"
#~ "@DESCRIPTION=NT_PHI function calculates the number of integers less than "
#~ "or equal to @n that are relatively prime to @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=NT_D, ITHPRIME, NT_SIGMA"

#~ msgid ""
#~ "@FUNCTION=NT_D\n"
#~ "@SYNTAX=NT_D(n)\n"
#~ "@DESCRIPTION=NT_D function calculates the number of divisors of @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME, NT_PHI, NT_SIGMA"
#~ msgstr ""
#~ "@FUNCTION=NT_D\n"
#~ "@SYNTAX=NT_D(n)\n"
#~ "@DESCRIPTION=NT_D function calculates the number of divisors of @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME, NT_PHI, NT_SIGMA"

#~ msgid ""
#~ "@FUNCTION=NT_SIGMA\n"
#~ "@SYNTAX=NT_SIGMA(n)\n"
#~ "@DESCRIPTION=NT_SIGMA function calculates the sum of the divisors of @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=NT_D, ITHPRIME, NT_PHI"
#~ msgstr ""
#~ "@FUNCTION=NT_SIGMA\n"
#~ "@SYNTAX=NT_SIGMA(n)\n"
#~ "@DESCRIPTION=NT_SIGMA function calculates the sum of the divisors of @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=NT_D, ITHPRIME, NT_PHI"

#~ msgid ""
#~ "@FUNCTION=ITHPRIME\n"
#~ "@SYNTAX=ITHPRIME(i)\n"
#~ "@DESCRIPTION=ITHPRIME function returns the @ith prime.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=NT_D, NT_SIGMA"
#~ msgstr ""
#~ "@FUNCTION=ITHPRIME\n"
#~ "@SYNTAX=ITHPRIME(i)\n"
#~ "@DESCRIPTION=ITHPRIME function returns the @ith prime.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=NT_D, NT_SIGMA"

#~ msgid ""
#~ "@FUNCTION=ISPRIME\n"
#~ "@SYNTAX=ISPRIME(i)\n"
#~ "@DESCRIPTION=ISPRIME function returns TRUE if @i is prime and FALSE "
#~ "otherwise.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME, NT_D, NT_SIGMA"
#~ msgstr ""
#~ "@FUNCTION=ISPRIME\n"
#~ "@SYNTAX=ISPRIME(i)\n"
#~ "@DESCRIPTION=ISPRIME function returns TRUE if @i is prime and FALSE "
#~ "otherwise.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME, NT_D, NT_SIGMA"

#~ msgid ""
#~ "@FUNCTION=PFACTOR\n"
#~ "@SYNTAX=PFACTOR(n)\n"
#~ "@DESCRIPTION=PFACTOR function returns the smallest prime factor of its "
#~ "argument.\n"
#~ "\n"
#~ "The argument must be at least 2, or else a #VALUE! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME"
#~ msgstr ""
#~ "@FUNCTION=PFACTOR\n"
#~ "@SYNTAX=PFACTOR(n)\n"
#~ "@DESCRIPTION=PFACTOR function returns the smallest prime factor of its "
#~ "argument.\n"
#~ "\n"
#~ "The argument must be at least 2, or else a #VALUE! error is returned.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME"

#~ msgid ""
#~ "@FUNCTION=NT_PI\n"
#~ "@SYNTAX=NT_PI(n)\n"
#~ "@DESCRIPTION=NT_PI function returns the number of primes less than or "
#~ "equal to @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME, NT_PHI, NT_D, NT_SIGMA"
#~ msgstr ""
#~ "@FUNCTION=NT_PI\n"
#~ "@SYNTAX=NT_PI(n)\n"
#~ "@DESCRIPTION=NT_PI function returns the number of primes less than or "
#~ "equal to @n.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=ITHPRIME, NT_PHI, NT_D, NT_SIGMA"

#~ msgid ""
#~ "@FUNCTION=BITOR\n"
#~ "@SYNTAX=BITOR(a,b)\n"
#~ "@DESCRIPTION=BITOR function returns bitwise or-ing of its arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITXOR,BITAND"
#~ msgstr ""
#~ "@FUNCTION=BITOR\n"
#~ "@SYNTAX=BITOR(a,b)\n"
#~ "@DESCRIPTION=BITOR function returns bitwise or-ing of its arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITXOR,BITAND"

#~ msgid ""
#~ "@FUNCTION=BITXOR\n"
#~ "@SYNTAX=BITXOR(a,b)\n"
#~ "@DESCRIPTION=BITXOR function returns bitwise exclusive or-ing of its "
#~ "arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITOR,BITAND"
#~ msgstr ""
#~ "@FUNCTION=BITXOR\n"
#~ "@SYNTAX=BITXOR(a,b)\n"
#~ "@DESCRIPTION=BITXOR function returns bitwise exclusive or-ing of its "
#~ "arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITOR,BITAND"

#~ msgid ""
#~ "@FUNCTION=BITAND\n"
#~ "@SYNTAX=BITAND(a,b)\n"
#~ "@DESCRIPTION=BITAND function returns bitwise and-ing of its arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITOR,BITXOR"
#~ msgstr ""
#~ "@FUNCTION=BITAND\n"
#~ "@SYNTAX=BITAND(a,b)\n"
#~ "@DESCRIPTION=BITAND function returns bitwise and-ing of its arguments.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITOR,BITXOR"

#~ msgid ""
#~ "@FUNCTION=BITLSHIFT\n"
#~ "@SYNTAX=BITLSHIFT(x,n)\n"
#~ "@DESCRIPTION=BITLSHIFT function returns @x bit-shifted left by @n bits.\n"
#~ "\n"
#~ "* If @n is negative, a right shift will in effect be performed.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITRSHIFT"
#~ msgstr ""
#~ "@FUNCTION=BITLSHIFT\n"
#~ "@SYNTAX=BITLSHIFT(x,n)\n"
#~ "@DESCRIPTION=BITLSHIFT function returns @x bit-shifted left by @n bits.\n"
#~ "\n"
#~ "* If @n is negative, a right shift will in effect be performed.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITRSHIFT"

#~ msgid ""
#~ "@FUNCTION=BITRSHIFT\n"
#~ "@SYNTAX=BITRSHIFT(x,n)\n"
#~ "@DESCRIPTION=BITRSHIFT function returns @x bit-shifted right by @n bits.\n"
#~ "\n"
#~ "* If @n is negative, a left shift will in effect be performed.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITLSHIFT"
#~ msgstr ""
#~ "@FUNCTION=BITRSHIFT\n"
#~ "@SYNTAX=BITRSHIFT(x,n)\n"
#~ "@DESCRIPTION=BITRSHIFT function returns @x bit-shifted right by @n bits.\n"
#~ "\n"
#~ "* If @n is negative, a left shift will in effect be performed.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "@SEEALSO=BITLSHIFT"

#~ msgid ""
#~ "@FUNCTION=COLUMN\n"
#~ "@SYNTAX=COLUMN([reference])\n"
#~ "@DESCRIPTION=COLUMN function returns the column number of the current "
#~ "cell unless @reference is given. In that case, it returns an array of the "
#~ "column numbers of all cells in @reference. \n"
#~ "* If @reference is neither an array nor a reference nor a range, COLUMN "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMN() in E1 equals 5.\n"
#~ "\n"
#~ "@SEEALSO=COLUMNS,ROW,ROWS"
#~ msgstr ""
#~ "@FUNCTION=COLUMN\n"
#~ "@SYNTAX=COLUMN([reference])\n"
#~ "@DESCRIPTION=COLUMN function returns the column number of the current "
#~ "cell unless @reference is given. In that case, it returns an array of the "
#~ "column numbers of all cells in @reference. \n"
#~ "* If @reference is neither an array nor a reference nor a range, COLUMN "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMN() in E1 equals 5.\n"
#~ "\n"
#~ "@SEEALSO=COLUMNS,ROW,ROWS"

#~ msgid ""
#~ "@FUNCTION=ROW\n"
#~ "@SYNTAX=ROW([reference])\n"
#~ "@DESCRIPTION=ROW function returns an array of the row numbers taking a "
#~ "default argument of the containing cell position.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, ROW "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROW() in G13 equals 13.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROWS"
#~ msgstr ""
#~ "@FUNCTION=ROW\n"
#~ "@SYNTAX=ROW([reference])\n"
#~ "@DESCRIPTION=ROW function returns an array of the row numbers taking a "
#~ "default argument of the containing cell position.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, ROW "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROW() in G13 equals 13.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROWS"

#~ msgid ""
#~ "@FUNCTION=FLOOR\n"
#~ "@SYNTAX=FLOOR(x[,significance])\n"
#~ "@DESCRIPTION=FLOOR function rounds @x down to the next nearest multiple "
#~ "of @significance.\n"
#~ "\n"
#~ "* @significance defaults to 1.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FLOOR(0.5) equals 0.\n"
#~ "FLOOR(5,2) equals 4.\n"
#~ "FLOOR(-5,-2) equals -4.\n"
#~ "FLOOR(-5,2) equals #NUM!.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, ABS, INT, MOD"
#~ msgstr ""
#~ "@FUNCTION=FLOOR\n"
#~ "@SYNTAX=FLOOR(x[,significance])\n"
#~ "@DESCRIPTION=FLOOR function rounds @x down to the next nearest multiple "
#~ "of @significance.\n"
#~ "\n"
#~ "* @significance defaults to 1.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FLOOR(0.5) equals 0.\n"
#~ "FLOOR(5,2) equals 4.\n"
#~ "FLOOR(-5,-2) equals -4.\n"
#~ "FLOOR(-5,2) equals #NUM!.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, ABS, INT, MOD"

#~ msgid ""
#~ "@FUNCTION=SUMPRODUCT\n"
#~ "@SYNTAX=SUMPRODUCT(range1,range2,...)\n"
#~ "@DESCRIPTION=SUMPRODUCT function multiplies corresponding data entries in "
#~ "the given arrays or ranges, and then returns the sum of those products.  "
#~ "If an array entry is not numeric, the value zero is used instead.\n"
#~ "\n"
#~ "* If arrays or range arguments do not have the same dimensions, "
#~ "SUMPRODUCT returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMPRODUCT(A1:A5,B1:B5) equals 3370.\n"
#~ "\n"
#~ "@SEEALSO=SUM,PRODUCT"
#~ msgstr ""
#~ "@FUNCTION=SUMPRODUCT\n"
#~ "@SYNTAX=SUMPRODUCT(range1,range2,...)\n"
#~ "@DESCRIPTION=SUMPRODUCT function multiplies corresponding data entries in "
#~ "the given arrays or ranges, and then returns the sum of those products.  "
#~ "If an array entry is not numeric, the value zero is used instead.\n"
#~ "\n"
#~ "* If arrays or range arguments do not have the same dimensions, "
#~ "SUMPRODUCT returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMPRODUCT(A1:A5,B1:B5) equals 3370.\n"
#~ "\n"
#~ "@SEEALSO=SUM,PRODUCT"

#~ msgid "n2:the first number of degrees of freedom of the distribution"
#~ msgstr "n2:the first number of degrees of freedom of the distribution"

#~ msgid ""
#~ "@FUNCTION=R.DNORM\n"
#~ "@SYNTAX=R.DNORM(x,mu,sigma[,give_log])\n"
#~ "@DESCRIPTION=R.DNORM function returns the probability density function of "
#~ "the normal distribution.\n"
#~ "\n"
#~ "* @mu: mean of the distribution.\n"
#~ "* @sigma: standard deviation of the distribution.\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PNORM,R.QNORM"
#~ msgstr ""
#~ "@FUNCTION=R.DNORM\n"
#~ "@SYNTAX=R.DNORM(x,mu,sigma[,give_log])\n"
#~ "@DESCRIPTION=R.DNORM function returns the probability density function of "
#~ "the normal distribution.\n"
#~ "\n"
#~ "* @mu: mean of the distribution.\n"
#~ "* @sigma: standard deviation of the distribution.\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PNORM,R.QNORM"

#~ msgid ""
#~ "@FUNCTION=R.PNORM\n"
#~ "@SYNTAX=R.PNORM(x,mu,sigma[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PNORM function returns the cumulative distribution "
#~ "function of the normal distribution.\n"
#~ "\n"
#~ "* @mu: mean of the distribution.\n"
#~ "* @sigma: standard deviation of the distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNORM,R.QNORM"
#~ msgstr ""
#~ "@FUNCTION=R.PNORM\n"
#~ "@SYNTAX=R.PNORM(x,mu,sigma[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PNORM function returns the cumulative distribution "
#~ "function of the normal distribution.\n"
#~ "\n"
#~ "* @mu: mean of the distribution.\n"
#~ "* @sigma: standard deviation of the distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNORM,R.QNORM"

#~ msgid ""
#~ "@FUNCTION=R.QNORM\n"
#~ "@SYNTAX=R.QNORM(p,mu,sigma[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QNORM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the normal "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @mu: mean of the distribution.\n"
#~ "* @sigma: standard deviation of the distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNORM,R.PNORM"
#~ msgstr ""
#~ "@FUNCTION=R.QNORM\n"
#~ "@SYNTAX=R.QNORM(p,mu,sigma[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QNORM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the normal "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @mu: mean of the distribution.\n"
#~ "* @sigma: standard deviation of the distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNORM,R.PNORM"

#~ msgid ""
#~ "@FUNCTION=R.DLNORM\n"
#~ "@SYNTAX=R.DLNORM(x,logmean,logsd[,give_log])\n"
#~ "@DESCRIPTION=R.DLNORM function returns the probability density function "
#~ "of the log-normal distribution.\n"
#~ "\n"
#~ "* @logmean: mean of the underlying normal distribution.\n"
#~ "* @logsd: standard deviation of the underlying normal distribution.\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PLNORM,R.QLNORM"
#~ msgstr ""
#~ "@FUNCTION=R.DLNORM\n"
#~ "@SYNTAX=R.DLNORM(x,logmean,logsd[,give_log])\n"
#~ "@DESCRIPTION=R.DLNORM function returns the probability density function "
#~ "of the log-normal distribution.\n"
#~ "\n"
#~ "* @logmean: mean of the underlying normal distribution.\n"
#~ "* @logsd: standard deviation of the underlying normal distribution.\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PLNORM,R.QLNORM"

#~ msgid ""
#~ "@FUNCTION=R.PLNORM\n"
#~ "@SYNTAX=R.PLNORM(x,logmean,logsd[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PLNORM function returns the cumulative distribution "
#~ "function of the log-normal distribution.\n"
#~ "\n"
#~ "* @logmean: mean of the underlying normal distribution.\n"
#~ "* @logsd: standard deviation of the underlying normal distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DLNORM,R.QLNORM"
#~ msgstr ""
#~ "@FUNCTION=R.PLNORM\n"
#~ "@SYNTAX=R.PLNORM(x,logmean,logsd[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PLNORM function returns the cumulative distribution "
#~ "function of the log-normal distribution.\n"
#~ "\n"
#~ "* @logmean: mean of the underlying normal distribution.\n"
#~ "* @logsd: standard deviation of the underlying normal distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DLNORM,R.QLNORM"

#~ msgid ""
#~ "@FUNCTION=R.QLNORM\n"
#~ "@SYNTAX=R.QLNORM(x,logmean,logsd[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QLNORM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the log-"
#~ "normal distribution.\n"
#~ "\n"
#~ "* @logmean: mean of the underlying normal distribution.\n"
#~ "* @logsd: standard deviation of the underlying normal distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DLNORM,R.PLNORM"
#~ msgstr ""
#~ "@FUNCTION=R.QLNORM\n"
#~ "@SYNTAX=R.QLNORM(x,logmean,logsd[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QLNORM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the log-"
#~ "normal distribution.\n"
#~ "\n"
#~ "* @logmean: mean of the underlying normal distribution.\n"
#~ "* @logsd: standard deviation of the underlying normal distribution.\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DLNORM,R.PLNORM"

#~ msgid ""
#~ "@FUNCTION=R.DGAMMA\n"
#~ "@SYNTAX=R.DGAMMA(x,shape,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DGAMMA function returns the probability density function "
#~ "of the gamma distribution.\n"
#~ "\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PGAMMA,R.QGAMMA"
#~ msgstr ""
#~ "@FUNCTION=R.DGAMMA\n"
#~ "@SYNTAX=R.DGAMMA(x,shape,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DGAMMA function returns the probability density function "
#~ "of the gamma distribution.\n"
#~ "\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PGAMMA,R.QGAMMA"

#~ msgid ""
#~ "@FUNCTION=R.PGAMMA\n"
#~ "@SYNTAX=R.PGAMMA(x,p,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PGAMMA function returns the cumulative distribution "
#~ "function of the gamma distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGAMMA,R.QGAMMA"
#~ msgstr ""
#~ "@FUNCTION=R.PGAMMA\n"
#~ "@SYNTAX=R.PGAMMA(x,p,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PGAMMA function returns the cumulative distribution "
#~ "function of the gamma distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGAMMA,R.QGAMMA"

#~ msgid ""
#~ "@FUNCTION=R.QGAMMA\n"
#~ "@SYNTAX=R.QGAMMA(p,alpha,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QGAMMA function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the gamma "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGAMMA,R.PGAMMA"
#~ msgstr ""
#~ "@FUNCTION=R.QGAMMA\n"
#~ "@SYNTAX=R.QGAMMA(p,alpha,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QGAMMA function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the gamma "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGAMMA,R.PGAMMA"

#~ msgid ""
#~ "@FUNCTION=R.DBETA\n"
#~ "@SYNTAX=R.DBETA(x,a,b[,give_log])\n"
#~ "@DESCRIPTION=R.DBETA function returns the probability density function of "
#~ "the beta distribution.\n"
#~ "\n"
#~ "* @a: the first shape parameter of the distribution\n"
#~ "* @b: the second scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PBETA,R.QBETA"
#~ msgstr ""
#~ "@FUNCTION=R.DBETA\n"
#~ "@SYNTAX=R.DBETA(x,a,b[,give_log])\n"
#~ "@DESCRIPTION=R.DBETA function returns the probability density function of "
#~ "the beta distribution.\n"
#~ "\n"
#~ "* @a: the first shape parameter of the distribution\n"
#~ "* @b: the second scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PBETA,R.QBETA"

#~ msgid ""
#~ "@FUNCTION=R.PBETA\n"
#~ "@SYNTAX=R.PBETA(x,a,b[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PBETA function returns the cumulative distribution "
#~ "function of the beta distribution.\n"
#~ "\n"
#~ "* @a: the first shape parameter of the distribution\n"
#~ "* @b: the second scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBETA,R.QBETA"
#~ msgstr ""
#~ "@FUNCTION=R.PBETA\n"
#~ "@SYNTAX=R.PBETA(x,a,b[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PBETA function returns the cumulative distribution "
#~ "function of the beta distribution.\n"
#~ "\n"
#~ "* @a: the first shape parameter of the distribution\n"
#~ "* @b: the second scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBETA,R.QBETA"

#~ msgid ""
#~ "@FUNCTION=R.QBETA\n"
#~ "@SYNTAX=R.QBETA(alpha,a,b[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QBETA function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the beta "
#~ "distribution.\n"
#~ "\n"
#~ "* @a: the first shape parameter of the distribution\n"
#~ "* @b: the second scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBETA,R.PBETA"
#~ msgstr ""
#~ "@FUNCTION=R.QBETA\n"
#~ "@SYNTAX=R.QBETA(alpha,a,b[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QBETA function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the beta "
#~ "distribution.\n"
#~ "\n"
#~ "* @a: the first shape parameter of the distribution\n"
#~ "* @b: the second scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBETA,R.PBETA"

#~ msgid ""
#~ "@FUNCTION=R.DT\n"
#~ "@SYNTAX=R.DT(x,n[,give_log])\n"
#~ "@DESCRIPTION=R.DT function returns the probability density function of "
#~ "the Student t distribution.\n"
#~ "\n"
#~ "* @n: the number of degrees of freedom of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PT,R.QT"
#~ msgstr ""
#~ "@FUNCTION=R.DT\n"
#~ "@SYNTAX=R.DT(x,n[,give_log])\n"
#~ "@DESCRIPTION=R.DT function returns the probability density function of "
#~ "the Student t distribution.\n"
#~ "\n"
#~ "* @n: the number of degrees of freedom of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PT,R.QT"

#~ msgid ""
#~ "@FUNCTION=R.PT\n"
#~ "@SYNTAX=R.PT(x,n[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PT function returns the cumulative distribution function "
#~ "of the Student t distribution.\n"
#~ "\n"
#~ "* @n: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DT,R.QT"
#~ msgstr ""
#~ "@FUNCTION=R.PT\n"
#~ "@SYNTAX=R.PT(x,n[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PT function returns the cumulative distribution function "
#~ "of the Student t distribution.\n"
#~ "\n"
#~ "* @n: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DT,R.QT"

#~ msgid ""
#~ "@FUNCTION=R.QT\n"
#~ "@SYNTAX=R.QT(p,n[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QT function returns the probability quantile function, i."
#~ "e., the inverse of the cumulative distribution function, of the Student t "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @n: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DT,R.PT"
#~ msgstr ""
#~ "@FUNCTION=R.QT\n"
#~ "@SYNTAX=R.QT(p,n[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QT function returns the probability quantile function, i."
#~ "e., the inverse of the cumulative distribution function, of the Student t "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @n: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DT,R.PT"

#~ msgid ""
#~ "@FUNCTION=R.DF\n"
#~ "@SYNTAX=R.DF(x,n1,n2[,give_log])\n"
#~ "@DESCRIPTION=R.DF function returns the probability density function of "
#~ "the F distribution.\n"
#~ "\n"
#~ "* @n1: the first number of degrees of freedom of the distribution\n"
#~ "* @n2: the first number of degrees of freedom of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PF,R.QF"
#~ msgstr ""
#~ "@FUNCTION=R.DF\n"
#~ "@SYNTAX=R.DF(x,n1,n2[,give_log])\n"
#~ "@DESCRIPTION=R.DF function returns the probability density function of "
#~ "the F distribution.\n"
#~ "\n"
#~ "* @n1: the first number of degrees of freedom of the distribution\n"
#~ "* @n2: the first number of degrees of freedom of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PF,R.QF"

#~ msgid ""
#~ "@FUNCTION=R.PF\n"
#~ "@SYNTAX=R.PF(x,n1,n2[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PF function returns the cumulative distribution function "
#~ "of the F distribution.\n"
#~ "\n"
#~ "* @n1: the first number of degrees of freedom of the distribution\n"
#~ "* @n2: the first number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DF,R.QF"
#~ msgstr ""
#~ "@FUNCTION=R.PF\n"
#~ "@SYNTAX=R.PF(x,n1,n2[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PF function returns the cumulative distribution function "
#~ "of the F distribution.\n"
#~ "\n"
#~ "* @n1: the first number of degrees of freedom of the distribution\n"
#~ "* @n2: the first number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DF,R.QF"

#~ msgid ""
#~ "@FUNCTION=R.QF\n"
#~ "@SYNTAX=R.QF(x,n1,n2[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QF function returns the probability quantile function, i."
#~ "e., the inverse of the cumulative distribution function, of the F "
#~ "distribution.\n"
#~ "\n"
#~ "* @n1: the first number of degrees of freedom of the distribution\n"
#~ "* @n2: the first number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DF,R.PF"
#~ msgstr ""
#~ "@FUNCTION=R.QF\n"
#~ "@SYNTAX=R.QF(x,n1,n2[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QF function returns the probability quantile function, i."
#~ "e., the inverse of the cumulative distribution function, of the F "
#~ "distribution.\n"
#~ "\n"
#~ "* @n1: the first number of degrees of freedom of the distribution\n"
#~ "* @n2: the first number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DF,R.PF"

#~ msgid ""
#~ "@FUNCTION=R.DCHISQ\n"
#~ "@SYNTAX=R.DCHISQ(x,df[,give_log])\n"
#~ "@DESCRIPTION=R.DCHISQ function returns the probability density function "
#~ "of the chi-square distribution.\n"
#~ "\n"
#~ "* @df: the number of degrees of freedom of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PCHISQ,R.QCHISQ"
#~ msgstr ""
#~ "@FUNCTION=R.DCHISQ\n"
#~ "@SYNTAX=R.DCHISQ(x,df[,give_log])\n"
#~ "@DESCRIPTION=R.DCHISQ function returns the probability density function "
#~ "of the chi-square distribution.\n"
#~ "\n"
#~ "* @df: the number of degrees of freedom of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PCHISQ,R.QCHISQ"

#~ msgid ""
#~ "@FUNCTION=R.PCHISQ\n"
#~ "@SYNTAX=R.PCHISQ(x,df[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PCHISQ function returns the cumulative distribution "
#~ "function of the chi-square distribution.\n"
#~ "\n"
#~ "* @df: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCHISQ,R.QCHISQ"
#~ msgstr ""
#~ "@FUNCTION=R.PCHISQ\n"
#~ "@SYNTAX=R.PCHISQ(x,df[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PCHISQ function returns the cumulative distribution "
#~ "function of the chi-square distribution.\n"
#~ "\n"
#~ "* @df: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCHISQ,R.QCHISQ"

#~ msgid ""
#~ "@FUNCTION=R.QCHISQ\n"
#~ "@SYNTAX=R.QCHISQ(p,df[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QCHISQ function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the chi-"
#~ "square distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @df: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCHISQ,R.PCHISQ"
#~ msgstr ""
#~ "@FUNCTION=R.QCHISQ\n"
#~ "@SYNTAX=R.QCHISQ(p,df[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QCHISQ function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the chi-"
#~ "square distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @df: the number of degrees of freedom of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCHISQ,R.PCHISQ"

#~ msgid ""
#~ "@FUNCTION=R.DWEIBULL\n"
#~ "@SYNTAX=R.DWEIBULL(x,shape,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DWEIBULL function returns the probability density function "
#~ "of the Weibull distribution.\n"
#~ "\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PWEIBULL,R.QWEIBULL"
#~ msgstr ""
#~ "@FUNCTION=R.DWEIBULL\n"
#~ "@SYNTAX=R.DWEIBULL(x,shape,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DWEIBULL function returns the probability density function "
#~ "of the Weibull distribution.\n"
#~ "\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PWEIBULL,R.QWEIBULL"

#~ msgid ""
#~ "@FUNCTION=R.PWEIBULL\n"
#~ "@SYNTAX=R.PWEIBULL(x,shape,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PWEIBULL function returns the cumulative distribution "
#~ "function of the Weibull distribution.\n"
#~ "\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DWEIBULL,R.QWEIBULL"
#~ msgstr ""
#~ "@FUNCTION=R.PWEIBULL\n"
#~ "@SYNTAX=R.PWEIBULL(x,shape,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PWEIBULL function returns the cumulative distribution "
#~ "function of the Weibull distribution.\n"
#~ "\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DWEIBULL,R.QWEIBULL"

#~ msgid ""
#~ "@FUNCTION=R.QWEIBULL\n"
#~ "@SYNTAX=R.QWEIBULL(p,shape,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QWEIBULL function returns the probability quantile "
#~ "function, i.e., the inverse of the cumulative distribution function, of "
#~ "the Weibull distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DWEIBULL,R.PWEIBULL"
#~ msgstr ""
#~ "@FUNCTION=R.QWEIBULL\n"
#~ "@SYNTAX=R.QWEIBULL(p,shape,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QWEIBULL function returns the probability quantile "
#~ "function, i.e., the inverse of the cumulative distribution function, of "
#~ "the Weibull distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @shape: the shape parameter of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DWEIBULL,R.PWEIBULL"

#~ msgid ""
#~ "@FUNCTION=R.DPOIS\n"
#~ "@SYNTAX=R.DPOIS(x,lambda[,give_log])\n"
#~ "@DESCRIPTION=R.DPOIS function returns the probability density function of "
#~ "the Poisson distribution.\n"
#~ "\n"
#~ "* @lambda: the mean of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PPOIS,R.QPOIS"
#~ msgstr ""
#~ "@FUNCTION=R.DPOIS\n"
#~ "@SYNTAX=R.DPOIS(x,lambda[,give_log])\n"
#~ "@DESCRIPTION=R.DPOIS function returns the probability density function of "
#~ "the Poisson distribution.\n"
#~ "\n"
#~ "* @lambda: the mean of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PPOIS,R.QPOIS"

#~ msgid ""
#~ "@FUNCTION=R.PPOIS\n"
#~ "@SYNTAX=R.PPOIS(x,lambda[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PPOIS function returns the cumulative distribution "
#~ "function of the Poisson distribution.\n"
#~ "\n"
#~ "* @lambda: the mean of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DPOIS,R.QPOIS"
#~ msgstr ""
#~ "@FUNCTION=R.PPOIS\n"
#~ "@SYNTAX=R.PPOIS(x,lambda[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PPOIS function returns the cumulative distribution "
#~ "function of the Poisson distribution.\n"
#~ "\n"
#~ "* @lambda: the mean of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DPOIS,R.QPOIS"

#~ msgid ""
#~ "@FUNCTION=R.QPOIS\n"
#~ "@SYNTAX=R.QPOIS(p,lambda[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QPOIS function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the Poisson "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @lambda: the mean of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DPOIS,R.PPOIS"
#~ msgstr ""
#~ "@FUNCTION=R.QPOIS\n"
#~ "@SYNTAX=R.QPOIS(p,lambda[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QPOIS function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the Poisson "
#~ "distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @lambda: the mean of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DPOIS,R.PPOIS"

#~ msgid ""
#~ "@FUNCTION=R.DEXP\n"
#~ "@SYNTAX=R.DEXP(x,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DEXP function returns the probability density function of "
#~ "the exponential distribution.\n"
#~ "\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PEXP,R.QEXP"
#~ msgstr ""
#~ "@FUNCTION=R.DEXP\n"
#~ "@SYNTAX=R.DEXP(x,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DEXP function returns the probability density function of "
#~ "the exponential distribution.\n"
#~ "\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PEXP,R.QEXP"

#~ msgid ""
#~ "@FUNCTION=R.PEXP\n"
#~ "@SYNTAX=R.PEXP(x,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PEXP function returns the cumulative distribution function "
#~ "of the exponential distribution.\n"
#~ "\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DEXP,R.QEXP"
#~ msgstr ""
#~ "@FUNCTION=R.PEXP\n"
#~ "@SYNTAX=R.PEXP(x,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PEXP function returns the cumulative distribution function "
#~ "of the exponential distribution.\n"
#~ "\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DEXP,R.QEXP"

#~ msgid ""
#~ "@FUNCTION=R.QEXP\n"
#~ "@SYNTAX=R.QEXP(p,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QEXP function returns the probability quantile function, i."
#~ "e., the inverse of the cumulative distribution function, of the "
#~ "exponential distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DEXP,R.PEXP"
#~ msgstr ""
#~ "@FUNCTION=R.QEXP\n"
#~ "@SYNTAX=R.QEXP(p,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QEXP function returns the probability quantile function, i."
#~ "e., the inverse of the cumulative distribution function, of the "
#~ "exponential distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DEXP,R.PEXP"

#~ msgid ""
#~ "@FUNCTION=R.DBINOM\n"
#~ "@SYNTAX=R.DBINOM(x,n,psuc[,give_log])\n"
#~ "@DESCRIPTION=R.DBINOM function returns the probability density function "
#~ "of the binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PBINOM,R.QBINOM"
#~ msgstr ""
#~ "@FUNCTION=R.DBINOM\n"
#~ "@SYNTAX=R.DBINOM(x,n,psuc[,give_log])\n"
#~ "@DESCRIPTION=R.DBINOM function returns the probability density function "
#~ "of the binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PBINOM,R.QBINOM"

#~ msgid ""
#~ "@FUNCTION=R.PBINOM\n"
#~ "@SYNTAX=R.PBINOM(x,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PBINOM function returns the cumulative distribution "
#~ "function of the binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBINOM,R.QBINOM"
#~ msgstr ""
#~ "@FUNCTION=R.PBINOM\n"
#~ "@SYNTAX=R.PBINOM(x,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PBINOM function returns the cumulative distribution "
#~ "function of the binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBINOM,R.QBINOM"

#~ msgid ""
#~ "@FUNCTION=R.QBINOM\n"
#~ "@SYNTAX=R.QBINOM(x,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QBINOM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the "
#~ "binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBINOM,R.PBINOM"
#~ msgstr ""
#~ "@FUNCTION=R.QBINOM\n"
#~ "@SYNTAX=R.QBINOM(x,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QBINOM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the "
#~ "binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DBINOM,R.PBINOM"

#~ msgid ""
#~ "@FUNCTION=R.DNBINOM\n"
#~ "@SYNTAX=R.DNBINOM(x,n,psuc[,give_log])\n"
#~ "@DESCRIPTION=R.DNBINOM function returns the probability density function "
#~ "of the negative binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PNBINOM,R.QNBINOM"
#~ msgstr ""
#~ "@FUNCTION=R.DNBINOM\n"
#~ "@SYNTAX=R.DNBINOM(x,n,psuc[,give_log])\n"
#~ "@DESCRIPTION=R.DNBINOM function returns the probability density function "
#~ "of the negative binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PNBINOM,R.QNBINOM"

#~ msgid ""
#~ "@FUNCTION=R.PNBINOM\n"
#~ "@SYNTAX=R.PNBINOM(x,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PNBINOM function returns the cumulative distribution "
#~ "function of the negative binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNBINOM,R.QNBINOM"
#~ msgstr ""
#~ "@FUNCTION=R.PNBINOM\n"
#~ "@SYNTAX=R.PNBINOM(x,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PNBINOM function returns the cumulative distribution "
#~ "function of the negative binomial distribution.\n"
#~ "\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNBINOM,R.QNBINOM"

#~ msgid ""
#~ "@FUNCTION=R.QNBINOM\n"
#~ "@SYNTAX=R.QNBINOM(p,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QNBINOM function returns the probability quantile "
#~ "function, i.e., the inverse of the cumulative distribution function, of "
#~ "the negative binomial distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNBINOM,R.PNBINOM"
#~ msgstr ""
#~ "@FUNCTION=R.QNBINOM\n"
#~ "@SYNTAX=R.QNBINOM(p,n,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QNBINOM function returns the probability quantile "
#~ "function, i.e., the inverse of the cumulative distribution function, of "
#~ "the negative binomial distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @n: the number of trials\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DNBINOM,R.PNBINOM"

#~ msgid ""
#~ "@FUNCTION=R.DHYPER\n"
#~ "@SYNTAX=R.DHYPER(x,r,b,n[,give_log])\n"
#~ "@DESCRIPTION=R.DHYPER function returns the probability density function "
#~ "of the hypergeometric distribution.\n"
#~ "\n"
#~ "* @r: the number of red balls\n"
#~ "* @b: the number of black balls\n"
#~ "* @n: the number of balls drawn\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PHYPER,R.QHYPER"
#~ msgstr ""
#~ "@FUNCTION=R.DHYPER\n"
#~ "@SYNTAX=R.DHYPER(x,r,b,n[,give_log])\n"
#~ "@DESCRIPTION=R.DHYPER function returns the probability density function "
#~ "of the hypergeometric distribution.\n"
#~ "\n"
#~ "* @r: the number of red balls\n"
#~ "* @b: the number of black balls\n"
#~ "* @n: the number of balls drawn\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PHYPER,R.QHYPER"

#~ msgid ""
#~ "@FUNCTION=R.PHYPER\n"
#~ "@SYNTAX=R.PHYPER(x,r,b,n[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PHYPER function returns the cumulative distribution "
#~ "function of the hypergeometric distribution.\n"
#~ "\n"
#~ "* @r: the number of red balls\n"
#~ "* @b: the number of black balls\n"
#~ "* @n: the number of balls drawn\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DHYPER,R.QHYPER"
#~ msgstr ""
#~ "@FUNCTION=R.PHYPER\n"
#~ "@SYNTAX=R.PHYPER(x,r,b,n[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PHYPER function returns the cumulative distribution "
#~ "function of the hypergeometric distribution.\n"
#~ "\n"
#~ "* @r: the number of red balls\n"
#~ "* @b: the number of black balls\n"
#~ "* @n: the number of balls drawn\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DHYPER,R.QHYPER"

#~ msgid ""
#~ "@FUNCTION=R.DGEOM\n"
#~ "@SYNTAX=R.DGEOM(x,psuc[,give_log])\n"
#~ "@DESCRIPTION=R.DGEOM function returns the probability density function of "
#~ "the geometric distribution.\n"
#~ "\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PGEOM,R.QGEOM"
#~ msgstr ""
#~ "@FUNCTION=R.DGEOM\n"
#~ "@SYNTAX=R.DGEOM(x,psuc[,give_log])\n"
#~ "@DESCRIPTION=R.DGEOM function returns the probability density function of "
#~ "the geometric distribution.\n"
#~ "\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PGEOM,R.QGEOM"

#~ msgid ""
#~ "@FUNCTION=R.PGEOM\n"
#~ "@SYNTAX=R.PGEOM(x,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PGEOM function returns the cumulative distribution "
#~ "function of the geometric distribution.\n"
#~ "\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGEOM,R.QGEOM"
#~ msgstr ""
#~ "@FUNCTION=R.PGEOM\n"
#~ "@SYNTAX=R.PGEOM(x,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PGEOM function returns the cumulative distribution "
#~ "function of the geometric distribution.\n"
#~ "\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGEOM,R.QGEOM"

#~ msgid ""
#~ "@FUNCTION=R.QGEOM\n"
#~ "@SYNTAX=R.QGEOM(p,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QGEOM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the "
#~ "geometric distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGEOM,R.PGEOM"
#~ msgstr ""
#~ "@FUNCTION=R.QGEOM\n"
#~ "@SYNTAX=R.QGEOM(p,psuc[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QGEOM function returns the probability quantile function, "
#~ "i.e., the inverse of the cumulative distribution function, of the "
#~ "geometric distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @psuc: the probability of success in each trial\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DGEOM,R.PGEOM"

#~ msgid ""
#~ "@FUNCTION=R.DCAUCHY\n"
#~ "@SYNTAX=R.DCAUCHY(x,location,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DCAUCHY function returns the probability density function "
#~ "of the Cauchy distribution.\n"
#~ "\n"
#~ "* @location: the center of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PCAUCHY,R.QCAUCHY"
#~ msgstr ""
#~ "@FUNCTION=R.DCAUCHY\n"
#~ "@SYNTAX=R.DCAUCHY(x,location,scale[,give_log])\n"
#~ "@DESCRIPTION=R.DCAUCHY function returns the probability density function "
#~ "of the Cauchy distribution.\n"
#~ "\n"
#~ "* @location: the center of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @give_log: if true, log of the result will be returned instead.  This "
#~ "is useful if the result would otherwise underflow to 0.  Defaults to "
#~ "false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.PCAUCHY,R.QCAUCHY"

#~ msgid ""
#~ "@FUNCTION=R.PCAUCHY\n"
#~ "@SYNTAX=R.PCAUCHY(x,location,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PCAUCHY function returns the cumulative distribution "
#~ "function of the Cauchy distribution.\n"
#~ "\n"
#~ "* @location: the center of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCAUCHY,R.QCAUCHY"
#~ msgstr ""
#~ "@FUNCTION=R.PCAUCHY\n"
#~ "@SYNTAX=R.PCAUCHY(x,location,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.PCAUCHY function returns the cumulative distribution "
#~ "function of the Cauchy distribution.\n"
#~ "\n"
#~ "* @location: the center of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCAUCHY,R.QCAUCHY"

#~ msgid ""
#~ "@FUNCTION=R.QCAUCHY\n"
#~ "@SYNTAX=R.QCAUCHY(p,location,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QCAUCHY function returns the probability quantile "
#~ "function, i.e., the inverse of the cumulative distribution function, of "
#~ "the Cauchy distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @location: the center of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCAUCHY,R.PCAUCHY"
#~ msgstr ""
#~ "@FUNCTION=R.QCAUCHY\n"
#~ "@SYNTAX=R.QCAUCHY(p,location,scale[,lower_tail,log_p])\n"
#~ "@DESCRIPTION=R.QCAUCHY function returns the probability quantile "
#~ "function, i.e., the inverse of the cumulative distribution function, of "
#~ "the Cauchy distribution.\n"
#~ "\n"
#~ "* @p: probability.\n"
#~ "* @location: the center of the distribution\n"
#~ "* @scale: the scale parameter of the distribution\n"
#~ "* @lower_tail: if true (the default), the lower tail of the distribution "
#~ "is considered.\n"
#~ "* @log_p: if true, log of the probability is used.  This is useful if the "
#~ "probability would otherwise underflow to 0.  Defaults to false.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "\n"
#~ "@SEEALSO=R.DCAUCHY,R.PCAUCHY"
