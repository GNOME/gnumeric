#!/usr/bin/perl -w
#
#  Gnumeric
#
#  Copyright (C) 2001 Morten Welinder.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this library; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Author: Morten Welinder <terra@gnome.org>

use strict;

my $exitcode = 0;
my $verbose = 0;

warn "$0: should be run from top-level directory.\n"
    unless -r "configure.in" && -r 'ChangeLog';

my %base_exceptions =
    ('acconfig.h' => 1,
     );

my %exceptions =
    ('gnumeric-config.h' => 1,
     'stamp.h' => 1,
     );

my %guard_to_file = ();

{
    local (*FIND);
    open (*FIND, "find . '(' -type f -name '*.[hH]' -print ')' -o '(' -type d '(' -name CVS -o -name intl -o -name macros ')' -prune ')' |")
	or die "$0: cannot execute find: $!\n";
  FILE:
    foreach my $filename (<FIND>) {
	chomp $filename;
	$filename =~ s|^\./||;

	next if $exceptions{$filename};
	next if $filename =~ /\.glade\.h$/;
	next if $filename =~ /\.xml\.h$/;
	my $basename = $filename;
	$basename =~ s|^.*/||;
	next if $base_exceptions{$basename};

	local (*FIL);
	if (open (*FIL, "< $filename")) {
	    my $state = 1;
	    my $guard = undef;
	  LINE:
	    while (<FIL>) {
		if ($state == 1 && /^\s*\#\s*ifndef\s+([A-Za-z0-9_]+)/) {
		    $guard = $1;
		    $state = 2;
		    print "$0: File `$filename' ok.\n" if $verbose;
		    next LINE;
		} elsif ($state == 2 && /^\s*\#\s*define\s+([A-Za-z0-9_]+)/) {
		    if ($guard ne $1) {
			print STDERR "$0: File `$filename' is improperly guarded.\n";
			$exitcode = 1;
			next FILE;
		    }
		    if (exists $guard_to_file{$guard}) {
			my $otherfilename = $guard_to_file{$guard};
			print STDERR "$0: Files `$filename' and $otherfilename have same guard.\n";
			$exitcode = 1;
			next FILE;
		    }

		    $guard_to_file{$guard} = $filename;
		    next FILE;
		} elsif (/^\s*\#/) {
		    last LINE;
		}
	    }
	    close (*FIL);
	    print STDERR "$0: File `$filename' is not guarded.\n";
	    $exitcode = 1;
	} else {
	    print STDERR "$0: Cannot read `$filename': $!\b";
	    $exitcode = 1;
	}
    }
    close (*FIND);
}

exit $exitcode;
