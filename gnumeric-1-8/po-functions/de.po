# German Gnumeric translation.
# Copyright (C) 1998-2000 Miguel de Icaza, 2001-2002 Jody Goldberg.
# This file is distributed under the same license as the Gnumeric package.
# Ralf Baechle <ralf@gnu.org>, 1999.
# Karsten Weiss <karsten@addx.au.s.shuttle.de>, 1999.
# Matthias Warkus <mawa@iname.com>, 1999-2000.
# Karl Eichwalder <ke@suse.de>, 1999-2001.
# Andreas J. Guelzow <aguelzow@taliesin.ca>, 2001.
# Christian Meyer <chrisime@gnome.org>, 2001.
# Christian Neumair <chris@gnome-de.org>, 2002.
# Hendrik Richter <hendrik@gnome-de.org>, 2005.
#
# Thanks for improvements to "Andreas J. Guelzow" <aguelzow@taliesin.ca>, 2001.
#
# Future translators, please take care to translate error messages correctly:
# #3D MULT? == #3D-MULT?
# #ARG! == #ARG!
# #DIV/0! == #DIV/0!
# #N/A == #-/-
# #NAME? == #NAME?
# #NULL! == #NULL!
# #NUM! == #ZAHL!
# #RECALC! == #NEU-BER!
# #REF! == #BEZUG!
# #UNKNOWN! == #UNBEKANNT!
# #VALUE! == #WERT!
#
# TODO:
#
# - translate all functions (the untranslated ones are translated with LATER)
#
msgid ""
msgstr ""
"Project-Id-Version: gnumeric 1.2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2007-12-29 14:31-0500\n"
"PO-Revision-Date: 2005-07-24 14:12+0200\n"
"Last-Translator: Hendrik Richter <hendi@gnome-de.org>\n"
"Language-Team: German <gnome-de@gnome.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../plugins/derivatives/options.c:174
#, no-c-format
msgid ""
"@FUNCTION=CUM_BIV_NORM_DIST\n"
"@SYNTAX=CUM_BIV_NORM_DIST(a,b,rho)\n"
"@DESCRIPTION=CUM_BIV_NORM_DIST calculates the cumulative bivariate normal "
"distribution from parameters a, b & rho.\n"
"The return value is the probability that two random variables with "
"correlation @rho are respectively each less than @a and @b.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NORMDIST,NORMSDIST,NORMSINV"
msgstr ""
"@FUNCTION=KUMBIVNORMVERT\n"
"@SYNTAX=KUMBIVNORMVERT(a,b,Rho)\n"
"@DESCRIPTION=KUMBIVNORMVERT berechnet die kumulative bivariate "
"Normalverteilung aus den Parametern a, b und Rho. Der gelieferte Wert ist "
"die Wahrscheinlichkeit, dass zwei Zufallsvariablen mit der Korrelation @Rho "
"jeweils kleiner als @a und @b sind.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NORMVERT,STANDNORMDIST,STANDNORMINV"

#: ../plugins/derivatives/options.c:234
msgid ""
"@FUNCTION=OPT_BS\n"
"@SYNTAX=OPT_BS(call_put_flag,spot,strike,time,rate,volatility [,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS uses the Black-Scholes model to calculate the price of a "
"European option using call_put_flag, @call_put_flag, 'c' or 'p' struck at "
"@strike on an asset with spot price @spot.\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date. \n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed in the same units as @strike and "
"@spot.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:304
msgid ""
"@FUNCTION=OPT_BS_DELTA\n"
"@SYNTAX=OPT_BS_DELTA(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_DELTA uses the Black-Scholes model to calculate the "
"'delta' of a European option with call_put_flag, @call_put_flag, 'c' or 'p' "
"struck at @strike on an asset with spot price @spot.\n"
"Where @time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date. \n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed in the same units as @strike and "
"@spot.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:359
msgid ""
"@FUNCTION=OPT_BS_GAMMA\n"
"@SYNTAX=OPT_BS_GAMMA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_GAMMA uses the Black-Scholes model to calculate the "
"'gamma' of a European option struck at @strike on an asset with spot price "
"@spot.\n"
"\n"
"(The gamma of an option is the second derivative of its price with respect "
"to the price of the underlying asset, and is the same for calls and puts.)\n"
"\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as the rate of change of delta per "
"unit change in @spot.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:429
msgid ""
"@FUNCTION=OPT_BS_THETA\n"
"@SYNTAX=OPT_BS_THETA(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_THETA uses the Black-Scholes model to calculate the "
"'theta' of a European option with call_put_flag, @call_put_flag struck at "
"@strike on an asset with spot price @spot.\n"
"\n"
"(The theta of an option is the rate of change of its price with respect to "
"time to expiry.)\n"
"\n"
"@time is the time to maturity of the option expressed in years\n"
"and @rate is the risk-free interest rate to the exercise date, in percent.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as minus the rate of change of option "
"value, per 365.25 days.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:486
#, no-c-format
msgid ""
"@FUNCTION=OPT_BS_VEGA\n"
"@SYNTAX=OPT_BS_VEGA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_VEGA uses the Black-Scholes model to calculate the "
"'vega' of a European option struck at @strike on an asset with spot price "
"@spot.\n"
"(The vega of an option is the rate of change of its price with respect to "
"volatility, and is the same for calls and puts.)\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
" @time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% volatility.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:561
#, no-c-format
msgid ""
"@FUNCTION=OPT_BS_RHO\n"
"@SYNTAX=OPT_BS_RHO(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_RHO uses the Black-Scholes model to calculate the 'rho' "
"of a European option with call_put_flag, @call_put_flag struck at @strike on "
"an asset with spot price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"\n"
"(The rho of an option is the rate of change of its price with respect to the "
"risk free interest rate.)\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% change in @rate.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:629
#, no-c-format
msgid ""
"@FUNCTION=OPT_BS_CARRYCOST\n"
"@SYNTAX=OPT_BS_CARRYCOST(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_CARRYCOST uses the Black-Scholes model to calculate the "
"'elasticity' of a European option struck at @strike on an asset with spot "
"price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"\n"
"(The elasticity of an option is the rate of change of its price with respect "
"to its cost of carry.)\n"
"\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.  @time is the time to maturity of the "
"option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% volatility.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:701
#, no-c-format
msgid ""
"@FUNCTION=OPT_GARMAN_KOHLHAGEN\n"
"@SYNTAX=OPT_GARMAN_KOHLHAGEN(call_put_flag,spot,strike,time,domestic_rate,"
"foreign_rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_GARMAN_KOHLHAGEN values the theoretical price of a European "
"currency option struck at @strike on an asset with spot price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date. \n"
"@time the number of days to exercise.\n"
"@domestic_rate is the domestic risk-free interest rate to the exercise "
"date.\n"
"@foreign_rate is the foreign risk-free interest rate to the exercise date, "
"in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% volatility.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:772
#, no-c-format
msgid ""
"@FUNCTION=OPT_FRENCH\n"
"@SYNTAX=OPT_FRENCH(call_put_flag,spot,strike,time,t2,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_FRENCH values the theoretical price of a European option "
"adjusted for trading day volatility, struck at @strike on an asset with spot "
"price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
" @time the number of calendar days to exercise divided by calendar days in "
"the year.\n"
"@t2 is the number of trading days to exercise divided by trading days in the "
"year.\n"
"@rate is the risk-free interest rate.\n"
"@cost_of_carry is the leakage in value of the underlying asset, to the "
"exercise date, in percent.\n"
"For common stocks, this would be the dividend yield.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:836
#, no-c-format
msgid ""
"@FUNCTION=OPT_JUMP_DIFF\n"
"@SYNTAX=OPT_JUMP_DIFF(call_put_flag,spot,strike,time,rate,volatility,lambda,"
"gamma)\n"
"@DESCRIPTION=OPT_JUMP_DIFF models the theoretical price of an option "
"according to the Jump Diffusion process (Merton).\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price of the option.\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the annualized rate of interest.\n"
"@volatility is the annualized volatility of the underlying asset.\n"
"@lambda is expected number of 'jumps' per year.\n"
"@gamma is proportion of volatility explained by the 'jumps.'\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:935
#, no-c-format
msgid ""
"@FUNCTION=OPT_MILTERSEN_SCHWARTZ\n"
"@SYNTAX=OPT_MILTERSEN_SCHWARTZ(call_put_flag,p_t,f_t,x,t1,t2,v_s,v_e,v_f,"
"rho_se,rho_sf,rho_ef,kappa_e,kappa_f)\n"
"@DESCRIPTION=OPT_MILTERSEN_SCHWARTZ models the theoretical price of options "
"on commodities futures according to Miltersen & Schwartz. \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@p_t is a zero coupon bond with expiry at option maturity.\n"
"@f_t is the futures price.\n"
"@x is the strike price.\n"
"@t1 is the time to maturity of the option.\n"
"@t2 is the time to maturity of the underlying commodity futures contract.\n"
"@v_s is the volatility of the spot commodity price.\n"
"@v_e is the volatility of the future convenience yield.\n"
"@v_f is the volatility of the forward rate of interest.\n"
"@rho_se is correlation between the spot commodity price and the convenience "
"yield.\n"
"@rho_sf is correlation between the spot commodity price and the forward "
"interest rate.\n"
"@rho_ef is correlation between the forward interest rate and the convenience "
"yield.\n"
"@kappa_e is the speed of mean reversion of the convenience yield.\n"
"@kappa_f is the speed of mean reversion of the forward interest rate.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""

#: ../plugins/derivatives/options.c:1048
#, no-c-format
msgid ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(call_put_flag,spot,strike,t1,t2,rate,d,volatility)\n"
"@DESCRIPTION=OPT_RGW models the theoretical price of an american option "
"according to the Roll-Geske-Whaley approximation where: \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@t1 is the time to the dividend payout.\n"
"@t2 is the time to option expiration.\n"
"@rate is the annualized rate of interest.\n"
"@d is the amount of the dividend to be paid.\n"
"@volatility is the annualized rate of volatility of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1105
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_BAW_AMER\n"
"@SYNTAX=OPT_BAW_AMER(call_put_flag,spot,strike,time,rate,cost_of_carry,"
"volatility)\n"
"@DESCRIPTION=OPT_BAW_AMER models the theoretical price of an option "
"according to the Barone Adesie & Whaley approximation. \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1291
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_BJER_STENS\n"
"@SYNTAX=OPT_BJER_STENS(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BJER_STENS models the theoretical price of american options "
"according to the Bjerksund & Stensland approximation technique.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1378
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_EXEC\n"
"@SYNTAX=OPT_EXEC(call_put_flag,spot,strike,time,rate,volatility,"
"cost_of_carry,lambda)\n"
"@DESCRIPTION=OPT_EXEC models the theoretical price of executive stock "
"options @call_put_flag is 'c' or 'p' to indicate whether the option is a "
"call or a put.\n"
"One would expect this to always be a call option.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@lambda is the jump rate for executives. The model assumes executives "
"forfeit their options if they leave the company.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1429
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_FORWARD_START\n"
"@SYNTAX=OPT_FORWARD_START(call_put_flag,spot,alpha,time1,time,rate,"
"volatility,cost_of_carry)\n"
"@DESCRIPTION=OPT_FORWARD_START models the theoretical price of forward start "
"options\n"
" @call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@alpha is a fraction that set the strike price the future date @time1.\n"
"@time1 is the number of days until the option starts.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1495
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_TIME_SWITCH\n"
"@SYNTAX=OPT_TIME_SWITCH(call_put_flag,spot,strike,a,time,m,dt,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_TIME_SWITCH models the theoretical price of time switch "
"options. (Pechtl 1995)\n"
"The holder receives @a * @dt for each period dt that the asset price was "
"greater than the strike price (for a call) or below it (for a put). \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@a is the amount received for each time period as discussed above.\n"
"@time is the maturity of the option in years.\n"
"@m is the number of time units the option has already met the condition.\n"
"@dt is the agreed upon discrete time period (often a day) expressed as a "
"fraction of a year.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1549
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_SIMPLE_CHOOSER\n"
"@SYNTAX=OPT_SIMPLE_CHOOSER(call_put_flag,spot,strike,time1,time2,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_SIMPLE_CHOOSER models the theoretical price of simple "
"chooser options.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time1 is the time in years until the holder chooses a put or a call "
"option.\n"
"@time2 is the time in years until the chosen option expires.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1612
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_COMPLEX_CHOOSER\n"
"@SYNTAX=OPT_COMPLEX_CHOOSER(call_put_flag,spot,strike_call,strike_put,time,"
"time_call,time_put,rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_COMPLEX_CHOOSER models the theoretical price of complex "
"chooser options.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike_call is the strike price at which the option is struck, applicable "
"if exercised as a call option.\n"
"@strike_put is the strike price at which the option is struck, applicable if "
"exercised as a put option.\n"
"@time is the time in years until the holder chooses a put or a call "
"option. \n"
"@time_call is the time in years to maturity of the call option if chosen.\n"
"@time_put is the time in years  to maturity of the put option if chosen.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1729
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_ON_OPTIONS\n"
"@SYNTAX=OPT_ON_OPTIONS(type_flag,spot,strike1,strike2,time1,time2,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_ON_OPTIONS models the theoretical price of options on "
"options.\n"
"@type_flag is 'cc' for calls on calls, 'cp' for calls on puts, and so on for "
"'pc', and 'pp'.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike1 is the strike price at which the option being valued is struck.\n"
"@strike2 is the strike price at which the underlying option is struck.\n"
"@time1 is the time in years to maturity of the option.\n"
"@time2 is the time in years to the maturity of the underlying option.\n"
"(@time2 >= @time1).\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset of the "
"underlying option.for common stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset of "
"the underlying option.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1817
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_EXTENDIBLE_WRITER\n"
"@SYNTAX=OPT_EXTENDIBLE_WRITER(call_put_flag,spot,strike1,strike2,time1,time2,"
"rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_EXTENDIBLE_WRITER models the theoretical price of "
"extendible writer options. These are options that can be exercised at an "
"initial period, @time1, or their maturity extended to @time2 if the option "
"is out of the money at @time1.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike1 is the strike price at which the option is struck.\n"
"@strike2 is the strike price at which the option is re-struck if out of the "
"money at @time1.\n"
"@time1 is the initial maturity of the option in years.\n"
"@time2 is the is the extended maturity in years if chosen.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1881
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_2_ASSET_CORRELATION\n"
"@SYNTAX=OPT_2_ASSET_CORRELATION(call_put_flag,spot1,spot2,strike1,strike2,"
"time,cost_of_carry1,cost_of_carry2,rate,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_2_ASSET_CORRELATION models the theoretical price of  "
"options on 2 assets with correlation @rho.\n"
"The payoff for a call is max(@spot2 - @strike2,0) if @spot1 > @strike1 or 0 "
"otherwise.\n"
"The payoff for a put is max (@strike2 - @spot2, 0) if @spot1 < @strike1 or 0 "
"otherwise.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot1 & @spot2 are the spot prices of the underlying assets.\n"
"@strike1 & @strike2 are the strike prices at which the option is struck.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the underlying "
"assets, for common stocks, this would be the dividend yield.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying assets.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1938
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_EURO_EXCHANGE\n"
"@SYNTAX=OPT_EURO_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
"cost_of_carry2,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_EURO_EXCHANGE models the theoretical price of a European "
"option to exchange one asset with quantity @qty2 and spot price @spot2 for "
"another, with quantity @qty1 and spot price @spot1.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the underlying "
"assets, for common stocks, this would be the dividend yield.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying assets.\n"
"@rho is the correlation between the two assets.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_AMER_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, "
"OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1985
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_AMER_EXCHANGE\n"
"@SYNTAX=OPT_AMER_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
"cost_of_carry2,volatility1, volatility2, rho)\n"
"@DESCRIPTION=OPT_AMER_EXCHANGE models the theoretical price of an American "
"option to exchange one asset with quantity @qty2 and spot price @spot2 for "
"another, with quantity @qty1 and spot price @spot1.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the underlying "
"assets, for common stocks, this would be the dividend yield.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying assets.\n"
"@rho is the correlation between the two assets.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_EURO_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, "
"OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2030
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_SPREAD_APPROX\n"
"@SYNTAX=OPT_SPREAD_APPROX(call_put_flag,fut_price1,fut_price2,strike,time, "
"rate,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_SPREAD_APPROX models the theoretical price of a European "
"option on the spread between two futures contracts.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@fut_price1 & @fut_price2 are the prices of the two futures contracts.\n"
"@strike is the strike price at which the option is struck \n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying futures contracts.\n"
"@rho is the correlation between the two futures contracts.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2092
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_FLOAT_STRK_LKBK\n"
"@SYNTAX=OPT_FLOAT_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,time,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_FLOAT_STRK_LKBK models the theoretical price of an option "
"where the holder of the option may exercise on expiry at the most favourable "
"price observed during the options life of the underlying asset.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@spot_min is the minimum spot price of the underlying asset so far "
"observed.\n"
"@spot_max is the maximum spot price of the underlying asset so far "
"observed.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2162
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_FIXED_STRK_LKBK\n"
"@SYNTAX=OPT_FIXED_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,strike,time,"
"rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_FIXED_STRK_LKBK models the theoretical price of an option "
"where the holder of the option may exercise on expiry at the most favourable "
"price observed during the options life of the underlying asset.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@spot_min is the minimum spot price of the underlying asset so far "
"observed.\n"
"@spot_max is the maximum spot price of the underlying asset so far "
"observed.\n"
"@strike is the strike prices at which the option is struck.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2252
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_BINOMIAL\n"
"@SYNTAX=OPT_BINOMIAL(amer_euro_flag,call_put_flag,num_time_steps, spot, "
"strike, time, rate, volatility, cost_of_carry)\n"
"@DESCRIPTION=OPT_ models the theoretical price of either an American or "
"European style option using a binomial tree.\n"
"@amer_euro_flag is either 'a' or 'e' to indicate whether the option being "
"valued is an American or European style option respectively.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@num_time_steps is the number of time steps used in the valuation, a greater "
"number of time steps yields greater accuracy however is slower to "
"calculate.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(Call_oder_Put,Kassapreis,Ausübungspreis,Laufzeit1,Laufzeit2,"
"Kurs,d,Volatilität)\n"
"@DESCRIPTION=OPT_RGW berechnet den theoretischen Preis einer Option nach der "
"Roll-Geske-Whaley-Näherung.\n"
"@Laufzeit1 ist die Zeit bis zur Auszahlung der Dividende\n"
"@Laufzeit2 die Zeit bis zum Verfall der Option\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/fn-complex/functions.c:80
msgid ""
"@FUNCTION=COMPLEX\n"
"@SYNTAX=COMPLEX(real,im[,suffix])\n"
"@DESCRIPTION=COMPLEX returns a complex number of the form x + yi.\n"
"\n"
"@real is the real and @im is the imaginary part of the complex number.  "
"@suffix is the suffix for the imaginary part.  If it is omitted, COMPLEX "
"uses 'i' by default.\n"
"\n"
"* If @suffix is neither 'i' nor 'j', COMPLEX returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COMPLEX(1,-1) equals 1-i.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KOMPLEX\n"
"@SYNTAX=KOMPLEX(Reel,Imaginär[,Suffix])\n"
"@DESCRIPTION=KOMPLEX liefert eine komplexe Zahl der Form x + yi.\n"
"\n"
"@Reel ist der reelle und @Imaginär der imaginäre Koeffizient der komplexen "
"Zahl. @Suffix ist der Suffix des imaginären Koeffizienten.\n"
"\n"
"* Falls @Suffix weder 'i' noch 'j' ist, liefert KOMPLEX einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"KOMPLEX(1,-1) liefert 1-i.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-complex/functions.c:122
msgid ""
"@FUNCTION=IMAGINARY\n"
"@SYNTAX=IMAGINARY(inumber)\n"
"@DESCRIPTION=IMAGINARY returns the imaginary part of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMAGINARY returns #VALUE! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMAGINARY(\"132-j\") equals -1.\n"
"\n"
"@SEEALSO=IMREAL"
msgstr ""
"@FUNCTION=IMAGINÄR\n"
"@SYNTAX=IMAGINÄR(iZahl)\n"
"@DESCRIPTION=IMAGINÄR liefert den imaginären Teil einer komplexen Zahl "
"@iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMAGINÄR einen "
"#WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMAGINÄR(\"132-j\") liefert -1.\n"
"\n"
"@SEEALSO=IMREEL"

#: ../plugins/fn-complex/functions.c:158
msgid ""
"@FUNCTION=IMABS\n"
"@SYNTAX=IMABS(inumber)\n"
"@DESCRIPTION=IMABS returns the absolute value of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMABS returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMABS(\"2-j\") equals 2.23606798.\n"
"\n"
"@SEEALSO=IMAGINARY,IMREAL"
msgstr ""
"@FUNCTION=IMABS\n"
"@SYNTAX=IMABS(iZahl)\n"
"@DESCRIPTION=IMABS liefert den absoluten Betrag einer komplexen Zahl "
"@iZahl.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMABS(\"2-j\") liefert 2,23606798.\n"
"\n"
"@SEEALSO=IMAGINÄR, IMREEL"

#: ../plugins/fn-complex/functions.c:191
msgid ""
"@FUNCTION=IMREAL\n"
"@SYNTAX=IMREAL(inumber)\n"
"@DESCRIPTION=IMREAL returns the real part of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMREAL returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"imreal(\"132-j\") equals 132.\n"
"\n"
"@SEEALSO=IMAGINARY"
msgstr ""
"@FUNCTION=IMREEL\n"
"@SYNTAX=IMREEL(iZahl)\n"
"@DESCRIPTION=IMREEL liefert den reellen Teil einer komplexen Zahl @iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMREEL einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMREEL(\"132-j\") liefert 132.\n"
"\n"
"@SEEALSO=IMAGINÄR"

#: ../plugins/fn-complex/functions.c:227
msgid ""
"@FUNCTION=IMCONJUGATE\n"
"@SYNTAX=IMCONJUGATE(inumber)\n"
"@DESCRIPTION=IMCONJUGATE returns the complex conjugate of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMCONJUGATE returns #VALUE! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMCONJUGATE(\"1-j\") equals 1+j.\n"
"\n"
"@SEEALSO=IMAGINARY,IMREAL"
msgstr ""
"@FUNCTION=IMKONJUGIERTE\n"
"@SYNTAX=IMKONJUGIERTE(iZahl)\n"
"@DESCRIPTION=IMKONJUGIERTE liefert das komplexe Konjugierte einer komplexen "
"Zahl @iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMKONJUGIERTE einen "
"#WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMKONJUGIERTE(\"1-j\") liefert 1+j.\n"
"\n"
"@SEEALSO=IMAGINÄR, IMREEL"

#: ../plugins/fn-complex/functions.c:261
#, fuzzy
msgid ""
"@FUNCTION=IMINV\n"
"@SYNTAX=IMINV(inumber)\n"
"@DESCRIPTION=IMINV returns the inverse, or reciprocal, of the complex number "
"z (@inumber), where\n"
"\n"
"\t1/z = (x - i y)/(x^2 + y^2).\n"
"\n"
"* If @inumber is not a valid complex number, IMINV returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMINV(\"1-j\") equals 0.5+0.5j.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=IMINV\n"
"@SYNTAX=IMINV(iZahl)\n"
"@DESCRIPTION=IMINV liefert die Inverse, oder Reziproke, einer komplexen Zahl "
"z (@iZahl), wobei\n"
"\n"
"\t1/z = (x - i y)/(x^2 + y^2).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMINV einen #WERT!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMINV(\"1-j\") liefert 0.5+0.5j.\n"
"\n"
"@SEEALSO="

# FIXME: check for mathematical correctness
#: ../plugins/fn-complex/functions.c:295
msgid ""
"@FUNCTION=IMNEG\n"
"@SYNTAX=IMNEG(inumber)\n"
"@DESCRIPTION=IMNEG returns the negative of the complex number z (@inumber), "
"where\n"
"\n"
"\t-z = (-x) + i(-y).\n"
"\n"
"* If @inumber is not a valid complex number, IMNEG returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMNEG(\"1-j\") equals -1+j.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=IMNEG\n"
"@SYNTAX=IMNEG(iZahl)\n"
"@DESCRIPTION=IMNEG liefert das negative einer komplexen Zahl z (@iZahl), "
"wobei\n"
"\n"
"\t-z = (-x) + i(-y).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMNEG einen #WERT!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMNEG(\"1-j\") liefert -1+j.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-complex/functions.c:329
msgid ""
"@FUNCTION=IMCOS\n"
"@SYNTAX=IMCOS(inumber)\n"
"@DESCRIPTION=IMCOS returns the cosine of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMCOS returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMCOS(\"1+j\") equals 0.833730-0.988898j.\n"
"\n"
"@SEEALSO=IMSIN,IMTAN"
msgstr ""
"@FUNCTION=IMCOS\n"
"@SYNTAX=IMCOS(iZahl)\n"
"@DESCRIPTION=IMCOS liefert den Cosinus einer komplexen Zahl @iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMCOS einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMCOS(\"1+j\") liefert 0.833730-0.988898j.\n"
"\n"
"@SEEALSO=IMSIN, IMTAN"

#: ../plugins/fn-complex/functions.c:363
msgid ""
"@FUNCTION=IMTAN\n"
"@SYNTAX=IMTAN(inumber)\n"
"@DESCRIPTION=IMTAN returns the tangent of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMTAN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMTAN(\"2-j\") equals -0.2434582-1.1667363j.\n"
"\n"
"@SEEALSO=IMSIN,IMCOS"
msgstr ""
"@FUNCTION=IMTAN\n"
"@SYNTAX=IMTAN(iZahl)\n"
"@DESCRIPTION=IMTAN liefert den Cosinus einer komplexen Zahl @iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMTAN einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMTAN(\"1+j\") liefert -0.2434582-1.1667363j.\n"
"\n"
"@SEEALSO=IMSIN, IMCOS"

#: ../plugins/fn-complex/functions.c:397
msgid ""
"@FUNCTION=IMSEC\n"
"@SYNTAX=IMSEC(inumber)\n"
"@DESCRIPTION=IMSEC returns the complex secant of the complex number z "
"(@inumber), where\n"
"\n"
"\tsec(z) = 1/cos(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMSEC returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMSEC(\"2-j\") equals -0.413149-0.687527j.\n"
"\n"
"@SEEALSO=IMCSC,IMCOT"
msgstr ""
"@FUNCTION=IMSEK\n"
"@SYNTAX=IMSEK(iZahl)\n"
"@DESCRIPTION=IMSEK liefert die komplexe Sekante einer komplexen Zahl z "
"(@iZahl), wobei\n"
"\n"
"\tsec(z) = 1/cos(z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMSEK einen #WERT!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMSEK(\"2-j\") liefert -0.413149-0.687527j.\n"
"\n"
"@SEEALSO=IMCOSEK,IMCOTAN"

#: ../plugins/fn-complex/functions.c:433
msgid ""
"@FUNCTION=IMCSC\n"
"@SYNTAX=IMCSC(inumber)\n"
"@DESCRIPTION=IMCSC returns the complex cosecant of the complex number z "
"(@inumber), where\n"
"\n"
"\tcsc(z) = 1/sin(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCSC returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCSC(\"2-j\") equals 0.635494-0.221501j.\n"
"\n"
"@SEEALSO=IMSEC,IMCOT"
msgstr ""
"@FUNCTION=IMKOSEK\n"
"@SYNTAX=IMKOSEK(iZahl)\n"
"@DESCRIPTION=IMKOSEK liefert die komplexe Kosekante einer komplexen Zahl z "
"(@iZahl), wobei\n"
"\n"
"\tcsc(z) = 1/sin(z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert #IMKOSEK einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMCSC(\"2-j\") liefert 0.635494-0.221501j.\n"
"\n"
"@SEEALSO=IMSEK,IMCOT"

#: ../plugins/fn-complex/functions.c:469
msgid ""
"@FUNCTION=IMCOT\n"
"@SYNTAX=IMCOT(inumber)\n"
"@DESCRIPTION=IMCOT returns the complex cotangent of the complex number z "
"(@inumber), where\n"
"\n"
"\tcot(z) = 1/tan(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCOT returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCOT(\"2-j\") equals -0.171384+0.821330j.\n"
"\n"
"@SEEALSO=IMSEC,IMCSC"
msgstr ""
"@FUNCTION=IMCOTAN\n"
"@SYNTAX=IMCOTAN(iZahl)\n"
"@DESCRIPTION=IMCOTAN liefert den komplexen Cotangens einer komplexen Zahl z "
"(@iZahl), wobei\n"
"\n"
"\tcot(z) = 1/tan(z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMCOTAN einen #WERT!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMCOTAN(\"2-j\") liefert -0.171384+0.821330j.\n"
"\n"
"@SEEALSO=IMSEK,IMCSEK"

# FIXME: check for mathematical correctness
#: ../plugins/fn-complex/functions.c:505
msgid ""
"@FUNCTION=IMEXP\n"
"@SYNTAX=IMEXP(inumber)\n"
"@DESCRIPTION=IMEXP returns the exponential of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMEXP returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMEXP(\"2-j\") equals 3.992324-6.217676j.\n"
"\n"
"@SEEALSO=IMLN"
msgstr ""
"@FUNCTION=IMEXP\n"
"@SYNTAX=IMEXP(iZahl)\n"
"@DESCRIPTION=IMEXP liefert das Exponential einer komplexen Zahl @iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMEXP einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMEXP(\"2-j\") liefert 3.992324-6.217676j.\n"
"\n"
"@SEEALSO=IMLN"

#: ../plugins/fn-complex/functions.c:539
msgid ""
"@FUNCTION=IMARGUMENT\n"
"@SYNTAX=IMARGUMENT(inumber)\n"
"@DESCRIPTION=IMARGUMENT returns the argument theta of a complex number, i.e. "
"the angle in radians from the real axis to the representation of the number "
"in polar coordinates.\n"
"\n"
"* If @inumber is not a valid complex number, IMARGUMENT returns #VALUE! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMARGUMENT(\"2-j\") equals -0.463647609.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=IMARGUMENT\n"
"@SYNTAX=IMARGUMENT(iZahl)\n"
"@DESCRIPTION=IMARGUMENT liefert das Argument Theta einer komplexen Zahl "
"@iZahl, also den Winkel im Gradmaß zwischen der reellen Achse und der "
"Darstellung der Zahl in Polarkoordinaten.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARGUMENT einen "
"#WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMARGUMENT(\"2-j\") liefert -0,463647609.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-complex/functions.c:574
msgid ""
"@FUNCTION=IMLN\n"
"@SYNTAX=IMLN(inumber)\n"
"@DESCRIPTION=IMLN returns the natural logarithm of a complex number.\n"
"\n"
"The result will have an imaginary part between -pi and +pi.  The natural "
"logarithm is not uniquely defined on complex numbers. You may need to add or "
"subtract an even multiple of pi to the imaginary part.\n"
"\n"
"* If @inumber is not a valid complex number, IMLN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMLN(\"3-j\") equals 1.15129-0.32175j.\n"
"\n"
"@SEEALSO=IMEXP,IMLOG2,IMLOG10"
msgstr ""
"@FUNCTION=IMLN\n"
"@SYNTAX=IMLN(iZahl)\n"
"@DESCRIPTION=IMLN liefert den natürlichen Logarithmus einer komplexen Zahl "
"@iZahl.\n"
"Das Ergebnis hat einen imaginären Teil zwischen - und + PI. Der natürliche "
"Logarithmus ist für komplexe Zahlen nicht eindeutig definiert. "
"Möglicherweise müssen Sie eine gerade Vielfache von PI vom imaginären Teil "
"abziehen.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMLN einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMLN(\"3-j\") liefert 1.15129-0.32175j.\n"
"\n"
"@SEEALSO=IMEXP, IMLOG2, IMLOG10"

#: ../plugins/fn-complex/functions.c:613
msgid ""
"@FUNCTION=IMLOG2\n"
"@SYNTAX=IMLOG2(inumber)\n"
"@DESCRIPTION=IMLOG2 returns the logarithm of a complex number in base 2.\n"
"\n"
"* If @inumber is not a valid complex number, IMLOG2 returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMLOG2(\"3-j\") equals 1.66096-0.46419j.\n"
"\n"
"@SEEALSO=IMLN,IMLOG10"
msgstr ""
"@FUNCTION=IMLOG2\n"
"@SYNTAX=IMLOG2(iZahl)\n"
"@DESCRIPTION=IMLOG2 liefert den Logarithmus einer komplexen Zahl @iZahl zur "
"Basis 2.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMLOG2 einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMLOG2(\"3-j\") liefert 1.66096-0.46419j.\n"
"\n"
"@SEEALSO=IMLÄNGE, IMLOG2"

#: ../plugins/fn-complex/functions.c:648
msgid ""
"@FUNCTION=IMLOG10\n"
"@SYNTAX=IMLOG10(inumber)\n"
"@DESCRIPTION=IMLOG10 returns the logarithm of a complex number in base 10.\n"
"\n"
"* If @inumber is not a valid complex number, IMLOG10 returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMLOG10(\"3-j\") equals 0.5-0.13973j.\n"
"\n"
"@SEEALSO=IMLN,IMLOG2"
msgstr ""
"@FUNCTION=IMLOG10\n"
"@SYNTAX=IMLOG10(iZahl)\n"
"@DESCRIPTION=IMLOG10 liefert den Logarithmus einer komplexen Zahl @iZahl zur "
"Basis 10.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMLOG10 einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMLOG10(\"3-j\") liefert 0.5-0.13973.\n"
"\n"
"@SEEALSO=IMLÄNGE, IMLOG2"

#: ../plugins/fn-complex/functions.c:683
msgid ""
"@FUNCTION=IMPOWER\n"
"@SYNTAX=IMPOWER(inumber1,inumber2)\n"
"@DESCRIPTION=IMPOWER returns a complex number raised to a power.  @inumber1 "
"is the complex number to be raised to a power and @inumber2 is the power to "
"which you want to raise it.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMPOWER returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMPOWER(\"4-j\",2) equals 15-8j.\n"
"\n"
"@SEEALSO=IMSQRT"
msgstr ""
"@FUNCTION=IMPOTENZ\n"
"@SYNTAX=IMPOTENZ(iZahl1,iZahl2)\n"
"@DESCRIPTION=IMPOTENZ liefert eine komplexe Zahl @iZahl1, potenziert mit "
"einer anderen Zahl @iZahl2.\n"
"@iZahl1 ist die komplexe, zu potenzierende Zahl und @iZahl2 ist die Zahl, "
"mit der sie potenziert werden soll.\n"
"\n"
"* Falls @iZahl1 oder @iZahl2 keine gültige komplexe Zahl ist, liefert "
"IMPOTENZ einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMPOTENZ(\"4-j\",2) liefert 15-8j.\n"
"\n"
"@SEEALSO=IMWURZEL"

#: ../plugins/fn-complex/functions.c:725
msgid ""
"@FUNCTION=IMDIV\n"
"@SYNTAX=IMDIV(inumber1,inumber2)\n"
"@DESCRIPTION=IMDIV returns the quotient of two complex numbers.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMDIV returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMDIV(\"2-j\",\"2+j\") equals 0.6-0.8j.\n"
"\n"
"@SEEALSO=IMPRODUCT"
msgstr ""
"@FUNCTION=IMDIV\n"
"@SYNTAX=IMDIV(iZahl1,iZahl2)\n"
"@DESCRIPTION=IMDIV liefert den Quotienten zweier komplexer Zahlen @iZahl1 "
"und @iZahl2.\n"
"\n"
"* Falls @iZahl1 oder @iZahl2 keine gültige komplexen Zahlen ist, liefert "
"IMDIV einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMDIV(\"3-j\",\"2+j\") liefert 0.6-0.8j.\n"
"\n"
"@SEEALSO=IMPRODUKT"

#: ../plugins/fn-complex/functions.c:765
msgid ""
"@FUNCTION=IMSIN\n"
"@SYNTAX=IMSIN(inumber)\n"
"@DESCRIPTION=IMSIN returns the sine of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMSIN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSIN(\"1+j\") equals 1.29846+0.63496j.\n"
"\n"
"@SEEALSO=IMCOS,IMTAN"
msgstr ""
"@FUNCTION=IMSIN\n"
"@SYNTAX=IMSIN(iZahl)\n"
"@DESCRIPTION=IMSIN liefert den Sinus einer komplexen Zahl @iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMSIN einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMSIN(\"1+j\") liefert 1.29846+0.63496j.\n"
"\n"
"@SEEALSO=IMCOS, IMTAN"

#: ../plugins/fn-complex/functions.c:798
msgid ""
"@FUNCTION=IMSINH\n"
"@SYNTAX=IMSINH(inumber)\n"
"@DESCRIPTION=IMSINH returns the complex hyperbolic sine of the complex "
"number z (@inumber), where\n"
"\n"
"\tsinh(z) = (exp(z) - exp(-z))/2.\n"
"\n"
"* If @inumber is not a valid complex number, IMSINH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMSINH(\"1+j\") equals 0.63496+1.29846j.\n"
"\n"
"@SEEALSO=IMCOSH,IMTANH"
msgstr ""
"@FUNCTION=IMSINHYP\n"
"@SYNTAX=IMSINHYP(iZahl)\n"
"@DESCRIPTION=IMSINHYP liefert den komplexen hyperbolischen Sinus einer "
"komplexen Zahl z (@iZahl), wobei\n"
"\n"
"\tsinh(z) = (exp(z) - exp(-z))/2.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMSINHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMSINHYP(\"1+j\") liefert 0.63496+1.29846j.\n"
"\n"
"@SEEALSO=IMCOSHYP,IMTANHYP"

#: ../plugins/fn-complex/functions.c:833
msgid ""
"@FUNCTION=IMCOSH\n"
"@SYNTAX=IMCOSH(inumber)\n"
"@DESCRIPTION=IMCOSH returns the complex hyperbolic cosine of the complex "
"number z (@inumber), where\n"
"\n"
"\tcosh(z) = (exp(z) + exp(-z))/2.\n"
"\n"
"* If @inumber is not a valid complex number, IMCOSH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCOSH(\"1+j\") equals 0.83373+0.988898j.\n"
"\n"
"@SEEALSO=IMSINH,IMTANH"
msgstr ""
"@FUNCTION=IMCOSHYP\n"
"@SYNTAX=IMCOSHYP(iZahl)\n"
"@DESCRIPTION=IMCOSHYP liefert den komplexen hyperbolischen Cosinus einer "
"komplexen Zahl @iZahl, wobei\n"
"\n"
"\t(EXP(@iZahl) + EXP(-@iZahl)) / 2.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMCOSHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMCOSHYP(\"1+j\") liefert 0.833733+0.88898j.\n"
"\n"
"@SEEALSO=IMSINHYP, IMTANHYP"

#: ../plugins/fn-complex/functions.c:867
msgid ""
"@FUNCTION=IMTANH\n"
"@SYNTAX=IMTANH(inumber)\n"
"@DESCRIPTION=IMTANH returns the complex hyperbolic tangent of the complex "
"number z (@inumber), where\n"
"\n"
"\ttanh(z) = sinh(z)/cosh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMTANH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMTANH(\"1+j\") equals 1.083923+0.2717526j.\n"
"\n"
"@SEEALSO=IMSINH,IMCOSH"
msgstr ""
"@FUNCTION=IMTANHYP\n"
"@SYNTAX=IMTANHYP(iZahl)\n"
"@DESCRIPTION=IMTANHYP liefert den komplexen hyperbolischen Tangens einer "
"komplexen Zahl @iZahl, wobei\n"
"\n"
"\tIMSINHYP(@iZahl) + IMCOSHYP(@iZahl).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMTANHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMTANHYP(\"1+j\") liefert 1.083924+0.2717526j.\n"
"\n"
"@SEEALSO=IMSINHYP, IMCOSHYP"

#: ../plugins/fn-complex/functions.c:901
msgid ""
"@FUNCTION=IMSECH\n"
"@SYNTAX=IMSECH(inumber)\n"
"@DESCRIPTION=IMSECH returns the complex hyperbolic secant of the complex "
"number z (@inumber), where\n"
"\n"
"\tsech(z) = 1/cosh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMSECH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMSECH(\"1+j\") equals 0.498337-0.5910838j.\n"
"\n"
"@SEEALSO=IMCSCH,IMCOTH"
msgstr ""
"@FUNCTION=IMSEKHYP\n"
"@SYNTAX=IMSEKHYP(iZahl)\n"
"@DESCRIPTION=IMSEKHYP liefert die komplexe hyperbolische Sekante einer "
"komplexen Zahl z (@iZahl), wobei\n"
"\n"
"\tsech(z) = 1/cosh(z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMSEKHYP einen #WERT-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMSEKHYP(\"1+j\") liefert 0.498337-0.5910838j.\n"
"\n"
"@SEEALSO=IMKOSEKHYP,IMCOTHYP"

#: ../plugins/fn-complex/functions.c:935
msgid ""
"@FUNCTION=IMCSCH\n"
"@SYNTAX=IMCSCH(inumber)\n"
"@DESCRIPTION=IMCSCH returns the complex hyperbolic cosecant of the complex "
"number z (@inumber), where\n"
"\n"
"\tcsch(z) = 1/sinh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCSCH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCSCH(\"1+j\") equals 0.303931-0.621518j.\n"
"\n"
"@SEEALSO=IMSECH,IMCOTH"
msgstr ""
"@FUNCTION=IMKOSEKHYP\n"
"@SYNTAX=IMKOSEKHYP(iZahl)\n"
"@DESCRIPTION=IMKOSEKHYP liefert die komplexe hyperbolische Kosekante einer "
"komplexen Zahl z (@iZahl), wobei\n"
"\n"
"\tcsch(z) = 1/sinh(z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMKOSEKHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMKOSEKHYP(\"1+j\") liefert 0.303931-0.621518j.\n"
"\n"
"@SEEALSO=IMSEKHYP,IMCOTHYP"

#: ../plugins/fn-complex/functions.c:969
msgid ""
"@FUNCTION=IMCOTH\n"
"@SYNTAX=IMCOTH(inumber)\n"
"@DESCRIPTION=IMCOTH returns the complex hyperbolic cotangent of the complex "
"number z (@inumber) where,\n"
"\n"
"\tcoth(z) = 1/tanh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCOTH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCOTH(\"1+j\") equals 0.868014-0.217622j.\n"
"\n"
"@SEEALSO=IMSECH,IMCSCH"
msgstr ""
"@FUNCTION=IMCOTANHYP\n"
"@SYNTAX=IMCOTANHYP(iZahl)\n"
"@DESCRIPTION=IMCOTANHYP liefert den komplexen hyperbolischen Cotangens einer "
"komplexen Zahl z (@iZahl), wobei\n"
"\n"
"\tcoth(z) = 1/tanh(z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMCOTANHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMCOTH(\"1+j\") liefert 0.868014-0.217622j.\n"
"\n"
"@SEEALSO=IMSEKHYP"

#: ../plugins/fn-complex/functions.c:1003
msgid ""
"@FUNCTION=IMARCSIN\n"
"@SYNTAX=IMARCSIN(inumber)\n"
"@DESCRIPTION=IMARCSIN returns the complex arcsine of the complex number "
"@inumber. The branch cuts are on the real axis, less than -1 and greater "
"than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSIN returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSIN(\"1+j\") equals 0.6662394+1.061275j.\n"
"\n"
"@SEEALSO=IMARCCOS,IMARCTAN"
msgstr ""
"@FUNCTION=IMARCSIN\n"
"@SYNTAX=IMARCSIN(iZahl)\n"
"@DESCRIPTION=IMARCSIN liefert den komplexen Arcus Sinus einer komplexen Zahl "
"@iZahl. Die Branch-Cuts liegen auf der reellen Achse, unterhalb von -1 und "
"oberhalb von 1.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCSIN einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSIN(\"1+j\") liefert 0.6662394+1.061275j.\n"
"\n"
"@SEEALSO=IMARCCOS,IMARCTAN"

#: ../plugins/fn-complex/functions.c:1038
msgid ""
"@FUNCTION=IMARCCOS\n"
"@SYNTAX=IMARCCOS(inumber)\n"
"@DESCRIPTION=IMARCCOS returns the complex arccosine of the complex number "
"@inumber. The branch cuts are on the real axis, less than -1 and greater "
"than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOS returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOS(\"1+j\") equals 0.9045569-1.061275j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCTAN"
msgstr ""
"@FUNCTION=IMARCCOS\n"
"@SYNTAX=IMARCCOS(iZahl)\n"
"@DESCRIPTION=IMARCCOS liefert den komplexen Arcus Cosinus einer komplexen "
"Zahl @iZahl. Die Branch-Cuts liegen auf der reellen Achse, unterhalb von -1 "
"und oberhalb von 1.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCCOS einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOS(\"1+j\") liefert 0.6662394+1.061275j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCTAN"

#: ../plugins/fn-complex/functions.c:1073
msgid ""
"@FUNCTION=IMARCTAN\n"
"@SYNTAX=IMARCTAN(inumber)\n"
"@DESCRIPTION=IMARCTAN returns the complex arctangent of the complex number "
"@inumber. The branch cuts are on the imaginary axis, below -i and above i.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCTAN returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCTAN(\"1+j\") equals 1.0172220+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCCOS"
msgstr ""
"@FUNCTION=IMARCTAN\n"
"@SYNTAX=IMARCTAN(iZahl)\n"
"@DESCRIPTION=IMARCTAN liefert den komplexen Arcus Tangens einer komplexen "
"Zahl @iZahl. Die Branch-Cuts liegen auf der imaginären Achse, unterhalb von -"
"i und oberhalb von i.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCTAN einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCTAN(\"1+j\") liefert 1.0172220+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCCOS"

#: ../plugins/fn-complex/functions.c:1108
msgid ""
"@FUNCTION=IMARCSEC\n"
"@SYNTAX=IMARCSEC(inumber)\n"
"@DESCRIPTION=IMARCSEC returns the complex arcsecant of the complex number z "
"(@inumber), where\n"
"\n"
"\tarcsec(z) = arccos(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSEC returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSEC(\"1+j\") equals 1.1185179+0.5306375j.\n"
"\n"
"@SEEALSO=IMARCCSC,IMARCCOT"
msgstr ""
"@FUNCTION=IMARCSEK\n"
"@SYNTAX=IMARCSEK(iZahl)\n"
"@DESCRIPTION=IMARCSEK liefert die komplexe Arcus Sekante einer komplexen "
"Zahl z (@iZahl), wobei\n"
"\n"
"\tarcsek(z) = arccos(1/z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCSEK einen #WERT-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSEK(\"1+j\") liefert 1.1185179+0.5306375j.\n"
"\n"
"@SEEALSO=IMARCKOSEK,IMARCCOT"

#: ../plugins/fn-complex/functions.c:1142
msgid ""
"@FUNCTION=IMARCCSC\n"
"@SYNTAX=IMARCCSC(inumber)\n"
"@DESCRIPTION=IMARCCSC returns the complex arccosecant of the complex number "
"z (@inumber), where\n"
"\n"
"\tarccsc(z) = arcsin(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCSC returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCSC(\"1+j\") equals 0.45227845-0.5306375j.\n"
"\n"
"@SEEALSO=IMARCSEC,IMARCCOT"
msgstr ""
"@FUNCTION=IMARCKOSEK\n"
"@SYNTAX=IMARCKOSEK(iZahl)\n"
"@DESCRIPTION=IMARCKOSEK liefert die komplexe Arcus Kosekante einer komplexen "
"Zahl z (@iZahl), wobei\n"
"\n"
"\tarccsc(z) = arcsin(1/z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCKOSEK einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCSC(\"1+j\") liefert 0.45227845-0.5306375j.\n"
"\n"
"@SEEALSO=IMARCSEK,IMARCCOT"

#: ../plugins/fn-complex/functions.c:1176
msgid ""
"@FUNCTION=IMARCCOT\n"
"@SYNTAX=IMARCCOT(inumber)\n"
"@DESCRIPTION=IMARCCOT returns the complex arccotangent of the complex number "
"z (@inumber), where\n"
"\n"
"\tarccot(z) = arctan(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOT returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOT(\"1+j\") equals 0.553574+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSEC,IMARCCSC"
msgstr ""
"@FUNCTION=IMARCCOTAN\n"
"@SYNTAX=IMARCCOTAN(iZahl)\n"
"@DESCRIPTION=IMARCCOTAN liefert den komplexen Arcus Cotangens einer "
"komplexen Zahl z (@iZahl), wobei\n"
"\n"
"\tarccot(z) = arctan(1/z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCCOTAN einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOTAN(\"1+j\") liefert 0.553574+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSEK,IMARCKOSEK"

#: ../plugins/fn-complex/functions.c:1210
msgid ""
"@FUNCTION=IMARCSINH\n"
"@SYNTAX=IMARCSINH(inumber)\n"
"@DESCRIPTION=IMARCSINH returns the complex hyperbolic arcsine of the complex "
"number @inumber. The branch cuts are on the imaginary axis, below -i and "
"above i.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSINH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSINH(\"1+j\") equals 1.061275+0.6662394j.\n"
"\n"
"@SEEALSO=IMARCCOSH,IMARCTANH"
msgstr ""
"@FUNCTION=IMARCSINHYP\n"
"@SYNTAX=IMARCSINHYP(iZahl)\n"
"@DESCRIPTION=IMARCSINHYP liefert den komplexen hyperbolischen Arcus Sinus "
"einer komplexen Zahl @iZahl. Die Branch-Cuts liegen auf der imaginären "
"Achse, unterhalb von -i und oberhalb von i.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCSINHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSINHYP(\"1+j\") liefert 1.061275+06662394j.\n"
"\n"
"@SEEALSO=IMARCCOSINHYP,IMARCTANHYP"

#: ../plugins/fn-complex/functions.c:1245
msgid ""
"@FUNCTION=IMARCCOSH\n"
"@SYNTAX=IMARCCOSH(inumber)\n"
"@DESCRIPTION=IMARCCOSH returns the complex hyperbolic arccosine of the "
"complex number @inumber. The branch cut is on the real axis, less than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOSH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOSH(\"1+j\") equals 1.06127506+0.904557j.\n"
"\n"
"@SEEALSO=IMARCSINH,IMARCTANH"
msgstr ""
"@FUNCTION=IMARCCOSINHYP\n"
"@SYNTAX=IMARCCOSINHYP(iZahl)\n"
"@DESCRIPTION=IMARCCOSINHYP liefert den komplexen hyperbolischen Arcus "
"Cosinus einer komplexen Zahl @iZahl. Der Branch-Cut liegt auf der reellen "
"Achse, kleiner 1.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCCOSINHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOSINHYP(\"1+j\") liefert 1.06127506+0.904557j.\n"
"\n"
"@SEEALSO=IMARCSINHYP,IMARCTANHYP"

#: ../plugins/fn-complex/functions.c:1280
msgid ""
"@FUNCTION=IMARCTANH\n"
"@SYNTAX=IMARCTANH(inumber)\n"
"@DESCRIPTION=IMARCTANH returns the complex hyperbolic arctangent of the "
"complex number @inumber. The branch cuts are on the real axis, less than -1 "
"and greater than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCTANH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCTANH(\"1+j\") equals 0.4023595+1.0172220j.\n"
"\n"
"@SEEALSO=IMARCSINH,IMARCCOSH"
msgstr ""
"@FUNCTION=IMARCTANHYP\n"
"@SYNTAX=IMARCTANHYP(iZahl)\n"
"@DESCRIPTION=IMARCTANHYP liefert den hyperbolischen Arcus Tangens einer "
"komplexen Zahl @iZahl. Die Branch-Cuts liegen auf der reellen Achse, "
"unterhalb von -1 und oberhalb von 1.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCTANHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCTANHYP(\"1+j\") liefert 0.4023595+1.0172220j.\n"
"\n"
"@SEEALSO=IMARCSINHYP,IMARCCOSHYP"

#: ../plugins/fn-complex/functions.c:1315
msgid ""
"@FUNCTION=IMARCSECH\n"
"@SYNTAX=IMARCSECH(inumber)\n"
"@DESCRIPTION=IMARCSECH returns the complex hyperbolic arcsecant of the "
"complex number z (@inumber), where\n"
"\n"
"\tarcsech(z) = arccosh(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSECH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSECH(\"1+j\") equals 0.5306375-1.118518j.\n"
"\n"
"@SEEALSO=IMARCCSCH,IMARCCOTH"
msgstr ""
"@FUNCTION=IMARCSEKHYP\n"
"@SYNTAX=IMARCSEKHYP(iZahl)\n"
"@DESCRIPTION=IMARCSEKHYP liefert die komplexe hyperbolische Arcus Sekante "
"einer komplexen Zahl z (@iZahl), wobei\n"
"\n"
"\tarcsech(z) = arccosh(1/z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCSEKHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSEKHYP(\"1+j\") liefert 0.5306375-1.118518j.\n"
"\n"
"@SEEALSO=IMARCKOSEKHYP,IMARCCOTHYP"

#: ../plugins/fn-complex/functions.c:1350
msgid ""
"@FUNCTION=IMARCCSCH\n"
"@SYNTAX=IMARCCSCH(inumber)\n"
"@DESCRIPTION=IMARCCSCH returns the complex hyperbolic arccosecant of the "
"complex number z (@inumber), where\n"
"\n"
"\tarccsch(z) = arcsinh(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCSCH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCSCH(\"1+j\") equals 0.5306375-0.452278j.\n"
"\n"
"@SEEALSO=IMARCSECH,IMARCCOTH"
msgstr ""
"@FUNCTION=IMARCKOSEKHYP\n"
"@SYNTAX=IMARCKOSEKHYP(iZahl)\n"
"@DESCRIPTION=IMARCKOSEKHYP liefert die komplexe hyperbolische Arcus "
"Kosekante einer komplexen Zahl z (@iZahl), wobei\n"
"\n"
"\tarccsch(z) = arcsin(1/z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCKOSEKHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCKOSEKHYP(\"1+j\") liefert 0.5306375-0.452278j.\n"
"\n"
"@SEEALSO=IMARCSEKHYP,IMARCCOTHYP"

#: ../plugins/fn-complex/functions.c:1384
msgid ""
"@FUNCTION=IMARCCOTH\n"
"@SYNTAX=IMARCCOTH(inumber)\n"
"@DESCRIPTION=IMARCCOTH returns the complex hyperbolic arccotangent of the "
"complex number z (@inumber), where\n"
"\n"
"\tarccoth(z) = arctanh(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOTH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOTH(\"1+j\") equals 0.40235948-0.5535744j.\n"
"\n"
"@SEEALSO=IMARCSECH,IMARCCSCH"
msgstr ""
"@FUNCTION=IMARCCOTHYP\n"
"@SYNTAX=IMARCCOTHYP(iZahl)\n"
"@DESCRIPTION=IMARCCOTHYP liefert den komplexen hyperbolischen Arcus Tangens "
"der Zahl z (@iZahl), wobei\n"
"\n"
"\tarccoth(z) = arctanh(1/z).\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMARCCOTHYP einen "
"#WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOTHYP(\"1+j\") liefert 0.40235948-0.5535744j.\n"
"\n"
"@SEEALSO=IMARCSEKHYP,IMARCKOSEKHYP"

#: ../plugins/fn-complex/functions.c:1419
msgid ""
"@FUNCTION=IMSQRT\n"
"@SYNTAX=IMSQRT(inumber)\n"
"@DESCRIPTION=IMSQRT returns the square root of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMSQRT returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSQRT(\"1+j\") equals 1.09868+0.4550899j.\n"
"\n"
"@SEEALSO=IMPOWER"
msgstr ""
"@FUNCTION=IMWURZEL\n"
"@SYNTAX=IMWURZEL(iZahl)\n"
"@DESCRIPTION=IMWURZEL liefert die Quadratwurzel einer komplexen Zahl "
"@iZahl.\n"
"\n"
"* Falls @iZahl keine gültige komplexe Zahl ist, liefert IMWURZEL einen "
"#WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMWURZEL(\"1+j\") liefert 1.09868+0.4550899j.\n"
"\n"
"@SEEALSO=IMPOTENZ"

#: ../plugins/fn-complex/functions.c:1453
msgid ""
"@FUNCTION=IMSUB\n"
"@SYNTAX=IMSUB(inumber1,inumber2)\n"
"@DESCRIPTION=IMSUB returns the difference of two complex numbers.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMSUB returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSUB(\"3-j\",\"2+j\") equals 1-2j.\n"
"\n"
"@SEEALSO=IMSUM"
msgstr ""
"@FUNCTION=IMDIFFERENZ\n"
"@SYNTAX=IMDIFFERENZ(iZahl1,iZahl2)\n"
"@DESCRIPTION=IMDIFFERENZ liefert die Differenz zweier komplexer Zahlen "
"@iZahl1 und @iZahl2.\n"
"\n"
"* Falls @iZahl1 oder @iZahl2 keine komplexe Zahl ist, liefert IMDIFFERENZ "
"einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMDIFFERENZ(\"3-j\",\"2+j\") liefert 1-2j.\n"
"\n"
"@SEEALSO=IMSUMME"

#: ../plugins/fn-complex/functions.c:1490
msgid ""
"@FUNCTION=IMPRODUCT\n"
"@SYNTAX=IMPRODUCT(inumber1[,inumber2,...])\n"
"@DESCRIPTION=IMPRODUCT returns the product of given complex numbers.\n"
"\n"
"* If any of the @inumbers are not valid complex numbers, IMPRODUCT returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMPRODUCT(\"2-j\",\"4-2j\") equals 6-8j.\n"
"\n"
"@SEEALSO=IMDIV"
msgstr ""
"@FUNCTION=IMPRODUKT\n"
"@SYNTAX=IMPRODUKT(iZahl1[,iZahl2,...])\n"
"@DESCRIPTION=IMPRODUKT liefert das Produkt der angegebenen komplexen "
"Zahlen.\n"
"\n"
"* Falls eine @iZahl keine gültige komplexe Zahl ist, liefert IMPRODUKT einen "
"#WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMPRODUKT(\"2-j\",\"4-2j\") liefert 6-8j.\n"
"\n"
"@SEEALSO=IMDIV"

#: ../plugins/fn-complex/functions.c:1567
msgid ""
"@FUNCTION=IMSUM\n"
"@SYNTAX=IMSUM(inumber1,inumber2)\n"
"@DESCRIPTION=IMSUM returns the sum of two complex numbers.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMSUM returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSUM(\"2-4j\",\"9-j\") equals 11-5j.\n"
"\n"
"@SEEALSO=IMSUB"
msgstr ""
"@FUNCTION=IMSUMME\n"
"@SYNTAX=IMSUMME(iZahl1,iZahl2)\n"
"@DESCRIPTION=IMSUMME liefert die Summe zweier komplexer Zahlen @iZahl1 und "
"@iZahl2.\n"
"\n"
"* Falls @iZahl1 oder @iZahl2 keine komplexe Zahl ist, liefert IMSUMME einen "
"#WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IMSUMME(\"2-4j\",\"9-j\") liefert 11-5j.\n"
"\n"
"@SEEALSO=IMSUB"

#: ../plugins/fn-database/functions.c:269
msgid ""
"@FUNCTION=DAVERAGE\n"
"@SYNTAX=DAVERAGE(database,field,criteria)\n"
"@DESCRIPTION=DAVERAGE function returns the average of the values in a list "
"or database that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DAVERAGE(A1:C7, \"Salary\", A9:A11) equals 42296.3333.\n"
"DAVERAGE(A1:C7, \"Age\", A9:A11) equals 39.\n"
"DAVERAGE(A1:C7, \"Salary\", A9:B11) equals 40782.5.\n"
"DAVERAGE(A1:C7, \"Age\", A9:B11) equals 36.\n"
"\n"
"@SEEALSO=DCOUNT"
msgstr ""
"@FUNCTION=DBMITTELWERT\n"
"@SYNTAX=DBMITTELWERT(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBMITTELWERT liefert den Mittelwert der Werte in einer Liste "
"oder Datenbank, die den angegebenen Kriterien entsprechen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBMITTELWERT(A1:C7, \"Gehalt\", A9:A11) liefert 42296.3333.\n"
"DBMITTELWERT(A1:C7, \"Alter\", A9:A11) liefert 39.\n"
"DBMITTELWERT(A1:C7, \"Gehalt\", A9:B11) liefert 40782.5.\n"
"DBMITTELWERT(A1:C7, \"Alter\", A9:B11) liefert 36.\n"
"\n"
"@SEEALSO=DBANZAHL"

#: ../plugins/fn-database/functions.c:346
msgid ""
"@FUNCTION=DCOUNT\n"
"@SYNTAX=DCOUNT(database,field,criteria)\n"
"@DESCRIPTION=DCOUNT function counts the cells that contain numbers in a "
"database that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DCOUNT(A1:C7, \"Salary\", A9:A11) equals 3.\n"
"DCOUNT(A1:C7, \"Salary\", A9:B11) equals 2.\n"
"DCOUNT(A1:C7, \"Name\", A9:B11) equals 0.\n"
"\n"
"@SEEALSO=DAVERAGE"
msgstr ""
"@FUNCTION=DBANZAHL\n"
"@SYNTAX=DBANZAHL(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBANZAHL zählt die Zellen in einer Datenbank, die Zahlen "
"enthalten, die den angegebenen Kriterien entsprechen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBANZAHL(A1:C7, \"Gehalt\", A9:A11) liefert 3.\n"
"DBANZAHL(A1:C7, \"Gehalt\", A9:B11) liefert 2.\n"
"DBANZAHL(A1:C7, \"Name\", A9:B11) liefert 0.\n"
"\n"
"@SEEALSO=DBMITTELWERT"

#: ../plugins/fn-database/functions.c:422
msgid ""
"@FUNCTION=DCOUNTA\n"
"@SYNTAX=DCOUNTA(database,field,criteria)\n"
"@DESCRIPTION=DCOUNTA function counts the cells that contain data in a "
"database that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DCOUNTA(A1:C7, \"Salary\", A9:A11) equals 3.\n"
"DCOUNTA(A1:C7, \"Salary\", A9:B11) equals 2.\n"
"DCOUNTA(A1:C7, \"Name\", A9:B11) equals 2.\n"
"\n"
"@SEEALSO=DCOUNT"
msgstr ""
"@FUNCTION=DBANZAHL2\n"
"@SYNTAX=DBANZAHL2(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBANZAHL2 zählt die Zellen in einer Datenbank, die Daten "
"enthalten, die den angegebenen Kriterien entsprechen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBANZAHL2(A1:C7, \"Gehalt\", A9:A11) liefert 3.\n"
"DBANZAHL2(A1:C7, \"Gehalt\", A9:B11) liefert 2.\n"
"DBANZAHL2(A1:C7, \"Name\", A9:B11) liefert 2.\n"
"\n"
"@SEEALSO=DBANZAHL"

#: ../plugins/fn-database/functions.c:496
msgid ""
"@FUNCTION=DGET\n"
"@SYNTAX=DGET(database,field,criteria)\n"
"@DESCRIPTION=DGET function returns a single value from a column that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"* If none of the items match the conditions, DGET returns #VALUE! error.\n"
"* If more than one items match the conditions, DGET returns #NUM! error.\n"
"\n"
"DGET(A1:C7, \"Salary\", A9:A10) equals 34323.\n"
"DGET(A1:C7, \"Name\", A9:A10) equals \"Clark\".\n"
"\n"
"@SEEALSO=DCOUNT"
msgstr ""
"@FUNCTION=DBAUSZUG\n"
"@SYNTAX=DBAUSZUG(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBAUSZUG liefert einen einzelnen Wert aus einer Spalte, der den "
"angegebenen Kriterien entspricht.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"\n"
"* Falls keiner der Posten die Bedingungen erfüllt, liefert DBAUSZUG einen "
"#WERT!-Fehler.\n"
"* Erfüllt mehr als ein Posten die Bedingungen, liefert DBAUSZUG einen #ZAHL!-"
"Fehler\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBAUSZUG(A1:C7, \"Gehalt\", A9:A10) liefert 34323.\n"
"DBAUSZUG(A1:C7, \"Name\", A9:A10) liefert \"Clark\".\n"
"\n"
"@SEEALSO=DBANZAHL"

#: ../plugins/fn-database/functions.c:582
msgid ""
"@FUNCTION=DMAX\n"
"@SYNTAX=DMAX(database,field,criteria)\n"
"@DESCRIPTION=DMAX function returns the largest number in a column that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DMAX(A1:C7, \"Salary\", A9:A11) equals 47242.\n"
"DMAX(A1:C7, \"Age\", A9:A11) equals 45.\n"
"DMAX(A1:C7, \"Age\", A9:B11) equals 43.\n"
"\n"
"@SEEALSO=DMIN"
msgstr ""
"@FUNCTION=DBMAX\n"
"@SYNTAX=DBMAX(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBMAX liefert die größte Zahl in einer Spalte, die den "
"angegebenen Kriterien entspricht.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBMAX(A1:C7, \"Gehalt\", A9:A11) liefert 47242.\n"
"DBMAX(A1:C7, \"Alter\", A9:A11) liefert 45.\n"
"DBMAX(A1:C7, \"Alter\", A9:B11) liefert 43.\n"
"\n"
"@SEEALSO=DBMIN"

#: ../plugins/fn-database/functions.c:660
msgid ""
"@FUNCTION=DMIN\n"
"@SYNTAX=DMIN(database,field,criteria)\n"
"@DESCRIPTION=DMIN function returns the smallest number in a column that "
"match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DMIN(A1:C7, \"Salary\", A9:B11) equals 34323.\n"
"DMIN(A1:C7, \"Age\", A9:B11) equals 29.\n"
"\n"
"@SEEALSO=DMAX"
msgstr ""
"@FUNCTION=DBMIN\n"
"@SYNTAX=DBMIN(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBMIN liefert die kleinste Zahl in einer Spalte, die den "
"angegebenen Kriterien entspricht.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBMIN(A1:C7, \"Gehalt\", A9:B11) liefert 34323.\n"
"DBMIN(A1:C7, \"Alter\", A9:B11) liefert 29.\n"
"\n"
"@SEEALSO=DBMAX"

#: ../plugins/fn-database/functions.c:735
msgid ""
"@FUNCTION=DPRODUCT\n"
"@SYNTAX=DPRODUCT(database,field,criteria)\n"
"@DESCRIPTION=DPRODUCT function returns the product of numbers in a column "
"that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DPRODUCT(A1:C7, \"Age\", A9:B11) equals 1247.\n"
"\n"
"@SEEALSO=DSUM"
msgstr ""
"@FUNCTION=DBPRODUKT\n"
"@SYNTAX=DBPRODUKT(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBPRODUKT liefert das Produkt in einer Spalte von Zahlen, die "
"den angegebenen Kriterien entsprechen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBPRODUKT(A1:C7, \"Alter\", A9:B11) liefert 1247.\n"
"\n"
"@SEEALSO=DBSUMME"

#: ../plugins/fn-database/functions.c:810
#, fuzzy
msgid ""
"@FUNCTION=DSTDEV\n"
"@SYNTAX=DSTDEV(database,field,criteria)\n"
"@DESCRIPTION=DSTDEV function returns the estimate of the standard deviation "
"of a population based on a sample. The population consists of numbers that "
"match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DSTDEV(A1:C7, \"Age\", A9:B11) equals 9.89949.\n"
"DSTDEV(A1:C7, \"Salary\", A9:B11) equals 9135.112506.\n"
"\n"
"@SEEALSO=DSTDEVP"
msgstr ""
"@FUNCTION=DBSTDABW\n"
"@SYNTAX=DBSTDABW(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBSTDABW liefert die geschätzte Standardabweichung einer auf "
"einer Stichprobe basierenden Grundgesamtheit. Die Grundgesamtheiten bestehen "
"aus Zahlen, die die angegebenen Kriterien erfüllen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBSTDABW(A1:C7, \"Alter\", A9:B11) liefert 9.89949.\n"
"DBSTDABW(A1:C7, \"Gehalt\", A9:B11) liefert 9135.112506.\n"
"\n"
"@SEEALSO=DBSTDABWN"

#: ../plugins/fn-database/functions.c:886
#, fuzzy
msgid ""
"@FUNCTION=DSTDEVP\n"
"@SYNTAX=DSTDEVP(database,field,criteria)\n"
"@DESCRIPTION=DSTDEVP function returns the standard deviation of a population "
"based on the entire population. The population consists of numbers that "
"match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DSTDEVP(A1:C7, \"Age\", A9:B11) equals 7.\n"
"DSTDEVP(A1:C7, \"Salary\", A9:B11) equals 6459.5.\n"
"\n"
"@SEEALSO=DSTDEV"
msgstr ""
"@FUNCTION=DBSTDABWN\n"
"@SYNTAX=DBSTDABWN(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBSTDABWN liefert die Standardabweichung einer auf den gesamten "
"Grundgesamtheiten basierenden Grundgesamtheit. Die Grundgesamtheiten "
"bestehen aus Zahlen, die die angegebenen Kriterien erfüllen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBSTDABWN(A1:C7, \"Alter\", A9:B11) liefert 7.\n"
"DBSTDABWN(A1:C7, \"Gehalt\", A9:B11) liefert 6459.5.\n"
"\n"
"@SEEALSO=DBSTDABWN"

#: ../plugins/fn-database/functions.c:962
msgid ""
"@FUNCTION=DSUM\n"
"@SYNTAX=DSUM(database,field,criteria)\n"
"@DESCRIPTION=DSUM function returns the sum of numbers in a column that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DSUM(A1:C7, \"Age\", A9:B11) equals 72.\n"
"DSUM(A1:C7, \"Salary\", A9:B11) equals 81565.\n"
"\n"
"@SEEALSO=DPRODUCT"
msgstr ""
"@FUNCTION=DBSUMME\n"
"@SYNTAX=DBSUMME(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBSUMME liefert in einer Spalte die Summe der Zahlen, die den "
"angegebenen Kriterien entsprechen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBSUMME(A1:C7, \"Alter\", A9:B11) liefert 72.\n"
"DBSUMME(A1:C7, \"Gehalt\", A9:B11) liefert 81565.\n"
"\n"
"@SEEALSO=DBPRODUKT"

#: ../plugins/fn-database/functions.c:1038
#, fuzzy
msgid ""
"@FUNCTION=DVAR\n"
"@SYNTAX=DVAR(database,field,criteria)\n"
"@DESCRIPTION=DVAR function returns the estimate of variance of a population "
"based on a sample. The population consists of numbers that match conditions "
"specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DVAR(A1:C7, \"Age\", A9:B11) equals 98.\n"
"DVAR(A1:C7, \"Salary\", A9:B11) equals 83450280.5.\n"
"\n"
"@SEEALSO=DVARP"
msgstr ""
"@FUNCTION=DBVARIANZ\n"
"@SYNTAX=DBVARIANZ(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBVARIANZ liefert die geschätzte Varianz einer Grundgesamtheit, "
"basierend auf einer Stichprobe. Die Grundgesamtheiten bestehen aus Zahlen, "
"die den angegebenen Kriterien entsprechen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBVARIANZ(A1:C7, \"Alter\", A9:B11) liefert 98.\n"
"DBVARIANZ(A1:C7, \"Gehalt\", A9:B11) liefert 83450280.5.\n"
"\n"
"@SEEALSO=DBVARIANZN"

#: ../plugins/fn-database/functions.c:1114
#, fuzzy
msgid ""
"@FUNCTION=DVARP\n"
"@SYNTAX=DVARP(database,field,criteria)\n"
"@DESCRIPTION=DVARP function returns the variance of a population based on "
"the entire population. The population consists of numbers that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DVARP(A1:C7, \"Age\", A9:B11) equals 49.\n"
"DVARP(A1:C7, \"Salary\", A9:B11) equals 41725140.25.\n"
"\n"
"@SEEALSO=DVAR"
msgstr ""
"@FUNCTION=DBVARIANZN\n"
"@SYNTAX=DBVARIANZN(Datenbank,Feld,Kriterien)\n"
"@DESCRIPTION=DBVARIANZN liefert die Varianz einer Grundgesamtheit, basierend "
"auf den gesamten Grundgesamtheiten. Die Grundgesamtheiten bestehen aus "
"Zahlen, die den angegebenen Kriterien entsprechen.\n"
"\n"
"@Datenbank ist ein Zellbereich, in dem Zeilen Datensätze und Spalten "
"Datenfelder sind. Die erste Zeile einer Datenbank enthält die Beschriftungen "
"für die jeweiligen Spalten.\n"
"\n"
"@Feld legt fest, welche Spalte für die Funktion verwendet wird und darf eine "
"Ganzzahl oder eine Zeichenkette sein. Falls n (@Feld) ganzzahlig ist, wird "
"die n-te Spalte verwendet, falls @Feld jedoch als Zeichenkette übergeben "
"wird, wird diese als Bezug zur Spalte mit der Beschriftung \"@Feld\" "
"interpretiert.\n"
"\n"
"@Kriterien ist der Zellbereich, der die zu erfüllenden Bedingungen enthält. "
"Die erste Zeile in @Kriterien sollte die Beschriftungen der Felder "
"enthalten, für die die Kriterien gelten. Zellen unterhalb der Beschriftungen "
"legen Bedingungen fest, zum Beispiel »>3« oder »<9«. Ist-gleich-Bedingungen "
"können als Wert (z.B. »3« oder »Johann«) übergeben werden.\n"
"Jede Zeile in @Kriterien gibt eine einzelne Bedingung an. Wenn also eine "
"Zeile in @Datenbank mit einer der Zeilen in @Kriterien übereinstimmt, dann "
"wird diese Zeile gezählt (technisch ausgedrückt ist dies ein Boolsches ODER "
"zwischen den Zeilen in @Kriterien).\n"
"Falls @Kriterien mehr als eine Spalte angibt, muss jede der Bedingungen in "
"diesen Spalten wahr sein, damit sie auf @Datenbank zutrifft (also ein "
"Boolsches UND zwischen den Spalten in jeder Zeile in @Kriterien).\n"
"@EXAMPLES=\n"
"Angenommen, der Zellbereich A1:C7 enthält folgende Werte:\n"
"Name    Alter   Gehalt\n"
"Johann  34      54342\n"
"Fritz   35      22343\n"
"Heinz   29      34323\n"
"Kurt    43      47242\n"
"Susanne 37      42932\n"
"Robert  45      45324\n"
"\n"
"Zusätzlich enthält der Zellbereich A9:B1 folgende Werte:\n"
"Alter   Gehalt\n"
"<30\n"
">40     >46000\n"
"\n"
"Dann gilt:\n"
"DBVARIANZN(A1:C7, \"Alter\", A9:B11) liefert 49.\n"
"DBVARIANZN(A1:C7, \"Gehalt\", A9:B11) liefert 41725140.25.\n"
"\n"
"@SEEALSO=DBVARIANZ"

#: ../plugins/fn-database/functions.c:1190
msgid ""
"@FUNCTION=GETPIVOTDATA\n"
"@SYNTAX=GETPIVOTDATA(pivot_table,field_name)\n"
"@DESCRIPTION=GETPIVOTDATA function fetches summary data from a pivot table. "
"@pivot_table is a cell range containing the pivot table. @field_name is the "
"name of the field of which you want the summary data.\n"
"\n"
"* If the summary data is unavailable, GETPIVOTDATA returns #REF! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=PIVOTDATEN.ZUORDNEN\n"
"@SYNTAX=PIVOTDATEN.ZUORDNEN(Pivottabelle,Feldname)\n"
"@DESCRIPTION=PIVOTDATEN.ZUORDNEN holt Summendaten aus einer Pivottabelle. "
"@Pivottabelle ist ein Zellbereich, der die Pivottabelle enthält. @Feldname "
"ist der Name des Feldes, von dem die Zusammenfassungsdaten berechnet werden "
"sollen.\n"
"\n"
"* Falls keine Summendaten verfügbar sind, liefert PIVOTDATENZUORDNEN einen "
"#BEZUG!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-date/functions.c:99
msgid ""
"@FUNCTION=DATE\n"
"@SYNTAX=DATE (year,month,day)\n"
"@DESCRIPTION=DATE returns the number of days since the 1st of January of 1900"
"(the date serial number) for the given year, month and day.\n"
"\n"
"* If @month < 1 or @month > 12, the year will be corrected.  A similar "
"correction takes place for days.\n"
"* The @years should be at least 1900.  If @years < 1900, it is assumed to be "
"1900 + @years.\n"
"* If the given date is not valid, DATE returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DATE(2001, 3, 30) returns 'Mar 30, 2001'.\n"
" \n"
"@SEEALSO=TODAY, NOW"
msgstr ""
"@FUNCTION=DATUM\n"
"@SYNTAX=DATUM (Jahr,Monat,Tag)\n"
"@DESCRIPTION=DATUM berechnet die Tage seit dem 1. Januar 1900 (die "
"Datumsseriennummer) für das angegebene Jahr, den angegebenen Monat und Tag.\n"
"\n"
"* Falls @Monat < 1 oder > 12 ist, wird das Jahr angepasst. Eine ähnliche "
"Anpassung findet für Tage statt.\n"
"* @Jahr sollte mindestens 1900 sein. Falls @Jahr < 1900 ist, wird 1900 + "
"@Jahr angenommen.\n"
"* Falls das angegebene Datum ungültig ist, liefert DATUM einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DATUM(2001, 3, 30) liefert »Mär 30, 2001«.\n"
"\n"
"@SEEALSO=HEUTE, JETZT"

#: ../plugins/fn-date/functions.c:179
msgid ""
"@FUNCTION=UNIX2DATE\n"
"@SYNTAX=UNIX2DATE(unixtime)\n"
"@DESCRIPTION=UNIX2DATE converts a unix time into a spreadsheet date and "
"time.\n"
"\n"
"A unix time is the number of seconds since midnight January 1, 1970.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NOW, DATE, DATE2UNIX"
msgstr ""
"@FUNCTION=UNIXINDATUM\n"
"@SYNTAX=UNIXINDATUM(Unix_Zeit)\n"
"@DESCRIPTION=UNIXINDATUM konvertiert eine Unix-Zeit in ein für die "
"Tabellenkalkulation lesbares Datums- und Zeitformat.\n"
"\n"
"* Die Unix-Zeit ist die Anzahl der Sekunden seit Mitternacht des 1. Januars "
"1970.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=JETZT, DATUM, DATUMINUNIX"

#: ../plugins/fn-date/functions.c:213
msgid ""
"@FUNCTION=DATE2UNIX\n"
"@SYNTAX=DATE2UNIX(serial)\n"
"@DESCRIPTION=DATE2UNIX converts a spreadsheet date and time serial number "
"into a unix time.\n"
"\n"
"A unix time is the number of seconds since midnight January 1, 1970.\n"
"\n"
"@EXAMPLES=\n"
"DATE2UNIX(\"01/01/2000\") equals 946656000.\n"
"\n"
"@SEEALSO=NOW, DATE, UNIX2DATE"
msgstr ""
"@FUNCTION=DATUMINUNIX\n"
"@SYNTAX=DATUMINUNIX(Seriennummer)\n"
"@DESCRIPTION=DATUMINUNIX konvertiert eine für die Tabellenkalkulation "
"lesbare Datums- und Zeit-Seriennummer in das Unix-Zeitformat.\n"
"\n"
"* Die Unix-Zeit ist die Anzahl der Sekunden seit Mitternacht des 1. Januars "
"1970.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=JETZT, DATUM, UNIXINDATUM"

#: ../plugins/fn-date/functions.c:250
msgid ""
"@FUNCTION=DATEVALUE\n"
"@SYNTAX=DATEVALUE(date_str)\n"
"@DESCRIPTION=DATEVALUE returns the serial number of the date.  @date_str is "
"the string that contains the date. The value depends on the date "
"convention.  The MS Excel 1900 convention dates things from Jan 1 1900 while "
"the 1904 convention uses Jan 1 1904.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DATEVALUE(\"1/1/1999\") equals 36161 (in the 1900 convention).\n"
"@SEEALSO=DATE"
msgstr ""
"@FUNCTION=DATWERT\n"
"@SYNTAX=DATWERT(Datum_Zeichenkette)\n"
"@DESCRIPTION=DATWERT liefert die Seriennummer des Datums. "
"@Datum_Zeichenkette ist die Zeichenkette, die das Datum enthält. Der Wert "
"hängt von der Datumskonvention ab. Die MS Excel 1900-Konvention zählt Daten "
"vom 1. Januar 1900 an, wohingegen die 1904-Konvention den 1. Januar 1904 "
"verwendet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DATEVALUE(\"1/1/1999\") liefert 36161 (in der 1900-Konvention).\n"
"\n"
"@SEEALSO=DATUM"

#: ../plugins/fn-date/functions.c:278
msgid ""
"@FUNCTION=DATEDIF\n"
"@SYNTAX=DATEDIF(date1,date2,interval)\n"
"@DESCRIPTION=DATEDIF returns the difference between two dates.  @interval is "
"one of six possible values:  \"y\", \"m\", \"d\", \"ym\", \"md\", and \"yd"
"\".\n"
"\n"
"The first three options will return the number of complete years, months, or "
"days, respectively, between the two dates specified.\n"
"\n"
"  \"ym\" will return the number of full months between the two dates, not "
"including the difference in years.\n"
"  \"md\" will return the number of full days between the two dates, not "
"including the difference in months.\n"
"  \"yd\" will return the number of full days between the two dates, not "
"including the difference in years.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"d\") equals 1191.\n"
"DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"y\") equals 3.\n"
"\n"
"@SEEALSO=DATE"
msgstr ""
"@FUNCTION=DATEDIF\n"
"@SYNTAX=DATEDIF(Datum1,Datum2,Intervall)\n"
"@DESCRIPTION=DATEDIF liefert die Differenz zwischen zwei Daten. @Intervall "
"ist einer der sechs folgenden möglichen Werte:\n"
"\"y\", \"m\", \"d\", \"ym\", \"md\" und \"yd\".\n"
"\n"
"Die ersten drei Möglichkeiten liefern jeweils die Anzahl ganzer Jahre, "
"Monate oder Tage zwischen den beiden angegebenen Daten.\n"
"\n"
"  \"ym\" liefert die Anzahl ganzer Monate zwischen den beiden Daten, ohne "
"Berücksichtigung der Differenz in Jahren.\n"
"  \"md\" liefert die Anzahl ganzer Tage zwischen den beiden Daten, ohne "
"Berücksichtigung der Differenz in Monaten.\n"
"  \"yd\" liefert die Anzahl ganzer Tage zwischen den beiden Daten, ohne "
"Berücksichtigung der Differenz in Jahren.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DATEDIF(DATUM(2000,4,30),DATUM(2003,8,4),\"d\") liefert 1191.\n"
"DATEDIF(DATUM(2000,4,30),DATUM(2003,8,4),\"y\") liefert 3.\n"
"\n"
"@SEEALSO=DATUM"

#: ../plugins/fn-date/functions.c:430
msgid ""
"@FUNCTION=EDATE\n"
"@SYNTAX=EDATE(date,months)\n"
"@DESCRIPTION=EDATE returns the serial number of the date that is the "
"specified number of months before or after a given date.  @date is the "
"serial number of the initial date and @months is the number of months before "
"(negative number) or after (positive number) the initial date.\n"
"\n"
"* If @months is not an integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EDATE(DATE(2001,12,30),2) returns 'Feb 28, 2002'.\n"
"\n"
"@SEEALSO=DATE"
msgstr ""
"@FUNCTION=EDATUM\n"
"@SYNTAX=EDATUM(Datum, Monate)\n"
"@DESCRIPTION=EDATUM liefert die Seriennummer des Datums, das die angegebene "
"Anzahl von Monaten vor oder nach dem angegebenen Datum liegt. @Datum ist die "
"Seriennummer des Ausgangsdatums und @Monate ist die Anzahl von Monaten vor "
"(negative Zahl) oder nach (positive Zahl) dem Ausgangsdatum.\n"
"\n"
"* Falls @Monate keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"EDATUM(DATUM(2001,12,30),2) liefert »Feb 28, 2002«.\n"
"\n"
"@SEEALSO=DATUM"

#: ../plugins/fn-date/functions.c:485
msgid ""
"@FUNCTION=TODAY\n"
"@SYNTAX=TODAY()\n"
"@DESCRIPTION=TODAY returns the serial number for today (the number of days "
"elapsed since the 1st of January of 1900).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TODAY() returns 'Nov 6, 2001' on that particular day.\n"
" \n"
"@SEEALSO=NOW"
msgstr ""
"@FUNCTION=HEUTE\n"
"@SYNTAX=HEUTE()\n"
"@DESCRIPTION=HEUTE liefert die heutige Datumsseriennummer, also die Anzahl "
"der Tage, die seit dem 1. Januar 1900 vergangen sind.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"HEUTE() liefert am entsprechenden Tag 'Nov 6, 2001'.\n"
"\n"
"@SEEALSO=JETZT"

#: ../plugins/fn-date/functions.c:511
#, fuzzy
msgid ""
"@FUNCTION=NOW\n"
"@SYNTAX=NOW ()\n"
"@DESCRIPTION=NOW returns the serial number for the date and time at the time "
"it is evaluated.\n"
"\n"
"Serial Numbers in Gnumeric are represented as follows: The integral part is "
"the number of days since the 1st of January of 1900.  The decimal part "
"represent the fraction of the day and is mapped into hour, minutes and "
"seconds.\n"
"\n"
"For example: .0 represents the beginning of the day, and 0.5 represents "
"noon.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NOW().\n"
"\n"
"@SEEALSO=TODAY"
msgstr ""
"@FUNCTION=JETZT\n"
"@SYNTAX=JETZT()\n"
"@DESCRIPTION=JETZT liefert die Datumsseriennummer für den Zeitpunkt, an "
"diese Funktion ausgewertet wird.\n"
"\n"
"Datumsseriennummern in Gnumeric sind wie folgt aufgebaut:  Der ganzzahlige "
"Bestandteil ist die Anzahl der Tage seit dem 1. Januar 1900. Der gebrochene "
"Anteil repräsentiert den Bruchteil des Tages bestehend aus den Stunden-, "
"Minuten- und Sekunden-Anteilen.\n"
"\n"
"* .0 steht für den Tagesbeginn und 0.5 den Mittag.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"JETZT().\n"
"\n"
"@SEEALSO=HEUTE, JETZT"

#: ../plugins/fn-date/functions.c:545
msgid ""
"@FUNCTION=TIME\n"
"@SYNTAX=TIME (hours,minutes,seconds)\n"
"@DESCRIPTION=TIME returns a fraction representing the time of day.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TIME(3, 5, 23) equals 3:05AM.\n"
"\n"
"@SEEALSO=HOUR"
msgstr ""
"@FUNCTION=ZEIT\n"
"@SYNTAX=ZEIT(Stunden,Minuten,Sekunden)\n"
"@DESCRIPTION=ZEIT liefert die Uhrzeit.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ZEIT(3, 5, 23) liefert 3:05 AM.\n"
"\n"
"@SEEALSO=STUNDE"

#: ../plugins/fn-date/functions.c:577
msgid ""
"@FUNCTION=TIMEVALUE\n"
"@SYNTAX=TIMEVALUE (timetext)\n"
"@DESCRIPTION=TIMEVALUE returns a fraction representing the time of day, a "
"number between 0 and 1.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TIMEVALUE(\"3:05\") equals 0.128472.\n"
"TIMEVALUE(\"2:24:53 PM\") equals 0.600613.\n"
"\n"
"@SEEALSO=HOUR,MINUTE"
msgstr ""
"@FUNCTION=ZEITWERT\n"
"@SYNTAX=ZEITWERT(Zeittext)\n"
"@DESCRIPTION=ZEITWERT liefert die Tageszeit als Dezimalzahl zwischen 0 und "
"1.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ZEITWERT(\"3:05\") liefert 0.128472.\n"
"ZEITWERT(\"2:24:53 PM\") liefert 0.600613.\n"
"\n"
"@SEEALSO=STUNDE, MINUTE"

#: ../plugins/fn-date/functions.c:605
msgid ""
"@FUNCTION=HOUR\n"
"@SYNTAX=HOUR (date)\n"
"@DESCRIPTION=HOUR converts a serial number to an hour.  The hour is returned "
"as an integer in the range 0 (12:00 A.M.) to 23 (11:00 P.M.).\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HOUR(0.128472) equals 3.\n"
"\n"
"@SEEALSO=MINUTE, NOW, TIME, SECOND"
msgstr ""
"@FUNCTION=STUNDE\n"
"@SYNTAX=STUNDE(Datum)\n"
"@DESCRIPTION=STUNDE konvertiert eine Seriennummer in eine Stunde, wobei die "
"Stunde als Ganzzahl im Bereich zwischen 0 und 23 definiert ist.\n"
"\n"
"* Beachten Sie, dass Gnumeric eine Zeichenkette automatisch in eine "
"Seriennummer umwandelt, sodass das Datum als Zeichenkette übergeben werden "
"kann.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"STUNDE(0.128472) liefert 3.\n"
"\n"
"@SEEALSO=MINUTE, JETZT, ZEIT, SEKUNDE"

#: ../plugins/fn-date/functions.c:642
msgid ""
"@FUNCTION=MINUTE\n"
"@SYNTAX=MINUTE (date)\n"
"@DESCRIPTION=MINUTE converts a serial number to a minute.  The minute is "
"returned as an integer in the range 0 to 59.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MINUTE(0.128472) equals 5.\n"
"\n"
"@SEEALSO=HOUR, NOW, TIME, SECOND"
msgstr ""
"@FUNCTION=MINUTE\n"
"@SYNTAX=MINUTE(Datum)\n"
"@DESCRIPTION=MINUTE konvertiert eine Seriennummer in eine Minute, wobei die "
"Minute wird als Ganzzahl im Bereich zwischen 0 und 59 definiert ist.\n"
"\n"
"* Beachten Sie, dass Gnumeric eine Zeichenkette automatisch in eine "
"Seriennummer umwandelt, sodass das Datum als Zeichenkette übergeben werden "
"kann.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"MINUTE(0.128472) liefert 5.\n"
"\n"
"@SEEALSO=STUNDE, JETZT, ZEIT, SEKUNDE"

#: ../plugins/fn-date/functions.c:679
msgid ""
"@FUNCTION=SECOND\n"
"@SYNTAX=SECOND (date)\n"
"@DESCRIPTION=SECOND converts a serial number to a second.  The second is "
"returned as an integer in the range 0 to 59.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SECOND(0.600613) equals 53.\n"
"\n"
"@SEEALSO=HOUR, MINUTE, NOW, TIME"
msgstr ""
"@FUNCTION=SEKUNDE\n"
"@SYNTAX=SEKUNDE(Datum)\n"
"@DESCRIPTION=SEKUNDE konvertiert eine Seriennummer in eine Sekunde, wobei "
"die Sekunde als Ganzzahl im Bereich zwischen 0 und 59 definiert ist.\n"
"\n"
"* Beachten Sie, dass Gnumeric eine Zeichenkette automatisch in eine "
"Seriennummer umwandelt, sodass das Datum als Zeichenkette übergegeben werden "
"kann.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"SEKUNDE(0.600613) liefert 53.\n"
"\n"
"@SEEALSO=STUNDE, MINUTE, JETZT, ZEIT"

#: ../plugins/fn-date/functions.c:716
msgid ""
"@FUNCTION=YEAR\n"
"@SYNTAX=YEAR (date)\n"
"@DESCRIPTION=YEAR converts a serial number to a year.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"YEAR(DATE(2003, 4, 30)) equals 2003.\n"
"\n"
"@SEEALSO=DAY, MONTH, TIME, NOW"
msgstr ""
"@FUNCTION=JAHR\n"
"@SYNTAX=JAHR(Datum)\n"
"@DESCRIPTION=JAHR konvertiert eine Seriennummer in ein Jahr.\n"
"\n"
"* Beachten Sie, dass Gnumeric eine Zeichenkette automatisch in eine "
"Seriennummer umwandelt, sodass das Datum als Zeichenkette übergeben werden "
"kann.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"JAHR(DATUM(2003, 4, 30)) liefert 2003.\n"
"\n"
"@SEEALSO=TAG, MONAT, ZEIT, JETZT"

#: ../plugins/fn-date/functions.c:750
msgid ""
"@FUNCTION=MONTH\n"
"@SYNTAX=MONTH (date)\n"
"@DESCRIPTION=MONTH converts a serial number to a month.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MONTH(DATE(2003, 4, 30)) equals 4.\n"
"\n"
"@SEEALSO=DAY, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=MONAT\n"
"@SYNTAX=MONAT(Datum)\n"
"@DESCRIPTION=MONAT konvertiert eine Seriennummer in einen Monat.\n"
"\n"
"* Bitte beachten Sie, dass Gnumeric eine Zeichenkette automatisch in eine "
"Seriennummer umwandelt, sodass das Datum als Zeichenkette übergeben werden "
"kann.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"MONAT(DATUM(2003, 4, 30)) liefert 4.\n"
"\n"
"@SEEALSO=TAG, ZEIT, JETZT, JAHR"

#: ../plugins/fn-date/functions.c:784
msgid ""
"@FUNCTION=DAY\n"
"@SYNTAX=DAY (date)\n"
"@DESCRIPTION=DAY converts a serial number to a day of month.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DAY(\"10/24/1968\") equals 24.\n"
"\n"
"@SEEALSO=MONTH, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=TAG\n"
"@SYNTAX=TAG(Datum)\n"
"@DESCRIPTION=TAG konvertiert eine Seriennummer in den Tag eines Monats.\n"
"\n"
"* Beachten Sie, dass Gnumeric eine Zeichenkette automatisch in eine "
"Seriennummer umwandelt, sodass das Datum als Zeichenkette übergeben werden "
"kann.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DAY(\"10/24/1968\") liefert 24.\n"
"\n"
"@SEEALSO=MONAT, ZEIT, JETZT, JAHR"

#: ../plugins/fn-date/functions.c:818
msgid ""
"@FUNCTION=WEEKDAY\n"
"@SYNTAX=WEEKDAY (date[, method])\n"
"@DESCRIPTION=WEEKDAY converts a serial number to a weekday.\n"
"\n"
"This function returns an integer indicating the day of week.\n"
"@METHOD indicates the numbering system.  It defaults to 1.\n"
"\n"
"  For @METHOD=1: Sunday is 1, Monday is 2, etc.\n"
"  For @METHOD=2: Monday is 1, Tuesday is 2, etc.\n"
"  For @METHOD=3: Monday is 0, Tuesday is 1, etc.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"WEEKDAY(\"10/24/1968\") equals 5 (Thursday).\n"
"\n"
"@SEEALSO=DAY, MONTH, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=WOCHENTAG\n"
"@SYNTAX=WOCHENTAG(Datum[, Methode])\n"
"@DESCRIPTION=WOCHENTAG konvertiert eine Seriennummer in einen Wochentag.\n"
"\n"
"Diese Funktion liefert eine Ganzzahl, die den Wochentag angibt.\n"
"@Methode legt die Art des Zählens fest. Die Vorgabe ist 1.\n"
"\n"
"  Für @Methode=1: Sonntag ist 1, Montag ist 2, u.s.w.\n"
"  Für @Methode=2: Montag ist 1, Dienstag ist 2, u.s.w.\n"
"  Für @Methode=3: Montag ist 0, Dienstag ist 1, u.s.w.\n"
"\n"
"* Beachten Sie, dass Gnumeric eine Zeichenkette automatisch in eine "
"Seriennummer umwandelt, sodass das Datum als Zeichenkette übergeben werden "
"kann.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WOCHENTAG(\"10/24/1968\") liefert 5 (Donnerstag).\n"
"\n"
"@SEEALSO=TAG, MONAT, ZEIT, JETZT, JAHR"

#: ../plugins/fn-date/functions.c:872
msgid ""
"@FUNCTION=DAYS360 \n"
"@SYNTAX=DAYS360 (date1,date2,method)\n"
"@DESCRIPTION=DAYS360 returns the number of days from @date1 to @date2 "
"following a 360-day calendar in which all months are assumed to have 30 "
"days.\n"
"\n"
"* If @method is 1, the European method will be used.  In this case, if the "
"day of the month is 31 it will be considered as 30.\n"
"* If @method is 0 or omitted, the MS Excel (tm) US method will be used.  "
"This is a somewhat complicated industry standard method where the last day "
"of February is considered to be the 30th day of the month, but only for the "
"first date.\n"
"* If @method is 2, a saner version of the US method is used in which both "
"dates get the same February treatment.\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is mostly Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DAYS360(DATE(2003, 2, 3), DATE(2007, 4, 2)) equals 1499.\n"
"\n"
"@SEEALSO=MONTH, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=TAGE360\n"
"@SYNTAX=TAGE360(Datum1,Datum2,Methode)\n"
"@DESCRIPTION=TAGE360 liefert die die Anzahl der Tage von @Datum1 bis "
"@Datum2, wobei ein 360-Tages-Kalender zu Grunde gelegt wird, in dem "
"angenommen wird, dass alle Monate 30 Tage haben.\n"
"\n"
"* Falls @Methode 1 ist, wird die europäische Methode verwendet. In diesem "
"Fall wird angenommen, dass ein Monat mit 31 Tagen 30 Tage hat.\n"
"* Falls @Methode 0 ist oder nicht übergeben wird, wird die MS Excel (tm)-US-"
"Methode verwendet. Diese ist ziemlich kompliziert und industriell genormt. "
"Hierbei wird der letzte Tag des Februar als dreißigster Tag des Monats "
"angesehen, jedoch nur beim ersten Datum.\n"
"* Falls @Methode 2 ist, wird eine vernünftigere Version der US-Methode "
"verwendet, bei der Februar bei beiden Daten gleich behandelt wird.\n"
"* Beachten Sie, dass Gnumeric Zeichenketten in Seriennummern umwandelt, "
"sodass Daten als Zeichenketten übergeben werden können.\n"
"* Diese Funktion ist weitgehend Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TAGE360(DATUM(2003, 2, 3), DATUM(2007, 4, 2)) liefert 1499.\n"
"\n"
"@SEEALSO=MONAT, ZEIT, JETZT, JAHR"

#: ../plugins/fn-date/functions.c:929
msgid ""
"@FUNCTION=EOMONTH\n"
"@SYNTAX=EOMONTH (start_date,months)\n"
"@DESCRIPTION=EOMONTH returns the last day of the month which is @months from "
"the @start_date.\n"
"\n"
"* EOMONTH returns #NUM! if @start_date or @months are invalid.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then EOMONTH(A1,0)=12/31/00, EOMONTH(A1,5)=5/31/01, "
"and EOMONTH(A1,2)=2/28/01\n"
"\n"
"@SEEALSO=MONTH"
msgstr ""
"@FUNCTION=MONATSENDE\n"
"@SYNTAX=MONATSENDE (Ausgangsdatum,Monate)\n"
"@DESCRIPTION=MONATSENDE liefert den letzten Tag des Monats, der @Monate nach "
"dem @Ausgangsdatum liegt.\n"
"\n"
"* Falls @Ausgangsdatum oder @Monate ungültig ist, liefert MONATSENDE einen "
"#ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Falls A1 12/21/00 enthält, dann liefert:\n"
"MONATSENDE(A1,0) 12/31/00,\n"
"MONATSENDE(A1,5) 5/31/01 und\n"
"MONATSENDE(A1,2) 2/28/01\n"
"\n"
"@SEEALSO=MONAT"

#: ../plugins/fn-date/functions.c:983
msgid ""
"@FUNCTION=WORKDAY\n"
"@SYNTAX=WORKDAY (start_date,days[,holidays])\n"
"@DESCRIPTION=WORKDAY returns the date which is @days working days from the "
"@start_date.  Weekends and holidays optionally supplied in @holidays are "
"respected.\n"
"\n"
"* WORKDAY returns #NUM! if @start_date or @days are invalid.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DAY(WORKDAY(DATE(2001,1,5),30)) equals 16 and\n"
"MONTH(WORKDAY(DATE(2001,1,5),30)) equals 2.\n"
"\n"
"@SEEALSO=NETWORKDAYS"
msgstr ""
"@FUNCTION=ARBEITSTAG\n"
"@SYNTAX=ARBEITSTAG (Ausgangsdatum,Tage[,Freie_Tage])\n"
"@DESCRIPTION=ARBEISTAG liefert das Datum des Tags, der @Tage Werktage vom "
"@Ausgangsdatum entfernt ist. Feiertage, die zusätzlich als @Freie_Tage "
"übergegeben werden, werden hierbei ebenfalls berücksichtigt.\n"
"\n"
"* Falls @Ausgangsdatum oder @Monate ungültig ist, liefert ARBEITSTAG einen "
"#ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TAG(ARBEITSTAG(DATUM(2001,1,5),30)) liefert 16.\n"
"MONAT(ARBEITSTAG(DATUM(2001,1,5),30)) liefert 2.\n"
"\n"
"@SEEALSO=NETTOARBEITSTAGE"

#: ../plugins/fn-date/functions.c:1156
msgid ""
"@FUNCTION=NETWORKDAYS\n"
"@SYNTAX=NETWORKDAYS (start_date,end_date[,holidays])\n"
"@DESCRIPTION=NETWORKDAYS returns the number of non-weekend non-holidays "
"between @start_date and @end_date including these dates. Holidays are "
"optionally supplied in @holidays.\n"
"\n"
"* NETWORKDAYS returns #NUM! if @start_date or @end_date are invalid.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NETWORKDAYS(DATE(2001,1,2),DATE(2001,2,15)) equals 33.\n"
"\n"
"@SEEALSO=WORKDAY"
msgstr ""
"@FUNCTION=NETTOARBEITSTAGE\n"
"@SYNTAX=NETTOARBEITSTAGE (Ausgangsdatum,Zieldatum[,Freie_Tage])\n"
"@DESCRIPTION=NETTOARBEITSTAGE liefert die Anzahl der Werktage zwischen "
"@Ausgangsdatum und @Zieldatum einschließlich diesen. Feiertage, die "
"zusätzlich als @Freie_Tage übergegeben werden, werden hierbei ebenfalls "
"berücksichtigt.\n"
"\n"
"* Falls @Ausgangsdatum oder @Zieldatum ungültig ist, liefert "
"NETTOARBEITSTAGE einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"NETTOARBEITSTAGE(DATUM(2001,1,5),DATUM(2001,2,15)) liefert 33.\n"
"\n"
"@SEEALSO=ARBEITSTAGE"

#: ../plugins/fn-date/functions.c:1279
msgid ""
"@FUNCTION=ISOWEEKNUM\n"
"@SYNTAX=ISOWEEKNUM (date)\n"
"@DESCRIPTION=ISOWEEKNUM returns the ISO 8601 week number of @date.\n"
"\n"
"An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
"including days from two different years is assigned to the year which "
"includes the most days. This means that Dec 31 could be in week 1 of the "
"following year, and Jan 1 could be in week 52 or 53 of the previous year. "
"ISOWEEKNUM returns the week number.\n"
"\n"
"* ISOWEEKNUM returns #NUM! if date is invalid.\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then ISOWEEKNUM(A1)=51\n"
"@SEEALSO=WEEKNUM, ISOYEAR"
msgstr ""
"@FUNCTION=ISOWOCHENZAHL\n"
"@SYNTAX=ISOWOCHENZAHL(Datum)\n"
"@DESCRIPTION=ISOWOCHENZAHL liefert die ISO 8601-Wochenzahl von @Datum.\n"
"\n"
"Eine ISO 8601-Woche beginnt am Montag. Wochen werden von 1 an durchgezählt. "
"Eine Woche, die sich über zwei Jahre erstreckt, wird dem Jahr zugewiesen, "
"das die meisten Wochentage enthält. Das heißt, dass der 31. Dezember in der "
"ersten Woche des folgenden Jahres und der 1. Januar in der 52. oder 53. "
"Woche des vorherigen Jahres sein kann. ISOWOCHENZAHL liefert die Wochenzahl, "
"während ISOJAHR das Jahr, dem die Woche zugewiesen ist, liefert.\n"
"* Falls @Datum ungültig ist, liefert ISOWOCHENZAHL einen #ZAHL-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"Falls A1 12/21/00 enthält, liefert ISOWOCHENZAHL(A1) 51\n"
"@SEEALSO=WOCHENZAHL, ISOJAHR"

#: ../plugins/fn-date/functions.c:1316
msgid ""
"@FUNCTION=ISOYEAR\n"
"@SYNTAX=ISOYEAR (date)\n"
"@DESCRIPTION=ISOYEAR returns the year of the ISO 8601 week number of @date.\n"
"\n"
"An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
"including days from two different years is assigned to the year which "
"includes the most days. This means that Dec 31 could be in week 1 of the "
"following year, and Jan 1 could be in week 52 or 53 of the previous year. "
"ISOYEAR returns the year the week is assigned to.\n"
"\n"
"* ISOYEAR returns #NUM! if date is invalid.\n"
"@EXAMPLES=\n"
"If A1 contains 12/31/2001 then ISOYEAR(A1)=2002\n"
"@SEEALSO=ISOWEEKNUM"
msgstr ""
"@FUNCTION=ISOJAHR\n"
"@SYNTAX=ISOJAHR(Datum)\n"
"@DESCRIPTION=ISOJAHR liefert die ISO 8601-Wochenzahl von @Datum.\n"
"\n"
"Eine ISO 8601-Woche beginnt am Montag. Wochen werden von 1 an durchgezählt. "
"Eine Woche, die sich über zwei Jahre erstreckt, wird dem Jahr zugewiesen, "
"das die meisten Wochentage enthält. Das heißt, dass der 31. Dezember in der "
"ersten Woche des folgenden Jahres und der 1. Januar in der 52. oder 53. "
"Woche des vorherigen Jahres sein kann. ISOJAHR liefert das Jahr, dem die "
"Woche zugewiesen ist, während ISOWOCHENZAHL die Wochenzahl liefert.\n"
"\n"
"* Falls @Datum ungültig ist, liefert ISOJAHR einen #ZAHL-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"Falls A1 12/31/2001 enthält, liefert ISOJAHR 2002\n"
"@SEEALSO=ISOWOCHENZAHL"

#: ../plugins/fn-date/functions.c:1366
msgid ""
"@FUNCTION=WEEKNUM\n"
"@SYNTAX=WEEKNUM (date[,method])\n"
"@DESCRIPTION=WEEKNUM returns the week number of @date according to the given "
"@method.\n"
"\n"
"@method defaults to 1.\n"
"\n"
"  For @method=1, week starts on Sunday, and days before first Sunday are in "
"week 0.\n"
"  For @method=2, week starts on Monday, and days before first Monday are in "
"week 0.\n"
"  For @method=150, the ISO 8601 week number is returned.\n"
"\n"
"* WEEKNUM returns #NUM! if @date or @method is invalid.\n"
"* This function is Excel compatible, except that Excel does not support ISO "
"8601 week numbers.\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then WEEKNUM(A1,2)=51\n"
"@SEEALSO=ISOWEEKNUM"
msgstr ""
"@FUNCTION=WOCHENZAHL\n"
"@SYNTAX=WOCHENZAHL (Datum[,Methode])\n"
"@DESCRIPTION=WOCHENZAHL liefert die Wochenzahl von @Datum, entsprechend der "
"übergebenen Methode @Methode.\n"
"\n"
"Die Vorgabe für @Methode ist 1.\n"
"\n"
"  Falls @Methode 1 ist, beginnt die Woche am Sonntag und Tage vor dem ersten "
"Sonntag sind in Woche 0.\n"
"  Falls @Methode 2 ist, beginnt die Woche am Montag und Tage vor dem ersten "
"Montag sind in Woche 0.\n"
"  Falls @Methode 150 ist, liefert WOCHENZAHL die ISO 8601-Wochenzahl.\n"
"* Falls @Datum oder @Methode ungültig ist, liefert WOCHENZAHL einen #ZAHL-"
"Fehler.\n"
"* Diese Funktion ist Excel kompatibel, bis auf die Tatsache, dass Excel "
"keine ISO 8601-Wochenzahlen unterstützt.\n"
"\n"
"@EXAMPLES=\n"
"Falls A1 12/21/00 enthält, liefert WOCHENZAHL(A1,2) 51\n"
"@SEEALSO=ISOWOCHENZAHL"

#: ../plugins/fn-date/functions.c:1414
msgid ""
"@FUNCTION=YEARFRAC\n"
"@SYNTAX=YEARFRAC (start_date, end_date [,basis])\n"
"@DESCRIPTION=YEARFRAC returns the number of full days between @start_date "
"and @end_date according to the @basis.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DATEDIF"
msgstr ""
"@FUNCTION=JAHRBRUCH\n"
"@SYNTAX=JAHRBRUCH (Ausgangsdatum, Zieldatum [, Basis])\n"
"@DESCRIPTION=JAHRBRUCH liefert die Anzahl ganzer Tage zwischen "
"@Ausgangsdatum und @Zieldatum entsprechend der @Basis.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DATEDIF"

#: ../plugins/fn-eng/functions.c:205
msgid ""
"@FUNCTION=BASE\n"
"@SYNTAX=BASE(number,base[,length])\n"
"@DESCRIPTION=BASE function converts a number to a string representing that "
"number in base @base.\n"
"\n"
"* @base must be an integer between 2 and 36.\n"
"* This function is OpenOffice.Org compatible.\n"
"* Optional argument @length specifies the minimum result length.  Leading  "
"zeroes will be added to reach this length.\n"
"\n"
"@EXAMPLES=\n"
"BASE(255,16,4) equals \"00FF\".\n"
"\n"
"@SEEALSO=DECIMAL"
msgstr ""
"@FUNCTION=OKTINDEZ\n"
"@SYNTAX=OKTINDEZ(x)\n"
"@DESCRIPTION=OKTINDEZ wandelt eine oktale Zahl in ihr dezimales Äquivalent "
"um.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"OKTINDEZ(\"124\") liefert 84.\n"
"\n"
"@SEEALSO=DEZINOKT, OKTINBIN, OKTINHEX"

#: ../plugins/fn-eng/functions.c:243
msgid ""
"@FUNCTION=BIN2DEC\n"
"@SYNTAX=BIN2DEC(x)\n"
"@DESCRIPTION=BIN2DEC function converts a binary number in string or number "
"to its decimal equivalent.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BIN2DEC(101) equals 5.\n"
"\n"
"@SEEALSO=DEC2BIN, BIN2OCT, BIN2HEX"
msgstr ""
"@FUNCTION=BININDEZ\n"
"@SYNTAX=BININDEZ(x)\n"
"@DESCRIPTION=BININDEZ wandelt eine Binärzahl in ihr dezimales Äquivalent "
"um.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BININDEZ(101) liefert 5.\n"
"\n"
"@SEEALSO=DEZINBIN, BININOKT, BININHEX"

#: ../plugins/fn-eng/functions.c:272
msgid ""
"@FUNCTION=BIN2OCT\n"
"@SYNTAX=BIN2OCT(number[,places])\n"
"@DESCRIPTION=BIN2OCT function converts a binary number to an octal number. "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BIN2OCT(110111) equals 67.\n"
"\n"
"@SEEALSO=OCT2BIN, BIN2DEC, BIN2HEX"
msgstr ""
"@FUNCTION=BININOKT\n"
"@SYNTAX=BININOKT(Zahl[,Stellen])\n"
"@DESCRIPTION=BININOKT wandelt eine Binärzahl in ihr oktales Äquivalent um. "
"@Stellen ist ein optionales Argument, wodurch eventuelle leere Stellen mit "
"Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert BININOKT einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BININOKT(110111) liefert 67.\n"
"\n"
"@SEEALSO=OKTINBIN, BININDEZ, BININHEX"

#: ../plugins/fn-eng/functions.c:304
msgid ""
"@FUNCTION=BIN2HEX\n"
"@SYNTAX=BIN2HEX(number[,places])\n"
"@DESCRIPTION=BIN2HEX function converts a binary number to a hexadecimal "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BIN2HEX(100111) equals 27.\n"
"\n"
"@SEEALSO=HEX2BIN, BIN2OCT, BIN2DEC"
msgstr ""
"@FUNCTION=BININHEX\n"
"@SYNTAX=BININHEX(Zahl[,Stellen])\n"
"@DESCRIPTION=BININHEX wandelt eine Binärzahl ihr hexadezimale Äquivalent um. "
"@Stellen ist ein optionales Argument, wodurch eventuelle leere Stellen mit "
"Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert BININHEX einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BININHEX(100111) liefert 27.\n"
"\n"
"@SEEALSO=HEXINBIN, BININOKT, BININDEZ"

#: ../plugins/fn-eng/functions.c:336
msgid ""
"@FUNCTION=DEC2BIN\n"
"@SYNTAX=DEC2BIN(number[,places])\n"
"@DESCRIPTION=DEC2BIN function converts a decimal number to a binary number. "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEC2BIN(42) equals 101010.\n"
"\n"
"@SEEALSO=BIN2DEC, DEC2OCT, DEC2HEX"
msgstr ""
"@FUNCTION=DEZINBIN\n"
"@SYNTAX=DEZINBIN(Zahl[,Stellen])\n"
"@DESCRIPTION=DEZINBIN wandelt eine Dezimalzahl ihr binäres Äquivalent um. "
"@Stellen ist ein optionales Argument, wodurch eventuelle leere Stellen mit "
"Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert DEZINBIN einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DEZINBIN(42) liefert 101010.\n"
"\n"
"@SEEALSO=BININDEZ, DEZINOKT, DEZINHEX"

#: ../plugins/fn-eng/functions.c:368
msgid ""
"@FUNCTION=DEC2OCT\n"
"@SYNTAX=DEC2OCT(number[,places])\n"
"@DESCRIPTION=DEC2OCT function converts a decimal number to an octal number. "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEC2OCT(42) equals 52.\n"
"\n"
"@SEEALSO=OCT2DEC, DEC2BIN, DEC2HEX"
msgstr ""
"@FUNCTION=DEZINOKT\n"
"@SYNTAX=DEZINOKT(Zahl[,Stellen])\n"
"@DESCRIPTION=DEZINOKT wandelt eine Dezimalzahl in ihr dezimales Äquivalent "
"um. @Stellen ist ein optionales Argument, wodurch eventuelle leere Stellen "
"mit Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert DEZINOKT einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DEZINOKT(42) liefert 52.\n"
"\n"
"@SEEALSO=OKTINDEZ, DEZINBIN, DEZINHEX"

#: ../plugins/fn-eng/functions.c:400
msgid ""
"@FUNCTION=DEC2HEX\n"
"@SYNTAX=DEC2HEX(number[,places])\n"
"@DESCRIPTION=DEC2HEX function converts a decimal number to a hexadecimal "
"number. @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEC2HEX(42) equals 2A.\n"
"\n"
"@SEEALSO=HEX2DEC, DEC2BIN, DEC2OCT"
msgstr ""
"@FUNCTION=DEZINHEX\n"
"@SYNTAX=DEZINHEX(x)\n"
"@DESCRIPTION=DEZINHEX wandelt eine Dezimalzahl in ihr hexadezimales "
"Äquivalent um. @Stellen ist ein optionales Argument, wodurch eventuelle "
"leere Stellen mit Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert DEZINHEX einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DEZINHEX(42) liefert 2A.\n"
"\n"
"@SEEALSO=HEXINDEZ, DEZINBIN, DEZINOKT"

#: ../plugins/fn-eng/functions.c:432
msgid ""
"@FUNCTION=DECIMAL\n"
"@SYNTAX=DECIMAL(text,base)\n"
"@DESCRIPTION=DECIMAL function converts a number in base @base to decimal.\n"
"\n"
"* @base must be an integer between 2 and 36.\n"
"* This function is OpenOffice.Org compatible.\n"
"\n"
"@EXAMPLES=\n"
"DECIMAL(\"A1\",16) equals 161.\n"
"\n"
"@SEEALSO=BASE"
msgstr ""
"@FUNCTION=OKTINDEZ\n"
"@SYNTAX=OKTINDEZ(x)\n"
"@DESCRIPTION=OKTINDEZ wandelt eine oktale Zahl in ihr dezimales Äquivalent "
"um.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"OKTINDEZ(\"124\") liefert 84.\n"
"\n"
"@SEEALSO=DEZINOKT, OKTINBIN, OKTINHEX"

#: ../plugins/fn-eng/functions.c:464
msgid ""
"@FUNCTION=OCT2DEC\n"
"@SYNTAX=OCT2DEC(x)\n"
"@DESCRIPTION=OCT2DEC function converts an octal number in a string or number "
"to its decimal equivalent.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OCT2DEC(\"124\") equals 84.\n"
"\n"
"@SEEALSO=DEC2OCT, OCT2BIN, OCT2HEX"
msgstr ""
"@FUNCTION=OKTINDEZ\n"
"@SYNTAX=OKTINDEZ(x)\n"
"@DESCRIPTION=OKTINDEZ wandelt eine oktale Zahl in ihr dezimales Äquivalent "
"um.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"OKTINDEZ(\"124\") liefert 84.\n"
"\n"
"@SEEALSO=DEZINOKT, OKTINBIN, OKTINHEX"

#: ../plugins/fn-eng/functions.c:493
msgid ""
"@FUNCTION=OCT2BIN\n"
"@SYNTAX=OCT2BIN(number[,places])\n"
"@DESCRIPTION=OCT2BIN function converts an octal number to a binary number.  "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OCT2BIN(\"213\") equals 10001011.\n"
"\n"
"@SEEALSO=BIN2OCT, OCT2DEC, OCT2HEX"
msgstr ""
"@FUNCTION=OKTINBIN\n"
"@SYNTAX=OKTINBIN(Zahl[,Stellen])\n"
"@DESCRIPTION=OKTINBIN wandelt eine oktale Zahl in ihr binäres Äquivalent um. "
"@Stellen ist ein optionales Argument, wodurch eventuelle leere Stellen mit "
"Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist. @Stellen ist ein "
"optionales Argument, wodurch eventuelle leere Stellen mit Nullen aufgefüllt "
"werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert OKTINBIN einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"OKTINBIN(\"213\") liefert 10001011.\n"
"\n"
"@SEEALSO=BININOKT, OKTINDEZ, OCTINHEX"

#: ../plugins/fn-eng/functions.c:525
msgid ""
"@FUNCTION=OCT2HEX\n"
"@SYNTAX=OCT2HEX(number[,places])\n"
"@DESCRIPTION=OCT2HEX function converts an octal number to a hexadecimal "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OCT2HEX(132) equals 5A.\n"
"\n"
"@SEEALSO=HEX2OCT, OCT2BIN, OCT2DEC"
msgstr ""
"@FUNCTION=OKTINHEX\n"
"@SYNTAX=OKTINHEX(Zahl[,Stellen])\n"
"@DESCRIPTION=OKTINHEX wandelt eine oktale Zahl in ihr hexadezimales "
"Äquivalent um. @Stellen ist ein optionales Argument, wodurch eventuelle "
"leere Stellen mit Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert OKTINHEX einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"OKTINHEX(132) liefert 5A.\n"
"\n"
"@SEEALSO=HEXINOKT, OKTINBIN, OKTINDEZ"

#: ../plugins/fn-eng/functions.c:557
msgid ""
"@FUNCTION=HEX2BIN\n"
"@SYNTAX=HEX2BIN(number[,places])\n"
"@DESCRIPTION=HEX2BIN function converts a hexadecimal number to a binary "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HEX2BIN(\"2A\") equals 101010.\n"
"\n"
"@SEEALSO=BIN2HEX, HEX2OCT, HEX2DEC"
msgstr ""
"@FUNCTION=HEXINBIN\n"
"@SYNTAX=HEXINBIN(Zahl[,Stellen])\n"
"@DESCRIPTION=HEXINBIN wandelt eine hexadezimale Zahl ihr binäres Äquivalent "
"um. @Stellen ist ein optionales Argument, wodurch eventuelle leere Stellen "
"mit Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert HEXINBIN einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"HEXINBIN(101) liefert 5.\n"
"\n"
"@SEEALSO=BININHEX, HEXINOKT, HEXINDEZ"

#: ../plugins/fn-eng/functions.c:589
msgid ""
"@FUNCTION=HEX2OCT\n"
"@SYNTAX=HEX2OCT(number[,places])\n"
"@DESCRIPTION=HEX2OCT function converts a hexadecimal number to an octal "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HEX2OCT(\"2A\") equals 52.\n"
"\n"
"@SEEALSO=OCT2HEX, HEX2BIN, HEX2DEC"
msgstr ""
"@FUNCTION=HEXINOKT\n"
"@SYNTAX=HEXINOKT(Zahl[,Stellen])\n"
"@DESCRIPTION=HEXINOKT wandelt eine hexadezimale Zahl in ihr oktales "
"Äquivalent um. @Stellen ist ein optionales Argument, wodurch eventuelle "
"leere Stellen mit Nullen aufgefüllt werden, bis die Zahl @Stellen lang ist.\n"
"\n"
"* Falls @Stellen zu klein oder negativ ist, liefert HEXINOKT einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"HEXINOKT(\"2A\") liefert 52.\n"
"\n"
"@SEEALSO=OKTINHEX, HEXINBIN, HEXINDEZ"

#: ../plugins/fn-eng/functions.c:621
msgid ""
"@FUNCTION=HEX2DEC\n"
"@SYNTAX=HEX2DEC(x)\n"
"@DESCRIPTION=HEX2DEC function converts a hexadecimal number to its decimal "
"equivalent.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HEX2DEC(\"2A\") equals 42.\n"
"\n"
"@SEEALSO=DEC2HEX, HEX2BIN, HEX2OCT"
msgstr ""
"@FUNCTION=HEXINDEZ\n"
"@SYNTAX=HEXINDEZ(x)\n"
"@DESCRIPTION=HEXINDEZ wandelt eine hexadezimale Zahl in ihr dezimales "
"Äquivalent um.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"HEXINDEZ(\"2A\") liefert 42.\n"
"\n"
"@SEEALSO=DEZINHEX, HEXINBIN, HEXINOKT"

#: ../plugins/fn-eng/functions.c:650
msgid ""
"@FUNCTION=BESSELI\n"
"@SYNTAX=BESSELI(x,y)\n"
"@DESCRIPTION=BESSELI function returns the Neumann, Weber or Bessel "
"function.\n"
"\n"
"@x is where the function is evaluated. @y is the order of the Bessel "
"function, if non-integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELI(0.7,3) equals 0.007367374.\n"
"\n"
"@SEEALSO=BESSELJ,BESSELK,BESSELY"
msgstr ""
"@FUNCTION=BESSELI\n"
"@SYNTAX=BESSELI(x,y)\n"
"@DESCRIPTION=BESSELI liefert die Neumann-, Weber- oder Bessel-Funktion.\n"
"\n"
"@x ist die Stelle, an der die Funktion ausgewertet wird und @y die "
"Reihenfolge der Bessel-Funktion.\n"
"\n"
"* Falls @y keine Ganzzahl ist, werden die Nachkommastellen abgeschnitten.\n"
"* Falls @x oder @y nicht-numerisch ist, liefert BESSELI einen #WERT!-"
"Fehler.\n"
"* Falls @y < 0 ist, liefert BESSELI einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BESSELI(0.7,3) liefert 0.007367374.\n"
"\n"
"@SEEALSO=BESSELJ,BESSELK,BESSELY"

#: ../plugins/fn-eng/functions.c:693
msgid ""
"@FUNCTION=BESSELK\n"
"@SYNTAX=BESSELK(x,y)\n"
"@DESCRIPTION=BESSELK function returns the Neumann, Weber or Bessel function. "
"@x is where the function is evaluated. @y is the order of the Bessel "
"function, if non-integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELK(3,9) equals 397.95880.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELY"
msgstr ""
"@FUNCTION=BESSELK\n"
"@SYNTAX=BESSELK(x,y)\n"
"@DESCRIPTION=BESSELK liefert die Neumann-, Weber- oder Bessel-Funktion.\n"
"\n"
"@x ist die Stelle, an der die Funktion ausgewertet wird und @y die "
"Reihenfolge der Bessel-Funktion.\n"
"\n"
"* Falls @y keine Ganzzahl ist, werden die Nachkommastellen abgeschnitten.\n"
"* Falls @x oder @y nicht-numerisch ist, liefert BESSELK einen #WERT!-"
"Fehler.\n"
"* Falls @y < 0 ist, liefert BESSELK einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BESSELK(3,9) liefert 397.95880.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELY"

#: ../plugins/fn-eng/functions.c:731
msgid ""
"@FUNCTION=BESSELJ\n"
"@SYNTAX=BESSELJ(x,y)\n"
"@DESCRIPTION=BESSELJ function returns the Bessel function with @x is where "
"the function is evaluated. @y is the order of the Bessel function, if non-"
"integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELJ(0.89,3) equals 0.013974004.\n"
"\n"
"@SEEALSO=BESSELI,BESSELK,BESSELY"
msgstr ""
"@FUNCTION=BESSELJ\n"
"@SYNTAX=BESSELJ(x,y)\n"
"@DESCRIPTION=BESSELJ liefert die Bessel-Funktion.\n"
"\n"
"@x ist die Stelle, an der die Funktion ausgewertet wird und @y die "
"Reihenfolge der Bessel-Funktion.\n"
"\n"
"* Falls @y keine Ganzzahl ist, werden die Nachkommastellen abgeschnitten.\n"
"* Falls @x oder @y nicht-numerisch ist, liefert BESSELJ einen #WERT!-"
"Fehler.\n"
"* Falls @y < 0 ist, liefert BESSELJ einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BESSELJ(0.89,3) liefert 0.013974004.\n"
"\n"
"@SEEALSO=BESSELI,BESSELK,BESSELY"

#: ../plugins/fn-eng/functions.c:769
msgid ""
"@FUNCTION=BESSELY\n"
"@SYNTAX=BESSELY(x,y)\n"
"@DESCRIPTION=BESSELY function returns the Neumann, Weber or Bessel "
"function.\n"
"\n"
"@x is where the function is evaluated. @y is the order of the Bessel "
"function, if non-integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELY(4,2) equals 0.215903595.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELK"
msgstr ""
"@FUNCTION=BESSELY\n"
"@SYNTAX=BESSELY(x,y)\n"
"@DESCRIPTION=BESSELY liefert die Neumann-, Weber- oder Bessel-Funktion.\n"
"\n"
"@x ist die Stelle, an der die Funktion ausgewertet wird und @y die "
"Reihenfolge der Bessel-Funktion.\n"
"\n"
"* Falls @y keine Ganzzahl ist, werden die Nachkommastellen abgeschnitten.\n"
"* Falls @x oder @y nicht-numerisch ist, liefert BESSELY einen #WERT!-"
"Fehler.\n"
"* Falls @y < 0 ist, liefert BESSELY einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BESSELY(4,2) liefert 0.215903595.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELK"

#: ../plugins/fn-eng/functions.c:811
#, fuzzy
msgid ""
"@FUNCTION=CONVERT\n"
"@SYNTAX=CONVERT(number,from_unit,to_unit)\n"
"@DESCRIPTION=CONVERT returns a conversion from one measurement system to "
"another.  For example, you can convert a weight in pounds to a weight in "
"grams.  @number is the value you want to convert, @from_unit specifies the "
"unit of the @number, and @to_unit is the unit for the result.\n"
"\n"
"@from_unit and @to_unit can be any of the following:\n"
"\n"
"Weight and mass:\n"
"\t'g'  \t\tGram\n"
"\t'sg' \t\tSlug\n"
"\t'lbm'\t\tPound\n"
"\t'u'  \t\tU (atomic mass)\n"
"\t'ozm'\t\tOunce\n"
"\n"
"Distance:\n"
"\t'm'   \t\tMeter\n"
"\t'mi'  \t\tStatute mile\n"
"\t'Nmi' \t\tNautical mile\n"
"\t'in'  \t\tInch\n"
"\t'ft'  \t\tFoot\n"
"\t'yd'  \t\tYard\n"
"\t'ang' \t\tAngstrom\n"
"\t'Pica'\t\tPica\n"
"\n"
"Time:\n"
"\t'yr'  \t\tYear\n"
"\t'day' \t\tDay\n"
"\t'hr'  \t\tHour\n"
"\t'mn'  \t\tMinute\n"
"\t'sec' \t\tSecond\n"
"\n"
"Pressure:\n"
"\t'Pa'  \t\tPascal\n"
"\t'atm' \t\tAtmosphere\n"
"\t'mmHg'\tmm of Mercury\n"
"\n"
"Force:\n"
"\t'N'   \t\tNewton\n"
"\t'dyn' \t\tDyne\n"
"\t'lbf' \t\tPound force\n"
"\n"
"Energy:\n"
"\t'J'    \t\tJoule\n"
"\t'e'    \t\tErg\n"
"\t'c'    \t\tThermodynamic calorie\n"
"\t'cal'  \t\tIT calorie\n"
"\t'eV'   \tElectron volt\n"
"\t'HPh'  \tHorsepower-hour\n"
"\t'Wh'   \tWatt-hour\n"
"\t'flb'  \t\tFoot-pound\n"
"\t'BTU'  \tBTU\n"
"\n"
"Power:\n"
"\t'HP'   \tHorsepower\n"
"\t'W'    \tWatt\n"
"\n"
"Magnetism:\n"
"\t'T'    \t\tTesla\n"
"\t'ga'   \tGauss\n"
"\n"
"Temperature:\n"
"\t'C'    \t\tDegree Celsius\n"
"\t'F'    \t\tDegree Fahrenheit\n"
"\t'K'    \t\tDegree Kelvin\n"
"\n"
"Liquid measure:\n"
"\t'tsp'  \t\tTeaspoon\n"
"\t'tbs'  \t\tTablespoon\n"
"\t'oz'   \t\tFluid ounce\n"
"\t'cup'  \tCup\n"
"\t'pt'   \t\tPint\n"
"\t'qt'   \t\tQuart\n"
"\t'gal'  \t\tGallon\n"
"\t'l'    \t\tLiter\n"
"\n"
"For metric units any of the following prefixes can be used:\n"
"\t'Y'  \tyotta \t1E+24\n"
"\t'Z'  \tzetta \t1E+21\n"
"\t'E'  \texa   \t1E+18\n"
"\t'P'  \tpeta  \t1E+15\n"
"\t'T'  \ttera  \t\t1E+12\n"
"\t'G'  \tgiga  \t1E+09\n"
"\t'M'  \tmega  \t1E+06\n"
"\t'k'  \tkilo  \t\t1E+03\n"
"\t'h'  \thecto \t1E+02\n"
"\t'e'  \tdeka  \t1E+01\n"
"\t'd'  \tdeci  \t1E-01\n"
"\t'c'  \tcenti \t\t1E-02\n"
"\t'm'  \tmilli \t\t1E-03\n"
"\t'u'  \tmicro \t1E-06\n"
"\t'n'  \tnano  \t1E-09\n"
"\t'p'  \tpico  \t1E-12\n"
"\t'f'  \tfemto \t1E-15\n"
"\t'a'  \tatto  \t\t1E-18\n"
"\t'z'  \tzepto \t\t1E-21\n"
"\t'y'  \tyocto \t\t1E-24\n"
"\n"
"* If @from_unit and @to_unit are different types, CONVERT returns #N/A "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CONVERT(3,\"lbm\",\"g\") equals 1360.7769.\n"
"CONVERT(5.8,\"m\",\"in\") equals 228.3465.\n"
"CONVERT(7.9,\"cal\",\"J\") equals 33.07567.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KONVERTIEREN\n"
"@SYNTAX=KONVERTIEREN(Anzahl,Ausgangseinheit,Zieleinheit)\n"
"@DESCRIPTION=KONVERTIEREN konvertiert einen Wert von einer Maßeinheit in "
"eine andere. Sie können zum Beispiel ein Gewicht in Pfund in ein Gewicht in "
"Gramm umwandeln. @Anzahl ist die Menge, die konvertiert werden soll, "
"@Ausgangseinheit legt die Einheit des Wertes @Anzahl fest und @Zieleinheit "
"ist die Einheit des Ergebnisses.\n"
"\n"
"@Ausgangseinheit und @Zieleinheit können eines der folgenden sein:\n"
"\n"
"Gewicht und Masse:\n"
"\t'g'  \t\tGramm\n"
"\t'sg' \t\tSlug\n"
"\t'lbm'\t\tPfund\n"
"\t'u'  \t\tU (atomare Masse)\n"
"\t'ozm'\t\tUnze\n"
"\n"
"Entfernung:\n"
"\t'm'   \t\tMeter\n"
"\t'mi'  \t\tBrit. Landmeile\n"
"\t'Nmi' \t\tSeemeile\n"
"\t'in'  \t\tInch\n"
"\t'ft'  \t\tFuß\n"
"\t'yd'  \t\tYard\n"
"\t'ang' \t\tAngstrom\n"
"\t'Pica'\t\tPica\n"
"\n"
"Zeit:\n"
"\t'yr'  \t\tYear\n"
"\t'day' \t\tDay\n"
"\t'hr'  \t\tHour\n"
"\t'mn'  \t\tMinute\n"
"\t'sec' \t\tSecond\n"
"\n"
"Druck:\n"
"\t'Pa'  \t\tPascal\n"
"\t'atm' \t\tAtmosphöre\n"
"\t'mmHg'\tmm Quecksilbersäule\n"
"\n"
"Kraft:\n"
"\t'N'   \t\tNewton\n"
"\t'dyn' \t\tDyne\n"
"\t'lbf' \t\tPound Force\n"
"\n"
"Energie:\n"
"\t'J'    \t\tJoule\n"
"\t'e'    \t\tErg\n"
"\t'c'    \t\tThermodynamische Kalorie\n"
"\t'cal'  \t\tIT Kalorie\n"
"\t'eV'   \tElektr. Volt\n"
"\t'HPh'  \tPferdestärke-Stunde\n"
"\t'Wh'   \tWatt-Stunde\n"
"\t'flb'  \t\tFuß-Pfund\n"
"\t'BTU'  \tBTU\n"
"\n"
"Leistung:\n"
"\t'HP'   \tHorsepower\n"
"\t'W'    \tWatt\n"
"\n"
"Magnetismus:\n"
"\t'T'    \t\tTesla\n"
"\t'ga'   \tGauss\n"
"\n"
"Temperatur:\n"
"\t'C'    \t\tGrad Celsius\n"
"\t'F'    \t\tGrad Fahrenheit\n"
"\t'K'    \t\tGrad Kelvin\n"
"\n"
"Flüssigkeitsmaß:\n"
"\t'tsp'  \t\tTeelöffel\n"
"\t'tbs'  \t\tEsslöffel\n"
"\t'oz'   \t\tFlüssigunze\n"
"\t'cup'  \tTasse\n"
"\t'pt'   \t\tPint\n"
"\t'qt'   \t\tQuart\n"
"\t'gal'  \t\tGallone\n"
"\t'l'    \t\tLiter\n"
"\n"
"Für Metrische Einheiten kann eines der folgenden Präfixe verwendet werden:\n"
"\t'E'  \tExa   \t1E+18\n"
"\t'P'  \tPeta  \t1E+15\n"
"\t'T'  \tTera  \t\t1E+12\n"
"\t'G'  \tGiga  \t1E+09\n"
"\t'M'  \tMega  \t1E+06\n"
"\t'k'  \tKilo  \t\t1E+03\n"
"\t'h'  \tHekto \t1E+02\n"
"\t'e'  \tTekao \t1E+01\n"
"\t'd'  \tDezi  \t1E-01\n"
"\t'c'  \tZenti \t\t1E-02\n"
"\t'm'  \tMilli \t\t1E-03\n"
"\t'u'  \tMicro \t1E-06\n"
"\t'n'  \tNano  \t1E-09\n"
"\t'p'  \tPico  \t1E-12\n"
"\t'f'  \tFemto \t1E-15\n"
"\t'a'  \tAtto  \t\t1E-18\n"
"\n"
"* Falls @Ausgangseinheit und @Zieleinheit unterschiedlichen Kategorien "
"angehören, liefert KONVERTIEREN einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"KONVERTIEREN(3,\"lbm\",\"g\") liefert 1360.7769.\n"
"KONVERTIEREN(5.8,\"m\",\"in\") liefert 228.3465.\n"
"KONVERTIEREN(7.9,\"cal\",\"J\") liefert 33.07567.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-eng/functions.c:1228
msgid ""
"@FUNCTION=ERF\n"
"@SYNTAX=ERF([lower limit,]upper_limit)\n"
"@DESCRIPTION=ERF returns the error function.  With a single argument ERF "
"returns the error function, defined as\n"
"\n"
"\terf(x) = 2/sqrt(pi)* integral from 0 to x of exp(-t*t) dt.\n"
"\n"
"If two arguments are supplied, they are the lower and upper limits of the "
"integral.\n"
"\n"
"* If either @lower_limit or @upper_limit is not numeric a #VALUE! error is "
"returned.\n"
"* This function is upward-compatible with that in Excel. (If two arguments "
"are supplied, Excel will not allow either to be negative.)\n"
"\n"
"@EXAMPLES=\n"
"ERF(0.4) equals 0.428392355.\n"
"ERF(1.6448536269515/SQRT(2)) equals 0.90.\n"
"\n"
"The second example shows that a random variable with a normal distribution "
"has a 90 percent chance of falling within approximately 1.645 standard "
"deviations of the mean.\n"
"@SEEALSO=ERFC"
msgstr ""
"@FUNCTION=FEHLERF\n"
"@SYNTAX=FEHLERF([limes_inferior,]limes_superior)\n"
"@DESCRIPTION=FEHLERF liefert die Fehlerfunktion, die definiert ist als:\n"
"\n"
"\terf(x) = 2/sqrt(pi)* integral von 0 nach x von exp(-t*t) dt.\n"
"\n"
"Falls zwei Argumente übergegeben werden, werden sie als limes inferior und "
"superior des Integrals verwendet.\n"
"\n"
"* Falls @limes_inferior oder @limes_superior nicht numerisch sind, liefert "
"FEHLERF einen #WERT!-Fehler.\n"
"* Diese Version ist abwärts-kompatibel zu Excel. (Falls zwei Argumente "
"übergeben werden, darf bei Excel keines der beiden negativ sein.)\n"
"\n"
"@EXAMPLES=\n"
"ERF(0.4) liefert 0.428392355.\n"
"ERF(1.6448536269515/SQRT(2)) liefert 0.90.\n"
"\n"
"Das zweite Beispiel zeigt, dass eine zufällige Variable mit einer Gauß'schen "
"Verteilung eine Chance von 90% hat innerhalb einer geschätzten "
"Standardabweichung von 1.645 um den Mittelwert zu sein.\n"
"@SEEALSO=FEHLERFK"

#: ../plugins/fn-eng/functions.c:1279
msgid ""
"@FUNCTION=ERFC\n"
"@SYNTAX=ERFC(x)\n"
"@DESCRIPTION=ERFC function returns the complementary error function, defined "
"as\n"
"\n"
"\t1 - erf(x).\n"
"\n"
"erfc(x) is calculated more accurately than 1 - erf(x) for arguments larger "
"than about 0.5.\n"
"\n"
"* If @x is not numeric a #VALUE! error is returned.  \n"
"@EXAMPLES=\n"
"ERFC(6) equals 2.15197367e-17.\n"
"\n"
"@SEEALSO=ERF"
msgstr ""
"@FUNCTION=FEHLERFK\n"
"@SYNTAX=FEHLERFK(x)\n"
"@DESCRIPTION=FEHLERFK liefert die komplementäre Fehlerfunktion, die "
"definiert ist als:\n"
"\n"
"\t1 - erf(x).\n"
"\n"
"erfc(x) wird für Argumente, die ungefähr größer als 0.5 sind, exakter als 1 "
"- erf(x) berechnet.\n"
"\n"
"* Falls @x nicht numerisch ist, liefert FEHLERFK einen #WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ERFC(6) liefert 2.15197367e-17.\n"
"\n"
"@SEEALSO=FEHLERF"

#: ../plugins/fn-eng/functions.c:1310
msgid ""
"@FUNCTION=DELTA\n"
"@SYNTAX=DELTA(x[,y])\n"
"@DESCRIPTION=DELTA function tests for numerical equivalence of two "
"arguments, returning 1 in case of equality.\n"
"\n"
"* @y is optional, and defaults to 0.\n"
"* If either argument is non-numeric returns a #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DELTA(42.99,43) equals 0.\n"
"\n"
"@SEEALSO=EXACT,GESTEP"
msgstr ""
"@FUNCTION=DELTA\n"
"@SYNTAX=DELTA(x[,y])\n"
"@DESCRIPTION=DELTA überprüft die beiden Argumente @x und @y auf numerische "
"Äquivalenz, wobei im Falle der Gleichwertigkeit 1 geliefert wird.\n"
"\n"
"* @y ist optional, und die Vorgabe ist 0.\n"
"* Falls eines der Argumente keine Zahl ist, liefert DELTA einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DELTA(42.99,43) liefert 0.\n"
"\n"
"@SEEALSO=IDENTISCH,GESTEP"

#: ../plugins/fn-eng/functions.c:1342
#, fuzzy
msgid ""
"@FUNCTION=GESTEP\n"
"@SYNTAX=GESTEP(x[,y])\n"
"@DESCRIPTION=GESTEP function tests if @x is >= @y, returning 1 if it is so, "
"and 0 otherwise. @y is optional, and defaults to 0.\n"
"\n"
"* If either argument is non-numeric returns a #VALUE! error.\n"
"* This function is Excel compatible.\n"
"@EXAMPLES=\n"
"GESTEP(5,4) equals 1.\n"
"\n"
"@SEEALSO=DELTA"
msgstr ""
"@FUNCTION=GESTEP\n"
"@SYNTAX=GESTEP(x[,y])\n"
"@DESCRIPTION=GESTEP vergleicht @x und @y und liefert 1, falls @x >= @y, "
"andernfalls 0. @y ist optional und die Vorgabe ist 0.\n"
"\n"
"* Falls eines der Argumente nicht numerisch ist, liefert GESTEP einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"@EXAMPLES=\n"
"GESTEP(5,4) liefert 1.\n"
"\n"
"@SEEALSO=DELTA"

#: ../plugins/fn-eng/functions.c:1373
msgid ""
"@FUNCTION=INVSUMINV\n"
"@SYNTAX=INVSUMINV(x1,x2,...)\n"
"@DESCRIPTION=INVSUMINV sum calculates the inverse of the sum of inverses.\n"
"\n"
"The primary use of this is for calculating equivalent resistance for "
"parallel resistors or equivalent capacitance of a series of capacitors.\n"
"\n"
"* All arguments must be non-negative, or else a #VALUE! result is returned.\n"
"* If any argument is zero, the result is zero.\n"
"\n"
"@EXAMPLES=\n"
"INVSUMINV(2000,2000) equals 1000.\n"
"\n"
"@SEEALSO=HARMEAN"
msgstr ""

#: ../plugins/fn-erlang/functions.c:107
msgid ""
"@FUNCTION=PROBBLOCK\n"
"@SYNTAX=PROBBLOCK(traffic,circuits)\n"
"@DESCRIPTION=PROBBLOCK returns probability of blocking when a number of "
"@traffic loads into a number of @circuits (servers).\n"
"\n"
"* @traffic cannot exceed @circuits\n"
"\n"
"@EXAMPLES=\n"
"PROBBLOCK(24,30) returns 0.4012.\n"
"\n"
"@SEEALSO=OFFTRAF, DIMCIRC, OFFCAP"
msgstr ""

#: ../plugins/fn-erlang/functions.c:139
msgid ""
"@FUNCTION=OFFTRAF\n"
"@SYNTAX=OFFTRAF(traffic,circuits)\n"
"@DESCRIPTION=OFFTRAF returns a predicted number of offered traffic from a "
"number of carried @traffic (taken from measurements) on a number of "
"@circuits.\n"
"\n"
"* @traffic cannot exceed @circuits\n"
"\n"
"@EXAMPLES=\n"
"OFFTRAF(24,30) returns 25.527.\n"
"\n"
"@SEEALSO=PROBBLOCK, DIMCIRC, OFFCAP"
msgstr ""

#: ../plugins/fn-erlang/functions.c:208
msgid ""
"@FUNCTION=DIMCIRC\n"
"@SYNTAX=DIMCIRC(traffic,gos)\n"
"@DESCRIPTION=DIMCIRC returns a number of circuits required from a number of "
"@traffic loads with @gos grade of service.\n"
"\n"
"@EXAMPLES=\n"
"DIMCIRC(24,1%) returns 35.\n"
"\n"
"@SEEALSO=OFFCAP, OFFTRAF, PROBBLOCK"
msgstr ""

#: ../plugins/fn-erlang/functions.c:253
msgid ""
"@FUNCTION=OFFCAP\n"
"@SYNTAX=OFFCAP(circuits,gos)\n"
"@DESCRIPTION=OFFCAP returns a number of traffic capacity given by a number "
"of @circuits with @gos grade of service.\n"
"\n"
"@EXAMPLES=\n"
"OFFCAP(30,1%) returns 20.337.\n"
"\n"
"@SEEALSO=DIMCIRC, OFFTRAF, PROBBLOCK"
msgstr ""

#: ../plugins/fn-financial/functions.c:346
msgid ""
"@FUNCTION=ACCRINT\n"
"@SYNTAX=ACCRINT(issue,first_interest,settlement,rate,par,frequency[,basis])\n"
"@DESCRIPTION=ACCRINT calculates the accrued interest for a security that "
"pays periodic interest.\n"
"\n"
"@issue is the issue date of the security.  @first_interest is the first "
"interest date of the security.  @settlement is the settlement date of the "
"security.  The settlement date is always after the issue date (the date when "
"the security is bought). @rate is the annual rate of the security and @par "
"is the par value of the security. @frequency is the number of coupon "
"payments per year.\n"
"\n"
"Allowed frequencies are:\n"
"  1 = annual,\n"
"  2 = semi,\n"
"  4 = quarterly.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @issue date, @first_interest date, or @settlement date is not valid, "
"ACCRINT returns #NUM! error.\n"
"* The dates must be @issue < @first_interest < @settlement, or ACCRINT "
"returns #NUM! error.\n"
"* If @rate <= 0 or @par <= 0 , ACCRINT returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, ACCRINT returns #NUM! error.\n"
"* If @issue date is after @settlement date or they are the same, ACCRINT "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ACCRINTM"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:435
msgid ""
"@FUNCTION=ACCRINTM\n"
"@SYNTAX=ACCRINTM(issue,maturity,rate[,par,basis])\n"
"@DESCRIPTION=ACCRINTM calculates and returns the accrued interest for a "
"security from @issue to @maturity date.\n"
"\n"
"@issue is the issue date of the security.  @maturity is the maturity date of "
"the security.  @rate is the annual rate of the security and @par is the par "
"value of the security. If you omit @par, ACCRINTM applies $1,000 instead.  "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @issue date or @maturity date is not valid, ACCRINTM returns #NUM! "
"error.\n"
"* If @rate <= 0 or @par <= 0, ACCRINTM returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, ACCRINTM returns #NUM! error.\n"
"* If @issue date is after @maturity date or they are the same, ACCRINTM "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ACCRINT"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:493
#, fuzzy
msgid ""
"@FUNCTION=INTRATE\n"
"@SYNTAX=INTRATE(settlement,maturity,investment,redemption[,basis])\n"
"@DESCRIPTION=INTRATE calculates and returns the interest rate of a fully "
"vested security.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security. @investment is the price of the security paid "
"at @settlement date and @redemption is the amount to be received at "
"@maturity date.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, INTRATE returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, INTRATE returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, INTRATE "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"If you had a bond with a settlement date of April 15, 2000, maturity date "
"September 30, 2000, investment of $100,000, redemption value $103,525, using "
"the actual/actual basis, the bond discount rate is:\n"
"=INTRATE(36631, 36799, 100000, 103525, 1) which equals 0.0648 or 6.48%\n"
"@SEEALSO=RECEIVED, DATE"
msgstr ""
"@FUNCTION=ZINSSATZ\n"
"@SYNTAX=ZINSSATZ(Abrechnungsdatum,Fälligkeitsdatum,Investition,Auszahlung[,"
"Basis])\n"
"@DESCRIPTION=ZINSSATZ berechnet den Zinssatz eines vollständig erworbenen "
"Wertpapiers.\n"
"\n"
"@Abrechnungsdatum ist das Abrechnungsdatum und @Fälligkeitsdatum das "
"Fälligkeitsdatum des Wertpapiers. @Investition ist der am @Abrechnungsdatum "
"für das Wertpapier gezahlte Preis und @Auszahlung das voraussichtliche am "
"@Fälligkeitsdatum Kapital.\n"
"\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Abrechnungsdatum oder @Fälligkeitsdatum nicht gültig ist, liefert "
"ZINSSATZ einen #ZAHL!-Fehler.\n"
"* Falls @Abrechnungsdatum nach @Fälligkeitsdatum liegt oder beide den selben "
"Wert haben, liefert ZINSSATZ einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis < 0 oder > 4 ist, liefert KUPTAGE einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"If you had a bond with a settlement date of April 15, 2000, maturity date "
"September 30, 2000, investment of $100,000, redemption value $103,525, using "
"the actual/actual basis, the bond discount rate is:\n"
"=ZINSSATZ(36631, 36799, 100000, 103525, 1) which equals 0.0648 or 6.48%\n"
"@SEEALSO=RECEIVED, DATE"

#: ../plugins/fn-financial/functions.c:558
msgid ""
"@FUNCTION=RECEIVED\n"
"@SYNTAX=RECEIVED(settlement,maturity,investment,rate[,basis])\n"
"@DESCRIPTION=RECEIVED calculates and returns the amount to be received at "
"maturity date for a security bond.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security.  The amount of investment is specified in "
"@investment.  @rate is the security's discount rate.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, RECEIVED returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, RECEIVED returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, RECEIVED "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=INTRATE"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:620
msgid ""
"@FUNCTION=PRICEDISC\n"
"@SYNTAX=PRICEDISC(settlement,maturity,discount,redemption[,basis])\n"
"@DESCRIPTION=PRICEDISC calculates and returns the price per $100 face value "
"of a security bond.  The security does not pay interest at maturity.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security.  @discount is the rate for which the security "
"is discounted.  @redemption is the amount to be received on @maturity date.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, PRICEDISC returns "
"#NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, PRICEDISC returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, "
"PRICEDISC returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PRICEMAT"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:677
msgid ""
"@FUNCTION=PRICEMAT\n"
"@SYNTAX=PRICEMAT(settlement,maturity,issue,rate,yield[,basis])\n"
"@DESCRIPTION=PRICEMAT calculates and returns the price per $100 face value "
"of a security.  The security pays interest at maturity.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security.  @issue is the issue date of the security.  "
"@rate is the discount rate of the security. @yield is the annual yield of "
"the security. @basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, PRICEMAT returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, PRICEMAT returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, PRICEMAT "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PRICEDISC"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:741
msgid ""
"@FUNCTION=DISC\n"
"@SYNTAX=DISC(settlement,maturity,par,redemption[,basis])\n"
"@DESCRIPTION=DISC calculates and returns the discount rate for a security. "
"@settlement is the settlement date of the security.\n"
"\n"
"@maturity is the maturity date of the security.  @par is the price per $100 "
"face value of the security.  @redemption is the redemption value per $100 "
"face value of the security.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, DISC returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, DISC returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, DISC "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:797
msgid ""
"@FUNCTION=EFFECT\n"
"@SYNTAX=EFFECT(r,nper)\n"
"@DESCRIPTION=EFFECT calculates the effective interest rate from a given "
"nominal rate.\n"
"\n"
"Effective interest rate is calculated using this formula:\n"
"\n"
"    (1 + @r / @nper) ^ @nper - 1\n"
"\n"
"where:\n"
"\n"
"@r = nominal interest rate (stated in yearly terms)\n"
"@nper = number of periods used for compounding\n"
"\n"
"* If @rate < 0, EFFECT returns #NUM! error.\n"
"* If @nper <= 0, EFFECT returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"For example credit cards will list an APR (annual percentage rate) which is "
"a nominal interest rate.\n"
"For example if you wanted to find out how much you are actually paying "
"interest on your credit card that states an APR of 19% that is compounded "
"monthly you would type in:\n"
"=EFFECT(.19,12) and you would get .2075 or 20.75%. That is the effective "
"percentage you will pay on your loan.\n"
"@SEEALSO=NOMINAL"
msgstr ""
"@FUNCTION=EFFEKTIV\n"
"@SYNTAX=EFFEKTIV(Zinssatz,Periodenanzahl)\n"
"@DESCRIPTION=EFFEKTIV liefert den Effektivzinssatz eines angegebenen "
"nominalen Zinssatzes.\n"
"\n"
"Der Effektivzinssatz mit folgender Formel berechnet:\n"
"\n"
"    (1 + @Zinssatz / @Periodenanzahl) ^ @Periodenanzahl - 1\n"
"\n"
"wobei:\n"
"\n"
"@r = nominal interest rate (stated in yearly terms)\n"
"@Periodenanzahl = number of periods used for compounding\n"
"\n"
"* Falls @Zinssatz < 0 ist, liefert EFFEKTIV einen #ZAHL!-Fehler.\n"
"* Falls @Periodenanzahl <= 0 ist, liefert EFFEKTIV einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"Kreditkarten verzeichnen eine jährliche Gesamtbelastung, die ein nominaler "
"Zinssatz ist.\n"
"Wollen Sie beispielsweise herausfinden, wie viele Zinsen Sie für Ihre "
"Kreditkarte mit einer jährlichen Gesamtbelastung von 19%, die monatlich "
"verzinst wird, zahlen, so müssen Sie folgendes eingeben:\n"
"=EFFEKTIV(.19,12)\n"
"liefert .2075 oder 20.75%. Dies ist der effektive Anteil, den Sie auf Ihre "
"Anleihe Zahlen müssen.\n"
"@SEEALSO=NOMINAL"

#: ../plugins/fn-financial/functions.c:847
msgid ""
"@FUNCTION=NOMINAL\n"
"@SYNTAX=NOMINAL(r,nper)\n"
"@DESCRIPTION=NOMINAL calculates the nominal interest rate from a given "
"effective rate.\n"
"\n"
"Nominal interest rate is given by a formula:\n"
"\n"
"@nper * (( 1 + @r ) ^ (1 / @nper) - 1 )\n"
"where:\n"
"\n"
"@r = effective interest rate\n"
"@nper = number of periods used for compounding\n"
"\n"
"* If @rate < 0, NOMINAL returns #NUM! error.\n"
"* If @nper <= 0, NOMINAL returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=EFFECT"
msgstr ""
"@FUNCTION=NOMINAL\n"
"@SYNTAX=NOMINAL(Zinssatz,Periodenanzahl)\n"
"@DESCRIPTION=NOMINAL liefert den nominalen Zinssatz einer angegebenen "
"Effektivverzinsung.\n"
"\n"
"Der nominale Zinssatz wird mit folgender Formel berechnet:\n"
"\n"
"@Periodenanzahl * (( 1 + @Zinssatz ) ^ (1 / @Periodenanzahl) - 1 )\n"
"\n"
"wobei:\n"
"\n"
"@Zinssatz = Effektivverzinsung\n"
"@Periodenanzahl = number of periods used for compounding\n"
"\n"
"* Falls @Zinssatz < 0 ist, liefert NOMINAL einen #ZAHL!-Fehler.\n"
"* Falls @Periodenanzahl <= 0 ist, liefert NOMINAL einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=EFFEKTIV"

#: ../plugins/fn-financial/functions.c:888
msgid ""
"@FUNCTION=ISPMT\n"
"@SYNTAX=ISPMT(rate,per,nper,pv)\n"
"@DESCRIPTION=ISPMT function returns the interest paid on a given period.\n"
"\n"
"* If @per < 1 or @per > @nper, ISPMT returns #NUM! error. \n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV"
msgstr ""
"@FUNCTION=ZINSZAHLUNG\n"
"@SYNTAX=ZINSZAHLUNG(Zins,Per,Periodenanzahl,BW)\n"
"@DESCRIPTION=ZINSZAHLUNG liefert den in einer bestimmten Periode gezahlten "
"Zins.\n"
"\n"
"* Falls @Per < 1 oder @Per > @Periodenanzahl, liefert ZINSZAHLUNG einen "
"#ZAHL!-Fehler.\n"
"@EXAMPLES=\n"
"PV\n"
"@SEEALSO=BW"

#: ../plugins/fn-financial/functions.c:928
msgid ""
"@FUNCTION=DB\n"
"@SYNTAX=DB(cost,salvage,life,period[,month])\n"
"@DESCRIPTION=DB calculates the depreciation of an asset for a given period "
"using the fixed-declining balance method.  @cost is the initial value of the "
"asset.  @salvage is the value after the depreciation.\n"
"\n"
"@life is the number of periods overall.  @period is the period for which you "
"want the depreciation to be calculated.  @month is the number of months in "
"the first year of depreciation.\n"
"\n"
"* If @month is omitted, it is assumed to be 12.\n"
"* If @cost = 0, DB returns #NUM! error.\n"
"* If @life <= 0, DB returns #NUM! error.\n"
"* If @salvage / @cost < 0, DB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DDB,SLN,SYD"
msgstr ""

#: ../plugins/fn-financial/functions.c:992
msgid ""
"@FUNCTION=DDB\n"
"@SYNTAX=DDB(cost,salvage,life,period[,factor])\n"
"@DESCRIPTION=DDB returns the depreciation of an asset for a given period "
"using the double-declining balance method or some other similar method you "
"specify.\n"
"\n"
"@cost is the initial value of the asset, @salvage is the value after the "
"last period, @life is the number of periods, @period is the period for which "
"you want the depreciation to be calculated, and @factor is the factor at "
"which the balance declines.\n"
"\n"
"* If @factor is omitted, it is assumed to be two (double-declining balance "
"method).\n"
"* If @life <= 0, DDB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=SLN,SYD"
msgstr ""

#: ../plugins/fn-financial/functions.c:1048
msgid ""
"@FUNCTION=SLN\n"
"@SYNTAX=SLN(cost,salvage_value,life)\n"
"@DESCRIPTION=SLN function will determine the straight line depreciation of "
"an asset for a single period.\n"
"\n"
"The formula is:\n"
"\n"
"Depreciation expense = ( @cost - @salvage_value ) / @life\n"
"\n"
"@cost is the cost of an asset when acquired (market value).\n"
"@salvage_value is the amount you get when asset is sold at the end of the "
"asset's useful life.\n"
"@life is the anticipated life of an asset.\n"
"\n"
"* If @life <= 0, SLN returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"For example, lets suppose your company purchases a new machine for $10,000, "
"which has a salvage value of $700 and will have a useful life of 10 years. "
"The SLN yearly depreciation is computed as follows:\n"
"=SLN(10000, 700, 10)\n"
"This will return the yearly depreciation figure of $930.\n"
"@SEEALSO=SYD"
msgstr ""

#: ../plugins/fn-financial/functions.c:1101
msgid ""
"@FUNCTION=SYD\n"
"@SYNTAX=SYD(cost,salvage_value,life,period)\n"
"@DESCRIPTION=SYD function calculates the sum-of-years digits depreciation "
"for an asset based on its cost, salvage value, anticipated life and a "
"particular period. This method accelerates the rate of the depreciation, so "
"that more depreciation expense occurs in earlier periods than in later ones. "
"The depreciable cost is the actual cost minus the salvage value. The useful "
"life is the number of periods (typically years) over which the asset is "
"depreciated.\n"
"\n"
"The Formula used for sum-of-years digits depreciation is:\n"
"\n"
"Depreciation expense =\n"
"\n"
"\t ( @cost - @salvage_value ) * (@life - @period + 1) * 2 / @life * (@life + "
"1).\n"
"\n"
"@cost is the cost of an asset when acquired (market value).\n"
"@salvage_value is the amount you get when asset sold at the end of its "
"useful life.\n"
"@life is the anticipated life of an asset.\n"
"@period is the period for which we need the expense.\n"
"\n"
"* If @life <= 0, SYD returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"For example say a company purchases a new computer for $5000 which has a "
"salvage value of $200, and a useful life of five years. We would use the "
"following to calculate the second year's depreciation using the SYD method:\n"
"=SYD(5000, 200, 5, 2) which returns 1,280.00.\n"
"@SEEALSO=SLN"
msgstr ""

#: ../plugins/fn-financial/functions.c:1162
msgid ""
"@FUNCTION=DOLLARDE\n"
"@SYNTAX=DOLLARDE(fractional_dollar,fraction)\n"
"@DESCRIPTION=DOLLARDE converts a dollar price expressed as a fraction into a "
"dollar price expressed as a decimal number.\n"
"\n"
"@fractional_dollar is the fractional number to be converted. @fraction is "
"the denominator of the fraction.\n"
"\n"
"* If @fraction is non-integer it is truncated.\n"
"* If @fraction <= 0, DOLLARDE returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARFR"
msgstr ""
"@FUNCTION=DOLLARDEZ\n"
"@SYNTAX=DOLLARDEZ(Dollar_gebrochen,Bruch)\n"
"@DESCRIPTION=DOLLARDEZ konvertiert einen als Bruch in einen als Dezimalzahl "
"ausgedrückten Dollarpreis.\n"
"\n"
"@Dollar_gebrochen ist die zu konvertierende Bruchzahl, @Bruch der Nenner des "
"Bruches.\n"
"\n"
"* Falls @Bruch keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @Bruch <= 0 ist, liefert DOLLARDEZ einen #ZAHL!-Fehler.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARBRUCH"

#: ../plugins/fn-financial/functions.c:1221
msgid ""
"@FUNCTION=DOLLARFR\n"
"@SYNTAX=DOLLARFR(decimal_dollar,fraction)\n"
"@DESCRIPTION=DOLLARFR converts a decimal dollar price into a dollar price "
"expressed as a fraction.\n"
"\n"
"* If @fraction is non-integer it is truncated.\n"
"* If @fraction <= 0, DOLLARFR returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARDE"
msgstr ""
"@FUNCTION=DOLLARBRUCH\n"
"@SYNTAX=DOLLARBRUCH(Dollar_dezimal,Bruch)\n"
"@DESCRIPTION=DOLLARBRUCH konvertiert einen als Bruch in einen als "
"Dezimalzahl ausgedrückten Dollarpreis.\n"
"\n"
"* Falls @Bruch keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @Bruch <= 0 ist, liefert DOLLARBRUCH einen #ZAHL!-Fehler.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARDEZ"

#: ../plugins/fn-financial/functions.c:1275
msgid ""
"@FUNCTION=MIRR\n"
"@SYNTAX=MIRR(values,finance_rate,reinvest_rate)\n"
"@DESCRIPTION=MIRR function returns the modified internal rate of return for "
"a given periodic cash flow. \n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NPV"
msgstr ""
"@FUNCTION=MIZS\n"
"@SYNTAX=MIZS(Werte,Zins,Reinvestitionszins)\n"
"@DESCRIPTION=MIZS liefert den modifizierten internen Zinssatz für einen "
"angegebenen periodischen Zinsfluss.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NPV"

#: ../plugins/fn-financial/functions.c:1338
msgid ""
"@FUNCTION=TBILLEQ\n"
"@SYNTAX=TBILLEQ(settlement,maturity,discount)\n"
"@DESCRIPTION=TBILLEQ function returns the bond-yield equivalent (BEY) for a "
"treasury bill.  TBILLEQ is equivalent to\n"
"\n"
"\t(365 * @discount) / (360 - @discount * DSM),\n"
"\n"
"where DSM is the days between @settlement and @maturity.\n"
"\n"
"* If @settlement is after @maturity or the @maturity is set to over one year "
"later than the @settlement, TBILLEQ returns #NUM! error.\n"
"* If @discount is negative, TBILLEQ returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLPRICE,TBILLYIELD"
msgstr ""

#: ../plugins/fn-financial/functions.c:1389
msgid ""
"@FUNCTION=TBILLPRICE\n"
"@SYNTAX=TBILLPRICE(settlement,maturity,discount)\n"
"@DESCRIPTION=TBILLPRICE function returns the price per $100 value for a "
"treasury bill where @settlement is the settlement date and @maturity is the "
"maturity date of the bill.  @discount is the treasury bill's discount rate.\n"
"\n"
"* If @settlement is after @maturity or the @maturity is set to over one year "
"later than the @settlement, TBILLPRICE returns #NUM! error.\n"
"* If @discount is negative, TBILLPRICE returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLEQ,TBILLYIELD"
msgstr ""

#: ../plugins/fn-financial/functions.c:1435
msgid ""
"@FUNCTION=TBILLYIELD\n"
"@SYNTAX=TBILLYIELD(settlement,maturity,pr)\n"
"@DESCRIPTION=TBILLYIELD function returns the yield for a treasury bill. "
"@settlement is the settlement date and @maturity is the maturity date of the "
"bill.  @discount is the treasury bill's discount rate.\n"
"\n"
"* If @settlement is after @maturity or the @maturity is set to over one year "
"later than the @settlement, TBILLYIELD returns #NUM! error.\n"
"* If @pr is negative, TBILLYIELD returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLEQ,TBILLPRICE"
msgstr ""

#: ../plugins/fn-financial/functions.c:1481
#, fuzzy
msgid ""
"@FUNCTION=RATE\n"
"@SYNTAX=RATE(nper,pmt,pv[,fv,type,guess])\n"
"@DESCRIPTION=RATE calculates the rate of an investment.\n"
"\n"
"* If @pmt is ommitted it defaults to 0\n"
"* If @nper <= 0, RATE returns #NUM! error.\n"
"* If @type != 0 and @type != 1, RATE returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV,FV"
msgstr ""
"@FUNCTION=ZINS\n"
"@SYNTAX=ZINS(Periodenanzahl,pmt,pv[,fv,Type,guess])\n"
"@DESCRIPTION=ZINS liefert den Zinssatz einer Investition.\n"
"\n"
"* Falls @Periodenanzahl <= 0 ist, liefert ZINS einen #ZAHL!-Fehler.\n"
"* Falls @Typ != 0 und @type != 1 ist, liefert ZINS einen #WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV,FV"

#: ../plugins/fn-financial/functions.c:1597
msgid ""
"@FUNCTION=IRR\n"
"@SYNTAX=IRR(values[,guess])\n"
"@DESCRIPTION=IRR calculates and returns the internal rate of return of an "
"investment.  This function is closely related to the net present value "
"function (NPV).  The IRR is the interest rate for a series of cash flows "
"where the net preset value is zero.\n"
"\n"
"@values contains the series of cash flows generated by the investment.  The "
"payments should occur at regular intervals.  The optional @guess is the "
"initial value used in calculating the IRR.  You do not have to use that, it "
"is only provided for the Excel compatibility.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1:A8 contain the numbers -32432, 5324, 7432, "
"9332, 12324, 4334, 1235, -3422.  Then\n"
"IRR(A1:A8) returns 0.04375. \n"
"@SEEALSO=FV,NPV,PV"
msgstr ""

#: ../plugins/fn-financial/functions.c:1731
msgid ""
"@FUNCTION=PV\n"
"@SYNTAX=PV(rate,nper,pmt[,fv,type])\n"
"@DESCRIPTION=PV calculates the present value of an investment. @rate is the "
"periodic interest rate, @nper is the number of periods used for compounding. "
"@pmt is the payment made each period, @fv is the future value and @type is "
"when the payment is made.\n"
"\n"
"* If @type = 1 then the payment is made at the beginning of the period.\n"
"* If @type = 0 (or omitted) it is made at the end of each period.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=FV"
msgstr ""
"@FUNCTION=AW\n"
"@SYNTAX=AW(Zinssatz,Anzahl_Perioden,Zahlung[,ZW,type])\n"
"@DESCRIPTION=AW liefert den aktuellen Wert einer Investition. @Zinssatz ist "
"der periodische Zinssatz, @Anzahl_Perioden die zur Berechnung verwendete "
"Anzahl der Perioden. @Zahlung ist die in jeder Periode geleistete Zahlung, "
"@ZW der zukünftige Wert und @Typ gibt an, wann die Zahlung zu leisten ist.\n"
"\n"
"* Falls @Typ 1 ist, ist die Zahlung am Anfang jeder Periode zu leisten.\n"
"* Falls @Typ 1 ist (oder nicht übergeben wird), ist die Zahlung am Ende "
"jeder Periode zu leisten.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ZW"

#: ../plugins/fn-financial/functions.c:1779
msgid ""
"@FUNCTION=NPV\n"
"@SYNTAX=NPV(rate,v1,v2,...)\n"
"@DESCRIPTION=NPV calculates the net present value of an investment "
"generating periodic payments.  @rate is the periodic interest rate and @v1, "
"@v2, ... are the periodic payments.  If the schedule of the cash flows are "
"not periodic use the XNPV function. \n"
"@EXAMPLES=\n"
"NPV(0.17,-10000,3340,2941,2493,3233,1732,2932) equals 186.30673.\n"
"\n"
"@SEEALSO=PV,XNPV"
msgstr ""
"@FUNCTION=AKTW\n"
"@SYNTAX=AKTW(Zinssatz,v1,v2,...)\n"
"@DESCRIPTION=AKTW berechnet den aktualisierten Wert einer Investition, die "
"periodische Zahlungen generiert. @Zinssatz ist der periodische Zinssatz und "
"@v1, @v2, ... die periodischen Zahlungen. Falls der Kapitalfluss nicht "
"periodisch ist, müssen Sie die XNPV-Funktion verwenden.\n"
"@EXAMPLES=\n"
"AKTW(0.17,-10000,3340,2941,2493,3233,1732,2932) liefert 186.30673.\n"
"\n"
"@SEEALSO=AW,XAKTW"

#: ../plugins/fn-financial/functions.c:1830
msgid ""
"@FUNCTION=XNPV\n"
"@SYNTAX=XNPV(rate,values,dates)\n"
"@DESCRIPTION=XNPV calculates the net present value of an investment.  The "
"schedule of the cash flows is given in @dates array.  The first date "
"indicates the beginning of the payment schedule.  @rate is the interest rate "
"and @values are the payments.\n"
"\n"
"* If @values and @dates contain unequal number of values, XNPV returns the "
"#NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NPV,PV"
msgstr ""
"@FUNCTION=XAKTW\n"
"@SYNTAX=XAKTW(Zinssatz,Werte,Data)\n"
"@DESCRIPTION=XAKTW berechnet den aktualisierten Wert einer Investition. Das "
"Feld @Data gibt die jeweiligen Daten des Geldflusses an, @Zinssatz ist der "
"Zinssatz und @Werte sind die Zahlungen.\n"
"\n"
"* Falls @Werte und @Data eine unterschiedliche Werteanzahl enthalten, "
"liefert XAKTW einen #ZAHL!-Fehler.\n"
"\n"
" @EXAMPLES=\n"
"\n"
"@SEEALSO=AKTW,AW"

#: ../plugins/fn-financial/functions.c:1892
msgid ""
"@FUNCTION=XIRR\n"
"@SYNTAX=XIRR(values,dates[,guess])\n"
"@DESCRIPTION=XIRR calculates and returns the internal rate of return of an "
"investment that has not necessarily periodic payments.  This function is "
"closely related to the net present value function (NPV and XNPV).  The XIRR "
"is the interest rate for a series of cash flows where the XNPV is zero.\n"
"\n"
"@values contains the series of cash flows generated by the investment.  "
"@dates contains the dates of the payments.  The first date describes the "
"payment day of the initial payment and thus all the other dates should be "
"after this date. The optional @guess is the initial value used in "
"calculating the XIRR.  You do not have to use that, it is only provided for "
"the Excel compatibility.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1:A5 contain the numbers -6000, 2134, 1422, "
"1933, and 1422, and the cells B1:B5 contain the dates \"1999-01-15\", \"1999-"
"04-04\", \"1999-05-09\", \"2000-03-12\", and \"2000-05-1\". Then\n"
"XIRR(A1:A5,B1:B5) returns 0.224838. \n"
"@SEEALSO=IRR,XNPV"
msgstr ""

#: ../plugins/fn-financial/functions.c:2012
msgid ""
"@FUNCTION=FV\n"
"@SYNTAX=FV(rate,nper,pmt[,pv,type])\n"
"@DESCRIPTION=FV computes the future value of an investment. This is based on "
"periodic, constant payments and a constant interest rate. The interest rate "
"per period is @rate, @nper is the number of periods in an annuity, @pmt is "
"the payment made each period, @pv is the present value and @type is when the "
"payment is made.\n"
"\n"
"* If @type = 1 then the payment is made at the beginning of the period.\n"
"* If @type = 0 it is made at the end of each period.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV,PMT,PPMT"
msgstr ""
"@FUNCTION=ZW\n"
"@SYNTAX=ZW(rate,term,pmt,pv,type)\n"
"@DESCRIPTION=ZW berechnet den zukünftigen Wert einer Investition auf Basis "
"von periodisch konstanten Zahlungen und einem konstanten Zinssatz. @Zins ist "
"der Zinssatz pro Periode, @Tern die Anzahl der Perioden in einer Annuität, "
"@Zahlung die jede Periode geleistete Zahlung, @AW der aktuelle Wert und @Typ "
"legt fest, wann die Zahlung zu leisten ist.\n"
"\n"
"* Falls @Typ 1 ist, ist die Zahlung am Anfang jeder Periode zu leisten.\n"
"* Falls @Typ 1 ist (oder nicht übergeben wird), ist die Zahlung am Ende "
"jeder Periode zu leisten.\n"
"@EXAMPLES=\n"
"@SEEALSO=AW,ZAHLUNG,PPMT"

#: ../plugins/fn-financial/functions.c:2056
msgid ""
"@FUNCTION=PMT\n"
"@SYNTAX=PMT(rate,nper,pv[,fv,type])\n"
"@DESCRIPTION=PMT returns the amount of payment for a loan based on a "
"constant interest rate and constant payments (each payment is equal "
"amount).\n"
"\n"
"@rate is the constant interest rate.\n"
"@nper is the overall number of payments.\n"
"@pv is the present value.\n"
"@fv is the future value.\n"
"@type is the type of the payment: 0 means at the end of the period and 1 "
"means at the beginning of the period.\n"
"\n"
"* If @fv is omitted, Gnumeric assumes it to be zero.\n"
"* If @type is omitted, Gnumeric assumes it to be zero.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV"
msgstr ""
"@FUNCTION=AW\n"
"@SYNTAX=AW(Zinssatz,Anzahl_Perioden,Zahlung[,ZW,type])\n"
"@DESCRIPTION=AW liefert den aktuellen Wert einer Investition. @Zinssatz ist "
"der periodische Zinssatz, @Anzahl_Perioden die zur Berechnung verwendete "
"Anzahl der Perioden. @Zahlung ist die in jeder Periode geleistete Zahlung, "
"@ZW der zukünftige Wert und @Typ gibt an, wann die Zahlung zu leisten ist.\n"
"\n"
"* Falls @Typ 1 ist, ist die Zahlung am Anfang jeder Periode zu leisten.\n"
"* Falls @Typ 1 ist (oder nicht übergeben wird), ist die Zahlung am Ende "
"jeder Periode zu leisten.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ZW"

#: ../plugins/fn-financial/functions.c:2099
msgid ""
"@FUNCTION=IPMT\n"
"@SYNTAX=IPMT(rate,per,nper,pv[,fv,type])\n"
"@DESCRIPTION=IPMT calculates the amount of a payment of an annuity going "
"towards interest.\n"
"\n"
"Formula for IPMT is:\n"
"\n"
"IPMT(PER) = -PRINCIPAL(PER-1) * INTEREST_RATE\n"
"\n"
"where:\n"
"\n"
"PRINCIPAL(PER-1) = amount of the remaining principal from last period\n"
"\n"
"* If @fv is omitted, it is assumed to be 0.\n"
"* If @type is omitted, it is assumed to be 0.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV"
msgstr ""

#: ../plugins/fn-financial/functions.c:2151
msgid ""
"@FUNCTION=PPMT\n"
"@SYNTAX=PPMT(rate,per,nper,pv[,fv,type])\n"
"@DESCRIPTION=PPMT calculates the amount of a payment of an annuity going "
"towards principal.\n"
"\n"
"Formula for it is:\n"
"PPMT(per) = PMT - IPMT(per)\n"
"where:\n"
"\n"
"PMT = Payment received on annuity\n"
"IPMT(per) = amount of interest for period @per\n"
"\n"
"* If @fv is omitted, it is assumed to be 0.\n"
"* If @type is omitted, it is assumed to be 0.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=IPMT,PV,FV"
msgstr ""

#: ../plugins/fn-financial/functions.c:2207
msgid ""
"@FUNCTION=NPER\n"
"@SYNTAX=NPER(rate,pmt,pv[,fv,type])\n"
"@DESCRIPTION=NPER calculates number of periods of an investment based on "
"periodic constant payments and a constant interest rate.\n"
"\n"
"The interest rate per period is @rate, @pmt is the payment made each period, "
"@pv is the present value, @fv is the future value and @type is when the "
"payments are due. If @type = 1, payments are due at the beginning of the "
"period, if @type = 0, payments are due at the end of the period.\n"
"\n"
"* If @rate <= 0, NPER returns #DIV0 error.\n"
"\n"
"@EXAMPLES=\n"
"For example, if you deposit $10,000 in a savings account that earns an "
"interest rate of 6%. To calculate how many years it will take to double your "
"investment use NPER as follows:\n"
"=NPER(0.06, 0, -10000, 20000,0)returns 11.895661046 which indicates that you "
"can double your money just before the end of the 12th year.\n"
"@SEEALSO=PPMT,PV,FV"
msgstr ""

#: ../plugins/fn-financial/functions.c:2267
msgid ""
"@FUNCTION=DURATION\n"
"@SYNTAX=DURATION(settlement,maturity,coup,yield,frequency[,basis])\n"
"@DESCRIPTION=DURATION calculates the duration of a security.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@coup The annual coupon rate as a percentage.\n"
"@yield The annualized yield of the security as a percentage.\n"
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, DURATION returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=G_DURATION,MDURATION"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2329
msgid ""
"@FUNCTION=G_DURATION\n"
"@SYNTAX=G_DURATION(rate,pv,fv)\n"
"@DESCRIPTION=G_DURATION calculates number of periods needed for an "
"investment to attain a desired value. This function is similar to FV and PV "
"with a difference that we do not need give the direction of cash flows e.g. -"
"100 for a cash outflow and +100 for a cash inflow.\n"
"\n"
"* If @rate <= 0, G_DURATION returns #DIV0 error.\n"
"* If @fv = 0 or @pv = 0, G_DURATION returns #DIV0 error.\n"
"* If @fv / @pv < 0, G_DURATION returns #VALUE error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV,DURATION,MDURATION"
msgstr ""

#: ../plugins/fn-financial/functions.c:2373
msgid ""
"@FUNCTION=FVSCHEDULE\n"
"@SYNTAX=FVSCHEDULE(principal,schedule)\n"
"@DESCRIPTION=FVSCHEDULE returns the future value of given initial value "
"after applying a series of compound periodic interest rates. The argument "
"@principal is the present value; @schedule is an array of interest rates to "
"apply. The @schedule argument must be a range of cells.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain interest rates 0.11, "
"0.13, 0.09, 0.17, and 0.03.  Then\n"
"FVSCHEDULE(3000,A1:A5) equals 4942.7911611.\n"
"@SEEALSO=PV,FV"
msgstr ""
"@FUNCTION=MITTELWERT\n"
"@SYNTAX=MITTELWERT(Wert1,Wert2[,...])\n"
"@DESCRIPTION=MITTELWERT berechnet den Mittelwert aller übergebenen Werte und "
"Zellen. Dieser wird durch das Teilen der Gesamtsumme der Argumente durch die "
"Anzahl selbiger berechnet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"MITTELWERT(A1:A5) 23.2.\n"
"\n"
"@SEEALSO=SUMME, ANZAHL"

#: ../plugins/fn-financial/functions.c:2420
msgid ""
"@FUNCTION=EURO\n"
"@SYNTAX=EURO(currency)\n"
"@DESCRIPTION=EURO converts one Euro to a given national currency in the "
"European monetary union.\n"
"\n"
"@currency is one of the following:\n"
"\n"
"    ATS\t(Austria)\n"
"    BEF\t(Belgium)\n"
"    DEM\t(Germany)\n"
"    ESP\t(Spain)\n"
"    EUR\t(Euro)\n"
"    FIM\t(Finland)\n"
"    FRF\t(France)\n"
"    GRD\t(Greek)\n"
"    IEP\t(Ireland)\n"
"    ITL\t(Italy)\n"
"    LUF\t(Luxembourg)\n"
"    NLG\t(Netherlands)\n"
"    PTE\t(Portugal)\n"
"\n"
"* If the given @currency is other than one of the above, EURO returns #NUM! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"EURO(\"DEM\") returns 1.95583.\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=EURO\n"
"@SYNTAX=EURO(Währung)\n"
"@DESCRIPTION=EURO konvertiert einen Euro in die angegebene nationale Währung "
"der europäischen Währungsunion.\n"
"\n"
"@Währung muss eine der Folgenden sein:\n"
"\n"
"    ATS\t(Österreich)\n"
"    BEF\t(Belgien)\n"
"    DEM\t(Deutschland)\n"
"    ESP\t(Spanien)\n"
"    EUR\t(Euro)\n"
"    FIM\t(Finnland)\n"
"    FRF\t(Frankreich)\n"
"    GRD\t(Griechenland)\n"
"    IEP\t(Irland)\n"
"    ITL\t(Italien)\n"
"    LUF\t(Luxemburg)\n"
"    NLG\t(Niederlande)\n"
"    PTE\t(Portugal)\n"
"\n"
"* Falls @Währung keine der oben aufgeführten ist, liefert EURO einen #ZAHL!-"
"Fehler.\n"
"@EXAMPLES=\n"
"EURO(\"DEM\") liefert 1.95583.\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2530
msgid ""
"@FUNCTION=EUROCONVERT\n"
"@SYNTAX=EUROCONVERT(n,source,target)\n"
"@DESCRIPTION=EUROCONVERT converts the currency value @n of @source currency "
"to a target currency @target. Both currencies are given as three-letter "
"strings using the ISO code system names.  The following currencies are "
"available:\n"
"\n"
"    ATS\t(Austria)\n"
"    BEF\t(Belgium)\n"
"    DEM\t(Germany)\n"
"    ESP\t(Spain)\n"
"    EUR\t(Euro)\n"
"    FIM\t(Finland)\n"
"    FRF\t(France)\n"
"    GRD\t(Greek)\n"
"    IEP\t(Ireland)\n"
"    ITL\t(Italy)\n"
"    LUF\t(Luxembourg)\n"
"    NLG\t(Netherlands)\n"
"    PTE\t(Portugal)\n"
"\n"
"* If the given @source or @target is other than one of the above, "
"EUROCONVERT returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"EUROCONVERT(2.1,\"DEM\",\"EUR\") returns 1.07.\n"
"@SEEALSO=EURO"
msgstr ""
"@FUNCTION=EUROKONVERTIEREN\n"
"@SYNTAX=EUROKONVERTIEREN(n,Quelle,Ziel)\n"
"@DESCRIPTION=EUROKONVERTIEREN konvertiert den Währungswert @n der Währung "
"@Quelle in die Währung @Ziel. Beide Währungen müssen als Zeichenkette im aus "
"drei Buchstaben bestehenden ISO-Ländercode übergeben werden.\n"
"\n"
"Folgende Währungen sind verfügbar:\n"
"\n"
"    ATS\t(Österreich)\n"
"    BEF\t(Belgien)\n"
"    DEM\t(Deutschland)\n"
"    ESP\t(Spanien)\n"
"    EUR\t(Euro)\n"
"    FIM\t(Finnland)\n"
"    FRF\t(Frankreich)\n"
"    GRD\t(Griechenland)\n"
"    IEP\t(Irland)\n"
"    ITL\t(Italien)\n"
"    LUF\t(Luxemburg)\n"
"    NLG\t(Niederlande)\n"
"    PTE\t(Portugal)\n"
"\n"
"* Falls @Quelle oder @Ziel keine der oben aufgeführten ist, liefert EURO "
"einen #ZAHL!-Fehler.\n"
"@EXAMPLES=\n"
"EURO(2.1,\"DEM\",\"EUR\") liefert 1.07.\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2580
msgid ""
"@FUNCTION=PRICE\n"
"@SYNTAX=PRICE(settle,mat,rate,yield,redemption_price,[frequency,basis])\n"
"@DESCRIPTION=PRICE returns price per $100 face value of a security. This "
"method can only be used if the security pays periodic interest.\n"
"\n"
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, PRICE returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2647
msgid ""
"@FUNCTION=YIELD\n"
"@SYNTAX=YIELD(settlement,maturity,rate,price,redemption_price,frequency[,"
"basis])\n"
"@DESCRIPTION=YIELD returns the yield on a security that pays periodic "
"interest.\n"
"\n"
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, YIELD returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2770
msgid ""
"@FUNCTION=YIELDDISC\n"
"@SYNTAX=YIELDDISC(settlement,maturity,pr,redemption[,basis])\n"
"@DESCRIPTION=YIELDDISC calculates the annual yield of a security that is "
"discounted.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security. @pr is the price per $100 face value of the "
"security. @redemption is the redemption value per $100 face value. @basis is "
"the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, YIELDDISC returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2834
#, fuzzy
msgid ""
"@FUNCTION=YIELDMAT\n"
"@SYNTAX=YIELDMAT(settlement,maturity,issue,rate,pr[,basis])\n"
"@DESCRIPTION=YIELDMAT calculates the annual yield of a security for which "
"the interest is paid at maturity date.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @issue is the issue date of the security. "
"@rate is the interest rate set to the security. @pr is the price per $100 "
"face value of the security. @basis is the type of day counting system you "
"want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2890
msgid ""
"@FUNCTION=ODDFPRICE\n"
"@SYNTAX=ODDFPRICE(settlement,maturity,issue,first_coupon,rate,yld,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDFPRICE returns the price per $100 face value of a security. "
"The security should have an odd short or long first period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @issue is the issue date of the security. "
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDFPRICE returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3047
msgid ""
"@FUNCTION=ODDFYIELD\n"
"@SYNTAX=ODDFYIELD(settlement,maturity,issue,first_coupon,rate,pr,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDFYIELD calculates the yield of a security having an odd "
"first period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @frequency is the number of coupon payments "
"per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDFYIELD returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3158
msgid ""
"@FUNCTION=ODDLPRICE\n"
"@SYNTAX=ODDLPRICE(settlement,maturity,last_interest,rate,yld,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDLPRICE calculates the price per $100 face value of a "
"security that has an odd last coupon period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @frequency is the number of coupon payments "
"per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDLPRICE returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3252
msgid ""
"@FUNCTION=ODDLYIELD\n"
"@SYNTAX=ODDLYIELD(settlement,maturity,last_interest,rate,pr,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDLYIELD calculates the yield of a security having an odd last "
"period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @frequency is the number of coupon payments "
"per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDLYIELD returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3346
msgid ""
"@FUNCTION=AMORDEGRC\n"
"@SYNTAX=AMORDEGRC(cost,purchase_date,first_period,salvage,period,rate[,"
"basis])\n"
"@DESCRIPTION=AMORDEGRC: Calculates depreciation for each accounting period "
"using French accounting conventions.   Assets purchased in the middle of a "
"period take prorated depreciation into account.  This is similar to "
"AMORLINC, except that a depreciation coefficient is applied in the "
"calculation depending on the life of the assets.\n"
"Named for AMORtissement DEGRessif Comptabilite\n"
"\n"
"@cost The value of the asset.\n"
"@purchase_date The date the asset was purchased.\n"
"@first_period The end of the first period.\n"
"@salvage Asset value at maturity.\n"
"@period The length of accounting periods.\n"
"@rate rate of depreciation as a percentage.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"AMORDEGRC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1) = 733\n"
"\n"
"@SEEALSO=AMORLINC"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3413
msgid ""
"@FUNCTION=AMORLINC\n"
"@SYNTAX=AMORLINC(cost,purchase_date,first_period,salvage,period,rate[,"
"basis])\n"
"@DESCRIPTION=AMORLINC: Calculates depreciation for each accounting period "
"using French accounting conventions.   Assets purchased in the middle of a "
"period take prorated depreciation into account.\n"
"Named for AMORtissement LINeaire Comptabilite.\n"
"\n"
"@cost The value of the asset.\n"
"@purchase_date The date the asset was purchased.\n"
"@first_period The end of the first period.\n"
"@salvage Asset value at maturity.\n"
"@period The length of accounting periods.\n"
"@rate rate of depreciation as a percentage.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"AMORLINC(2400,DATE(1998,8,19),DATE(1998,12,31),300,1,0.15,1) = 360\n"
"\n"
"@SEEALSO=AMORDEGRC"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Häufigkeit ist die Anzahl der Kupon-Zahlungen pro Jahr. Zulässige Werte "
"sind: 1 = jährlich, 2 = halbjährlich, 4 = vierteljährlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3475
msgid ""
"@FUNCTION=COUPDAYBS\n"
"@SYNTAX=COUPDAYBS(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYBS returns the number of days from the beginning of the "
"coupon period to the settlement date.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPDAYBS returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 89\n"
"COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 0\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KUPTAGENK\n"
"@SYNTAX=KUPTAGENK(Abrechnung,Fälligkeit,Häufigkeit[,Basis,EdM])\n"
"@DESCRIPTION=KUPTAGENK liefert die Anzahl der Tage vom Abrechnungsdatum bis "
"zum Datum des nächsten Kupons.\n"
"\n"
"@Abrechnung ist das Abrechnungsdatum der Sicherheit.\n"
"@Fälligkeit ist das Fälligkeitsdatum der Sicherheit.\n"
"@Häufigkeit ist die Anzahl der Kuponzahlungen pro Jahr.\n"
"@EdM = WAHR führt zu einer speziellen Handhabung des Monatsendes.\n"
"Zulässige Werte für @Häufigkeit: 1 = jährlich, 2 = halbjährlich, 4 = "
"vierteljährlich. 6 = zweimonatlich, 12 = monatlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3523
msgid ""
"@FUNCTION=COUPDAYS\n"
"@SYNTAX=COUPDAYS(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYS returns the number of days in the coupon period of the "
"settlement date.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPDAYS returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 90\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 90\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,1,FALSE) = 91\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KUPTAGE\n"
"@SYNTAX=KUPTAGE(Abrechnung,Fälligkeit,Häufigkeit[,Basis,EdM])\n"
"@DESCRIPTION=KUPTAGE liefert die Anzahl der Tage in der Kuponperiode des "
"Abrechnungsdatums.\n"
"\n"
"@Abrechnung ist das Abrechnungsdatum der Sicherheit.\n"
"@Fälligkeit ist das Fälligkeitsdatum der Sicherheit.\n"
"@Häufigkeit ist die Anzahl der Kuponzahlungen pro Jahr.\n"
"@EdM = WAHR führt zu einer speziellen Handhabung des Monatsendes.\n"
"Zulässige Werte für @Häufigkeit: 1 = jährlich, 2 = halbjährlich, 4 = "
"vierteljährlich. 6 = zweimonatlich, 12 = monatlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit ungültig ist, liefert KUPTAGE einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis ungültig ist, liefert KUPTAGE einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"KUPTAGE(DATUM(2002,11,29),DATUM(2004,2,29),4,0) liefert 90\n"
"KUPTAGE(DATUM(2002,11,29),DATUM(2004,2,29),4,0,FALSCH) liefert 90\n"
"KUPTAGE(DATUM(2002,11,29),DATUM(2004,2,29),4,1,FALSCH) liefert 91\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3572
msgid ""
"@FUNCTION=COUPDAYSNC\n"
"@SYNTAX=COUPDAYSNC(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYSNC returns the number of days from the settlement date "
"to the next coupon date.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPDAYSNC returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KUPTAGENK\n"
"@SYNTAX=KUPTAGENK(Abrechnung,Fälligkeit,Häufigkeit[,Basis,EdM])\n"
"@DESCRIPTION=KUPTAGENK liefert die Anzahl der Tage vom Abrechnungsdatum bis "
"zum Datum des nächsten Kupons.\n"
"\n"
"@Abrechnung ist das Abrechnungsdatum der Sicherheit.\n"
"@Fälligkeit ist das Fälligkeitsdatum der Sicherheit.\n"
"@Häufigkeit ist die Anzahl der Kuponzahlungen pro Jahr.\n"
"@EdM = WAHR führt zu einer speziellen Handhabung des Monatsendes.\n"
"Zulässige Werte für @Häufigkeit: 1 = jährlich, 2 = halbjährlich, 4 = "
"vierteljährlich. 6 = zweimonatlich, 12 = monatlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3620
msgid ""
"@FUNCTION=COUPNCD\n"
"@SYNTAX=COUPNCD(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPNCD returns the coupon date following settlement.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPNCD returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 30-Nov-2002\n"
"COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 28-Feb-2003\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KUPTAGENK\n"
"@SYNTAX=KUPTAGENK(Abrechnung,Fälligkeit,Häufigkeit[,Basis,EdM])\n"
"@DESCRIPTION=KUPTAGENK liefert die Anzahl der Tage vom Abrechnungsdatum bis "
"zum Datum des nächsten Kupons.\n"
"\n"
"@Abrechnung ist das Abrechnungsdatum der Sicherheit.\n"
"@Fälligkeit ist das Fälligkeitsdatum der Sicherheit.\n"
"@Häufigkeit ist die Anzahl der Kuponzahlungen pro Jahr.\n"
"@EdM = WAHR führt zu einer speziellen Handhabung des Monatsendes.\n"
"Zulässige Werte für @Häufigkeit: 1 = jährlich, 2 = halbjährlich, 4 = "
"vierteljährlich. 6 = zweimonatlich, 12 = monatlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3669
msgid ""
"@FUNCTION=COUPPCD\n"
"@SYNTAX=COUPPCD(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPPCD returns the coupon date preceding settlement.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPPCD returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 31-Aug-2002\n"
"COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 29-Nov-2002\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KUPTAGENK\n"
"@SYNTAX=KUPTAGENK(Abrechnung,Fälligkeit,Häufigkeit[,Basis,EdM])\n"
"@DESCRIPTION=KUPTAGENK liefert die Anzahl der Tage vom Abrechnungsdatum bis "
"zum Datum des nächsten Kupons.\n"
"\n"
"@Abrechnung ist das Abrechnungsdatum der Sicherheit.\n"
"@Fälligkeit ist das Fälligkeitsdatum der Sicherheit.\n"
"@Häufigkeit ist die Anzahl der Kuponzahlungen pro Jahr.\n"
"@EdM = WAHR führt zu einer speziellen Handhabung des Monatsendes.\n"
"Zulässige Werte für @Häufigkeit: 1 = jährlich, 2 = halbjährlich, 4 = "
"vierteljährlich. 6 = zweimonatlich, 12 = monatlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis ungültig ist, liefert KUPTAGENK einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3719
msgid ""
"@FUNCTION=COUPNUM\n"
"@SYNTAX=COUPNUM(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPNUM returns the numbers of coupons to be paid between the "
"settlement and maturity dates, rounded up.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"* If @frequency is other than 1, 2, 4, 6 or 12, COUPNUM returns #NUM! "
"error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is not in between 0 and 5, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0) = 6\n"
"COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 5\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KUPANZAHL\n"
"@SYNTAX=KUPANZAHL(Abrechnung,Fälligkeit,Häufigkeit[,Basis,EdM])\n"
"@DESCRIPTION=KUPANZAHL liefert die zwischen den Abrechnungs- und dem "
"Fälligkeitsdata zu zahlenden Kupons (aufgerundet).\n"
"\n"
"@Abrechnung ist das Abrechnungsdatum der Sicherheit.\n"
"@Fälligkeit ist das Fälligkeitsdatum der Sicherheit.\n"
"@Häufigkeit ist die Anzahl der Kuponzahlungen pro Jahr.\n"
"@EdM = WAHR führt zu einer speziellen Handhabung des Monatsendes.\n"
"Zulässige Werte für @Häufigkeit: 1 = jährlich, 2 = halbjährlich, 4 = "
"vierteljährlich. 6 = zweimonatlich, 12 = monatlich.\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2 oder 4 ist, liefert KUPANZAHL einen "
"#ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert KUPANZAHL einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"KUPANZAHL(DATUM(2002,11,29),DATUM(2004,2,29),4,0) liefert 6\n"
"KUPANZAHL(DATUM(2002,11,29),DATUM(2004,2,29),4,0,FALSCH) liefert 5\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3763
msgid ""
"@FUNCTION=CUMIPMT\n"
"@SYNTAX=CUMIPMT(rate,nper,pv,start_period,end_period,type)\n"
"@DESCRIPTION=CUMIPMT returns the cumulative interest paid on a loan between "
"@start_period and @end_period.\n"
"\n"
"* If @rate <= 0, CUMIPMT returns #NUM! error.\n"
"* If @nper <= 0, CUMIPMT returns #NUM! error.\n"
"* If @pv <= 0, CUMIPMT returns #NUM! error.\n"
"* If @start_period < 1, CUMIPMT returns #NUM! error.\n"
"* If @end_period < @start_period, CUMIPMT returns #NUM! error.\n"
"* If @end_period > @nper, CUMIPMT returns #NUM! error.\n"
"* If @type <> 0 and @type <> 1, CUMIPMT returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=GESZINSZ\n"
"@SYNTAX=GESZINSZ(Zinssatz,Periodenanzahl,pv,Periodenbeginn,Periodenende,"
"Typ)\n"
"@DESCRIPTION=GESZINSZ liefert die Zinsaufwendung für ein Darlehen zwischen "
"@Periodenbeginn und @Periodenende.\n"
"\n"
"* Falls @Zinssatz <= 0 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @Periodenanzahl <= 0 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @pv <= 0 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @Periodenbeginn < 1 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @Periodenende < @Periodenbeginn ist, liefert GESZINSZ einen #ZAHL!-"
"Fehler.\n"
"* Falls @Periodenende > @Periodenanzahl ist, liefert GESZINSZ einen #ZAHL!-"
"Fehler.\n"
"* Falls @Typ <> 0 und @Typ <> 1 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3816
msgid ""
"@FUNCTION=CUMPRINC\n"
"@SYNTAX=CUMPRINC(rate,nper,pv,start_period,end_period,type)\n"
"@DESCRIPTION=CUMPRINC returns the cumulative principal paid on a loan "
"between @start_period and @end_period.\n"
"\n"
"* If @rate <= 0, CUMPRINC returns #NUM! error.\n"
"* If @nper <= 0, CUMPRINC returns #NUM! error.\n"
"* If @pv <= 0, CUMPRINC returns #NUM! error.\n"
"* If @start_period < 1, CUMPRINC returns #NUM! error.\n"
"* If @end_period < @start_period, CUMPRINC returns #NUM! error.\n"
"* If @end_period > @nper, CUMPRINC returns #NUM! error.\n"
"* If @type <> 0 and @type <> 1, CUMPRINC returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=GESZINSK\n"
"@SYNTAX=GESZINSK(Zinssatz,Periodenanzahl,pv,Periodenbeginn,Periodenende,"
"Typ)\n"
"@DESCRIPTION=GESZINSK liefert die Kapitalaufwendung für ein Darlehen "
"zwischen @Periodenbeginn und @Periodenende.\n"
"\n"
"* Falls @Zinssatz <= 0 ist, liefert GESZINSK einen #ZAHL!-Fehler.\n"
"* Falls @Periodenanzahl <= 0 ist, liefert GESZINSK einen #ZAHL!-Fehler.\n"
"* Falls @pv <= 0 ist, liefert GESZINSK einen #ZAHL!-Fehler.\n"
"* Falls @Periodenbeginn < 1 ist, liefert GESZINSK einen #ZAHL!-Fehler.\n"
"* Falls @Periodenende < @Periodenbeginn ist, liefert GESZINSK einen #ZAHL!-"
"Fehler.\n"
"* Falls @Periodenende > @Periodenanzahl ist, liefert GESZINSK einen #ZAHL!-"
"Fehler.\n"
"* Falls @Typ <> 0 und @Typ <> 1 ist, liefert GESZINSK einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3869
msgid ""
"@FUNCTION=MDURATION\n"
"@SYNTAX=MDURATION(settlement,maturity,coupon,yield,frequency[,basis])\n"
"@DESCRIPTION=MDURATION returns the Macauley duration for a security with par "
"value 100.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"* If @settlement or @maturity are not valid dates, MDURATION returns #NUM! "
"error.\n"
"* If @frequency is other than 1, 2, or 4, MDURATION returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DURATION,G_DURATION"
msgstr ""
"@FUNCTION=ERTRAG\n"
"@SYNTAX=ERTRAG(settle,mat,rate,price,redemption_price,Häufigkeit[,Basis])\n"
"@DESCRIPTION=ERTRAG liefert den Ertrag auf eine Sicherheit, die einen "
"periodischen Zins abwirft.\n"
"\n"
"@Basis ist der Typ des zur Tagesberechnung verwendeten Systems:\n"
"\n"
"  0  MSRB 30/360 (MSRB Regel G33 (e))\n"
"  1  Tatsächliche Tage/Tatsächliche Tage\n"
"  2  Tatsächliche Tage/360\n"
"  3  Tatsächliche Tage/365\n"
"  4  Europäisch 30/360\n"
"  5  Europäisch + 30/360\n"
"\n"
"* Falls @Häufigkeit weder 1, noch 2, 4 oder ungültig ist, liefert ERTRAG "
"einen #ZAHL!-Fehler.\n"
"* Falls @Basis nicht übergeben wird, wird MSRB 30/360 angenommen.\n"
"* Falls @Basis nicht zwischen 0 und 4 liegt, liefert ERTRAG einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3930
msgid ""
"@FUNCTION=VDB\n"
"@SYNTAX=VDB(cost,salvage,life,start_period,end_period[,factor,switch])\n"
"@DESCRIPTION=VDB calculates the depreciation of an asset for a given period "
"or partial period using the double-declining balance method.\n"
"\n"
"* If @start_period < 0, VDB returns #NUM! error.\n"
"* If @start_period > @end_period, VDB returns #NUM! error.\n"
"* If @end_period > @life, VDB returns #NUM! error.\n"
"* If @cost < 0, VDB returns #NUM! error.\n"
"* If @salvage > @cost, VDB returns #NUM! error.\n"
"* If @factor <= 0, VDB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DB"
msgstr ""
"@FUNCTION=GESZINSZ\n"
"@SYNTAX=GESZINSZ(Zinssatz,Periodenanzahl,pv,Periodenbeginn,Periodenende,"
"Typ)\n"
"@DESCRIPTION=GESZINSZ liefert die Zinsaufwendung für ein Darlehen zwischen "
"@Periodenbeginn und @Periodenende.\n"
"\n"
"* Falls @Zinssatz <= 0 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @Periodenanzahl <= 0 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @pv <= 0 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @Periodenbeginn < 1 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"* Falls @Periodenende < @Periodenbeginn ist, liefert GESZINSZ einen #ZAHL!-"
"Fehler.\n"
"* Falls @Periodenende > @Periodenanzahl ist, liefert GESZINSZ einen #ZAHL!-"
"Fehler.\n"
"* Falls @Typ <> 0 und @Typ <> 1 ist, liefert GESZINSZ einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:69
msgid ""
"@FUNCTION=CELL\n"
"@SYNTAX=CELL(type,ref)\n"
"@DESCRIPTION=CELL returns information about the formatting, location, or "
"contents of a cell.\n"
"\n"
"@type specifies the type of information you want to obtain:\n"
"\n"
"  address    \tReturns the given cell reference as text.\n"
"  col        \t\tReturns the number of the column in @ref.\n"
"  contents   \tReturns the contents of the cell in @ref.\n"
"  format     \t\tReturns the code of the format of the cell.\n"
"  parentheses\tReturns 1 if @ref contains a negative value\n"
"             \t\tand its format displays it with parentheses.\n"
"  row        \t\tReturns the number of the row in @ref.\n"
"  width      \t\tReturns the column width.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Cell(\"format\",A1) returns the code of the format of the cell A1.\n"
"\n"
"@SEEALSO=INDIRECT"
msgstr ""
"@FUNCTION=ZELLE\n"
"@SYNTAX=ZELLE(Typ,Bezug)\n"
"@DESCRIPTION=ZELLE liefert Informationen zu Formatierung, Ort und Inhalt "
"einer Zelle.\n"
"\n"
"@Typ gibt den abzurufenden Informationstyp an:\n"
"\n"
"  address    \tliefert den übergebenen Zellbezug als Text.\n"
"  col        \t\tliefert die Anzahl der Spalten in @Bezug.\n"
"  contents   \tliefert den Inhalt der Zelle in @Bezug.\n"
"  format     \t\tliefert die Formatierungskennung der Zelle.\n"
"  parentheses\tliefert 1, falls @Bezug einen negativen Wert enthält\n"
"             \t\tund ihn dessen Formatierung eingeklammert anzeigt.\n"
"  row        \t\tliefert die Anzahl der Zeilen in @Bezug.\n"
"  width      \t\tliefert die Spaltenbreite.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ZELLE(\"format\",A1) liefert die Formatierungskennung der Zelle A1.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1166
msgid ""
"@FUNCTION=EXPRESSION\n"
"@SYNTAX=EXPRESSION(cell)\n"
"@DESCRIPTION=EXPRESSION returns expression in @cell as a string, or empty if "
"the cell is not an expression.\n"
"@EXAMPLES=\n"
"entering '=EXPRESSION(A3)' in A2 = empty (assuming there is nothing in A3).\n"
"entering '=EXPRESSION(A2)' in A1 = 'EXPRESSION(A3)'.\n"
"\n"
"@SEEALSO=TEXT"
msgstr ""
"@FUNCTION=AUSDRUCK\n"
"@SYNTAX=AUSDRUCK(Zelle)\n"
"@DESCRIPTION=AUSDRUCK liefert den Ausdruck in @Zelle als Zeichenkette, oder "
"nichts, falls die Zelle kein Ausdruck ist.\n"
"@EXAMPLES=\n"
"In A2 liefert AUSDRUCK(A3) nichts (angenommen, dass A3 leer ist).\n"
"In A1 liefert AUSDRUCK(A3) \"AUSDRUCK(A3)\".\n"
"\n"
"@SEEALSO=TEXT"

#: ../plugins/fn-info/functions.c:1213
msgid ""
"@FUNCTION=COUNTBLANK\n"
"@SYNTAX=COUNTBLANK(range)\n"
"@DESCRIPTION=COUNTBLANK returns the number of blank cells in a @range.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COUNTBLANK(A1:A20) returns the number of blank cell in A1:A20.\n"
"\n"
"@SEEALSO=COUNT"
msgstr ""
"@FUNCTION=ANZAHLLEEREZELLEN\n"
"@SYNTAX=ANZAHLLEEREZELLEN(Bereich)\n"
"@DESCRIPTION=ANZAHLLEEREZELLEN liefert die Anzahl leerer Zellen in "
"@Bereich.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ANZAHLLEEREZELLEN(A1:A20) liefert die Anzahl leerer Zellen in A1:A20.\n"
"\n"
"@SEEALSO=ANZAHL"

#: ../plugins/fn-info/functions.c:1264
msgid ""
"@FUNCTION=INFO\n"
"@SYNTAX=INFO(type)\n"
"@DESCRIPTION=INFO returns information about the current operating "
"environment. \n"
"\n"
"@type is the type of information you want to obtain:\n"
"\n"
"  memavail \tReturns the amount of memory available, bytes.\n"
"  memused  \tReturns the amount of memory used (bytes).\n"
"  numfile  \t\tReturns the number of active worksheets.\n"
"  osversion\t\tReturns the operating system version.\n"
"  recalc   \t\tReturns the recalculation mode (automatic).\n"
"  release  \t\tReturns the version of Gnumeric as text.\n"
"  system   \t\tReturns the name of the environment.\n"
"  totmem   \t\tReturns the amount of total memory available.\n"
"\n"
"* This function is Excel compatible, except that types directory and origin "
"are not implemented.\n"
"\n"
"@EXAMPLES=\n"
"INFO(\"system\") returns \"Linux\" on a Linux system.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=INFO\n"
"@SYNTAX=INFO(Typ)\n"
"@DESCRIPTION=INFO liefert Informationen zur aktuellen Arbeitsumgebung.\n"
"\n"
"@Typ ist der Informationstyp, den Sie erhalten möchten:\n"
"\n"
"  memavail \tLiefert den freien Speicher in Bytes.\n"
"  memused  \tLiefert den freien Speicher in Bytes.\n"
"  numfile  \t\tLiefert die Anzahl geöffneter Arbeitsbücher.\n"
"  osversion\t\tLiefert die Version des Betriebssystems.\n"
"  recalc   \t\tLiefert den Modus für die Neuberechnungs (automatisch).\n"
"  release  \t\tLiefert die verwendete Gnumeric-Version als Text.\n"
"  system   \t\tLiefert den Umgebungsname.\n"
"  totmem   \t\tLiefert den verfügbaren Gesamtspeicher in Bytes.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel, außer dass die Typen »directory« und "
"»origin« nicht implementiert sind.\n"
"\n"
"@EXAMPLES=\n"
"INFO(\"system\") liefert auf einem Linux-System \"Linux\".\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1372
msgid ""
"@FUNCTION=ISERROR\n"
"@SYNTAX=ISERROR(value)\n"
"@DESCRIPTION=ISERROR returns a TRUE value if the expression has an error.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISERROR(NA()) equals TRUE.\n"
"\n"
"@SEEALSO=ERROR"
msgstr ""
"@FUNCTION=ISTFEHLER\n"
"@SYNTAX=ISTFEHLER(Wert)\n"
"@DESCRIPTION=ISTFEHLER liefert WAHR, falls der Ausdruck einen Fehler "
"enthält.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTFEHLER(NA()) liefert WAHR.\n"
"@SEEALSO=FEHLER"

#: ../plugins/fn-info/functions.c:1397
msgid ""
"@FUNCTION=ISNA\n"
"@SYNTAX=ISNA(value)\n"
"@DESCRIPTION=ISNA returns TRUE if the value is the #N/A error value.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISNA(NA()) equals TRUE.\n"
"\n"
"@SEEALSO=NA"
msgstr ""
"@FUNCTION=ISTNV\n"
"@SYNTAX=ISTNV(Wert)\n"
"@DESCRIPTION=ISTNV liefert WAHR, falls der Wert der #NV-Fehlerwert ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTNV(NV()) liefert WAHR.\n"
"\n"
"@SEEALSO=NV"

#: ../plugins/fn-info/functions.c:1426
msgid ""
"@FUNCTION=ISERR\n"
"@SYNTAX=ISERR(value)\n"
"@DESCRIPTION=ISERR returns TRUE if the value is any error value except #N/"
"A.\n"
"\n"
"* This function is Excel compatible. \n"
"@EXAMPLES=\n"
"ISERR(NA()) return FALSE.\n"
"\n"
"@SEEALSO=ISERROR"
msgstr ""
"@FUNCTION=ISTFEHL\n"
"@SYNTAX=ISTFEHL(Wert)\n"
"@DESCRIPTION=ISTFEHL liefert WAHR, falls der Wert irgendein Fehler außer #NV "
"ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTFEHL(NV()) liefert FALSCH.\n"
"\n"
"@SEEALSO=ISTFEHLER"

#: ../plugins/fn-info/functions.c:1452
msgid ""
"@FUNCTION=ERROR.TYPE\n"
"@SYNTAX=ERROR.TYPE(value)\n"
"@DESCRIPTION=ERROR.TYPE returns an error number corresponding to the given "
"error value.  The error numbers for error values are:\n"
"\n"
"\t#DIV/0!  \t\t2\n"
"\t#VALUE!  \t3\n"
"\t#REF!    \t\t4\n"
"\t#NAME?   \t5\n"
"\t#NUM!    \t\t6\n"
"\t#N/A     \t\t7\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ERROR.TYPE(NA()) equals 7.\n"
"\n"
"@SEEALSO=ISERROR"
msgstr ""
"@FUNCTION=FEHLER.TYP\n"
"@SYNTAX=FEHLER.TYP(Wert)\n"
"@DESCRIPTION=ERROR.TYP liefert eine Fehlernummer, die dem angegebenen "
"Fehlerwert @Wert entspricht. Die Fehlernummern für die Fehlerwerte sind:\n"
"\n"
"\t#DIV/0!  \t\t2\n"
"\t#WERT!   \t3\n"
"\t#BEZUG!  \t\t4\n"
"\t#NAME?   \t5\n"
"\t#ZAHL!   \t\t6\n"
"\t#NV      \t\t7\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ERROR.TYP(NA()) liefert 7.\n"
"\n"
"@SEEALSO=ISTFEHLER"

#: ../plugins/fn-info/functions.c:1494
msgid ""
"@FUNCTION=NA\n"
"@SYNTAX=NA()\n"
"@DESCRIPTION=NA returns the error value #N/A.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NA() equals #N/A error.\n"
"\n"
"@SEEALSO=ISNA"
msgstr ""
"@FUNCTION=NV\n"
"@SYNTAX=NV()\n"
"@DESCRIPTION=NV liefert den Fehlerwert #NV.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"NA() liefert den Fehler #NV.\n"
"\n"
"@SEEALSO=ISTNV"

#: ../plugins/fn-info/functions.c:1519
msgid ""
"@FUNCTION=ERROR\n"
"@SYNTAX=ERROR(text)\n"
"@DESCRIPTION=ERROR return the specified error.\n"
"\n"
"@EXAMPLES=\n"
"ERROR(\"#OWN ERROR\").\n"
"\n"
"@SEEALSO=ISERROR"
msgstr ""
"@FUNCTION=FEHLER\n"
"@SYNTAX=FEHLER(Text)\n"
"@DESCRIPTION=FEHLER liefert den angegebenen Fehler.\n"
"\n"
"@EXAMPLES=\n"
"FEHLER(\"#MEIN FEHLER\").\n"
"\n"
"@SEEALSO=ISTFEHLER"

#: ../plugins/fn-info/functions.c:1543
msgid ""
"@FUNCTION=ISBLANK\n"
"@SYNTAX=ISBLANK(value)\n"
"@DESCRIPTION=ISBLANK returns TRUE if the value is blank.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISBLANK(A1).\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISTLEER\n"
"@SYNTAX=ISTLEER(Wert)\n"
"@DESCRIPTION=ISTLEER liefert WAHR, falls @Wert leer ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTLEER(A1).\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1568
msgid ""
"@FUNCTION=ISEVEN\n"
"@SYNTAX=ISEVEN(value)\n"
"@DESCRIPTION=ISEVEN returns TRUE if the number is even.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISEVEN(4) equals TRUE.\n"
"\n"
"@SEEALSO=ISODD"
msgstr ""
"@FUNCTION=ISTGERADE\n"
"@SYNTAX=ISTGERADE(Zahl)\n"
"@DESCRIPTION=ISTGERADE liefert WAHR, falls @Zahl gerade ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTGERADE(4) liefert WAHR.\n"
"@SEEALSO=ISTUNGERADE"

#: ../plugins/fn-info/functions.c:1597
msgid ""
"@FUNCTION=ISLOGICAL\n"
"@SYNTAX=ISLOGICAL(value)\n"
"@DESCRIPTION=ISLOGICAL returns TRUE if the value is a logical value.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISLOGICAL(A1).\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISTLOG\n"
"@SYNTAX=ISTLOG(Wert)\n"
"@DESCRIPTION=ISTLOG liefert WAHR, falls @Wert ein logischer Wert ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTLOG(A1).\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1622
msgid ""
"@FUNCTION=ISNONTEXT\n"
"@SYNTAX=ISNONTEXT(value)\n"
"@DESCRIPTION=ISNONTEXT Returns TRUE if the value is not text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISNONTEXT(\"text\") equals FALSE.\n"
"\n"
"@SEEALSO=ISTEXT"
msgstr ""
"@FUNCTION=ISTKTEXT\n"
"@SYNTAX=ISTKTEXT(Wert)\n"
"@DESCRIPTION=ISTKTEXT liefert WAHR, falls @Wert kein Text ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTKTEXT(\"Text\") liefert FALSCH.\n"
"\n"
"@SEEALSO=ISTTEXT"

#: ../plugins/fn-info/functions.c:1647
msgid ""
"@FUNCTION=ISNUMBER\n"
"@SYNTAX=ISNUMBER(value)\n"
"@DESCRIPTION=ISNUMBER returns TRUE if the value is a number.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISNUMBER(\"text\") equals FALSE.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISTZAHL\n"
"@SYNTAX=ISTZAHL(Wert)\n"
"@DESCRIPTION=ISTZAHL liefert WAHR, falls @Wert eine Zahl ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTZAHL(\"Text\") liefert FALSCH.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1672
msgid ""
"@FUNCTION=ISODD\n"
"@SYNTAX=ISODD(value)\n"
"@DESCRIPTION=ISODD returns TRUE if the number is odd.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISODD(3) equals TRUE.\n"
"\n"
"@SEEALSO=ISEVEN"
msgstr ""
"@FUNCTION=ISTUNGERADE\n"
"@SYNTAX=ISTUNGERADE(Zahl)\n"
"@DESCRIPTION=ISTUNGERADE liefert WAHR, falls @Zahl ungerade ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTUNGERADE(3) liefert WAHR.\n"
"@SEEALSO=ISTGERADE"

#: ../plugins/fn-info/functions.c:1701
msgid ""
"@FUNCTION=ISREF\n"
"@SYNTAX=ISREF(value)\n"
"@DESCRIPTION=ISREF returns TRUE if the value is a reference.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISREF(A1) equals TRUE.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISTBEZUG\n"
"@SYNTAX=ISTBEZUG(Wert)\n"
"@DESCRIPTION=ISTBEZUG liefert WAHR, falls der Wert ein Bezug ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTBEZUG(A1) liefert WAHR.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1730
msgid ""
"@FUNCTION=ISTEXT\n"
"@SYNTAX=ISTEXT(value)\n"
"@DESCRIPTION=ISTEXT returns TRUE if the value is text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISTEXT(\"text\") equals TRUE.\n"
"\n"
"@SEEALSO=ISNONTEXT"
msgstr ""
"@FUNCTION=ISTTEXT\n"
"@SYNTAX=ISTTEXT(Wert)\n"
"@DESCRIPTION=ISTTEXT liefert WAHR, falls der Wert ein Text ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ISTTEXT(\"Text\") liefert WAHR.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1755
msgid ""
"@FUNCTION=N\n"
"@SYNTAX=N(value)\n"
"@DESCRIPTION=N returns a value converted to a number.  Strings containing "
"text are converted to the zero value.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"N(\"42\") equals 42.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=N\n"
"@SYNTAX=N(Wert)\n"
"@DESCRIPTION=N wandelt @Wert in eine Zahl um. Zeichenketten, die Text "
"enthalten, werden in den Wert Null umgewandelt.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"N(\"42\") liefert 42.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1795
msgid ""
"@FUNCTION=TYPE\n"
"@SYNTAX=TYPE(value)\n"
"@DESCRIPTION=TYPE returns a number indicating the data type of a value.\n"
"\n"
"1  == number\n"
"2  == text\n"
"4  == boolean\n"
"16 == error\n"
"64 == array\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TYPE(3) equals 1.\n"
"TYPE(\"text\") equals 2.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=TYP\n"
"@SYNTAX=TYP(Wert)\n"
"@DESCRIPTION=TYP liefert eine Zahl, die den Datentyp von @Wert anzeigt.\n"
"\n"
"1 == Zahl\n"
"2 == Text\n"
"3 == Bool\n"
"16 == Fehler\n"
"64 == Feld\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TYP(3) liefert 1.\n"
"TYPE(\"Text\") liefert 2.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1844
msgid ""
"@FUNCTION=GETENV\n"
"@SYNTAX=GETENV(string)\n"
"@DESCRIPTION=GETENV retrieves a value from the execution environment.\n"
"\n"
"* If the variable specified by @string does not exist, #N/A! will be "
"returned.  Note, that variable names are case sensitive.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=UMGEBUNG.ZUORDNEN\n"
"@SYNTAX=UMGEBUNG.ZUORDNEN(Zeichenkette)\n"
"@DESCRIPTION=UMGEBUNG.ZUORDNEN ermittelt den Wert einer der beim Ausführen "
"verwendeten Umgebungsvariable.\n"
"\n"
"* Falls die von der Zeichenkette @Zeichenkette angegebene Variable nicht "
"existiert, liefert UMGEBUNG.ZUORDNEN einen #NV!-Fehler.\n"
"* Beachten Sie, dass bei Variablennamen zwischen Groß- und Kleinschreibung "
"unterschieden wird.\n"
"\n"
" @EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-logical/functions.c:45
#, fuzzy
msgid ""
"@FUNCTION=AND\n"
"@SYNTAX=AND(b1, b2, ...)\n"
"@DESCRIPTION=AND implements the logical AND function: the result is TRUE if "
"all of the expressions evaluate to TRUE, otherwise it returns FALSE.\n"
"\n"
"@b1 through @bN are expressions that should evaluate to TRUE or FALSE.  If "
"an integer or floating point value is provided, zero is considered FALSE and "
"anything else is TRUE.\n"
"\n"
"* If the values contain strings or empty cells those values are ignored.\n"
"* If no logical values are provided, then the error #VALUE! is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"AND(TRUE,TRUE) equals TRUE.\n"
"AND(TRUE,FALSE) equals FALSE.\n"
"\n"
"Let us assume that A1 holds number five and A2 number one.  Then\n"
"AND(A1>3,A2<2) equals TRUE.\n"
"\n"
"@SEEALSO=OR, NOT"
msgstr ""
"@FUNCTION=UND\n"
"@SYNTAX=UND(b1, b2, ...)\n"
"@DESCRIPTION=UND stellt die logische UND-Verknüpfung bereit: Das Ergebnis "
"ist WAHR, falls alle Ausdrücke WAHR sind, andernfalls FALSCH.\n"
"\n"
"@b1 bis @bN sind die auszuwertenden Ausdrücke. Falls ein ganzzahliger oder "
"Fließpunkt-Wert übergeben wird, wird für den Wert Null FALSCH, für alle "
"Anderen WAHR angenommen.\n"
"\n"
"* Falls die Werte Zeichenketten oder leere Zellen enthalten, werden diese "
"Werte ignoriert.\n"
"* Falls keine logischen Werte übergeben werden, liefert UND einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"UND(WAHR,WAHR) liefert WAHRF.\n"
"AND(WAHR,FALSCH) equals FALSCH.\n"
"\n"
"Angenommen, die Zelle A1 enthält 5 und A2 1. Dann liefert\n"
"UND(A1>3,A2<2) WAHR.\n"
"\n"
"@SEEALSO=ODER, NICHT"

#: ../plugins/fn-logical/functions.c:112
msgid ""
"@FUNCTION=NOT\n"
"@SYNTAX=NOT(number)\n"
"@DESCRIPTION=NOT implements the logical NOT function: the result is TRUE if "
"the @number is zero;  otherwise the result is FALSE.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NOT(0) equals TRUE.\n"
"NOT(TRUE) equals FALSE.\n"
"\n"
"@SEEALSO=AND, OR"
msgstr ""
"@FUNCTION=NICHT\n"
"@SYNTAX=NICHT(Zahl)\n"
"@DESCRIPTION=NICHT stellt die logische NICHT-Verknüpfung bereit: Das "
"Ergebnis ist WAHR, falls der Wert von @Zahl Null ist, andernfalls FALSCH.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"NICHT(0) liefert WAHR.\n"
"NICHT(WAHR) liefert FALSCH.\n"
"\n"
"@SEEALSO=UND, ODER"

#: ../plugins/fn-logical/functions.c:143
#, fuzzy
msgid ""
"@FUNCTION=OR\n"
"@SYNTAX=OR(b1, b2, ...)\n"
"@DESCRIPTION=OR implements the logical OR function: the result is TRUE if "
"any of the values evaluated to TRUE.\n"
"\n"
"@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If an "
"integer or floating point value is provided, zero is considered FALSE and "
"anything else is TRUE.\n"
"\n"
"* If the values contain strings or empty cells those values are ignored.\n"
"* If no logical values are provided, then the error #VALUE! is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OR(TRUE,FALSE) equals TRUE.\n"
"OR(3>4,4<3) equals FALSE.\n"
"\n"
"@SEEALSO=AND, NOT"
msgstr ""
"@FUNCTION=ODER\n"
"@SYNTAX=ODER(b1, b2, ...)\n"
"@DESCRIPTION=ODER stellt die logische ODER-Verknüpfung bereit: Das Ergebnis "
"ist WAHR, falls einer der übergebenen Werte WAHR ist.\n"
"\n"
"@b1 bis @bN sind die auszuwertenden Ausdrücke. Falls ein ganzzahliger oder "
"Fließpunkt-Wert übergeben wird, wird für den Wert Null FALSCH, für alle "
"Anderen WAHR angenommen.\n"
"\n"
"* Falls die Werte Zeichenketten oder leere Zellen enthalten, werden diese "
"Werte ignoriert.\n"
"* Falls keine logischen Werte übergeben werden, liefert ODER einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ODER(WAHR,FALSCH) liefert WAHR.\n"
"ODER(3>4,4<3) liefert FALSCH.\n"
"\n"
"@SEEALSO=UND, NICHT"

#: ../plugins/fn-logical/functions.c:207
#, fuzzy
msgid ""
"@FUNCTION=XOR\n"
"@SYNTAX=XOR(b1, b2, ...)\n"
"@DESCRIPTION=XOR implements the logical exclusive OR function: the result is "
"TRUE if an odd number of the values evaluated to TRUE.\n"
"\n"
"@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If an "
"integer or floating point value is provided, zero is considered FALSE and "
"anything else is TRUE.\n"
"\n"
"* If the values contain strings or empty cells those values are ignored.\n"
"* If no logical values are provided, then the error #VALUE! is returned.\n"
"@EXAMPLES=\n"
"XOR(TRUE,FALSE) equals TRUE.\n"
"XOR(3>4,4<3) equals FALSE.\n"
"\n"
"@SEEALSO=OR, AND, NOT"
msgstr ""
"@FUNCTION=XODER\n"
"@SYNTAX=XODER(b1, b2, ...)\n"
"@DESCRIPTION=XODER stellt die exklusive ODER-Verknüpfung bereit: Das "
"Ergebnis ist WAHR, falls eine ungerade Anzahl der Werte WAHR ist.\n"
"\n"
"@b1 bis @bN sind die auszuwertenden Ausdrücke. Falls ein ganzzahliger oder "
"Fließpunkt-Wert übergeben wird, wird für den Wert Null FALSCH, für alle "
"Anderen WAHR angenommen.\n"
"\n"
"* Falls die Werte Zeichenketten oder leere Zellen enthalten, werden diese "
"Werte ignoriert.\n"
"* Falls keine logischen Werte übergeben werden, liefert XODER einen #WERT!-"
"Fehler.\n"
"\n"
"XODER(WAHR,FALSCH) liefert WAHR.\n"
"XODER(3>4,4<3) liefert FALSCH.\n"
"\n"
"@SEEALSO=ODER, UND, NICHT"

#: ../plugins/fn-logical/functions.c:269
msgid ""
"@FUNCTION=IF\n"
"@SYNTAX=IF(condition[,if-true,if-false])\n"
"@DESCRIPTION=IF function can be used to evaluate conditionally other "
"expressions. IF evaluates @condition.  If @condition returns a non-zero "
"value the result of the IF expression is the @if-true expression, otherwise "
"IF evaluates to the value of @if-false.\n"
"\n"
"* If omitted @if-true defaults to TRUE and @if-false to FALSE.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IF(FALSE,TRUE,FALSE) equals FALSE.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=WENN\n"
"@SYNTAX=WENN(Bedingung[,wenn-wahr,wenn-falsch])\n"
"@DESCRIPTION=WENN kann zur fallweisen Auswertung anderer Ausdrücke verwendet "
"werden und wertet die Bedingung @Bedingung aus. Falls diese einen Wert != "
"Null liefert, ist das Ergebnis des WENN-Ausdrucks @wenn-wahr, andernfalls "
"@wenn-falsch.\n"
"\n"
"* Falls @wenn-wahr und @wenn-falsch nicht übergeben werden, wird WAHR für "
"@wenn-wahr bzw. FALSCH für @wenn-falsch angenommen.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WENN(FALSCH,WAHR,FALSCH) liefert FALSCH.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-logical/functions.c:310
msgid ""
"@FUNCTION=TRUE\n"
"@SYNTAX=TRUE()\n"
"@DESCRIPTION=TRUE returns boolean value true.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TRUE() equals TRUE.\n"
"\n"
"@SEEALSO=FALSE"
msgstr ""
"@FUNCTION=WAHR\n"
"@SYNTAX=WAHR()\n"
"@DESCRIPTION=WAHR liefert den Boole'schen Wert WAHR.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=WAHR() liefert WAHR.\n"
"\n"
"@SEEALSO=FALSCH"

#: ../plugins/fn-logical/functions.c:335
msgid ""
"@FUNCTION=FALSE\n"
"@SYNTAX=FALSE()\n"
"@DESCRIPTION=FALSE returns boolean value false.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FALSE() equals FALSE.\n"
"\n"
"@SEEALSO=TRUE"
msgstr ""
"@FUNCTION=FALSCH\n"
"@SYNTAX=FALSCH()\n"
"@DESCRIPTION=FALSCH liefert den Boole'schen Wert FALSCH.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=FALSCH() liefert FALSCH.\n"
"\n"
"@SEEALSO=WAHR"

#: ../plugins/fn-lookup/functions.c:327
msgid ""
"@FUNCTION=ADDRESS\n"
"@SYNTAX=ADDRESS(row_num,col_num[,abs_num,a1,text])\n"
"@DESCRIPTION=ADDRESS returns a cell address as text for specified row and "
"column numbers.\n"
"\n"
"@a1 is a logical value that specifies the reference style.  If @a1 is TRUE "
"or omitted, ADDRESS returns an A1-style reference, i.e. $D$4.  Otherwise "
"ADDRESS returns an R1C1-style reference, i.e. R4C4.\n"
"\n"
"@text specifies the name of the worksheet to be used as the external "
"reference.\n"
"\n"
"* If @abs_num is 1 or omitted, ADDRESS returns absolute reference.\n"
"* If @abs_num is 2 ADDRESS returns absolute row and relative column.\n"
"* If @abs_num is 3 ADDRESS returns relative row and absolute column.\n"
"* If @abs_num is 4 ADDRESS returns relative reference.\n"
"* If @abs_num is greater than 4 ADDRESS returns #VALUE! error.\n"
"* If @row_num or @col_num is less than one, ADDRESS returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"ADDRESS(5,4) equals \"$D$5\".\n"
"ADDRESS(5,4,4) equals \"D5\".\n"
"ADDRESS(5,4,3,FALSE) equals \"R[5]C4\".\n"
"\n"
"@SEEALSO=COLUMNNUMBER"
msgstr ""
"@FUNCTION=ADRESSE\n"
"@SYNTAX=ADRESSE(Zeilennummer,Spaltennummer[,Absolut,A1_Bezug,Text])\n"
"@DESCRIPTION=ADRESSE liefert die Adresse der Zelle mit der angegebenen "
"Zeilen- und Spaltennummer als Text.\n"
"\n"
"@A1 ist ein logischer Wert, der die Bezugsformatierung angibt. Falls dieser "
"WAHR ist oder nicht übergeben wird, liefert ADRESSE einen A1-formatierten "
"Zellbezug, also z.B. $D$4, andernfalls einen Zellbezug im R1C1-Format, also "
"z.B. R4C4.\n"
"\n"
"@Text gibt den Namen des als externer Bezug zu verwendenden Arbeitsbuchs "
"an.\n"
"\n"
"* Falls @Absolut 1 ist oder nicht übergeben wird, liefert ADRESSE den "
"absoluten Bezug.\n"
"* Falls @Absolut 2 ist, liefert ADRESSE die absolute Zeilen- und die "
"relative Spaltennummer.\n"
"* Falls @Absulut 3 ist, liefert ADRESSE die relative Zeilen- und die "
"absolute Spaltennummer.\n"
"* Falls @Absolut 4 ist, liefert ADRESSE den relativen Bezug.\n"
"* Falls @Absolut größer als 4 ist, liefert ADDRESSE einen #WERT!-Fehler.\n"
"* Falls @Zeilennummer oder @Spaltennummer kleiner als 1 ist, liefert ADRESSE "
"einen #WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ADRESSE(5,4) liefert \"$D$5\",\n"
"ADRESSE(5,4,4) \"D5\" und\n"
"ADRESSE(5,4,3,FALSCH) \"R[5]C4\".\n"
"\n"
"@SEEALSO=SPALTENNUMMER"

#: ../plugins/fn-lookup/functions.c:429
msgid ""
"@FUNCTION=AREAS\n"
"@SYNTAX=AREAS(reference)\n"
"@DESCRIPTION=AREAS returns the number of areas in @reference. \n"
"\n"
"@EXAMPLES=\n"
"AREAS((A1,B2,C3)) equals 3.\n"
"\n"
"@SEEALSO=ADDRESS,INDEX,INDIRECT,OFFSET"
msgstr ""
"@FUNCTION=BEREICHE\n"
"@SYNTAX=BEREICHE(@Bezug)\n"
"@DESCRIPTION=BEREICHE liefert die Anzahl der Bereiche in @Bezug.\n"
"\n"
"@EXAMPLES=\n"
"BEREICHE((A1,B2,C3)) liefert 3.\n"
"\n"
"@SEEALSO=ADRESSE, INDEX, INDIREKT, BEREICH.VERSCHIEBEN"

#: ../plugins/fn-lookup/functions.c:508
msgid ""
"@FUNCTION=CHOOSE\n"
"@SYNTAX=CHOOSE(index[,value1][,value2]...)\n"
"@DESCRIPTION=CHOOSE returns the value of index @index. @index is rounded to "
"an integer if it is not.\n"
"\n"
"* If @index < 1 or @index > number of values, CHOOSE returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"CHOOSE(3,\"Apple\",\"Orange\",\"Grape\",\"Perry\") equals \"Grape\".\n"
"\n"
"@SEEALSO=IF"
msgstr ""
"@FUNCTION=WAHL\n"
"@SYNTAX=WAHL(Index[,Wert1][,Wert2]...)\n"
"@DESCRIPTION=WAHL liefert den Wert des @Index-ten Index. Falls @Index keine "
"Ganzzahl ist, wird auf die nächste aufgerundet.\n"
"\n"
"* Falls @Index < 1 oder @Index > Anzahl der Werte, liefert WAHL einen #WERT!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"WAHL(3,\"Apfel\",\"Birnen\",\"Orangen\",\"Wein\") liefert \"Orangen\".\n"
"\n"
"@SEEALSO=FALLS"

#: ../plugins/fn-lookup/functions.c:562
msgid ""
"@FUNCTION=VLOOKUP\n"
"@SYNTAX=VLOOKUP(value,range,column[,approximate,as_index])\n"
"@DESCRIPTION=VLOOKUP function finds the row in range that has a first column "
"similar to @value.  If @approximate is not true it finds the row with an "
"exact equivalence.  If @approximate is true, then the values must be sorted "
"in order of ascending value for correct function; in this case it finds the "
"row with value less than @value.  It returns the value in the row found at a "
"1-based offset in @column columns into the @range.  @as_index returns the 0-"
"based offset that matched rather than the value.\n"
"\n"
"* VLOOKUP returns #NUM! if @column < 0.\n"
"* VLOOKUP returns #REF! if @column falls outside @range.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=HLOOKUP"
msgstr ""

#: ../plugins/fn-lookup/functions.c:623
msgid ""
"@FUNCTION=HLOOKUP\n"
"@SYNTAX=HLOOKUP(value,range,row[,approximate,as_index])\n"
"@DESCRIPTION=HLOOKUP function finds the col in range that has a first row "
"cell similar to @value.  If @approximate is not true it finds the col with "
"an exact equivalence.  If @approximate is true, then the values must be "
"sorted in order of ascending value for correct function; in this case it "
"finds the col with value less than @value it returns the value in the col "
"found at a 1-based offset in @row rows into the @range.  @as_index returns "
"the 0-based offset that matched rather than the value.\n"
"\n"
"* HLOOKUP returns #NUM! if @row < 0.\n"
"* HLOOKUP returns #REF! if @row falls outside @range.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=VLOOKUP"
msgstr ""

#: ../plugins/fn-lookup/functions.c:685
msgid ""
"@FUNCTION=LOOKUP\n"
"@SYNTAX=LOOKUP(value,vector1[,vector2])\n"
"@DESCRIPTION=LOOKUP function finds the row index of @value in @vector1 and "
"returns the contents of @vector2 at that row index. Alternatively a single "
"array can be used for @vector1. If the area is longer than it is wide then "
"the sense of the search is rotated. \n"
"\n"
"* If LOOKUP can't find @value it uses the largest value less than @value.\n"
"* The data must be sorted.\n"
"* If @value is smaller than the first value it returns #N/A.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=VLOOKUP,HLOOKUP"
msgstr ""
"@FUNCTION=VERWEIS\n"
"@SYNTAX=VERWEIS(Wert,Vektor1[,Vektor2])\n"
"@DESCRIPTION=VERWEIS sucht den Zeilenindex von @Wert in @Vektor1 und liefert "
"den Inhalt von @Vektor2 bei diesem Zeilenindex. Alternativ kann ein "
"einzelnes Datenfeld für @Vektor2 verwendet werden. Falls der Bereich länger "
"als dessen Breite ist, wird die Suche umgekehrt.\n"
"\n"
"* Falls @Wert nicht gefunden werden kann, wird ein niedrigerer, am nächsten "
"an @Wert gelegener Wert verwendet.\n"
"* Die Daten müssen sortiert werden.\n"
"* Falls @Wert kleiner als der erste Wert ist, liefert VERWEIS #NV.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=SVERWEIS,WVERWEIS"

#: ../plugins/fn-lookup/functions.c:751
msgid ""
"@FUNCTION=MATCH\n"
"@SYNTAX=MATCH(seek,vector[,type])\n"
"@DESCRIPTION=MATCH function finds the row index of @seek in @vector and "
"returns it.\n"
"\n"
"If the area is longer than it is wide then the sense of the search is "
"rotated. Alternatively a single array can be used.\n"
"\n"
"* The @type parameter, which defaults to +1, controls the search:\n"
"* If @type = 1, MATCH finds largest value <= @seek.\n"
"* If @type = 0, MATCH finds first value == @seek.\n"
"* If @type = -1, MATCH finds smallest value >= @seek.\n"
"* For @type = 0, the data can be in any order.  * For @type = -1 and @type = "
"+1, the data must be sorted.  (And in these cases, MATCH uses a binary "
"search to locate the index.)\n"
"* If @seek could not be found, #N/A is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOOKUP"
msgstr ""
"@FUNCTION=VERGLEICH\n"
"@SYNTAX=VERGLEICH(Begriff,Vektor[,Typ])\n"
"@DESCRIPTION=VERGLEICH liefert den Zeilenindex von @Begriff in @Vektor.\n"
"\n"
"Falls der Bereich länger als dessen Breite ist, wird die Suche umgekehrt. "
"Alternativ kann ein einzelnes Datenfeld verwendet werden.\n"
"\n"
"* Der Parameter @Typ, dessen Vorgabe +1 ist, steuert die Suche:\n"
"* Falls @Typ 1 ist, liefert VERGLEICH den größten Wert <= @Begriff.\n"
"* Falls @Typ 0 ist, liefert VERGLEICH den ersten Wert == @Begriff.\n"
"* Falls @Typ -1 ist, liefert VERGLEICH den kleinsten Wert >= @Begriff.\n"
"* Falls @Typ 0 ist, können die Daten in beliebiger Reihenfolge vorliegen.\n"
"* Falls @Typ 1 oder -1 ist, müssen die Daten sortiert werden (In diesem Fall "
"führt VERGLEICH zum Lokalisieren des Indexes eine Binärsuche durch).\n"
"* Falls @Begriff nicht gefunden werden kann, liefert VERGLEICH #NV.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=VERWEIS"

#: ../plugins/fn-lookup/functions.c:809
msgid ""
"@FUNCTION=INDIRECT\n"
"@SYNTAX=INDIRECT(ref_text[,format])\n"
"@DESCRIPTION=INDIRECT function returns the contents of the cell pointed to "
"by the @ref_text string. The string specifies a single cell reference the "
"format of which is either A1 or R1C1 style. The style is set by the @format "
"boolean, which defaults to the A1 style.\n"
"\n"
"* If @ref_text is not a valid reference returns #REF! \n"
"@EXAMPLES=\n"
"If A1 contains 3.14 and A2 contains A1, then\n"
"INDIRECT(A2) equals 3.14.\n"
"\n"
"@SEEALSO=AREAS,INDEX,CELL"
msgstr ""
"@FUNCTION=INDIREKT\n"
"@SYNTAX=INDIREKT(Bez_Text[,Format])\n"
"@DESCRIPTION=INDIREKT liefert den Inhalt der in der Zeichenkette @Bez_Text "
"angegebenen Zelle. @Bez_Text ist ein einzelliger Bezug, der entweder A1- "
"oder R1C1-formatiert ist. Das vorliegende Format wird durch den Boole'schen "
"Parameter @Format bestimmt, dessen Vorgabe A1 ist.\n"
"\n"
"* Falls @Bez_Text kein gültiger Bezug ist, liefert INDIREKT einen #BEZUG!-"
"Fehler\n"
"@EXAMPLES=\n"
"Angenommen, A1 enthält 3.14 und A2 A1, dann liefert\n"
"INDIREKT(A2) 3.14.\n"
"\n"
"@SEEALSO=BEREICHE,INDEX,"

#: ../plugins/fn-lookup/functions.c:858
msgid ""
"@FUNCTION=INDEX\n"
"@SYNTAX=INDEX(array[,row, col, area])\n"
"@DESCRIPTION=INDEX gives a reference to a cell in the given @array.The cell "
"is pointed out by @row and @col, which count the rows and columns in the "
"array.\n"
"\n"
"* If @row and @col are omitted the are assumed to be 1.\n"
"* If the reference falls outside the range of the @array, INDEX returns a "
"#REF! error.\n"
"\n"
"@EXAMPLES=Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, "
"17.3, 21.3, 25.9, and 40.1. Then INDEX(A1:A5,4,1,1) equals 25.9\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=INDEX\n"
"@SYNTAX=INDEX(Feld[, Zeile, Spalte, Bereich])\n"
"@DESCRIPTION=INDEX liefert einen Zellbezug im angegebenen Feld @Feld. Die "
"Zelle wird mittels @Zeile und @Spalte angegeben, die die Zeilen und Spalten "
"im Feld zählen.\n"
"\n"
"* Falls @Zeile und @Spalte nicht übergeben werden, wird angenommen, dass sie "
"1 sind.\n"
"* Falls der Bezug außerhalb des Feldes @Feld liegt, liefert INDEX einen "
"#BEZUG!-Fehler.\n"
"\n"
"@EXAMPLES=Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, "
"17.3, 21.3, 25.9 und 40.1. Dann liefert INDEX(A1:A5,4,1,1) 25.9\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-lookup/functions.c:944
msgid "COLUMN:vector of column numbers."
msgstr ""

#: ../plugins/fn-lookup/functions.c:945 ../plugins/fn-lookup/functions.c:1124
msgid "[reference]."
msgstr ""

#: ../plugins/fn-lookup/functions.c:947
msgid ""
"COLUMN function returns a Nx1 array containing the series of integers from "
"the first column to the last column of @reference.\n"
"* @reference defaults to the position of the current expression.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, returns "
"#VALUE! error.\n"
msgstr ""

#: ../plugins/fn-lookup/functions.c:954
msgid "COLUMN(A1:C4) equals {1,2,3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:955
msgid "COLUMN(A:C) equals {1,2,3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:956
msgid "COLUMN() in G13 equals 7."
msgstr ""

#: ../plugins/fn-lookup/functions.c:997
msgid ""
"@FUNCTION=COLUMNNUMBER\n"
"@SYNTAX=COLUMNNUMBER(name)\n"
"@DESCRIPTION=COLUMNNUMBER function returns an integer corresponding to the "
"column name supplied as a string.\n"
"\n"
"* If @name is invalid, COLUMNNUMBER returns the #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"COLUMNNUMBER(\"E\") equals 5.\n"
"\n"
"@SEEALSO=ADDRESS"
msgstr ""
"@FUNCTION=SPALTENNUMMER\n"
"@SYNTAX=SPALTENNUMMER(Name)\n"
"@DESCRIPTION=SPALTENNUMMER liefert eine Ganzzahl, die dem als Zeichenkette "
"übergebenen Spaltennamen entspricht.\n"
"\n"
"* Falls @Name ungültig ist, liefert SPALTEN einen #WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"SPALTENANZAHL(\"E\") liefert 5.\n"
"\n"
"@SEEALSO=ADRESSE"

#: ../plugins/fn-lookup/functions.c:1032
msgid ""
"@FUNCTION=COLUMNS\n"
"@SYNTAX=COLUMNS(reference)\n"
"@DESCRIPTION=COLUMNS function returns the number of columns in area or array "
"reference.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, COLUMNS "
"returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"COLUMNS(H2:J3) equals 3.\n"
"\n"
"@SEEALSO=COLUMN,ROW,ROWS"
msgstr ""
"@FUNCTION=SPALTEN\n"
"@SYNTAX=SPALTEN(Bezug)\n"
"@DESCRIPTION=SPALTEN liefert die Anzahl der Spalten im Bereich oder dem "
"Feldbezug.\n"
"\n"
"* Falls @Bezug weder ein Feld, noch ein Bezug oder Bereich ist, liefert "
"SPALTEN einen #WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"SPALTEN(H2:J3) liefert 3.\n"
"\n"
"@SEEALSO=SPALTE, ZEILE, ZEILEN"

#: ../plugins/fn-lookup/functions.c:1060
msgid ""
"@FUNCTION=OFFSET\n"
"@SYNTAX=OFFSET(range,row,col[,height[,width]])\n"
"@DESCRIPTION=OFFSET function returns a cell range. The cell range starts at "
"offset (@row,@col) from @range, and is of height @height and width @width.\n"
"\n"
"* If @range is neither a reference nor a range, OFFSET returns #VALUE!.\n"
"* If either @height or @width is omitted, the height or width of the "
"reference is used.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=COLUMN,COLUMNS,ROWS,INDEX,INDIRECT,ADDRESS"
msgstr ""
"@FUNCTION=BEREICH.VERSCHIEBEN\n"
"@SYNTAX=BEREICH.VERSCHIEBEN(Bereich,Zeilen,Spalten,Höhe,Breite)\n"
"@DESCRIPTION=BEREICH.VERSCHIEBEN liefert einen Zellbereich. Der Zellbereich "
"beginnt bei der Position (@Zeilen,@Spalten) von @Bereich, und ist @Höhe hoch "
"und @Breite breit.\n"
"\n"
"* Falls @Bereich weder eine Referenz noch ein Bereich ist, liefert BEREICH."
"VERSCHIEBEN einen #WERT!-Fehler.\n"
"* Falls Höhe oder Breite nicht übergeben werden, wird die Höhe bzw. Breite "
"der Referenz verwendet.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=SPALTE, SPALTEN, ZEILE, ZEILEN, INDEX, INDIREKT, ADRESSE"

#: ../plugins/fn-lookup/functions.c:1123
msgid "ROW:vector of row numbers."
msgstr ""

#: ../plugins/fn-lookup/functions.c:1126
msgid ""
"ROW function returns a 1xN array containing the series of integers from the "
"first row to the last row of @reference.\n"
"* @reference defaults to the position of the current expression.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, returns "
"#VALUE! error.\n"
msgstr ""

#: ../plugins/fn-lookup/functions.c:1133
msgid "ROW(A1:D3) equals {1;2;3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:1134
msgid "ROW(1:3) equals {1;2;3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:1135
msgid "ROW() in G13 equals 13."
msgstr ""

#: ../plugins/fn-lookup/functions.c:1176
msgid ""
"@FUNCTION=ROWS\n"
"@SYNTAX=ROWS(reference)\n"
"@DESCRIPTION=ROWS function returns the number of rows in area or array "
"reference.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, ROWS "
"returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"ROWS(H7:I13) equals 7.\n"
"\n"
"@SEEALSO=COLUMN,COLUMNS,ROW"
msgstr ""
"@FUNCTION=ZEILEN\n"
"@SYNTAX=ZEILEN([Bezug])\n"
"@DESCRIPTION=ZEILEN liefert ein Feld mit der Anzahl der Zellen im Bereichs- "
"oder Feldbezug.\n"
"\n"
"@EXAMPLES=\n"
"ZEILEN(H7:I13) liefert 7.\n"
"\n"
"@SEEALSO=SPALTE,SPALTEN,ZEILE"

#: ../plugins/fn-lookup/functions.c:1204
msgid ""
"@FUNCTION=HYPERLINK\n"
"@SYNTAX=HYPERLINK(link_location[,optional_label])\n"
"@DESCRIPTION=HYPERLINK function currently returns its 2nd argument, or if "
"that is omitted the 1st argument.\n"
"\n"
"@EXAMPLES=\n"
"HYPERLINK(\"www.gnome.org\",\"GNOME\").\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=VERKNÜPFUNG\n"
"@SYNTAX=VERKNÜPFUNG(Ort[,Beschriftung])\n"
"@DESCRIPTION=VERKNÜPFUNG liefert im Augenblick das zweite, oder, falls "
"dieses nicht übergeben wurde, das erste Argument.\n"
"\n"
"@EXAMPLES=\n"
"VERKNÜPFUNG(\"www.gnome.de\",\"GNOME Deutschland\").\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-lookup/functions.c:1232
msgid ""
"@FUNCTION=TRANSPOSE\n"
"@SYNTAX=TRANSPOSE(matrix)\n"
"@DESCRIPTION=TRANSPOSE function returns the transpose of the input @matrix.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT"
msgstr ""
"@FUNCTION=MTRANS\n"
"@SYNTAX=MTRANS(Matrix)\n"
"@DESCRIPTION=MTRANS liefert die Transponierte der Eingabematrix @Matrix.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT"

#: ../plugins/fn-math/functions.c:77
msgid ""
"@FUNCTION=GCD\n"
"@SYNTAX=GCD(number1,number2,...)\n"
"@DESCRIPTION=GCD returns the greatest common divisor of given numbers.\n"
"\n"
"* If any of the arguments is less than one, GCD returns #NUM! error.\n"
"* If any of the arguments is non-integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GCD(470,770) equals 10.\n"
"GCD(470,770,1495) equals 5.\n"
"\n"
"@SEEALSO=LCM"
msgstr ""
"@FUNCTION=GGT\n"
"@SYNTAX=GGT(Zahl1,Zahl2,...)\n"
"@DESCRIPTION=GGT liefert den größten gemeinsamen Teiler der übergebenen "
"Zahlen.\n"
"\n"
"* Falls eines der Argumente negativ ist, liefert GGT einen #ZAHL!-Fehler.\n"
"* Falls eines der Argumente nicht ganzzahlig ist, werden die "
"Nachkommastellen abgeschnitten.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GGT(470,770) liefert 10.\n"
"GGT(470,770,1495) liefert 5.\n"
"\n"
"@SEEALSO=KGV"

#: ../plugins/fn-math/functions.c:148
#, fuzzy
msgid ""
"@FUNCTION=LCM\n"
"@SYNTAX=LCM(number1,number2,...)\n"
"@DESCRIPTION=LCM returns the least common multiple of integers.  The least "
"common multiple is the smallest positive number that is a multiple of all "
"integer arguments given.\n"
"\n"
"* If any of the arguments is less than one, LCM returns #NUM!.\n"
"* If any of the arguments is non-integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LCM(2,13) equals 26.\n"
"LCM(4,7,5) equals 140.\n"
"\n"
"@SEEALSO=GCD"
msgstr ""
"@FUNCTION=KGV\n"
"@SYNTAX=KGV(Zahl1,Zahl2,...)\n"
"@DESCRIPTION=KGV liefert das kleinste gemeinsame Vielfache von Ganzzahlen. "
"Das kleinste gemeinsame Vielfache ist die kleinste positive Zahl, die "
"Vielfache aller übergebenen ganzzahligen Argumente ist.\n"
"\n"
"* Falls eines der Argumente negativ ist, liefert KGV einen #ZAHL!-Fehler.\n"
"* Falls eines der Argumente keine Ganzzahl ist, werden deren "
"Nachkommastellen abgeschnitten.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"KGV(2,13) liefert 26.\n"
"KGV(4,7,5) liefert 140.\n"
"\n"
"@SEEALSO=GGT"

#: ../plugins/fn-math/functions.c:218
#, fuzzy
msgid ""
"@FUNCTION=HYPOT\n"
"@SYNTAX=HYPOT(number1,number2,...)\n"
"@DESCRIPTION=HYPOT returns the square root of the sum of the squares of the "
"arguments.\n"
"\n"
"@EXAMPLES=\n"
"HYPOT(3,4) equals 5.\n"
"\n"
"@SEEALSO=MIN,MAX"
msgstr ""
"@FUNCTION=UNGERADE\n"
"@SYNTAX=UNGERADE(Zahl)\n"
"@DESCRIPTION=UNGERADE liefert @Zahl auf die nächste ungerade Ganzzahl "
"gerundet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"UNGERADE(4.4) liefert 5.\n"
"\n"
"@SEEALSO=GERADE"

#: ../plugins/fn-math/functions.c:248
msgid ""
"@FUNCTION=ABS\n"
"@SYNTAX=ABS(b1)\n"
"@DESCRIPTION=ABS implements the Absolute Value function:  the result is to "
"drop the negative sign (if present).  This can be done for integers and "
"floating point numbers.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ABS(7) equals 7.\n"
"ABS(-3.14) equals 3.14.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, INT, MOD"
msgstr ""
"@FUNCTION=ABS\n"
"@SYNTAX=ABS(b1)\n"
"@DESCRIPTION=ABS liefert den Absoluten Wert von b1: Das Ergebnis verliert "
"das negative Vorzeichen (falls vorhanden). Dies funktioniert mit Ganzzahlen "
"und Fließkomma-Zahlen.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ABS(7) liefert 7.\n"
"ABS(-3.14) liefert 3.14.\n"
"\n"
"@SEEALSO=OBERGRENZE, UNTERGRENZE"

#: ../plugins/fn-math/functions.c:276
msgid ""
"@FUNCTION=ACOS\n"
"@SYNTAX=ACOS(x)\n"
"@DESCRIPTION=ACOS function calculates the arc cosine of @x; that is the "
"value whose cosine is @x.\n"
"\n"
"* The value it returns is in radians.\n"
"* If @x falls outside the range -1 to 1, ACOS returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ACOS(0.1) equals 1.470629.\n"
"ACOS(-0.1) equals 1.670964.\n"
"\n"
"@SEEALSO=COS, SIN, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ARCCOS\n"
"@SYNTAX=ARCCOS(x)\n"
"@DESCRIPTION=ARCCOS liefert den Arcus Cosinus von @x; Das ist der Wert, "
"dessen Cosinus @x ist.\n"
"\n"
"* Der gelieferte Wert ist ein Bogenmaß.\n"
"* Falls @x außerhalb von -1 bis 1 liegt, liefert ARCCOS einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ARCCOS(0.1) liefert 1.470629.\n"
"ARCCOS(-0.1) liefert 1.670964.\n"
"\n"
"@SEEALSO=COS, SIN, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:312
msgid ""
"@FUNCTION=ACOSH\n"
"@SYNTAX=ACOSH(x)\n"
"@DESCRIPTION=ACOSH  function  calculates  the inverse hyperbolic cosine of "
"@x; that is the value whose hyperbolic cosine is @x.\n"
"\n"
"* If @x is less than 1.0, ACOSH() returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"ACOSH(2) equals 1.31696.\n"
"ACOSH(5.3) equals 2.35183.\n"
"\n"
"@SEEALSO=ACOS, ASINH, DEGREES, RADIANS "
msgstr ""
"@FUNCTION=ARCCOSHYP\n"
"@SYNTAX=ARCCOSHYP(x)\n"
"@DESCRIPTION=ARCCOSHYP liefert den hyperbolischen Arcus Sinus von @x; das "
"ist der Wert, dessen hyperbolischer Cosinus @x ist.\n"
"\n"
"* Falls @x kleiner als 1.0 ist, liefert ACOSHYP einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ARCSINHYP(0.5) liefert 1.31696.\n"
"ARCSINHYP(0.8) liefert 2.35183.\n"
"\n"
"@SEEALSO=ARCCOS, ARCSINHYP, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:347
msgid ""
"@FUNCTION=ASIN\n"
"@SYNTAX=ASIN(x)\n"
"@DESCRIPTION=ASIN function calculates the arc sine of @x; that is the value "
"whose sine is @x.\n"
"\n"
"* If @x falls outside the range -1 to 1, ASIN returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ASIN(0.5) equals 0.523599.\n"
"ASIN(1) equals 1.570797.\n"
"\n"
"@SEEALSO=SIN, COS, ASINH, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ARCSIN\n"
"@SYNTAX=ARCSIN(x)\n"
"@DESCRIPTION=ARCSIN liefert den Arcus Sinus von @x; Das ist der Wert, dessen "
"Sinus @x ist.\n"
"\n"
"* Falls @x außerhalb von -1 bis 1 liegt, liefert ARCSIN einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ARCSIN(0.5) liefert 0.523599.\n"
"ARCSIN(1) liefert 1.570797.\n"
"@SEEALSO=SIN, COS, ARCSINHYP, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:382
msgid ""
"@FUNCTION=ASINH\n"
"@SYNTAX=ASINH(x)\n"
"@DESCRIPTION=ASINH function calculates the inverse hyperbolic sine of @x; "
"that is the value whose hyperbolic sine is @x.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ASINH(0.5) equals 0.481212.\n"
"ASINH(1.0) equals 0.881374.\n"
"\n"
"@SEEALSO=ASIN, ACOSH, SIN, COS, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ARCSINHYP\n"
"@SYNTAX=ARCSINHYP(x)\n"
"@DESCRIPTION=ARCSINHYP liefert den hyperbolischen Arcus Sinus von @x; das "
"ist der Wert, dessen hyperbolischer Sinus @x ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ARCSINHYP(0.5) liefert 0.481212.\n"
"ARCSINHYP(0.8) liefert 0.881374.\n"
"\n"
"@SEEALSO=ARCSIN, ARCCOSHYP, SIN, COS, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:409
msgid ""
"@FUNCTION=ATAN\n"
"@SYNTAX=ATAN(x)\n"
"@DESCRIPTION=ATAN function calculates the arc tangent of @x; that is the "
"value whose tangent is @x.\n"
"\n"
"* Return value is in radians.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ATAN(0.5) equals 0,463648.\n"
"ATAN(1) equals 0,785398.\n"
"\n"
"@SEEALSO=TAN, COS, SIN, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ARCTAN\n"
"@SYNTAX=ARCTAN(x)\n"
"@DESCRIPTION=ARCTAN liefert den Arcus Tangens von @x; das ist der Wert, "
"dessen Tangens @x ist.\n"
"\n"
"* Rückgabewert ist im Bogenmaß.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ARCTAN(0.5) liefert 0.463648.\n"
"ARCTAN(1) liefert 0.785398.\n"
"\n"
"@SEEALSO=TAN, COS, SIN, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:437
msgid ""
"@FUNCTION=ATANH\n"
"@SYNTAX=ATANH(x)\n"
"@DESCRIPTION=ATANH function calculates the inverse hyperbolic tangent of @x; "
"that is the value whose hyperbolic tangent is @x.\n"
"\n"
"* If the absolute value of @x is greater than 1.0, ATANH returns #NUM! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ATANH(0.5) equals 0.549306.\n"
"ATANH(0.8) equals 1.098612.\n"
"\n"
"@SEEALSO=ATAN, TAN, SIN, COS, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ARCTANHYP\n"
"@SYNTAX=ARCTANHYP(x)\n"
"@DESCRIPTION=ARCTANHYP liefert den hyperbolischen Arcus Tangens von @x; das "
"ist der Wert, dessen hyperbolischer Tangens @x ist.\n"
"\n"
"* Falls der absolute Wert von @x größer als 1.0 ist, liefert ARCTANHYP einen "
"#ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ARCTANHYP(0.5) liefert 0.549306.\n"
"ARCTANHYP(0.8) liefert 1.098612.\n"
"\n"
"@SEEALSO=ARCTAN, TAN, SIN, COS, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:472
msgid ""
"@FUNCTION=ATAN2\n"
"@SYNTAX=ATAN2(b1,b2)\n"
"@DESCRIPTION=ATAN2 function calculates the arc tangent of the two variables "
"@b1 and @b2.  It is similar to calculating the arc tangent of @b2 / @b1, "
"except that the signs of both arguments are used to determine the quadrant "
"of the result.\n"
"\n"
"* The result is in radians.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ATAN2(0.5,1.0) equals 1.107149.\n"
"ATAN2(-0.5,2.0) equals 1.815775.\n"
"\n"
"@SEEALSO=ATAN, ATANH, COS, SIN, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ARCTAN2\n"
"@SYNTAX=ARCTAN2(b1,b2)\n"
"@DESCRIPTION=ATAN2 liefert den Arcus Tangens der beiden Variablen @b1 und "
"@b2. Es ist dem Berechnen des Arcus Tangens von @b2 / @b1 ähnlich, außer, "
"dass es die Vorzeichen beide Argumente verwendet, um den Lösungsquadranten "
"zu ermitteln.\n"
"\n"
"* Das Ergebnis wird im Gradmaß geliefert.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ARCTAN2(0.5,1.0) liefert 1.107149.\n"
"ARCTAN2(-0.5,2.0) liefert 1.815775.\n"
"\n"
"@SEEALSO=ARCTAN, ARCTANHYP, COS, SIN, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:508
msgid ""
"@FUNCTION=CEIL\n"
"@SYNTAX=CEIL(x)\n"
"@DESCRIPTION=CEIL function rounds @x up to the next nearest integer.\n"
"\n"
"\n"
"@EXAMPLES=\n"
"CEIL(0.4) equals 1.\n"
"CEIL(-1.1) equals -1.\n"
"CEIL(-2.9) equals -2.\n"
"\n"
"@SEEALSO=CEILING, FLOOR, ABS, INT, MOD"
msgstr ""
"@FUNCTION=AUFRUNDEN\n"
"@SYNTAX=AUFRUNDEN(x)\n"
"@DESCRIPTION=AUFRUNDEN rundet @x auf die nächste Ganzzahl auf.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"AUFRUNDEN(0.4) liefert 1.\n"
"AUFRUNDEN(-1.1) liefert -1.\n"
"AUFRUNDEN(-2.9) liefert -2.\n"
"\n"
"@SEEALSO=ABS, ABRUNDEN, GANZZAHL"

#: ../plugins/fn-math/functions.c:534
msgid ""
"@FUNCTION=COUNTIF\n"
"@SYNTAX=COUNTIF(range,criteria)\n"
"@DESCRIPTION=COUNTIF function counts the number of cells in the given @range "
"that meet the given @criteria.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39.  Then\n"
"COUNTIF(A1:A5,\"<=28\") equals 3.\n"
"COUNTIF(A1:A5,\"<28\") equals 2.\n"
"COUNTIF(A1:A5,\"28\") equals 1.\n"
"COUNTIF(A1:A5,\">28\") equals 2.\n"
"\n"
"@SEEALSO=COUNT,SUMIF"
msgstr ""
"@FUNCTION=ZÄHLENWENN\n"
"@SYNTAX=ZÄHLENWENN(Bereich,Kriterium)\n"
"@DESCRIPTION=ZÄHLENWENN zählt die Anzahl der Zellen im angegebenen Bereich "
"@Bereich, die dem angegebenen Kriterium @Kriterium entsprechen.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 23, 27, 28, 33 "
"und 39. Dann liefert\n"
"ZÄHLENWENN(A1:A5,\"<=28\") 3,\n"
"ZÄHLENWENN(A1:A5,\"<28\") 2,\n"
"ZÄHLENWENN(A1:A5,\"28\") 1 und\n"
"ZÄHLENWENN(A1:A5,\">28\") 2.\n"
"\n"
"@SEEALSO=ZÄHLEN, SUMMEWENN"

#: ../plugins/fn-math/functions.c:612
msgid ""
"@FUNCTION=SUMIF\n"
"@SYNTAX=SUMIF(range,criteria[,actual_range])\n"
"@DESCRIPTION=SUMIF function sums the values in the given @range that meet "
"the given @criteria.  If @actual_range is given, SUMIF sums the values in "
"the @actual_range whose corresponding components in @range meet the given "
"@criteria.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39.  Then\n"
"SUMIF(A1:A5,\"<=28\") equals 78.\n"
"SUMIF(A1:A5,\"<28\") equals 50.\n"
"In addition, if the cells B1, B2, ..., B5 hold numbers 5, 3, 2, 6, and 7 "
"then:\n"
"SUMIF(A1:A5,\"<=27\",B1:B5) equals 8.\n"
"\n"
"@SEEALSO=COUNTIF, SUM"
msgstr ""
"@FUNCTION=SUMMEWENN\n"
"@SYNTAX=SUMMEWENN(Bereich,Kriterium[,Tatsächlicher_Bereich)\n"
"@DESCRIPTION=SUMMEWENN liefert die Summe der Werte im angegebenen Bereich "
"@Bereich, die dem angegebenen Kriterium @Kriterium entsprechen. Falls "
"@Tatsächlicher_Bereich übergeben ist, addiert SUMMEWENN die Werte in "
"@Tatsächlicher_Bereich, deren entsprechende Komponenten in @Bereich dem "
"angegebenen @Kriterium entsprechen.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 23, 27, 28, 33 "
"und 39. Dann liefert\n"
"SUMMEWENN(A1:A5,\"<=28\") 78 und\n"
"SUMMEWENN(A1:A5,\"<28\") 50.\n"
"Falls zusätzlich die Zellen B1, B2, ..., B5 die Zahlen 5, 3, 2, 6 und 7 "
"enthalten, liefert:\n"
"SUMMEWENN(A1:A5,\"<=27\",B1:B5) 8.\n"
"\n"
"@SEEALSO=ZÄHLENWENN, SUMME"

#: ../plugins/fn-math/functions.c:736
msgid ""
"@FUNCTION=CEILING\n"
"@SYNTAX=CEILING(x[,significance])\n"
"@DESCRIPTION=CEILING function rounds @x up to the nearest multiple of "
"@significance.\n"
"\n"
"* If @x or @significance is non-numeric CEILING returns #VALUE! error.\n"
"* If @x and @significance have different signs CEILING returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CEILING(2.43,1) equals 3.\n"
"CEILING(123.123,3) equals 126.\n"
"\n"
"@SEEALSO=CEIL, FLOOR, ABS, INT, MOD"
msgstr ""
"@FUNCTION=OBERGRENZE\n"
"@SYNTAX=OBERGRENZE(x,Signifikanz)\n"
"@DESCRIPTION=OBERGRENZE rundet @x auf die nächste Vielfache von @Signifikanz "
"auf.\n"
"\n"
"* Falls @x oder @Signifikanz keine Zahl ist, liefert OBERGRENZE einen #WERT!-"
"Fehler.\n"
"* Falls @x und @Signifikanz unterschiedliche Vorzeichen haben, liefert "
"OBERGRENZE einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"OBERGRENZE(2.43,1) liefert 3.\n"
"OBERGRENZE(123.123,3) liefert 126\n"
"\n"
"@SEEALSO=AUFRUNDEN"

#: ../plugins/fn-math/functions.c:777
msgid ""
"@FUNCTION=COS\n"
"@SYNTAX=COS(x)\n"
"@DESCRIPTION=COS function returns the cosine of @x, where @x is given in "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COS(0.5) equals 0.877583.\n"
"COS(1) equals 0.540302.\n"
"\n"
"@SEEALSO=COSH, SIN, SINH, TAN, TANH, RADIANS, DEGREES"
msgstr ""
"@FUNCTION=COS\n"
"@SYNTAX=COS(x)\n"
"@DESCRIPTION=COS liefert den Cosinus von @x, wobei @x im Bogenmaß angegeben "
"wird.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"COS(0.5) liefert 0.877583.\n"
"COS(1) liefert 0.540302.\n"
"\n"
"@SEEALSO=COSHYP, SIN, SINHYP, TAN, TANHYP, BOGENMASS, GRAD"

#: ../plugins/fn-math/functions.c:804
msgid ""
"@FUNCTION=COSH\n"
"@SYNTAX=COSH(x)\n"
"@DESCRIPTION=COSH function returns the hyperbolic cosine of @x, which is "
"defined mathematically as\n"
"\n"
"\t(exp(@x) + exp(-@x)) / 2.\n"
"\n"
"* @x is in radians.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COSH(0.5) equals 1.127626.\n"
"COSH(1) equals 1.543081.\n"
"\n"
"@SEEALSO=COS, SIN, SINH, TAN, TANH, RADIANS, DEGREES, EXP"
msgstr ""
"@FUNCTION=COSHYP\n"
"@SYNTAX=COSHYP(x)\n"
"@DESCRIPTION=COSHYP liefert den hyperbolischen Cosinus von @x, der "
"mathematisch definiert ist als\n"
"\n"
"\t(EXP(@x) + EXP(-@x)) / 2.\n"
"\n"
"definiert ist.\n"
"* @x muss im Gradmaß übergeben werden.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"COSHYP(0.5) liefert 1.127626.\n"
"COSHYP(1) liefert 1.543081.\n"
"\n"
"@SEEALSO=COS, SIN, SINHYP, TAN, TANHYP, GRAD, BOGENMASS, EXP"

#: ../plugins/fn-math/functions.c:832
msgid ""
"@FUNCTION=DEGREES\n"
"@SYNTAX=DEGREES(x)\n"
"@DESCRIPTION=DEGREES computes the number of degrees equivalent to @x "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEGREES(2.5) equals 143.2394.\n"
"\n"
"@SEEALSO=RADIANS, PI"
msgstr ""
"@FUNCTION=GRAD\n"
"@SYNTAX=GRAD(x)\n"
"@DESCRIPTION=GRAD liefert die zum Radius @x äquivalente Gradanzahl.\n"
"\n"
"Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GRAD(2.5) liefert 143.2394.\n"
"\n"
"@SEEALSO=BOGENMASS, PI"

# FIXME: check for mathematical correctness
#: ../plugins/fn-math/functions.c:859
msgid ""
"@FUNCTION=EXP\n"
"@SYNTAX=EXP(x)\n"
"@DESCRIPTION=EXP computes the value of e (the base of natural logarithms) "
"raised to the power of @x.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EXP(2) equals 7.389056.\n"
"\n"
"@SEEALSO=LOG, LOG2, LOG10"
msgstr ""
"@FUNCTION=EXP\n"
"@SYNTAX=EXP(x)\n"
"@DESCRIPTION=EXP berechnet den Wert von e (der Basis des natürlichen "
"Logarithmus) potenziert mit @x.\n"
"@EXAMPLES=\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"EXP(2) liefert 7.389056.\n"
"\n"
"@SEEALSO=LOG, LOG2, LOG10"

# FIXME: check for mathematical correctness
#: ../plugins/fn-math/functions.c:885
msgid ""
"@FUNCTION=EXPM1\n"
"@SYNTAX=EXPM1(x)\n"
"@DESCRIPTION=EXPM1 computes EXP(@x)-1 with higher resulting precision than "
"the direct formula.\n"
"\n"
"@EXAMPLES=\n"
"EXPM1(0.01) equals 0.01005.\n"
"\n"
"@SEEALSO=EXP, LN1P"
msgstr ""
"@FUNCTION=EXP\n"
"@SYNTAX=EXP(x)\n"
"@DESCRIPTION=EXP berechnet den Wert von e (der Basis des natürlichen "
"Logarithmus) potenziert mit @x.\n"
"@EXAMPLES=\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"EXP(2) liefert 7.389056.\n"
"\n"
"@SEEALSO=LOG, LOG2, LOG10"

#: ../plugins/fn-math/functions.c:909
msgid ""
"@FUNCTION=FACT\n"
"@SYNTAX=FACT(x)\n"
"@DESCRIPTION=FACT computes the factorial of @x. ie, @x!\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FACT(3) equals 6.\n"
"FACT(9) equals 362880.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=FAKTULTÄT\n"
"@SYNTAX=FAKULTÄT(x)\n"
"@DESCRIPTION=FAKULTÄT liefert die Fakultät von @x, also @x!\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"FAKULTÄT(3) liefert 6.\n"
"FAKULTÄT(9) liefert 362880.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:948
#, fuzzy
msgid ""
"@FUNCTION=BETA\n"
"@SYNTAX=BETA(a,b)\n"
"@DESCRIPTION=BETA function returns the value of the mathematical beta "
"function extended to all real numbers except 0 and negative integers.\n"
"\n"
"* If @a, @b, or (@a + @b) are non-positive integers, BETA returns #NUM! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"BETA(2,3) equals 0.083333.\n"
"BETA(-0.5,0.5) equals #NUM!.\n"
"\n"
"@SEEALSO=BETALN,GAMMALN"
msgstr ""
"@FUNCTION=BETA\n"
"@SYNTAX=BETA(a,b)\n"
"@DESCRIPTION=BETA liefert den Wert der mathematischen Beta-Funktion, wobei "
"diese auf alle rellen Zahlen außer 0 und nicht negative Ganzzahlen "
"ausgeweitet wird.\n"
"\n"
"* Falls @a, @b oder (@a + @b) keine negative Ganzzahl ist, liefert BETA "
"einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=BETALN,GAMMALN"

#: ../plugins/fn-math/functions.c:981
msgid ""
"@FUNCTION=BETALN\n"
"@SYNTAX=BETALN(a,b)\n"
"@DESCRIPTION=BETALN function returns the natural logarithm of the absolute "
"value of the beta function.\n"
"\n"
"* If @a, @b, or (@a + @b) are non-positive integers, BETALN returns #NUM! \n"
"@EXAMPLES=\n"
"BETALN(2,3) equals -2.48.\n"
"BETALN(-0.5,0.5) equals #NUM!.\n"
"\n"
"@SEEALSO=BETA,GAMMALN"
msgstr ""
"@FUNCTION=BETALN\n"
"@SYNTAX=BETALN(a,b)\n"
"@DESCRIPTION=BETALN liefert den natürlichen Logarithmus des absoluten Werts "
"der Beta-Funktion.\n"
"\n"
"* Falls @a, @b oder (@a + @b) keine positive Ganzzahl ist, liefert BETALN "
"einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=BETA,GAMMALN"

#: ../plugins/fn-math/functions.c:1013
msgid ""
"@FUNCTION=COMBIN\n"
"@SYNTAX=COMBIN(n,k)\n"
"@DESCRIPTION=COMBIN computes the number of combinations.\n"
"\n"
"* Performing this function on a non-integer or a negative number returns "
"#NUM! error.\n"
"* If @n is less than @k COMBIN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COMBIN(8,6) equals 28.\n"
"COMBIN(6,2) equals 15.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=KOMBINATIONEN\n"
"@SYNTAX=KOMBINATIONEN(n, k)\n"
"@DESCRIPTION=KOMBINATIONEN berechnet die Anzahl der "
"Kombinationsmöglichkeiten zwischen @n und @k.\n"
"\n"
"* Falls @n oder @k < 0 ist, liefert KOMBINATIONEN einen #ZAHL!-Fehler.\n"
"* Falls @n < @k, liefert KOMBINATIONEN einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"@EXAMPLES=\n"
"KOMBINATIONEN(8,6) liefert 28.\n"
"KOMBINATIONEN(6,2) liefert 15.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:1048
msgid "FLOOR:rounds down."
msgstr ""

#: ../plugins/fn-math/functions.c:1049
msgid "x:value."
msgstr ""

#: ../plugins/fn-math/functions.c:1050
msgid "significance:base multiple (defaults to 1 for @x > 0 and -1 for @x <0)"
msgstr ""

#: ../plugins/fn-math/functions.c:1052
msgid ""
"FLOOR function rounds @x down to the next nearest multiple of @significance."
msgstr ""

#: ../plugins/fn-math/functions.c:1054
msgid "FLOOR(0.5) equals 0."
msgstr ""

#: ../plugins/fn-math/functions.c:1055
msgid "FLOOR(5,2) equals 4."
msgstr ""

#: ../plugins/fn-math/functions.c:1056
msgid "FLOOR(-5,-2) equals -4."
msgstr ""

#: ../plugins/fn-math/functions.c:1057
msgid "FLOOR(-5,2) equals #NUM!."
msgstr ""

#: ../plugins/fn-math/functions.c:1084
msgid ""
"@FUNCTION=INT\n"
"@SYNTAX=INT(a)\n"
"@DESCRIPTION=INT function returns the largest integer that is not bigger "
"than its argument.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"INT(7.2) equals 7.\n"
"INT(-5.5) equals -6.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, ABS, MOD"
msgstr ""
"@FUNCTION=GANZZAHL\n"
"@SYNTAX=GANZZAHL(a)\n"
"@DESCRIPTION=GANZZAHL liefert die größte Ganzzahl, die nicht größer als das "
"Argument ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GANZZAHL(7.2) liefert 7.\n"
"GANZZAHL(-5.5) liefert -6.\n"
"\n"
"@SEEALSO=UNTERGRENZE, OBERGRENZE, ABS"

#: ../plugins/fn-math/functions.c:1112
msgid ""
"@FUNCTION=LOG\n"
"@SYNTAX=LOG(x[,base])\n"
"@DESCRIPTION=LOG computes the logarithm of @x in the given base @base.  If "
"no @base is given LOG returns the logarithm in base 10. @base must be > 0. "
"and cannot equal 1.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOG(2) equals 0.30103.\n"
"LOG(8192,2) equals 13.\n"
"\n"
"@SEEALSO=LN, LOG2, LOG10"
msgstr ""
"@FUNCTION=LOG\n"
"@SYNTAX=LOG(x[, Basis])\n"
"@DESCRIPTION=LOG berechnet den Logarithmus von @x zur angegebenen Basis "
"@Basis. Falls @Basis nicht übergeben wird, liefert LOG den Logarithmus zur "
"Basis 10.\n"
"\n"
"* @Basis muss > 0 und darf nicht 1 sein.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LOG(2) liefert 0.30103.\n"
"LOG(8192,2) liefert 13.\n"
"\n"
"@SEEALSO=LN, LOG2, LOG10"

#: ../plugins/fn-math/functions.c:1149
msgid ""
"@FUNCTION=LN\n"
"@SYNTAX=LN(x)\n"
"@DESCRIPTION=LN returns the natural logarithm of @x.\n"
"\n"
"* If @x <= 0, LN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LN(7) equals 1.94591.\n"
"\n"
"@SEEALSO=EXP, LOG2, LOG10"
msgstr ""
"@FUNCTION=LN\n"
"@SYNTAX=LN(x)\n"
"@DESCRIPTION=LN liefert den natürlichen Logarithmus von @x.\n"
"\n"
"* Falls @x <= 0 ist, liefert LN einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LN(7) liefert 1.94591.\n"
"\n"
"@SEEALSO=EXP, LOG2, LOG10"

#: ../plugins/fn-math/functions.c:1181
msgid ""
"@FUNCTION=LN1P\n"
"@SYNTAX=LN1P(x)\n"
"@DESCRIPTION=LN1P computes LN(1+@x) with higher resulting precision than the "
"direct formula.\n"
"\n"
"* If @x <= -1, LN1P returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"LN1P(0.01) equals 0.00995.\n"
"\n"
"@SEEALSO=LN, EXPM1"
msgstr ""
"@FUNCTION=LOG2\n"
"@SYNTAX=LOG2(x)\n"
"@DESCRIPTION=LOG2 berechnet den Logarithmus von @x zur Basis 2.\n"
"\n"
"* Falls @x <=, liefert LOG10 einen #ZAHL!-Fehler.\n"
"@EXAMPLES=\n"
"LOG2(1024) liefert 10.\n"
"\n"
"@SEEALSO=EXP, LOG, LOG10"

#: ../plugins/fn-math/functions.c:1213
#, fuzzy
msgid ""
"@FUNCTION=POWER\n"
"@SYNTAX=POWER(x,y)\n"
"@DESCRIPTION=POWER returns the value of @x raised to the power @y.\n"
"\n"
"\n"
"* If both @x and @y equal 0, POWER returns #NUM! error.\n"
"* If @x = 0 and @y < 0, POWER returns #DIV/0! error.\n"
"* If @x < 0 and @y is non-integer, POWER returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"POWER(2,7) equals 128.\n"
"POWER(3,3.141) equals 31.523749.\n"
"\n"
"@SEEALSO=EXP"
msgstr ""
"@FUNCTION=POTENZ\n"
"@SYNTAX=POTENZ(x,y)\n"
"@DESCRIPTION=POTENZ liefert den Wert von @x potenziert mit @y.\n"
"\n"
"* Falls sowohl @x als auch @y 0 sind, liefert POTENZ einen #ZAHL!-Fehler.\n"
"* Falls @x = 0 und @y < 0 ist, liefert POTENZ einen #DIV/0-Fehler.\n"
"* Falls @x < 0 und @y keine Ganzzahl ist, liefert POTENZ einen #ZAHL-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"POTENZ(2,7) liefert 128.\n"
"POTENZ(3,3141) liefert 31.523749.\n"
"\n"
"@SEEALSO=EXP"

#: ../plugins/fn-math/functions.c:1252
msgid ""
"@FUNCTION=LOG2\n"
"@SYNTAX=LOG2(x)\n"
"@DESCRIPTION=LOG2 computes the base-2 logarithm of @x.\n"
"\n"
"* If @x <= 0, LOG2 returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"LOG2(1024) equals 10.\n"
"\n"
"@SEEALSO=EXP, LOG10, LOG"
msgstr ""
"@FUNCTION=LOG2\n"
"@SYNTAX=LOG2(x)\n"
"@DESCRIPTION=LOG2 berechnet den Logarithmus von @x zur Basis 2.\n"
"\n"
"* Falls @x <=, liefert LOG10 einen #ZAHL!-Fehler.\n"
"@EXAMPLES=\n"
"LOG2(1024) liefert 10.\n"
"\n"
"@SEEALSO=EXP, LOG, LOG10"

#: ../plugins/fn-math/functions.c:1282
msgid ""
"@FUNCTION=LOG10\n"
"@SYNTAX=LOG10(x)\n"
"@DESCRIPTION=LOG10 computes the base-10 logarithm of @x.\n"
"\n"
"* If @x <= 0, LOG10 returns #NUM! error.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"LOG10(7) equals 0.845098.\n"
"\n"
"@SEEALSO=EXP, LOG2, LOG"
msgstr ""
"@FUNCTION=LOG10\n"
"@SYNTAX=LOG10(x)\n"
"@DESCRIPTION=LOG10 berechnet den Logarithmus von @x zur Basis 10.\n"
"\n"
"* Falls @x <= 0 ist, liefert LOG10 einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LOG10(7) liefert 0.845098.\n"
"\n"
"@SEEALSO=EXP, LOG, LOG2"

#: ../plugins/fn-math/functions.c:1313
msgid ""
"@FUNCTION=MOD\n"
"@SYNTAX=MOD(number,divisor)\n"
"@DESCRIPTION=MOD function returns the remainder when @divisor is divided "
"into @number.\n"
"\n"
"* MOD returns #DIV/0! if @divisor is zero.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"MOD(23,7) equals 2.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, ABS, INT, ABS"
msgstr ""
"@FUNCTION=REST\n"
"@SYNTAX=REST(Zahl,Divisor)\n"
"@DESCRIPTION=REST liefert den Rest beim Teilen der Zahl @Zahl durch den "
"Divisor @Divisor.\n"
"* Falls @Divisor = 0 ist, liefert REST einen #DIV/0!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"REST(23,7) liefert 2.\n"
"\n"
"@SEEALSO=GANZZAHL, UNTERGRENZE, OBERGRENZE"

#: ../plugins/fn-math/functions.c:1366
msgid ""
"@FUNCTION=RADIANS\n"
"@SYNTAX=RADIANS(x)\n"
"@DESCRIPTION=RADIANS computes the number of radians equivalent to @x "
"degrees.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RADIANS(180) equals 3.14159.\n"
"\n"
"@SEEALSO=PI,DEGREES"
msgstr ""
"@FUNCTION=BOGENMASS\n"
"@SYNTAX=BOGENMASS(x)\n"
"@DESCRIPTION=BOGENMASS berechnet das Bogenmaß-Äquivalent aus @x Grad.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BOGENMASS(180) liefert 3.14159.\n"
"\n"
"@SEEALSO=PI, GRAD"

#: ../plugins/fn-math/functions.c:1393
msgid ""
"@FUNCTION=SIN\n"
"@SYNTAX=SIN(x)\n"
"@DESCRIPTION=SIN function returns the sine of @x, where @x is given in "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SIN(0.5) equals 0.479426.\n"
"\n"
"@SEEALSO=COS, COSH, SINH, TAN, TANH, RADIANS, DEGREES"
msgstr ""
"@FUNCTION=SIN\n"
"@SYNTAX=SIN(x)\n"
"@DESCRIPTION=SIN liefert den Sinus von @x, wobei @x im Gradmaß angegeben "
"wird.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"SIN(0.5) liefert 0.479426.\n"
"\n"
"@SEEALSO=COS, COSHYP, SINHYP, TAN, TANHYP, BOGENMASS, GRAD"

#: ../plugins/fn-math/functions.c:1419
msgid ""
"@FUNCTION=SINH\n"
"@SYNTAX=SINH(x)\n"
"@DESCRIPTION=SINH function returns the hyperbolic sine of @x, which is "
"defined mathematically as\n"
"\n"
"\t(exp(@x) - exp(-@x)) / 2.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SINH(0.5) equals 0.521095.\n"
"\n"
"@SEEALSO=SIN, COS, COSH, TAN, TANH, DEGREES, RADIANS, EXP"
msgstr ""
"@FUNCTION=SINHYP\n"
"@SYNTAX=SINHYP(x)\n"
"@DESCRIPTION=SINHYP liefert den hyperbolischen Sinus von @x, der "
"mathematisch definiert ist als\n"
"\n"
"\t(EXP(@x) - EXP(-@x)) /2.\n"
"\n"
"definiert ist.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"SINHYP(0.5) liefert 0.521095.\n"
"\n"
"@SEEALSO=SIN, COS, COSHYP, TAN, TANHYP, BOGENMASS, GRAD, EXP"

#: ../plugins/fn-math/functions.c:1446
msgid ""
"@FUNCTION=SQRT\n"
"@SYNTAX=SQRT(x)\n"
"@DESCRIPTION=SQRT function returns the square root of @x.\n"
"\n"
"* If @x is negative, SQRT returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SQRT(2) equals 1.4142136.\n"
"\n"
"@SEEALSO=POWER"
msgstr ""
"@FUNCTION=WURZEL\n"
"@SYNTAX=WURZEL(x)\n"
"@DESCRIPTION=WURZEL liefert die Quadratwurzel von @x.\n"
"\n"
"* Falls @x negativ ist, liefert WURZEL einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WURZEL(2) liefert 1.4142136.\n"
"\n"
"@SEEALSO=POTENZ"

#: ../plugins/fn-math/functions.c:1477
msgid ""
"@FUNCTION=SUMA\n"
"@SYNTAX=SUMA(value1, value2, ...)\n"
"@DESCRIPTION=SUMA computes the sum of all the values and cells referenced in "
"the argument list.  Numbers, text and logical values are included in the "
"calculation too.  If the cell contains text or the argument evaluates to "
"FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, "
"it is counted as one (1).\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43.  Then\n"
"SUMA(A1:A5) equals 107.\n"
"\n"
"@SEEALSO=AVERAGE, SUM, COUNT"
msgstr ""
"@FUNCTION=SUMMEA\n"
"@SYNTAX=SUMMEA(Wert1,Wert2,...)\n"
"@DESCRIPTION=SUMMEA berechnet die Summe aller übergebenen Werte und Zellen. "
"Auch Zahlen, Text und Logische Werte werden in die Berechnung einbezogen. "
"Falls die Zelle Text enthält oder das Argument FALSCH ist, wird es als der "
"Wert Null (0) gewertet. Falls das Argument WAHR ist, wird es als Eins (1) "
"gewertet.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11, 15, 17, 21 "
"und 43. Dann liefert\n"
"SUMMEA(A1:A5) 107.\n"
"\n"
"@SEEALSO=MITTELWERT, SUMME, ZÄHLEN"

#: ../plugins/fn-math/functions.c:1512
msgid ""
"@FUNCTION=SUMSQ\n"
"@SYNTAX=SUMSQ(value1, value2, ...)\n"
"@DESCRIPTION=SUMSQ returns the sum of the squares of all the values and "
"cells referenced in the argument list.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43.  Then\n"
"SUMSQ(A1:A5) equals 2925.\n"
"\n"
"@SEEALSO=SUM, COUNT"
msgstr ""
"@FUNCTION=QUADRATESUMME\n"
"@SYNTAX=QUADRATESUMME(Wert1,Wert2, ...)\n"
"@DESCRIPTION=QUADRATESUMME liefert der Summe der Quadrate aller übergebenen "
"Werte und Zellen.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11, 15, 17, 21 "
"und 43. Dann liefert\n"
"SUMSQ(A1:A5) 2925.\n"
"\n"
"@SEEALSO=SUMME, ANZAHL"

#: ../plugins/fn-math/functions.c:1546
msgid ""
"@FUNCTION=MULTINOMIAL\n"
"@SYNTAX=MULTINOMIAL(value1, value2, ...)\n"
"@DESCRIPTION=MULTINOMIAL returns the ratio of the factorial of a sum of "
"values to the product of factorials.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"MULTINOMIAL(2,3,4) equals 1260.\n"
"\n"
"@SEEALSO=SUM"
msgstr ""
"@FUNCTION=MULTINOMIAL\n"
"@SYNTAX=MULTINOMIAL(Wert1,Wert2,...)\n"
"@DESCRIPTION=MULTINOMIAL liefert das Verhältnis der Fakultät einer Summe von "
"Werten zum Produkt der Fakultäten.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"MULTINOMIAL(2,3,4) liefert 1260.\n"
"\n"
"@SEEALSO=SUMME"

#: ../plugins/fn-math/functions.c:1578
msgid ""
"@FUNCTION=G_PRODUCT\n"
"@SYNTAX=G_PRODUCT(value1, value2, ...)\n"
"@DESCRIPTION=G_PRODUCT returns the product of all the values and cells "
"referenced in the argument list.\n"
"\n"
"* Empty cells are ignored and the empty product is 1.\n"
"\n"
"@EXAMPLES=\n"
"G_PRODUCT(2,5,9) equals 90.\n"
"\n"
"@SEEALSO=SUM, COUNT"
msgstr ""
"@FUNCTION=G_PRODUKT\n"
"@SYNTAX=G_PRODUKT(Wert1,Wert2[ ,...])\n"
"@DESCRIPTION=G_PRODUCT liefert das Produkt aller übergebenen Werte und "
"Zellen.\n"
"\n"
"* Leere Zellen werden ignoriert und das leere Produkt ist 1.\n"
"\n"
"@EXAMPLES=\n"
"G_PRODUKT(2,5,9) liefert 90.\n"
"\n"
"@SEEALSO=SUMME, ANZAHL"

#: ../plugins/fn-math/functions.c:1609
msgid ""
"@FUNCTION=TAN\n"
"@SYNTAX=TAN(x)\n"
"@DESCRIPTION=TAN function returns the tangent of @x, where @x is given in "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TAN(3) equals -0.1425465.\n"
"\n"
"@SEEALSO=TANH, COS, COSH, SIN, SINH, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=TAN\n"
"@SYNTAX=TAN(x)\n"
"@DESCRIPTION=TAN liefert den Tangens von @x, wobei @x im Bogenmaß angegeben "
"wird.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TAN(3) liefert -0.1425465.\n"
"\n"
"@SEEALSO=TANHYP, COS, COSHYP, SIN, SINHYP, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:1635
msgid ""
"@FUNCTION=TANH\n"
"@SYNTAX=TANH(x)\n"
"@DESCRIPTION=TANH function returns the hyperbolic tangent of @x, which is "
"defined mathematically as \n"
"\n"
"\tsinh(@x) / cosh(@x).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TANH(2) equals 0.96402758.\n"
"\n"
"@SEEALSO=TAN, SIN, SINH, COS, COSH, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=TANHYP\n"
"@SYNTAX=TANHYP(x)\n"
"@DESCRIPTION=TANHYP liefert den hyperbolischen Tangens von @x, der "
"mathematisch als\n"
"\n"
"\t(SINHYP(@x) / COSHYP(@x).\n"
"\n"
"definiert ist.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TANHYP(2) liefert 0.96402758.\n"
"\n"
"@SEEALSO=TAN, SIN, SINHYP, COS, COSHYP, GRAD, BOGENMASS"

#: ../plugins/fn-math/functions.c:1661
msgid ""
"@FUNCTION=PI\n"
"@SYNTAX=PI()\n"
"@DESCRIPTION=PI functions returns the value of pi.\n"
"\n"
"* This function is called with no arguments.\n"
"* This function is Excel compatible, except that it returns pi with a better "
"precision.\n"
"\n"
"@EXAMPLES=\n"
"PI() equals about 3.141593.\n"
"\n"
"@SEEALSO=SQRTPI"
msgstr ""
"@FUNCTION=PI\n"
"@SYNTAX=PI()\n"
"@DESCRIPTION=PI liefert den Wert von Pi.\n"
"\n"
"* Diese Funktion wird ohne Argumente aufgerufen.\n"
"* Diese Funktion ist Excel-kompatibel, außer der Tatsache, dass sie Pi "
"präziser liefert.\n"
"\n"
"@EXAMPLES=\n"
"PI() liefert ungefähr 3.141593.\n"
"\n"
"@SEEALSO=WURZELPI"

#: ../plugins/fn-math/functions.c:1689
msgid ""
"@FUNCTION=TRUNC\n"
"@SYNTAX=TRUNC(number[,digits])\n"
"@DESCRIPTION=TRUNC function returns the value of @number truncated to the "
"number of digits specified.\n"
"\n"
"* If @digits is omitted or negative then @digits defaults to zero.\n"
"* If @digits is not an integer, it is truncated.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"TRUNC(3.12) equals 3.\n"
"TRUNC(4.15,1) equals 4.1.\n"
"\n"
"@SEEALSO=INT"
msgstr ""
"@FUNCTION=KÜRZEN\n"
"@SYNTAX=KÜRZEN(Zahl[,Stellen])\n"
"@DESCRIPTION=KÜRZEN liefert den Wert der Zahl @Zahl, wobei diese auf die "
"führenden @Stellen Stellen verkürzt wird.\n"
"\n"
"* Falls @Stellen nicht übergegeben wird, wird die Vorgabe Null angenommen.\n"
"* Falls @Stellen keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"KÜRZEN(3.12) liefert 3.\n"
"KÜRZEN(4.15,1) liefert 4.1.\n"
"\n"
"@SEEALSO=GANZZAHL"

#: ../plugins/fn-math/functions.c:1735
msgid ""
"@FUNCTION=EVEN\n"
"@SYNTAX=EVEN(number)\n"
"@DESCRIPTION=EVEN function returns the number rounded up to the nearest even "
"integer.  Negative numbers are rounded down.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"EVEN(5.4) equals 6.\n"
"EVEN(-5.4) equals -6.\n"
"\n"
"@SEEALSO=ODD"
msgstr ""
"@FUNCTION=GERADE\n"
"@SYNTAX=GERADE(Zahl)\n"
"@DESCRIPTION=GERADE liefert @Zahl auf die nächste gerade Ganzzahl gerundet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GERADE(5.4) liefert 6.\n"
"\n"
"@SEEALSO=UNGERADE"

#: ../plugins/fn-math/functions.c:1779
msgid ""
"@FUNCTION=ODD\n"
"@SYNTAX=ODD(number)\n"
"@DESCRIPTION=ODD function returns the @number rounded up to the nearest odd "
"integer.  Negative numbers are rounded down.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"ODD(4.4) equals 5.\n"
"ODD(-4.4) equals -5.\n"
"\n"
"@SEEALSO=EVEN"
msgstr ""
"@FUNCTION=UNGERADE\n"
"@SYNTAX=UNGERADE(Zahl)\n"
"@DESCRIPTION=UNGERADE liefert @Zahl auf die nächste ungerade Ganzzahl "
"gerundet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"UNGERADE(4.4) liefert 5.\n"
"\n"
"@SEEALSO=GERADE"

#: ../plugins/fn-math/functions.c:1823
msgid ""
"@FUNCTION=FACTDOUBLE\n"
"@SYNTAX=FACTDOUBLE(number)\n"
"@DESCRIPTION=FACTDOUBLE function returns the double factorial of a @number, "
"i.e., x!!.\n"
"\n"
"* If @number is not an integer, it is truncated.\n"
"* If @number is negative FACTDOUBLE returns #NUM! error.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"FACTDOUBLE(5) equals 15.\n"
"\n"
"@SEEALSO=FACT"
msgstr ""
"@FUNCTION=DOPPELFAKULTÄT\n"
"@SYNTAX=DOPPELFAKULTÄT(Zahl)\n"
"@DESCRIPTION=DOPPELFAKULTÄT liefert die Doppelfakultät einer Zahl @Zahl, "
"also x!!.\n"
"\n"
"* Falls @Zahl keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @Zahl negativ ist, liefert DOPPELFAKULTÄT einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DOPPELFAKULTÄT(5) liefert 15.\n"
"\n"
"@SEEALSO=FAKULTÄT"

# FIXME: check for mathematical correctness
#: ../plugins/fn-math/functions.c:1870
msgid ""
"@FUNCTION=FIB\n"
"@SYNTAX=FIB(number)\n"
"@DESCRIPTION=FIB function computes Fibonacci numbers.\n"
"\n"
"* If @number is not an integer, it is truncated.\n"
"* If @number is negative or zero FIB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"FIB(12) equals 144.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=FIB\n"
"@SYNTAX=FIB(Zahl)\n"
"@DESCRIPTION=FIB berechnet Fibonacci-Zahlen.\n"
"\n"
"* Falls @Zahl keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @Zahl negativ oder Null ist, liefert FIB einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"FIB(12) liefert 144.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:1921
msgid ""
"@FUNCTION=QUOTIENT\n"
"@SYNTAX=QUOTIENT(numerator,denominator)\n"
"@DESCRIPTION=QUOTIENT function returns the integer portion of a division.  "
"@numerator is the divided number and @denominator is the divisor.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"QUOTIENT(23,5) equals 4.\n"
"\n"
"@SEEALSO=MOD"
msgstr ""
"@FUNCTION=QUOTIENT\n"
"@SYNTAX=QUOTIENT(Zähler,Nenner)\n"
"@DESCRIPTION=QUOTIENT liefert das den ganzzahligen Anteil einer Division. "
"@Zähler ist der Divident und @Nenner der Divisor.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"QUOTIENT(23,5) liefert 4.\n"
"\n"
"@SEEALSO=REST"

#: ../plugins/fn-math/functions.c:1954
msgid ""
"@FUNCTION=SIGN\n"
"@SYNTAX=SIGN(number)\n"
"@DESCRIPTION=SIGN function returns 1 if the @number is positive, zero if the "
"@number is 0, and -1 if the @number is negative.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"SIGN(3) equals 1.\n"
"SIGN(-3) equals -1.\n"
"SIGN(0) equals 0.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=VORZEICHEN\n"
"@SYNTAX=VORZEICHEN(Zahl)\n"
"@DESCRIPTION=VORZEICHEN liefert 1, falls @Zahl positiv ist, Null, falls "
"@Zahl 0 ist und -1, falls @Zahl negativ ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"VORZEICHEN(3) liefert 1.\n"
"VORZEICHEN(-3) liefert -1.\n"
"VORZEICHEN(0) liefert 0.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:1989
msgid ""
"@FUNCTION=SQRTPI\n"
"@SYNTAX=SQRTPI(number)\n"
"@DESCRIPTION=SQRTPI function returns the square root of a @number multiplied "
"by pi.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SQRTPI(2) equals 2.506628275.\n"
"\n"
"@SEEALSO=PI"
msgstr ""
"@FUNCTION=WURZELPI\n"
"@SYNTAX=WURZELPI(Zahl)\n"
"@DESCRIPTION=WURZELPI liefert die Quadratwurzel von @Zahl multipliziert mit "
"Pi.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WURZELPI(2) liefert 2.506628275.\n"
"\n"
"@SEEALSO=PI"

#: ../plugins/fn-math/functions.c:2020
msgid ""
"@FUNCTION=ROUNDDOWN\n"
"@SYNTAX=ROUNDDOWN(number[,digits])\n"
"@DESCRIPTION=ROUNDDOWN function rounds a given @number towards 0.\n"
"\n"
"@number is the number you want rounded toward 0 and @digits is the number of "
"digits to which you want to round that number.\n"
"\n"
"* If @digits is greater than zero, @number is rounded toward 0 to the given "
"number of digits.\n"
"* If @digits is zero or omitted, @number is rounded toward 0 to the next "
"integer.\n"
"* If @digits is less than zero, @number is rounded toward 0 to the left of "
"the decimal point.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROUNDDOWN(5.5) equals 5.\n"
"ROUNDDOWN(-3.3) equals -3.\n"
"ROUNDDOWN(1501.15,1) equals 1501.1.\n"
"ROUNDDOWN(1501.15,-2) equals 1500.0.\n"
"\n"
"@SEEALSO=ROUND,ROUNDUP"
msgstr ""
"@FUNCTION=ABRUNDEN\n"
"@SYNTAX=ABRUNDEN(Zahl[,Stellen])\n"
"@DESCRIPTION=ABRUNDEN rundet die angegebene Zahl ab.\n"
"\n"
"@Zahl ist die abzurundende Zahl und @Stellen die Anzahl der Stellen, auf die "
"diese Zahl gerundet werden soll.\n"
"\n"
"* Falls @Stellen positiv ist, wird @Zahl auf die angegebene Anzahl der "
"Stellen abgerundet.\n"
"* Falls @Stellen Null ist, wird @Zahl auf die nächste Ganzzahl abgerundet.\n"
"* Falls @Stellen negativ ist, wird @Zahl auf die Zahl links der "
"Dezimalstelle abgerundet.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ABRUNDEN(5.5) liefert 5.\n"
"ABRUNDEN(-3.3) liefert -4.\n"
"ABRUNDEN(1501.15,1) liefert 1501.1.\n"
"ABRUNDEN(1501.15,-2) liefert 1500.0.\n"
"\n"
"@SEEALSO=RUNDEN, AUFRUNDEN"

#: ../plugins/fn-math/functions.c:2057
msgid ""
"@FUNCTION=ROUND\n"
"@SYNTAX=ROUND(number[,digits])\n"
"@DESCRIPTION=ROUND function rounds a given number.\n"
"\n"
"@number is the number you want rounded and @digits is the number of digits "
"to which you want to round that number.\n"
"\n"
"* If @digits is greater than zero, @number is rounded to the given number of "
"digits.\n"
"* If @digits is zero or omitted, @number is rounded to the nearest integer.\n"
"* If @digits is less than zero, @number is rounded to the left of the "
"decimal point.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROUND(5.5) equals 6.\n"
"ROUND(-3.3) equals -3.\n"
"ROUND(1501.15,1) equals 1501.2.\n"
"ROUND(1501.15,-2) equals 1500.0.\n"
"\n"
"@SEEALSO=ROUNDDOWN,ROUNDUP"
msgstr ""
"@FUNCTION=RUNDEN\n"
"@SYNTAX=RUNDEN(Zahl[,Stellen])\n"
"@DESCRIPTION=RUNDEN rundet die angegebene Zahl.\n"
"\n"
"@Zahl ist die zu rundende Zahl und @Stellen die Anzahl der Stellen, auf die "
"diese Zahl gerundet werden soll.\n"
"\n"
"* Falls @Stellen positiv ist, wird @Zahl auf die angegebene Anzahl der "
"Stellen gerundet.\n"
"* Falls @Stellen Null ist, wird @Zahl auf die nächste Ganzzahl gerundet.\n"
"* Falls @Stellen negativ ist, wird @Zahl auf die Zahl links der "
"Dezimalstelle gerundet.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"RUNDEN(5.5) liefert 6.\n"
"RUNDEN(-3.3) liefert -3.\n"
"RUNDEN(1501.15,1) liefert 1501.2.\n"
"RUNDEN(1501.15,-2) liefert 1500.0.\n"
"\n"
"@SEEALSO=ABRUNDEN, AUFRUNDEN"

#: ../plugins/fn-math/functions.c:2111
msgid ""
"@FUNCTION=ROUNDUP\n"
"@SYNTAX=ROUNDUP(number[,digits])\n"
"@DESCRIPTION=ROUNDUP function rounds a given number away from 0.\n"
"\n"
"@number is the number you want rounded away from 0 and @digits is the number "
"of digits to which you want to round that number.\n"
"\n"
"* If @digits is greater than zero, @number is rounded away from 0 to the "
"given number of digits.\n"
"* If @digits is zero or omitted, @number is rounded away from 0 to the next "
"integer.\n"
"* If @digits is less than zero, @number is rounded away from 0 to the left "
"of the decimal point.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROUNDUP(5.5) equals 6.\n"
"ROUNDUP(-3.3) equals -4.\n"
"ROUNDUP(1501.15,1) equals 1501.2.\n"
"ROUNDUP(1501.15,-2) equals 1600.0.\n"
"\n"
"@SEEALSO=ROUND,ROUNDDOWN"
msgstr ""
"@FUNCTION=AUFRUNDEN\n"
"@SYNTAX=AUFRUNDEN(Zahl[,Stellen])\n"
"@DESCRIPTION=AUFRUNDEN rundet die angegebene Zahl auf.\n"
"\n"
"@Zahl ist die aufzurundende Zahl und @Stellen die Anzahl der Stellen, auf "
"die diese Zahl gerundet werden soll.\n"
"\n"
"* Falls @Stellen positiv ist, wird @Zahl auf die angegebene Anzahl der "
"Stellen aufgerundet.\n"
"* Falls @Stellen Null ist, wird @Zahl auf die nächste Ganzzahl aufgerundet.\n"
"* Falls @Stellen negativ ist, wird @Zahl auf die Zahl links der "
"Dezimalstelle aufgerundet.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"AUFRUNDEN(5.5) liefert 6.\n"
"AUFRUNDEN(-3.3) liefert -3.\n"
"AUFRUNDEN(1501.15,1) liefert 1501.2.\n"
"AUFRUNDEN(1501.15,-2) liefert 1600.0.\n"
"\n"
"@SEEALSO=RUNDEN, ABRUNDEN"

#: ../plugins/fn-math/functions.c:2172
msgid ""
"@FUNCTION=MROUND\n"
"@SYNTAX=MROUND(number,multiple)\n"
"@DESCRIPTION=MROUND function rounds a given number to the desired multiple.\n"
"\n"
"@number is the number you want rounded and @multiple is the the multiple to "
"which you want to round the number.\n"
"\n"
"* If @number and @multiple have different sign, MROUND returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MROUND(1.7,0.2) equals 1.8.\n"
"MROUND(321.123,0.12) equals 321.12.\n"
"\n"
"@SEEALSO=ROUNDDOWN,ROUND,ROUNDUP"
msgstr ""
"@FUNCTION=VRUNDEN\n"
"@SYNTAX=VRUNDEN(Zahl,Vielfache)\n"
"@DESCRIPTION=VRUNDEN rundet die angegebene Zahl auf die gewünschte "
"Vielfache.\n"
"\n"
"@Zahl ist zu rundende Zahl und @Vielfache die Vielfache, auf die die Zahl "
"gerundet werden soll.\n"
"\n"
"* Falls @Zahl und @Vielfache ein anderes Vorzeichen haben, liefert VRUNDEN "
"einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"MROUND(1.7,0.2) liefert 1.8.\n"
"MROUND(321.123,0.12) liefert 321.12.\n"
"\n"
"@SEEALSO=RUNDEN, ABRUNDEN, AUFRUNDEN"

#: ../plugins/fn-math/functions.c:2229
msgid ""
"@FUNCTION=ROMAN\n"
"@SYNTAX=ROMAN(number[,type])\n"
"@DESCRIPTION=ROMAN function returns an arabic number in the roman numeral "
"style, as text. @number is the number you want to convert and @type is the "
"type of roman numeral you want.\n"
"\n"
"* If @type is 0 or it is omitted, ROMAN returns classic roman numbers.\n"
"* Type 1 is more concise than classic type, type 2 is more concise than type "
"1, and type 3 is more concise than type 2.  Type 4 is simplified type.\n"
"* If @number is negative or greater than 3999, ROMAN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROMAN(999) equals CMXCIX.\n"
"ROMAN(999,1) equals LMVLIV.\n"
"ROMAN(999,2) equals XMIX.\n"
"ROMAN(999,3) equals VMIV.\n"
"ROMAN(999,4) equals IM.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=RÖMISCH\n"
"@SYNTAX=RÖMISCH(Zahl[,Typ])\n"
"@DESCRIPTION=RÖMISCH wandelt eine arabische Zahl in die römische "
"Schreibweise um. @Zahl ist die zu konvertierende Zahl und @Typ der Typ der "
"gewünschte römischen Darstellung.\n"
"\n"
"* Falls @Typ Null ist oder nicht übergeben wird, liefert RÖMISCH klassische "
"römische Zahlen.\n"
"* Typ 1 ist übersichtlicher als der klassische Typ, Typ 2 übersichtlicher "
"als Typ 1 und Typ 3 ist übersichtlicher als Typ 2. Typ 4 ist der "
"vereinfachte Typ.\n"
"* Falls @Zahl negativ oder größer als 3999 ist, liefert RÖMISCH einen #WERT!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"RÖMISCH(999) liefert CMXCIX.\n"
"RÖMISCH(999,1) liefert LMVLIV.\n"
"RÖMISCH(999,2) liefert XMIX.\n"
"RÖMISCH(999,3) liefert VMIV.\n"
"RÖMISCH(999,4) liefert IM.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:2494
msgid ""
"@FUNCTION=SUMX2MY2\n"
"@SYNTAX=SUMX2MY2(array1,array2)\n"
"@DESCRIPTION=SUMX2MY2 function returns the sum of the difference of squares "
"of corresponding values in two arrays. @array1 is the first array or range "
"of data points and @array2 is the second array or range of data points. The "
"equation of SUMX2MY2 is SUM (x^2-y^2).\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If @array1 and @array2 have different number of data points, SUMX2MY2 "
"returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and 39.  "
"Then\n"
"SUMX2MY2(A1:A5,B1:B5) equals -1299.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2PY2"
msgstr ""
"@FUNCTION=SUMMENPRODUKT\n"
"@SYNTAX=SUMMENPRODUKT(Bereich1,Bereich2,...)\n"
"@DESCRIPTION=SUMMENPRODUKT multipliziert die entsprechenden Dateneinträge in "
"den angegebenen Feldern oder Bereichen und liefert dann die Summe dieser "
"Produkte. Falls ein Feldeintrag nicht numerisch ist, wird stattdessen der "
"Wert Null verwendet.\n"
"\n"
"* Falls Felder- oder Bereichsargumente unterschiedliche Dimensionen haben, "
"liefert SUMMENPRODUKT einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11, 15, 17, 21 "
"und 43 und die Zellen B1, B2, ..., B5 13, 22, 31, 33 sowie 39. Dann liefert\n"
"SUMMENPRODUKT(A1:A5,B1:B5) 3370.\n"
"\n"
"@SEEALSO=SUMME, PRODUKT"

#: ../plugins/fn-math/functions.c:2611
msgid ""
"@FUNCTION=SUMX2PY2\n"
"@SYNTAX=SUMX2PY2(array1,array2)\n"
"@DESCRIPTION=SUMX2PY2 function returns the sum of the sum of squares of "
"corresponding values in two arrays. @array1 is the first array or range of "
"data points and @array2 is the second array or range of data points. The "
"equation of SUMX2PY2 is SUM (x^2+y^2).\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If @array1 and @array2 have different number of data points, SUMX2PY2 "
"returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and 39.  "
"Then\n"
"SUMX2PY2(A1:A5,B1:B5) equals 7149.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2MY2"
msgstr ""
"@FUNCTION=SUMMENPRODUKT\n"
"@SYNTAX=SUMMENPRODUKT(Bereich1,Bereich2,...)\n"
"@DESCRIPTION=SUMMENPRODUKT multipliziert die entsprechenden Dateneinträge in "
"den angegebenen Feldern oder Bereichen und liefert dann die Summe dieser "
"Produkte. Falls ein Feldeintrag nicht numerisch ist, wird stattdessen der "
"Wert Null verwendet.\n"
"\n"
"* Falls Felder- oder Bereichsargumente unterschiedliche Dimensionen haben, "
"liefert SUMMENPRODUKT einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11, 15, 17, 21 "
"und 43 und die Zellen B1, B2, ..., B5 13, 22, 31, 33 sowie 39. Dann liefert\n"
"SUMMENPRODUKT(A1:A5,B1:B5) 3370.\n"
"\n"
"@SEEALSO=SUMME, PRODUKT"

#: ../plugins/fn-math/functions.c:2725
msgid ""
"@FUNCTION=SUMXMY2\n"
"@SYNTAX=SUMXMY2(array1,array2)\n"
"@DESCRIPTION=SUMXMY2 function returns the sum of squares of differences of "
"corresponding values in two arrays. @array1 is the first array or range of "
"data points and @array2 is the second array or range of data points. The "
"equation of SUMXMY2 is SUM (x-y)^2.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If @array1 and @array2 have different number of data points, SUMXMY2 "
"returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and 39.  "
"Then\n"
"SUMXMY2(A1:A5,B1:B5) equals 409.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2MY2,SUMX2PY2"
msgstr ""
"@FUNCTION=SUMMENPRODUKT\n"
"@SYNTAX=SUMMENPRODUKT(Bereich1,Bereich2,...)\n"
"@DESCRIPTION=SUMMENPRODUKT multipliziert die entsprechenden Dateneinträge in "
"den angegebenen Feldern oder Bereichen und liefert dann die Summe dieser "
"Produkte. Falls ein Feldeintrag nicht numerisch ist, wird stattdessen der "
"Wert Null verwendet.\n"
"\n"
"* Falls Felder- oder Bereichsargumente unterschiedliche Dimensionen haben, "
"liefert SUMMENPRODUKT einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11, 15, 17, 21 "
"und 43 und die Zellen B1, B2, ..., B5 13, 22, 31, 33 sowie 39. Dann liefert\n"
"SUMMENPRODUKT(A1:A5,B1:B5) 3370.\n"
"\n"
"@SEEALSO=SUMME, PRODUKT"

#: ../plugins/fn-math/functions.c:2841
msgid ""
"@FUNCTION=SERIESSUM\n"
"@SYNTAX=SERIESSUM(x,n,m,coefficients)\n"
"@DESCRIPTION=SERIESSUM function returns the sum of a power series.  @x is "
"the base of the power series, @n is the initial power to raise @x, @m is the "
"increment to the power for each term in the series, and @coefficients are "
"the coefficients by which each successive power of @x is multiplied.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 1.23, 2.32, "
"2.98, 3.42, and 4.33.  Then\n"
"SERIESSUM(3,1,2.23,A1:A5) equals 251416.43018.\n"
"\n"
"@SEEALSO=COUNT,SUM"
msgstr ""
"@FUNCTION=REIHENSUMME\n"
"@SYNTAX=REIHENSUMME(x,n,m,Koeffizienten)\n"
"@DESCRIPTION=REIHENSUMME liefert die Summe einer Potenzreihe. @x ist die "
"Basis der Potenzreihe, @n der erste Exponent, mit dem @x potenziert werden "
"soll. @m ist die Schrittweite des Exponenten für jeden Term in der Reihe und "
"@Koeffizienten sind die Koeffizienten, mit denen jede folgende Potenz von @x "
"multipliziert werden soll.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 1.23, 2.32, "
"2.98, 3.42 und 4.33. Dann liefert\n"
"REIHENSUMME(3,1,2.23,A1:A5) 251416.43018.\n"
"\n"
"@SEEALSO=ANZAHL,SUMME"

#: ../plugins/fn-math/functions.c:2902
msgid ""
"@FUNCTION=MINVERSE\n"
"@SYNTAX=MINVERSE(matrix)\n"
"@DESCRIPTION=MINVERSE function returns the inverse matrix of @matrix.\n"
"\n"
"* If @matrix cannot be inverted, MINVERSE returns #NUM! error.\n"
"* If @matrix does not contain equal number of columns and rows, MINVERSE "
"returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT, MDETERM"
msgstr ""
"@FUNCTION=MINVERS\n"
"@SYNTAX=MINVERS(Matrix)\n"
"@DESCRIPTION=MINVERS liefert die inverse Matrix der Matrix @Matrix.\n"
"\n"
"* Falls @Matrix nicht invertiert werden kann, liefert MINVERS einen #ZAHL!-"
"Fehler.\n"
"* Falls @Matrix nicht die gleiche Anzahl Spalten und Zeilen enthält, liefert "
"MINVERS einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT, MDETERM"

#: ../plugins/fn-math/functions.c:3047
msgid ""
"@FUNCTION=MMULT\n"
"@SYNTAX=MMULT(array1,array2)\n"
"@DESCRIPTION=MMULT function returns the matrix product of two arrays. The "
"result is an array with the same number of rows as @array1 and the same "
"number of columns as @array2.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TRANSPOSE,MINVERSE"
msgstr ""
"@FUNCTION=MMULT\n"
"@SYNTAX=MMULT(Datenfeld1,Datenfeld2)\n"
"@DESCRIPTION=MMULT liefert das Matrizenprodukt zweier Felder. Das Ergebnis "
"ist ein Feld mit der gleichen Zeilenanzahl wie @Datenfeld1 und der gleichen "
"Spaltenanzahl wie @Datenfeld2.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TRANSPOSE,MTRANS"

#: ../plugins/fn-math/functions.c:3123
msgid ""
"@FUNCTION=MDETERM\n"
"@SYNTAX=MDETERM(matrix)\n"
"@DESCRIPTION=MDETERM function returns the determinant of a given matrix.\n"
"\n"
"* If the @matrix does not contain equal number of columns and rows, MDETERM "
"returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that A1, ..., A4 contain numbers 2, 3, 7, and 3, B1, ..., B4 "
"4, 2, 4, and 1, C1, ..., C4 9, 4, 3, and 2, and D1, ..., D4 7, 3, 6, and 5. "
"Then\n"
"MDETERM(A1:D4) equals 148.\n"
"\n"
"@SEEALSO=MMULT, MINVERSE"
msgstr ""
"@FUNCTION=MDETERM\n"
"@SYNTAX=MDETERM(Matrix)\n"
"@DESCRIPTION=MDETERM liefert die Determinante einer angegebenen Matrix "
"@Matrix.\n"
"\n"
"* Falls @matrix nicht gleich viele Zeilen und Spalten enthält, liefert "
"MDETERM einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, ..., A4 enthalten die Zahlen 2, 3, 7 und 3, "
"B1, ..., B4 4, 2, 4 und 1, C1, ..., C4 9, 4, 3 und 2 sowie D1, ..., D4 7, 3, "
"6 und 5. Dann liefert\n"
"MDETERM(A1:D4) 148.\n"
"\n"
"@SEEALSO=MMULT, MINVERSE"

#: ../plugins/fn-math/functions.c:3172
msgid "SUMPRODUCT:Multiplies components and adds the results."
msgstr ""

#: ../plugins/fn-math/functions.c:3174
msgid ""
"Multiplies corresponding data entries in the given arrays or ranges, and "
"then returns the sum of those products."
msgstr ""

#: ../plugins/fn-math/functions.c:3177
msgid "If an entry is not numeric, the value zero is used instead."
msgstr ""

#: ../plugins/fn-math/functions.c:3178
msgid ""
"If arrays or range arguments do not have the same dimensions, return #VALUE! "
"error."
msgstr ""

#: ../plugins/fn-math/functions.c:3180
msgid ""
"SUMPRODUCTs arguments are arrays or ranges. Attempting to use A1:A5>0 will "
"not work, implicit intersection will kick in. Instead use --(A1:A5>0)"
msgstr ""

#: ../plugins/fn-r/functions.c:19
msgid "R.DNORM:probability density function of the normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:20 ../plugins/fn-r/functions.c:45
#: ../plugins/fn-r/functions.c:99 ../plugins/fn-r/functions.c:124
#: ../plugins/fn-r/functions.c:151 ../plugins/fn-r/functions.c:178
#: ../plugins/fn-r/functions.c:203 ../plugins/fn-r/functions.c:257
#: ../plugins/fn-r/functions.c:282 ../plugins/fn-r/functions.c:336
#: ../plugins/fn-r/functions.c:359 ../plugins/fn-r/functions.c:409
#: ../plugins/fn-r/functions.c:434 ../plugins/fn-r/functions.c:461
#: ../plugins/fn-r/functions.c:488 ../plugins/fn-r/functions.c:511
#: ../plugins/fn-r/functions.c:561 ../plugins/fn-r/functions.c:586
#: ../plugins/fn-r/functions.c:640 ../plugins/fn-r/functions.c:663
#: ../plugins/fn-r/functions.c:713 ../plugins/fn-r/functions.c:736
#: ../plugins/fn-r/functions.c:786 ../plugins/fn-r/functions.c:811
#: ../plugins/fn-r/functions.c:838 ../plugins/fn-r/functions.c:865
#: ../plugins/fn-r/functions.c:890 ../plugins/fn-r/functions.c:944
#: ../plugins/fn-r/functions.c:971 ../plugins/fn-r/functions.c:1029
#: ../plugins/fn-r/functions.c:1052 ../plugins/fn-r/functions.c:1102
#: ../plugins/fn-r/functions.c:1127
msgid "x:observation."
msgstr ""

#: ../plugins/fn-r/functions.c:21 ../plugins/fn-r/functions.c:46
#: ../plugins/fn-r/functions.c:73
msgid "mu:mean of the distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:22 ../plugins/fn-r/functions.c:47
#: ../plugins/fn-r/functions.c:74
msgid "sigma:standard deviation of the distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:23 ../plugins/fn-r/functions.c:102
#: ../plugins/fn-r/functions.c:181 ../plugins/fn-r/functions.c:260
#: ../plugins/fn-r/functions.c:338 ../plugins/fn-r/functions.c:412
#: ../plugins/fn-r/functions.c:490 ../plugins/fn-r/functions.c:564
#: ../plugins/fn-r/functions.c:642 ../plugins/fn-r/functions.c:715
#: ../plugins/fn-r/functions.c:789 ../plugins/fn-r/functions.c:868
#: ../plugins/fn-r/functions.c:948 ../plugins/fn-r/functions.c:1031
#: ../plugins/fn-r/functions.c:1105
msgid ""
"give_log:if true, log of the result will be returned instead.  This is "
"useful if the result would otherwise underflow to 0.  Defaults to false."
msgstr ""

#: ../plugins/fn-r/functions.c:24
msgid ""
"This function returns the probability density function of the normal "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:44
msgid "R.PNORM:cumulative distribution function of the normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:48 ../plugins/fn-r/functions.c:75
#: ../plugins/fn-r/functions.c:127 ../plugins/fn-r/functions.c:154
#: ../plugins/fn-r/functions.c:206 ../plugins/fn-r/functions.c:233
#: ../plugins/fn-r/functions.c:285 ../plugins/fn-r/functions.c:312
#: ../plugins/fn-r/functions.c:361 ../plugins/fn-r/functions.c:386
#: ../plugins/fn-r/functions.c:437 ../plugins/fn-r/functions.c:464
#: ../plugins/fn-r/functions.c:513 ../plugins/fn-r/functions.c:538
#: ../plugins/fn-r/functions.c:589 ../plugins/fn-r/functions.c:616
#: ../plugins/fn-r/functions.c:665 ../plugins/fn-r/functions.c:690
#: ../plugins/fn-r/functions.c:738 ../plugins/fn-r/functions.c:763
#: ../plugins/fn-r/functions.c:814 ../plugins/fn-r/functions.c:841
#: ../plugins/fn-r/functions.c:893 ../plugins/fn-r/functions.c:920
#: ../plugins/fn-r/functions.c:975 ../plugins/fn-r/functions.c:1004
#: ../plugins/fn-r/functions.c:1054 ../plugins/fn-r/functions.c:1079
#: ../plugins/fn-r/functions.c:1130 ../plugins/fn-r/functions.c:1157
msgid ""
"lower_tail:if true (the default), the lower tail of the distribution is "
"considered."
msgstr ""

#: ../plugins/fn-r/functions.c:49 ../plugins/fn-r/functions.c:76
#: ../plugins/fn-r/functions.c:128 ../plugins/fn-r/functions.c:155
#: ../plugins/fn-r/functions.c:207 ../plugins/fn-r/functions.c:234
#: ../plugins/fn-r/functions.c:286 ../plugins/fn-r/functions.c:313
#: ../plugins/fn-r/functions.c:362 ../plugins/fn-r/functions.c:387
#: ../plugins/fn-r/functions.c:438 ../plugins/fn-r/functions.c:465
#: ../plugins/fn-r/functions.c:514 ../plugins/fn-r/functions.c:539
#: ../plugins/fn-r/functions.c:590 ../plugins/fn-r/functions.c:617
#: ../plugins/fn-r/functions.c:666 ../plugins/fn-r/functions.c:691
#: ../plugins/fn-r/functions.c:739 ../plugins/fn-r/functions.c:764
#: ../plugins/fn-r/functions.c:815 ../plugins/fn-r/functions.c:842
#: ../plugins/fn-r/functions.c:894 ../plugins/fn-r/functions.c:921
#: ../plugins/fn-r/functions.c:976 ../plugins/fn-r/functions.c:1005
#: ../plugins/fn-r/functions.c:1055 ../plugins/fn-r/functions.c:1080
#: ../plugins/fn-r/functions.c:1131 ../plugins/fn-r/functions.c:1158
msgid ""
"log_p:if true, log of the probability is used.  This is useful if the "
"probability would otherwise underflow to 0.  Defaults to false."
msgstr ""

#: ../plugins/fn-r/functions.c:50
msgid ""
"This function returns the cumulative distribution function of the normal "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:71
msgid "R.QNORM:probability quantile function of the normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:72 ../plugins/fn-r/functions.c:230
#: ../plugins/fn-r/functions.c:309 ../plugins/fn-r/functions.c:384
#: ../plugins/fn-r/functions.c:536 ../plugins/fn-r/functions.c:613
#: ../plugins/fn-r/functions.c:688 ../plugins/fn-r/functions.c:761
#: ../plugins/fn-r/functions.c:917 ../plugins/fn-r/functions.c:1000
#: ../plugins/fn-r/functions.c:1077 ../plugins/fn-r/functions.c:1154
msgid "p:probability."
msgstr ""

#: ../plugins/fn-r/functions.c:77
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:98
msgid "R.DLNORM:probability density function of the log-normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:100 ../plugins/fn-r/functions.c:125
#: ../plugins/fn-r/functions.c:152
msgid "logmean:mean of the underlying normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:101 ../plugins/fn-r/functions.c:126
#: ../plugins/fn-r/functions.c:153
msgid "logsd:standard deviation of the underlying normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:103
msgid ""
"This function returns the probability density function of the log-normal "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:123
msgid ""
"R.PLNORM:cumulative distribution function of the log-normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:129
msgid ""
"This function returns the cumulative distribution function of the log-normal "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:150
msgid "R.QLNORM:probability quantile function of the log-normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:156
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the log-normal distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:177
msgid "R.DGAMMA:probability density function of the gamma distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:179 ../plugins/fn-r/functions.c:204
#: ../plugins/fn-r/functions.c:231 ../plugins/fn-r/functions.c:562
#: ../plugins/fn-r/functions.c:587 ../plugins/fn-r/functions.c:614
msgid "shape:the shape parameter of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:180 ../plugins/fn-r/functions.c:205
#: ../plugins/fn-r/functions.c:232 ../plugins/fn-r/functions.c:563
#: ../plugins/fn-r/functions.c:588 ../plugins/fn-r/functions.c:615
#: ../plugins/fn-r/functions.c:714 ../plugins/fn-r/functions.c:737
#: ../plugins/fn-r/functions.c:762 ../plugins/fn-r/functions.c:1104
#: ../plugins/fn-r/functions.c:1129 ../plugins/fn-r/functions.c:1156
msgid "scale:the scale parameter of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:182
msgid ""
"This function returns the probability density function of the gamma "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:202
msgid "R.PGAMMA:cumulative distribution function of the gamma distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:208
msgid ""
"This function returns the cumulative distribution function of the gamma "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:229
msgid "R.QGAMMA:probability quantile function of the gamma distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:235
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the gamma distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:256
msgid "R.DBETA:probability density function of the beta distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:258 ../plugins/fn-r/functions.c:283
#: ../plugins/fn-r/functions.c:310
msgid "a:the first shape parameter of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:259 ../plugins/fn-r/functions.c:284
#: ../plugins/fn-r/functions.c:311
msgid "b:the second scale parameter of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:261
msgid ""
"This function returns the probability density function of the beta "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:281
msgid "R.PBETA:cumulative distribution function of the beta distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:287
msgid ""
"This function returns the cumulative distribution function of the beta "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:308
msgid "R.QBETA:probability quantile function of the beta distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:314
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the beta distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:335
msgid "R.DT:probability density function of the Student t distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:337 ../plugins/fn-r/functions.c:360
#: ../plugins/fn-r/functions.c:385
msgid "n:the number of degrees of freedom of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:339
msgid ""
"This function returns the probability density function of the Student t "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:358
msgid "R.PT:cumulative distribution function of the Student t distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:363
msgid ""
"This function returns the cumulative distribution function of the Student t "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:383
msgid "R.QT:probability quantile function of the Student t distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:388
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Student t distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:408
msgid "R.DF:probability density function of the F distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:410 ../plugins/fn-r/functions.c:435
#: ../plugins/fn-r/functions.c:462
msgid "n1:the first number of degrees of freedom of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:411 ../plugins/fn-r/functions.c:436
#: ../plugins/fn-r/functions.c:463
msgid "n2:the second number of degrees of freedom of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:413
msgid ""
"This function returns the probability density function of the F distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:433
msgid "R.PF:cumulative distribution function of the F distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:439
msgid ""
"This function returns the cumulative distribution function of the F "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:460
msgid "R.QF:probability quantile function of the F distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:466
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the F distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:487
msgid "R.DCHISQ:probability density function of the chi-square distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:489 ../plugins/fn-r/functions.c:512
#: ../plugins/fn-r/functions.c:537
msgid "df:the number of degrees of freedom of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:491
msgid ""
"This function returns the probability density function of the chi-square "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:510
msgid ""
"R.PCHISQ:cumulative distribution function of the chi-square distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:515
msgid ""
"This function returns the cumulative distribution function of the chi-square "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:535
msgid "R.QCHISQ:probability quantile function of the chi-square distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:540
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the chi-square distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:560
msgid "R.DWEIBULL:probability density function of the Weibull distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:565
msgid ""
"This function returns the probability density function of the Weibull "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:585
msgid ""
"R.PWEIBULL:cumulative distribution function of the Weibull distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:591
msgid ""
"This function returns the cumulative distribution function of the Weibull "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:612
msgid "R.QWEIBULL:probability quantile function of the Weibull distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:618
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Weibull distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:639
msgid "R.DPOIS:probability density function of the Poisson distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:641 ../plugins/fn-r/functions.c:664
#: ../plugins/fn-r/functions.c:689
msgid "lambda:the mean of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:643
msgid ""
"This function returns the probability density function of the Poisson "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:662
msgid "R.PPOIS:cumulative distribution function of the Poisson distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:667
msgid ""
"This function returns the cumulative distribution function of the Poisson "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:687
msgid "R.QPOIS:probability quantile function of the Poisson distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:692
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Poisson distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:712
msgid "R.DEXP:probability density function of the exponential distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:716
msgid ""
"This function returns the probability density function of the exponential "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:735
msgid ""
"R.PEXP:cumulative distribution function of the exponential distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:740
msgid ""
"This function returns the cumulative distribution function of the "
"exponential distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:760
msgid "R.QEXP:probability quantile function of the exponential distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:765
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the exponential distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:785
msgid "R.DBINOM:probability density function of the binomial distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:787 ../plugins/fn-r/functions.c:812
#: ../plugins/fn-r/functions.c:839 ../plugins/fn-r/functions.c:866
#: ../plugins/fn-r/functions.c:891 ../plugins/fn-r/functions.c:918
msgid "n:the number of trials"
msgstr ""

#: ../plugins/fn-r/functions.c:788 ../plugins/fn-r/functions.c:813
#: ../plugins/fn-r/functions.c:840 ../plugins/fn-r/functions.c:867
#: ../plugins/fn-r/functions.c:892 ../plugins/fn-r/functions.c:919
#: ../plugins/fn-r/functions.c:1030 ../plugins/fn-r/functions.c:1053
#: ../plugins/fn-r/functions.c:1078
msgid "psuc:the probability of success in each trial"
msgstr ""

#: ../plugins/fn-r/functions.c:790
msgid ""
"This function returns the probability density function of the binomial "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:810
msgid "R.PBINOM:cumulative distribution function of the binomial distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:816
msgid ""
"This function returns the cumulative distribution function of the binomial "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:837
msgid "R.QBINOM:probability quantile function of the binomial distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:843
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the binomial distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:864
msgid ""
"R.DNBINOM:probability density function of the negative binomial distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:869
msgid ""
"This function returns the probability density function of the negative "
"binomial distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:889
msgid ""
"R.PNBINOM:cumulative distribution function of the negative binomial "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:895
msgid ""
"This function returns the cumulative distribution function of the negative "
"binomial distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:916
msgid ""
"R.QNBINOM:probability quantile function of the negative binomial "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:922
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the negative binomial "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:943
msgid ""
"R.DHYPER:probability density function of the hypergeometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:945 ../plugins/fn-r/functions.c:972
#: ../plugins/fn-r/functions.c:1001
msgid "r:the number of red balls"
msgstr ""

#: ../plugins/fn-r/functions.c:946 ../plugins/fn-r/functions.c:973
#: ../plugins/fn-r/functions.c:1002
msgid "b:the number of black balls"
msgstr ""

#: ../plugins/fn-r/functions.c:947 ../plugins/fn-r/functions.c:974
#: ../plugins/fn-r/functions.c:1003
msgid "n:the number of balls drawn"
msgstr ""

#: ../plugins/fn-r/functions.c:949
msgid ""
"This function returns the probability density function of the hypergeometric "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:970
msgid ""
"R.PHYPER:cumulative distribution function of the hypergeometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:977
msgid ""
"This function returns the cumulative distribution function of the "
"hypergeometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:999
msgid ""
"R.QHYPER:probability quantile function of the hypergeometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1006
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the hypergeometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1028
msgid "R.DGEOM:probability density function of the geometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1032
msgid ""
"This function returns the probability density function of the geometric "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1051
msgid "R.PGEOM:cumulative distribution function of the geometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1056
msgid ""
"This function returns the cumulative distribution function of the geometric "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1076
msgid "R.QGEOM:probability quantile function of the geometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1081
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the geometric distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1101
msgid "R.DCAUCHY:probability density function of the Cauchy distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1103 ../plugins/fn-r/functions.c:1128
#: ../plugins/fn-r/functions.c:1155
msgid "location:the center of the distribution"
msgstr ""

#: ../plugins/fn-r/functions.c:1106
msgid ""
"This function returns the probability density function of the Cauchy "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1126
msgid "R.PCAUCHY:cumulative distribution function of the Cauchy distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1132
msgid ""
"This function returns the cumulative distribution function of the Cauchy "
"distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1153
msgid "R.QCAUCHY:probability quantile function of the Cauchy distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1159
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Cauchy distribution."
msgstr ""

#: ../plugins/fn-r/functions.c:1194
msgid "x,mu,sigma,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1202
msgid "x,mu,sigma,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1210
msgid "p,mu,sigma,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1218
msgid "x,logmean,logsd,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1226 ../plugins/fn-r/functions.c:1234
msgid "x,logmean,logsd,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1242 ../plugins/fn-r/functions.c:1362
msgid "x,shape,scale,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1250 ../plugins/fn-r/functions.c:1370
msgid "x,shape,scale,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1258 ../plugins/fn-r/functions.c:1378
msgid "p,shape,scale,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1266
msgid "x,a,b,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1274
msgid "x,a,b,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1282
msgid "p,a,b,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1290
msgid "x,n,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1298
msgid "x,n,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1306
msgid "p,n,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1314
msgid "x,n1,n2,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1322 ../plugins/fn-r/functions.c:1330
msgid "x,n1,n2,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1338
msgid "x,df,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1346
msgid "x,df,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1354
msgid "p,df,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1386
msgid "x,lambda,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1394
msgid "x,lambda,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1402
msgid "p,lambda,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1410
msgid "x,scale,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1418
msgid "x,scale,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1426
msgid "p,scale,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1434 ../plugins/fn-r/functions.c:1458
msgid "x,n,psuc,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1442 ../plugins/fn-r/functions.c:1450
#: ../plugins/fn-r/functions.c:1466
msgid "x,n,psuc,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1474
msgid "p,n,psuc,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1482
msgid "x,r,b,n,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1490
msgid "x,r,b,n,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1498
msgid "p,r,b,n,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1506
msgid "x,psuc,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1514
msgid "x,psuc,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1522
msgid "p,psuc,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1530
msgid "x,location,scale,give_log"
msgstr ""

#: ../plugins/fn-r/functions.c:1538
msgid "x,location,scale,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-r/functions.c:1546
msgid "p,location,scale,lower_tail,log_p"
msgstr ""

#: ../plugins/fn-random/functions.c:47
msgid ""
"@FUNCTION=RAND\n"
"@SYNTAX=RAND()\n"
"@DESCRIPTION=RAND returns a random number between zero and one.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RAND() returns a random number greater than zero but less than one.\n"
"\n"
"@SEEALSO=RANDBETWEEN"
msgstr ""
"@FUNCTION=ZUFALLSZAHL\n"
"@SYNTAX=ZUFALLSZAHL()\n"
"@DESCRIPTION=ZUFALLSZAHL liefert eine Zufallszahl zwischen Null und Eins.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL() liefert eine Zufallszahl, die größer als Null aber kleiner als "
"Eins ist.\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.ZWISCHEN"

#: ../plugins/fn-random/functions.c:73
msgid ""
"@FUNCTION=RANDUNIFORM\n"
"@SYNTAX=RANDUNIFORM(a,b)\n"
"@DESCRIPTION=RANDUNIFORM returns a random variate from the uniform (flat) "
"distribution from a to b. The distribution is,\n"
"\n"
"\tp(x) dx = {1 over (b-a)} dx : for a <= x < b.\n"
"p(x) dx = 0 : for x < a or b <= x.\n"
"* If @a > @b RANDUNIFORM returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDUNIFORM(1.4,4.2) returns a random number greater than or equal to 1.4 "
"but less than 4.2.\n"
"\n"
"@SEEALSO=RANDBETWEEN,RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.RECHTECK\n"
"@SYNTAX=ZUFALLSZAHL.RECHTECK(a,b)\n"
"@DESCRIPTION=ZUFALLSZAHL.RECHTECK liefert eine zufällige Variable der "
"(flachen) Rechteckverteilung zwischen a und b, wobei die Verteilung\n"
"\n"
"\tp(x) dx = {1 / (b-a)} dx für a <= x < b bzw.\n"
"\tp(x) dx = 0 für x < a oder b <= x ist.\n"
"\n"
"* Falls @a > @b, liefert ZUFALLSZAHL.RECHTECK einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.RECHTECK(1.4,4.2) liefert eine Zufallszahl, die größer/gleich "
"1.4, aber kleiner als 4.2 ist.\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.ZWISCHEN,ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:108
msgid ""
"@FUNCTION=RANDDISCRETE\n"
"@SYNTAX=RANDDISCRETE(val_range[,prob_range])\n"
"@DESCRIPTION=RANDDISCRETE returns one of the values in the @val_range. The "
"probabilities for each value are given in the @prob_range.\n"
"\n"
"* If @prob_range is omitted, the uniform discrete distribution is assumed.\n"
"* If the sum of all values in @prob_range is other than one, RANDDISCRETE "
"returns #NUM! error.\n"
"* If @val_range and @prob_range are not the same size, RANDDISCRETE returns "
"#NUM! error.\n"
"* If @val_range or @prob_range is not a range, RANDDISCRETE returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"RANDDISCRETE(A1:A6) returns one of the values in the range A1:A6.\n"
"\n"
"@SEEALSO=RANDBETWEEN,RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.DISKRET\n"
"@SYNTAX=ZUFALLSZAHL.DISKRET(Wertebereich[,Wahrscheinlichkeitsbereich])\n"
"@DESCRIPTION=ZUFALLSZAHL.DISKRET liefert einen der Werte im Bereich "
"@Wertebereich. Die Wahrscheinlichkeiten für jeden Wert werden in "
"@Wahrscheinlichkeitsbereich übergeben.\n"
"\n"
"* Falls @Wahrscheinlichkeitsbereich nicht übergeben wird, wird eine diskrete "
"Normalverteilung angenommen.\n"
"* Falls die Summe aller Werte im Bereich @Wahrscheinlichkeitsbereich "
"ungleich eins ist, liefert ZUFALLSZAHL.DISKRET einen #ZAHL!-Fehler.\n"
"* Falls @Wertebereich und @Wahrscheinlichkeitsbereich nicht gleich groß "
"sind, liefert ZUFALLSZAHL.DISKRET einen #ZAHL!-Fehler.\n"
"* Falls @Wertebereich oder @Wahrscheinlichkeitsbereich keine Bereiche ist, "
"liefert ZUFALLSZAHL.DISKRET einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.DISKRET(A1:A6) liefert einen der Werte im Bereich A1:A6.\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.ZWISCHEN, ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:244
msgid ""
"@FUNCTION=RANDEXP\n"
"@SYNTAX=RANDEXP(b)\n"
"@DESCRIPTION=RANDEXP returns a exponentially-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDEXP(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.EXP\n"
"@SYNTAX=ZUFALLSZAHL.EXP(b)\n"
"@DESCRIPTION=ZUFALLSZAHL.EXP liefert eine exponenziell verteilte "
"Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.EXP(0.5).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL, ZUFALLSZAHL.ZWISCHEN"

#: ../plugins/fn-random/functions.c:270
msgid ""
"@FUNCTION=RANDPOISSON\n"
"@SYNTAX=RANDPOISSON(lambda)\n"
"@DESCRIPTION=RANDPOISSON returns a Poisson-distributed random number.\n"
"\n"
"* If @lambda < 0 RANDPOISSON returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDPOISSON(3).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.POISSON\n"
"@SYNTAX=ZUFALLSZAHL.POISSON(Lambda)\n"
"@DESCRIPTION=ZUFALLSZAHL.POISSON liefert eine Poisson-verteilte "
"Zufallszahl.\n"
"\n"
"* Falls @Lambda < 0 ist, liefert ZUFALLSZAHL.POISSON einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.POISSON(3).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL, ZUFALLSZAHL.ZWISCHEN"

#: ../plugins/fn-random/functions.c:301
msgid ""
"@FUNCTION=RANDBINOM\n"
"@SYNTAX=RANDBINOM(p,trials)\n"
"@DESCRIPTION=RANDBINOM returns a binomially-distributed random number.\n"
"\n"
"* If @p < 0 or @p > 1 RANDBINOM returns #NUM! error.\n"
"* If @trials < 0 RANDBINOM returns #NUM! error. \n"
"@EXAMPLES=\n"
"RANDBINOM(0.5,2).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.BINOM\n"
"@SYNTAX=ZUFALLSZAHL.BINOM(Wahrscheinlichkeit,Versuche)\n"
"@DESCRIPTION=ZUFALLSZAHL.BINOM liefert eine binomial verteilte Zufallszahl.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert ZUFALLSZAHL.BINOM "
"einen #ZAHL!-Fehler.\n"
"* Falls @Fehlschläge < 0 ist, liefert ZUFALLSZAHL.BINOM einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.BINOM(0.5,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL,ZUFALLSZAHL.NEGBINOM"

#: ../plugins/fn-random/functions.c:334
#, fuzzy
msgid ""
"@FUNCTION=RANDBETWEEN\n"
"@SYNTAX=RANDBETWEEN(bottom,top)\n"
"@DESCRIPTION=RANDBETWEEN function returns a random integer number between "
"and including @bottom and @top.\n"
"\n"
"* If @bottom is non-integer, it is rounded up.\n"
"* If @top is non-integer, it is rounded down.\n"
"* If @bottom > @top, RANDBETWEEN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RANDBETWEEN(3,7).\n"
"\n"
"@SEEALSO=RAND,RANDUNIFORM"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.ZWISCHEN\n"
"@SYNTAX=ZUFALLSZAHL.ZWISCHEN(unten,oben)\n"
"@DESCRIPTION=ZUFALLSZAHL.ZWISCHEN liefert eine zufällige Ganzzahl zwischen "
"und einschließlich der Unter- und Obergrenze @unten bzw. @oben.\n"
"\n"
"* Falls @unten oder @oben keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @unten > @oben, liefert ZUFALLSZAHL.ZWISCHEN einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.ZWISCHEN(3,7).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL,ZUFALLSZAHL.RECHTECK"

#: ../plugins/fn-random/functions.c:374
msgid ""
"@FUNCTION=RANDNEGBINOM\n"
"@SYNTAX=RANDNEGBINOM(p,failures)\n"
"@DESCRIPTION=RANDNEGBINOM returns a negative binomially-distributed random "
"number.\n"
"\n"
"* If @p < 0 or @p > 1, RANDNEGBINOM returns #NUM! error.\n"
"* If @failures < 1, RANDNEGBINOM returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDNEGBINOM(0.5,2).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.NEGBINOM\n"
"@SYNTAX=ZUFALLSZAHL.NEGBINOM(Wahrscheinlichkeit,Fehlschläge)\n"
"@DESCRIPTION=ZUFALLSZAHL.NEGBINOM liefert eine negative, binomial verteilte "
"Zufallszahl.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert ZUFALLSZAHL.NEGBINOM "
"einen #ZAHL!-Fehler.\n"
"* Falls @Fehlschläge < 1 ist, liefert ZUFALLSZAHL.NEGBINOM einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.NEGBINOM(0.5,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL,ZUFALLSZAHL.BINOM"

#: ../plugins/fn-random/functions.c:408
msgid ""
"@FUNCTION=RANDBERNOULLI\n"
"@SYNTAX=RANDBERNOULLI(p)\n"
"@DESCRIPTION=RANDBERNOULLI returns a Bernoulli-distributed random number.\n"
"\n"
"* If @p < 0 or @p > 1 RANDBERNOULLI returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDBERNOULLI(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.BERNOULLI\n"
"@SYNTAX=ZUFALLSZAHL.BERNOULLI(Wahrscheinlichkeit)\n"
"@DESCRIPTION=ZUFALLSZAHL.BERNOULLI liefert eine Bernoulli-verteilte "
"Zufallszahl.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder @Wahrscheinlichkeit > 1 ist, liefert "
"ZUFALLSZAHL.BERNOULLI einen #WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.BERNOULLI(0.5).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL, ZUFALLSZAHL.ZWISCHEN"

#: ../plugins/fn-random/functions.c:439
msgid ""
"@FUNCTION=RANDNORM\n"
"@SYNTAX=RANDNORM(mean,stdev)\n"
"@DESCRIPTION=RANDNORM returns a normal-distributed random number.\n"
"\n"
"* If @stdev < 0 RANDNORM returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDNORM(0,1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.NORM\n"
"@SYNTAX=ZUFALLSZAHL.NORM(Mittelwert,Stdabw)\n"
"@DESCRIPTION=ZUFALLSZAHL.NORM liefert eine normalverteilte Zufallszahl.\n"
"\n"
"* Falls @Stdabw < 0 ist, liefert ZUFALLSZAHL.NORM einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.NORM(0,1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:471
msgid ""
"@FUNCTION=RANDCAUCHY\n"
"@SYNTAX=RANDCAUCHY(a)\n"
"@DESCRIPTION=RANDCAUCHY returns a Cauchy-distributed random number with "
"scale parameter a. The Cauchy distribution is also known as the Lorentz "
"distribution.\n"
"\n"
"* If @a < 0 RANDCAUCHY returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDCAUCHY(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.CAUCHY\n"
"@SYNTAX=ZUFALLSZAHL.CAUCHY(a)\n"
"@DESCRIPTION=ZUFALLSZAHL.CAUCHY liefert eine Cauchy-verteilte Zufallszahl "
"mit Skalenparameter a. Die Cauchy-Verteilung ist auch als Lorentz-Verteilung "
"bekannt.\n"
"\n"
"* Falls @a < 0 ist, liefert ZUFALLSZAHL.CAUCHY einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.CAUCHY(1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:504
msgid ""
"@FUNCTION=RANDLOGNORM\n"
"@SYNTAX=RANDLOGNORM(zeta,sigma)\n"
"@DESCRIPTION=RANDLOGNORM returns a lognormal-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDLOGNORM(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.LOGNORMAL\n"
"@SYNTAX=ZUFALLSZAHL.LOGNORMAL(Zeta,Sigma)\n"
"@DESCRIPTION=ZUFALLSZAHL.LOGNORMAL liefert eine lognormal-verteilte "
"Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.LOGNORMAL(1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:531
msgid ""
"@FUNCTION=RANDWEIBULL\n"
"@SYNTAX=RANDWEIBULL(a,b)\n"
"@DESCRIPTION=RANDWEIBULL returns a Weibull-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDWEIBULL(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.WEIBULL\n"
"@SYNTAX=ZUFALLSZAHL.WEIBULL(a,b)\n"
"@DESCRIPTION=ZUFALLSZAHL.WEIBULL liefert eine Weibull-verteilte "
"Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.WEIBULL(1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:558
msgid ""
"@FUNCTION=RANDLAPLACE\n"
"@SYNTAX=RANDLAPLACE(a)\n"
"@DESCRIPTION=RANDLAPLACE returns a Laplace-distributed random number. "
"Laplace distribution is also known as two-sided exponential probability "
"distribution.\n"
"\n"
"@EXAMPLES=\n"
"RANDLAPLACE(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.LAPLACE\n"
"@SYNTAX=ZUFALLSZAHL.LAPLACE(a)\n"
"@DESCRIPTION=ZUFALLSZAHL.LAPLACE liefert eine Laplace-verteilte Zufallszahl. "
"Laplace-Verteilungen sind auch als zweiseitige exponenzielle "
"Wahrscheinlichkeitsverteilungen bekannt.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.LAPLACE(1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:586
msgid ""
"@FUNCTION=RANDRAYLEIGH\n"
"@SYNTAX=RANDRAYLEIGH(sigma)\n"
"@DESCRIPTION=RANDRAYLEIGH returns a Rayleigh-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDRAYLEIGH(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.RAYLEIGH\n"
"@SYNTAX=ZUFALLSZAHL.RAYLEIGH(Sigma)\n"
"@DESCRIPTION=ZUFALLSZAHL.RAYLEIGH liefert eine Rayleigh-verteilte "
"Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.RAYLEIGH(1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:612
msgid ""
"@FUNCTION=RANDRAYLEIGHTAIL\n"
"@SYNTAX=RANDRAYLEIGHTAIL(a,sigma)\n"
"@DESCRIPTION=RANDRAYLEIGHTAIL returns  a random variate from the tail of the "
"Rayleigh distribution with scale parameter sigma and a lower limit of a. The "
"distribution is,\n"
"\n"
"\tp(x) dx = {x over sigma^2} exp ((a^2 - x^2) /(2 sigma^2)) dx,\n"
"\n"
"for x > a.\n"
"\n"
"@EXAMPLES=\n"
"RANDRAYLEIGHTAIL(0.3,1).\n"
"\n"
"@SEEALSO=RAND,RANDRAYLEIGH"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.RAYLEIGHTAIL\n"
"@SYNTAX=ZUFALLSZAHL.RAYLEIGHTAIL(a,Sigma)\n"
"@DESCRIPTION=ZUFALLSZAHL.RAYLEIGHTAIL liefert eine Zufallsvariable aus dem "
"Tail der Rayleigh-Verteilung mit dem Skalierungsparameter @Sigma und limes "
"inferior @a. Die Verteilung ist\n"
"\n"
"\tp(x) dx = {x / sigma^2} exp ((a^2 - x^2) /(2 sigma^2)) dx,\n"
"\n"
"for x > a.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.RAYLEIGHTAIL(0.3,1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL,ZUFALLSZAHLEN.RAYLEIGH"

#: ../plugins/fn-random/functions.c:643
msgid ""
"@FUNCTION=RANDGAMMA\n"
"@SYNTAX=RANDGAMMA(a,b)\n"
"@DESCRIPTION=RANDGAMMA returns a Gamma-distributed random number.\n"
"\n"
"* If @a <= 0 RANDGAMMA returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDGAMMA(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.GAMMA\n"
"@SYNTAX=ZUFALLSZAHL.GAMMA(a,b)\n"
"@DESCRIPTION=ZUFALLSZAHL.GAMMA liefert eine Gamma-verteilte Zufallszahl.\n"
"\n"
"* Falls @a <= 0 ist, liefert ZUFALLSZAHL.GAMMA einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.GAMMA(1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:675
msgid ""
"@FUNCTION=RANDPARETO\n"
"@SYNTAX=RANDPARETO(a,b)\n"
"@DESCRIPTION=RANDPARETO returns a Pareto-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDPARETO(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.PARETO\n"
"@SYNTAX=ZUFALLSZAHL.PARETO(a,b)\n"
"@DESCRIPTION=ZUFALLSZAHL.PARETO liefert eine Pareto-verteilte Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.PARETO(1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.PARETO"

#: ../plugins/fn-random/functions.c:702
msgid ""
"@FUNCTION=RANDFDIST\n"
"@SYNTAX=RANDFDIST(nu1,nu2)\n"
"@DESCRIPTION=RANDFDIST returns a F-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDFDIST(1,2).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.FVERT\n"
"@SYNTAX=ZUFALLSZAHL.FVERT(Zahl1,Zahl2)\n"
"@DESCRIPTION=ZUFALLSZAHL.FVERT liefert eine F-verteilte Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.FVERT(1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL, ZUFALLSZAHL.GAMMA"

#: ../plugins/fn-random/functions.c:729
msgid ""
"@FUNCTION=RANDBETA\n"
"@SYNTAX=RANDBETA(a,b)\n"
"@DESCRIPTION=RANDBETA returns a Beta-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDBETA(1,2).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.BETA\n"
"@SYNTAX=ZUFALLSZAHL.BETA(a,b)\n"
"@DESCRIPTION=ZUFALLSZAHL.BETA liefert eine Beta-verteile Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.BETA(1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL, ZUFALLSZAHL.GAMMA"

#: ../plugins/fn-random/functions.c:756
msgid ""
"@FUNCTION=RANDLOGISTIC\n"
"@SYNTAX=RANDLOGISTIC(a)\n"
"@DESCRIPTION=RANDLOGISTIC returns a logistic-distributed random number.  The "
"distribution function is,\n"
"\n"
"\tp(x) dx = { exp(-x/a) over a (1 + exp(-x/a))^2 } dx for -infty < x < "
"+infty.\n"
"\n"
"@EXAMPLES=\n"
"RANDLOGISTIC(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.LOGISTISCH\n"
"@SYNTAX=ZUFALLSZAHL.LOGISTISCH(a)\n"
"@DESCRIPTION=ZUFALLSZAHL.LOGISTISCH liefert eine logistisch verteilte "
"Zufallszahl, wobei\n"
"\n"
"\tp(x) dx = { exp(-x/a) / a (1 + exp(-x/a))^2 } dx für -infty < x < +infty.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.LOGISTISCH(1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:785
msgid ""
"@FUNCTION=RANDGEOM\n"
"@SYNTAX=RANDGEOM(p)\n"
"@DESCRIPTION=RANDGEOM returns a geometric-distributed random number. The "
"number of independent trials with probability @p until the first success. "
"The probability distribution for geometric variates is, \n"
"\n"
"\tp(k) =  p (1-p)^(k-1), for k >= 1.\n"
"\n"
"* If @p < 0 or @p > 1 RANDGEOM returns #NUM! error. \n"
"@EXAMPLES=\n"
"RANDGEOM(0.4).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.GEOM\n"
"@SYNTAX=ZUFALLSZAHL.GEOM(Wahrscheinlichkeit)\n"
"@DESCRIPTION=ZUFALLSZAHL.GEOM liefert eine geometrisch verteilte "
"Zufallszahl. DIes ist die Anzahl unabhängiger Versuche mit der "
"Wahrscheinlichkeit @Wahrscheinlichkeit bis zum ersten Erfolg. Die "
"Wahrscheinlichkeitsverteilung für geometrische Zufallsvariablen ist\n"
"\n"
"\tp(k) =  p (1-p)^(k-1), für k >= 1.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder @Wahrscheinlichkeit > 1 ist, liefert "
"ZUFALLSZAHL.GEOM einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.GEOM(0.4).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:819
msgid ""
"@FUNCTION=RANDHYPERG\n"
"@SYNTAX=RANDHYPERG(n1,n2,t)\n"
"@DESCRIPTION=RANDHYPERG returns a hypergeometric-distributed random number. "
"The probability distribution for hypergeometric random variates is,\n"
"\n"
"\tp(k) =  C(n_1,k) C(n_2, t-k) / C(n_1 + n_2,k), \n"
"\n"
"where C(a,b) = a!/(b!(a-b)!). \n"
"\n"
"The domain of k is max(0,t-n_2), ..., max(t,n_1).\n"
"@EXAMPLES=\n"
"RANDHYPERG(21,1,9).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.HYPERGEOM\n"
"@SYNTAX=ZUFALLSZAHL.HYPERGEOM(n1,n2,t)\n"
"@DESCRIPTION=ZUFALLSZAHL.HYPERGEOM liefert eine hypergeometrisch verteilte "
"Zufallszahl. Die Wahrscheinlichkeitsverteilung für hyperheometrische "
"Zufallsvariablen ist\n"
"\n"
"\tp(k) =  C(n_1,k) C(n_2, t-k) / C(n_1 + n_2,k), wobei\n"
"\n"
"C(a,b) = a!/(b!(a-b)!).\n"
"\n"
"Die Domäne von k ist max(0,t-n_2), ..., max(t,n_1).\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.HYPERGEOM(21,1,9).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:854
msgid ""
"@FUNCTION=RANDLOG\n"
"@SYNTAX=RANDLOG(p)\n"
"@DESCRIPTION=RANDLOG returns a logarithmic-distributed random number.\n"
"\n"
"* If @p < 0 or @p > 1 RANDLOG returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDLOG(0.72).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.LOG\n"
"@SYNTAX=ZUFALLSZAHL.LOG(Wahrscheinlichkeit)\n"
"@DESCRIPTION=ZUFALLSZAHL.LOG liefert eine logarithmisch verteilte "
"Zufallszahl.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert ZUFALLSZAHL.LOG einen "
"#ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.LOG(0.72).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:885
msgid ""
"@FUNCTION=RANDCHISQ\n"
"@SYNTAX=RANDCHISQ(nu)\n"
"@DESCRIPTION=RANDCHISQ returns a Chi-Square-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDCHISQ(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.CHI2\n"
"@SYNTAX=ZUFALLSZAHL.CHI2(Zahl)\n"
"@DESCRIPTION=ZUFALLSZAHL.CHI2 liefert eine Chi²-verteilte Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.CHI2(0.5).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL,ZUFALLSZAHL.GAMMA"

#: ../plugins/fn-random/functions.c:911
msgid ""
"@FUNCTION=RANDTDIST\n"
"@SYNTAX=RANDTDIST(nu)\n"
"@DESCRIPTION=RANDTDIST returns a T-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDTDIST(0.5).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.TVERT\n"
"@SYNTAX=ZUFALLSZAHL.TVERT(Zahl)\n"
"@DESCRIPTION=ZUFALLSZAHL.TVERT liefert eine T-verteilte Zufallszahl.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.TVERT(0.5).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:937
msgid ""
"@FUNCTION=RANDGUMBEL\n"
"@SYNTAX=RANDGUMBEL(a,b[,type])\n"
"@DESCRIPTION=RANDGUMBEL returns a Type I or Type II Gumbel-distributed "
"random number. @type is either 1 or 2 and specifies the type of the "
"distribution (Type I or Type II).\n"
"\n"
"* If @type is neither 1 nor 2, RANDGUMBEL returns #NUM! error.\n"
"* If @type is omitted, Type I is assumed.\n"
"\n"
"@EXAMPLES=\n"
"RANDGUMBEL(0.5,1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.GUMBEL\n"
"@SYNTAX=ZUFALLSZAHL.GUMBEL(a,b[,Typ])\n"
"@DESCRIPTION=ZUFALLSZAHL.GUMBEL liefert eine Gumbel Typ I oder Typ II-"
"verteilte Zufallszahl. @Typ ist entweder 1 oder 2 und legt den Typ der "
"Verteilung fest (Typ I or Typ II).\n"
"\n"
"* Falls @Typ weder 1 noch 2 ist, liefert ZUFALLSZAHL.GUMBEL einen #ZAHL!-"
"Fehler.\n"
"* Falls @Typ nicht übergeben wird, wird Typ I angenommen.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.GUMBEL(0.5,1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:975
msgid ""
"@FUNCTION=RANDLEVY\n"
"@SYNTAX=RANDLEVY(c,alpha[,beta])\n"
"@DESCRIPTION=RANDLEVY returns a Levy-distributed random number. If @beta is "
"omitted, it is assumed to be 0.\n"
"\n"
"* For @alpha = 1, @beta=0, we get the Lorentz distribution.\n"
"* For @alpha = 2, @beta=0, we get the normal distribution.\n"
"\n"
"* If @alpha <= 0 or @alpha > 2, RANDLEVY returns #NUM! error.\n"
"* If @beta < -1 or @beta > 1, RANDLEVY returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDLEVY(0.5,0.1,1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.LEVY\n"
"@SYNTAX=ZUFALLSZAHL.LEVY(c,Alpha[,Beta])\n"
"@DESCRIPTION=ZUFALLSZAHL.LEVY liefert eine Lévy-verteilte Zufallszahl.\n"
"\n"
"* Für Alpha = 1 und Beta = 0 wird die Lorentz-Verteilung verwendet.\n"
"* Für Alpha = 2 und Beta = 0 wird die Gauß'sche Verteilung verwendet.\n"
"\n"
"* Falls @Beta nicht übergeben wird, wird @Beta = 0 angenommen.\n"
"* Falls @Alpha <= 0 oder > 2 ist, liefert ZUFALLSZAHL.LEVY einen #ZAHL!-"
"Fehler.\n"
"* Falls @Beta < -1 oder > 1 ist, liefert ZUFALLSZAHL.LEVY einen #ZAHL!-"
"Fehler .\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.LEVY(0.5,0.1,1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:1013
msgid ""
"@FUNCTION=RANDEXPPOW\n"
"@SYNTAX=RANDEXPPOW(a,b)\n"
"@DESCRIPTION=RANDEXPPOW returns a random variate from the exponential power "
"distribution with scale parameter @a and exponent @b. The distribution is,\n"
"\n"
"\tp(x) dx = {1 over 2 a Gamma(1+1/b)} exp(-|x/a|^b) dx, for x >= 0.\n"
"\n"
"* For @b = 1 this reduces to the Laplace distribution.\n"
"* For @b = 2 it has the same form as a normal distribution with sigma = a/"
"sqrt(2).\n"
"\n"
"@EXAMPLES=\n"
"RANDEXPPOW(0.5,0.1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.EXPPOW\n"
"@SYNTAX=ZUFALLSZAHL.EXPPOW(a,b)\n"
"@DESCRIPTIONZUFALLSZAHL.EXPPOW liefert eine Zufallsvariable der »exponential "
"power distribution« mit Skalierungsparameter @a und Exponent @b. Die "
"Verteilung ist\n"
"\n"
"\tp(x) dx = {1 durch 2 a Gamma(1+1/b)} exp(-|x/a|^b) dx, für x >= 0.\n"
"\n"
"* Falls b = 1 ist, wird dies auf die Laplace-Verteilung beschränkt.\n"
"* Falls b = 2 ist, entspricht die Form derer der Gauß'schen Verteilung, "
"jedoch mit a = sqrt{2} Sigma.\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.EXPPOW(0.5,0.1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:1047
msgid ""
"@FUNCTION=RANDLANDAU\n"
"@SYNTAX=RANDLANDAU()\n"
"@DESCRIPTION=RANDLANDAU returns a random variate from the Landau "
"distribution. The probability distribution for Landau random variates is "
"defined analytically by the complex integral,\n"
"\n"
"\tp(x) = (1/(2 pi i)) int_{c-i infty}^{c+i infty} ds exp(s log(s) + x s).\n"
"\n"
"For numerical purposes it is more convenient to use the following equivalent "
"form of the integral,\n"
"\n"
"\tp(x) = (1/pi) int_0^ infty dt exp(-t log(t) - x t) sin(pi t).\n"
"\n"
"@EXAMPLES=\n"
"RANDLANDAU().\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.LANDAU\n"
"@SYNTAX=ZUFALLSZAHL.LANDAU()\n"
"@DESCRIPTION=ZUFALLSZAHL.LANDAU liefert eine Zufallsvariable der "
"Landauverteilung. Die Wahrscheinlichkeitsverteilung für Landau-"
"Zufallsvariablen ist analytisch vom komplexen Integral definiert: \n"
"\n"
"\tp(x) = (1/(2 pi i)) int_{c-i infty}^{c+i infty} ds exp(s log(s) + x s).\n"
"\n"
"Aus mathematischer Sicht ist folgende äquivalente Schreibweise wesentlich "
"zweckmäßiger:\n"
"\n"
"\tp(x) = (1/pi) int_0^ infty dt exp(-t log(t) - x t) sin(pi t).\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.LANDAU().\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:1078
msgid ""
"@FUNCTION=RANDNORMTAIL\n"
"@SYNTAX=RANDNORMTAIL(a,sigma)\n"
"@DESCRIPTION=RANDNORMTAIL returns a random variates from the upper tail of a "
"normal distribution with standard deviation @sigma. The values returned are "
"larger than the lower limit @a, which must be positive. The method is based "
"on Marsaglia's famous rectangle-wedge-tail algorithm (Ann Math Stat 32, 894-"
"899 (1961)), with this aspect explained in Knuth, v2, 3rd ed, p139, 586 "
"(exercise 11).\n"
"\n"
"The probability distribution for normal tail random variates is,\n"
"\n"
"\tp(x) dx = {1 over N(a;sigma)} exp (- x^2/(2 sigma^2)) dx,\n"
"\n"
"for x > a where N(a;sigma) is the normalization constant, N(a;sigma) = (1/2) "
"erfc(a / sqrt(2 sigma^2)).\n"
"\n"
"@EXAMPLES=\n"
"RANDNORMTAIL(0.5,0.1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=ZUFALLSZAHL.GAUSSSCHERTAIL\n"
"@SYNTAX=ZUFALLSZAHL.GAUSSSCHERTAIL(a,Sigma)\n"
"@DESCRIPTION=ZUFALLSZAHL.GAUSSSCHERTAIL liefert eine Zufallsvariable aus dem "
"oberen Tail einer Gauß'schen Verteilung mit Standardabweichung @Sigma. Die "
"gelieferten Werte sind größer als der limes inferior a, welcher Positiv sein "
"muss. Die Methode basiert auf Marsaglias bekanntem Rechtecks-Wedge-Tail-"
"Algorithmus (Ann Math Stat 32, 894-899 (1961)), wobei dieser Aspekt in "
"Knuth, v2, dritte Ausgabe, S. 139, 586 (Übung 11) erklärt wird.\n"
"\n"
"Die Wahrscheinlichkeitsverteilung für Zufallsvariablen im Gauß'schen Tail "
"ist\n"
"\n"
"\tp(x) dx = {1 durch N(a;sigma)} exp (- x^2/(2 sigma^2)) dx,\n"
"\n"
"für x > a, wobei N(a;sigma) die Normalisierungskonstante ist, N(a;sigma) = "
"(1/2) erfc(a / sqrt(2 sigma^2)).\n"
"\n"
"@EXAMPLES=\n"
"ZUFALLSZAHL.GAUSSSCHERTAIL(0.5,0.1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL"

#: ../plugins/fn-random/functions.c:1117
msgid ""
"@FUNCTION=SIMTABLE\n"
"@SYNTAX=SIMTABLE(d1, d2, ..., dN)\n"
"@DESCRIPTION=SIMTABLE returns one of the values in the given argument list "
"depending on the round number of the simulation tool. When the simulation "
"tool is not activated, SIMTABLE returns @d1.\n"
"\n"
"With the simulation tool and the SIMTABLE function you can test given "
"decision variables. Each SIMTABLE function contains the possible values of a "
"simulation variable. In most valid simulation models you should have the "
"same number of values @dN for all decision variables.  If the simulation is "
"run more rounds than there are values defined, SIMTABLE returns #N/A! error "
"(e.g. if A1 contains `=SIMTABLE(1)' and A2 `=SIMTABLE(1,2)', A1 yields #N/A! "
"error on the second round).\n"
"\n"
"The successive use of the simulation tool also requires that you give to the "
"tool at least one input variable having RAND() or any other "
"RAND<distribution name>() function in it. On each round, the simulation tool "
"iterates for the given number of rounds over all the input variables to "
"reevaluate them. On each iteration, the values of the output variables are "
"stored, and when the round is completed, descriptive statistical information "
"is created according to the values.\n"
"\n"
"@EXAMPLES=\n"
"SIMTABLE(TRUE,FALSE) returns TRUE on the first simulation round and FALSE on "
"the second round.\n"
"SIMTABLE(223,225,227,229) returns 227 on the simulation round #3.\n"
"\n"
"@SEEALSO="
msgstr ""

#: ../plugins/fn-stat/functions.c:65
msgid ""
"@FUNCTION=VARP\n"
"@SYNTAX=VARP(b1, b2, ...)\n"
"@DESCRIPTION=VARP calculates the variance of an entire population.\n"
"VARP is also known as the N-variance.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"VARP(A1:A5) equals 94.112.\n"
"\n"
"@SEEALSO=AVERAGE,DVAR,DVARP,STDEV,VAR"
msgstr ""
"@FUNCTION=VARIANZN\n"
"@SYNTAX=VARIANZN(b1, b2, ...)\n"
"@DESCRIPTION=VARIANZN berechnet die Varianz eines Zahlensatzes, wobei jede "
"Zahl Mitglied einer Grundgesamtheit ist und der Datensatz die gesamte "
"Grundgesamtheit.\n"
"\n"
"* VARIANZN ist auch als N-Varianz bekannt.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"VARIANZN(A1:A5) 94.112.\n"
"\n"
"@SEEALSO=MITTELWERT,DBVARIANZ,DBVARIANZN,STDABW,VARIANZ"

#: ../plugins/fn-stat/functions.c:97
msgid ""
"@FUNCTION=VAR\n"
"@SYNTAX=VAR(b1, b2, ...)\n"
"@DESCRIPTION=VAR calculates sample variance of the given sample. To get the "
"true variance of a complete population use VARP.\n"
"VAR is also known as the N-1-variance. Under reasonable conditions, it is "
"the maximum-likelihood estimator for the true variance.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"VAR(A1:A5) equals 117.64.\n"
"\n"
"@SEEALSO=VARP,STDEV"
msgstr ""
"@FUNCTION=VARIANZ\n"
"@SYNTAX=VARIANZ(b1, b2, ...)\n"
"@DESCRIPTION=VARIANZ liefert die geschätzte Abweichung einer Stichprobe von "
"einer Grundgesamtheit. Zur Bestimmung der tatsächlichen Varianz einer "
"gesamten Grundgesamtheit müssen Sie die Funktion @VARIANZN verwenden.\n"
"\n"
"* VARIANZ ist auch als N-1-Varianz bekannt. Unter reellen Bedingungen ist "
"dies der wahrscheinlichste Schätzwert für die wahre Varianz.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"VARIANZ(A1:A5) 117.64.\n"
"\n"
"@SEEALSO=VARIANZN,STDABW"

#: ../plugins/fn-stat/functions.c:134
msgid ""
"@FUNCTION=STDEV\n"
"@SYNTAX=STDEV(b1, b2, ...)\n"
"@DESCRIPTION=STDEV returns the sample standard deviation of the given "
"sample.\n"
"To obtain the population standard deviation of a whole population use "
"STDEVP.\n"
"STDEV is also known as the N-1-standard deviation.\n"
"Under reasonable conditions, it is the maximum-likelihood estimator for the "
"true population standard deviation.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"STDEV(A1:A5) equals 10.84619749.\n"
"\n"
"@SEEALSO=AVERAGE,DSTDEV,DSTDEVP,STDEVA,STDEVPA,VAR"
msgstr ""
"@FUNCTION=VARIANZ\n"
"@SYNTAX=VARIANZ(b1, b2, ...)\n"
"@DESCRIPTION=VARIANZ liefert die geschätzte Abweichung einer Stichprobe von "
"einer Grundgesamtheit. Zur Bestimmung der tatsächlichen Varianz einer "
"gesamten Grundgesamtheit müssen Sie die Funktion @VARIANZN verwenden.\n"
"\n"
"* VARIANZ ist auch als N-1-Varianz bekannt. Unter reellen Bedingungen ist "
"dies der wahrscheinlichste Schätzwert für die wahre Varianz.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"VARIANZ(A1:A5) 117.64.\n"
"\n"
"@SEEALSO=VARIANZN,STDABW"

#: ../plugins/fn-stat/functions.c:173
msgid ""
"@FUNCTION=STDEVP\n"
"@SYNTAX=STDEVP(b1, b2, ...)\n"
"@DESCRIPTION=STDEVP returns the population standard deviation of the given "
"population. \n"
"This is also known as the N-standard deviation\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"STDEVP(A1:A5) equals 9.701133954.\n"
"\n"
"@SEEALSO=STDEV,STDEVA,STDEVPA"
msgstr ""
"@FUNCTION=STDABWN\n"
"@SYNTAX=STDABWN(b1, b2, ...)\n"
"@DESCRIPTION=STDABWN liefert die Standardabweichung eines Zahlensatzes, "
"wobei diese Zahlen als Mitglieder einer gesamten Grundgesamtheit angesehen "
"werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"STDABWN(A1:A5) 9.701133954.\n"
"\n"
"@SEEALSO=STDABW,STDABW2,STDABWN2"

#: ../plugins/fn-stat/functions.c:207
msgid ""
"@FUNCTION=RANK\n"
"@SYNTAX=RANK(x,ref[,order])\n"
"@DESCRIPTION=RANK returns the rank of a number in a list of numbers.  @x is "
"the number whose rank you want to find, @ref is the list of numbers, and "
"@order specifies how to rank numbers.  If @order is 0, numbers are ranked in "
"descending order, otherwise numbers are ranked in ascending order.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"RANK(17.3,A1:A5) equals 4.\n"
"\n"
"@SEEALSO=PERCENTRANK"
msgstr ""
"@FUNCTION=RANG\n"
"@SYNTAX=RANG(x,Bezug[,Reihenfolge])\n"
"@DESCRIPTION=RANG liefert den Rang einer Zahl in einer Liste mit Zahlen. @x "
"ist die Zahl, nach deren Rang gesucht werden soll, @Bezug die Liste mit den "
"Zahlen und @Reihenfolge gibt an, wie in welcher Reihenfolge die Zahlen "
"aufgereiht werden. Falls @Reihenfolge 0 ist, werden die Zahlen in "
"absteigender, andernfalls in aufsteigender Reihenfolge verarbeitet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"RANG(17.3,A1:A5) 4.\n"
"\n"
"@SEEALSO=PROZENTRANG"

#: ../plugins/fn-stat/functions.c:294
#, fuzzy
msgid ""
"@FUNCTION=TRIMMEAN\n"
"@SYNTAX=TRIMMEAN(ref,fraction)\n"
"@DESCRIPTION=TRIMMEAN returns the mean of the interior of a data set. @ref "
"is the list of numbers whose mean you want to calculate and @fraction is the "
"fraction of the data set excluded from the mean. For example, if "
"@fraction=0.2 and the data set contains 40 numbers, 8 numbers are trimmed "
"from the data set (40 x 0.2): the 4 largest and the 4 smallest.  To avoid a "
"bias, the number of points to be excluded is always rounded down to the "
"nearest even number.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"TRIMMEAN(A1:A5,0.2) equals 23.2.\n"
"\n"
"@SEEALSO=AVERAGE,GEOMEAN,HARMEAN,MEDIAN,MODE"
msgstr ""
"@FUNCTION=RANG\n"
"@SYNTAX=RANG(x,Bezug[,Reihenfolge])\n"
"@DESCRIPTION=RANG liefert den Rang einer Zahl in einer Liste mit Zahlen. @x "
"ist die Zahl, nach deren Rang gesucht werden soll, @Bezug die Liste mit den "
"Zahlen und @Reihenfolge gibt an, wie in welcher Reihenfolge die Zahlen "
"aufgereiht werden. Falls @Reihenfolge 0 ist, werden die Zahlen in "
"absteigender, andernfalls in aufsteigender Reihenfolge verarbeitet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"RANG(17.3,A1:A5) 4.\n"
"\n"
"@SEEALSO=PROZENTRANG"

#: ../plugins/fn-stat/functions.c:356
msgid ""
"@FUNCTION=COVAR\n"
"@SYNTAX=COVAR(array1,array2)\n"
"@DESCRIPTION=COVAR returns the covariance of two data sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"COVAR(A1:A5,B1:B5) equals 65.858.\n"
"\n"
"@SEEALSO=CORREL,FISHER,FISHERINV"
msgstr ""
"@FUNCTION=KOVAR\n"
"@SYNTAX=KOVAR(Datenfeld1,Datenfeld2)\n"
"@DESCRIPTION=KOVAR liefert die Kovarianz zweier Datensätze.\n"
"\n"
"* Zeichenketten und leere Zellen werden ignoriert.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1 und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 und "
"42.7. Dann liefert\n"
"COVAR(A1:A5,B1:B5) 65.858.\n"
"\n"
"@SEEALSO=KORREL,FISHER,FISHERINV"

#: ../plugins/fn-stat/functions.c:392
msgid ""
"@FUNCTION=CORREL\n"
"@SYNTAX=CORREL(array1,array2)\n"
"@DESCRIPTION=CORREL returns the correlation coefficient of two data sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"CORREL(A1:A5,B1:B5) equals 0.996124788.\n"
"\n"
"@SEEALSO=COVAR,FISHER,FISHERINV"
msgstr ""
"@FUNCTION=KORREL\n"
"@SYNTAX=KORREL(Datenfeld1,Datenfeld2)\n"
"@DESCRIPTION=KORREL liefert den Korrelationskoeffizienten zweier "
"Datensätze.\n"
"\n"
"* Zeichenketten und leere Zellen werden ignoriert.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1, und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 "
"und 42.7. Dann liefert\n"
"KORREL(A1:A5,B1:B5) 0.996124788.\n"
"\n"
"@SEEALSO=KOVAR,FISHER,FISHERINV"

#: ../plugins/fn-stat/functions.c:428
msgid ""
"@FUNCTION=NEGBINOMDIST\n"
"@SYNTAX=NEGBINOMDIST(f,t,p)\n"
"@DESCRIPTION=NEGBINOMDIST function returns the negative binomial "
"distribution. @f is the number of failures, @t is the threshold number of "
"successes, and @p is the probability of a success.\n"
"\n"
"* If @f or @t is a non-integer it is truncated.\n"
"* If (@f + @t -1) <= 0 NEGBINOMDIST returns #NUM! error.\n"
"* If @p < 0 or @p > 1 NEGBINOMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NEGBINOMDIST(2,5,0.55) equals 0.152872629.\n"
"\n"
"@SEEALSO=BINOMDIST,COMBIN,FACT,HYPGEOMDIST,PERMUT"
msgstr ""
"@FUNCTION=NEGBINOMVERT\n"
"@SYNTAX=NEGBINOMVERT(Fehlschläge,Versuche,Wahrscheinlichkeit)\n"
"@DESCRIPTION=NEGBINOMVERT liefert die negative Binominalverteilung. @f ist "
"die Anzahl der Fehlschläge, @Versuche der Schwellwert der Anzahl "
"erfolgreicher Versuche und @Wahrscheinlichkeit die Wahrscheinlichkeit, dass "
"ein Versuch erfolgreich ist.\n"
"\n"
"* Falls @Fehlschläge oder @Versuche keine Ganzzahl ist, werden die "
"Nachkommastellen abgeschnitten.\n"
"* Falls (@Fehlschläge + @Versuche -1) <= 0 ist, liefert NEGBINOMVERT einen "
"#ZAHL!-Fehler.\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert NEGBINOMVERT einen "
"#ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"NEGBINOMVERT(2,5,0.55) liefert 0.152872629.\n"
"\n"
"@SEEALSO=BINOMVERT,KOMBINATIONEN,FAKULTÄT,HYPGEOMVERT,PERMUT"

#: ../plugins/fn-stat/functions.c:466
msgid ""
"@FUNCTION=NORMSDIST\n"
"@SYNTAX=NORMSDIST(x)\n"
"@DESCRIPTION=NORMSDIST function returns the standard normal cumulative "
"distribution. @x is the value for which you want the distribution.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMSDIST(2) equals 0.977249868.\n"
"\n"
"@SEEALSO=NORMDIST"
msgstr ""
"@FUNCTION=STANDNORMVERT\n"
"@SYNTAX=STANDNORMVERT(x)\n"
"@DESCRIPTION=STANDNORMVERT liefert die kumulative Standard-Normalverteilung. "
"@x ist der Wert, für den die Verteilung erzeugt werden soll.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"STANDNORMVERT(2) liefert 0.977249868.\n"
"\n"
"@SEEALSO=NORMVERT"

#: ../plugins/fn-stat/functions.c:498
msgid ""
"@FUNCTION=NORMSINV\n"
"@SYNTAX=NORMSINV(p)\n"
"@DESCRIPTION=NORMSINV function returns the inverse of the standard normal "
"cumulative distribution. @p is the given probability corresponding to the "
"normal distribution.\n"
"\n"
"* If @p < 0 or @p > 1 NORMSINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMSINV(0.2) equals -0.841621234.\n"
"\n"
"@SEEALSO=NORMDIST,NORMINV,NORMSDIST,STANDARDIZE,ZTEST"
msgstr ""
"@FUNCTION=STANDNORMINV\n"
"@SYNTAX=STANDNORMINV(Wahrscheinlichkeit)\n"
"@DESCRIPTION=STANDNORMINV liefert die inverse kumulative Standard-"
"Normalverteilung. @Wahrscheinlichkeit ist die angegebene, der "
"Normalverteilung entsprechende Wahrscheinlichkeit.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder @Wahrscheinlichkeit > 1 ist, liefert "
"STANDNORMINV einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"STANDNORMINV(0.2) liefert -0.841621234.\n"
"\n"
"@SEEALSO=NORMVERT,NORMINV,STANDNORMVERT,NORMIEREN,ZTEST"

#: ../plugins/fn-stat/functions.c:533
msgid ""
"@FUNCTION=LOGNORMDIST\n"
"@SYNTAX=LOGNORMDIST(x,mean,stddev)\n"
"@DESCRIPTION=LOGNORMDIST function returns the lognormal distribution. @x is "
"the value for which you want the distribution, @mean is the mean of the "
"distribution, and @stddev is the standard deviation of the distribution.\n"
"\n"
"* If @stddev = 0 LOGNORMDIST returns #DIV/0! error.\n"
"* If @x <= 0, @mean < 0 or @stddev < 0 LOGNORMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOGNORMDIST(3,1,2) equals 0.519662338.\n"
"\n"
"@SEEALSO=NORMDIST"
msgstr ""
"@FUNCTION=LOGNORMVERT\n"
"@SYNTAX=LOGNORMVERT(x,Mittelwert,Stdabw)\n"
"@DESCRIPTION=LOGNORMVERT liefert die Lognormal-Verteilung. @x ist der Wert, "
"für den die Verteilung berechnet werden soll, @Mittelwert der Mittelwert der "
"Verteilung und @Stdabw die Standardabweichung von der Verteilung.\n"
"\n"
"* Falls @Stdabw = 0 ist, liefert LOGNORMVERT einen #DIV/0!-Fehler.\n"
"* Falls @x <= 0, @Mittelwert < 0 oder @Stdabw < 0 ist, liefert LOGNORMVERT "
"einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LOGNORMVERT(3,1,2) liefert 0.519662338.\n"
"\n"
"@SEEALSO=NORMVERT"

#: ../plugins/fn-stat/functions.c:571
msgid ""
"@FUNCTION=LOGINV\n"
"@SYNTAX=LOGINV(p,mean,stddev)\n"
"@DESCRIPTION=LOGINV function returns the inverse of the lognormal cumulative "
"distribution. @p is the given probability corresponding to the normal "
"distribution, @mean is the arithmetic mean of the distribution, and @stddev "
"is the standard deviation of the distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @stddev <= 0 LOGINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOGINV(0.5,2,3) equals 7.389056099.\n"
"\n"
"@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMDIST"
msgstr ""
"@FUNCTION=LOGINV\n"
"@SYNTAX=LOGINV(Wahrscheinlichkeit,Mittelwert,Stdabw)\n"
"@DESCRIPTION=LOGINV liefert die inverse Lognormal-Verteilung. "
"@Wahrscheinlichkeit ist die der Normalverteilung entsprechende "
"Wahrscheinlichkeit, @Mittelwert der arithmetische Mittelwert der Verteilung "
"und @Stdabw ist die Standardabweichung von der Funktion.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 oder @Stdabw <= 0 ist, liefert "
"LOGINV einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LOGINV(0.5,2,3) liefert 7.389056099.\n"
"\n"
"@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMVERT"

#: ../plugins/fn-stat/functions.c:611
msgid ""
"@FUNCTION=FISHERINV\n"
"@SYNTAX=FISHERINV(x)\n"
"@DESCRIPTION=FISHERINV function returns the inverse of the Fisher "
"transformation at @x.\n"
"\n"
"* If @x is non-number FISHERINV returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FISHERINV(2) equals 0.96402758.\n"
"\n"
"@SEEALSO=FISHER"
msgstr ""
"@FUNCTION=FISHERINV\n"
"@SYNTAX=FISHERINV(x)\n"
"@DESCRIPTION=FISHERINV liefert die inverse Fisher-Transformation bei @x.\n"
"\n"
"* Falls @x keine Zahl ist, liefert FISHERINV einen #WERT!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"FISHERINV(2) liefert 0.96402758.\n"
"\n"
"@SEEALSO=FISHER"

#: ../plugins/fn-stat/functions.c:641
msgid ""
"@FUNCTION=MODE\n"
"@SYNTAX=MODE(n1, n2, ...)\n"
"@DESCRIPTION=MODE returns the most common number of the data set. If the "
"data set has many most common numbers MODE returns the first one of them.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If the data set does not contain any duplicates MODE returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"11.4, 25.9, and 40.1.  Then\n"
"MODE(A1:A5) equals 11.4.\n"
"\n"
"@SEEALSO=AVERAGE,MEDIAN"
msgstr ""
"@FUNCTION=MODALWERT\n"
"@SYNTAX=MODALWERT(n1, n2, ...)\n"
"@DESCRIPTION=MODALWERT liefert die am Häufigsten in den Datensätzen "
"auftauchende Zahl. Falls mehrere Zahlen am Häufigsten auftauchen, liefert "
"MODALWERT die erste von diesen.\n"
"\n"
"* Zeichenketten und leere Zellen werden ignoriert.\n"
"* Falls keine Zahl mehrmals in den Datensätzen vorkommt, liefert MODALWERT "
"einen #-/-!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"11.4, 25.9 und 40.1. Dann liefert\n"
"MODALWERT(A1:A5) 11.4.\n"
"\n"
"@SEEALSO= :: LATER"

#: ../plugins/fn-stat/functions.c:679
msgid ""
"@FUNCTION=HARMEAN\n"
"@SYNTAX=HARMEAN(b1, b2, ...)\n"
"@DESCRIPTION=HARMEAN returns the harmonic mean of the N data points (that "
"is, N divided by the sum of the inverses of the data points).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"HARMEAN(A1:A5) equals 19.529814427.\n"
"\n"
"@SEEALSO=AVERAGE,GEOMEAN,MEDIAN,MODE,TRIMMEAN"
msgstr ""
"@FUNCTION=HARMITTEL\n"
"@SYNTAX=HARMITTEL(b1, b2, ...)\n"
"@DESCRIPTION=HARMITTEL liefert den harmonischen Mittelwert von N "
"Datenpunkten (also N geteilt durch Summe der Inversen der Datenpunkte).\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"HARMITTEL(A1:A5) 19.529814427.\n"
"\n"
"@SEEALSO= :: LATER"

#: ../plugins/fn-stat/functions.c:713
msgid ""
"@FUNCTION=GEOMEAN\n"
"@SYNTAX=GEOMEAN(b1, b2, ...)\n"
"@DESCRIPTION=GEOMEAN returns the geometric mean of the given arguments. This "
"is equal to the Nth root of the product of the terms.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"GEOMEAN(A1:A5) equals 21.279182482.\n"
"\n"
"@SEEALSO=AVERAGE,HARMEAN,MEDIAN,MODE,TRIMMEAN"
msgstr ""
"@FUNCTION=GEOMITTEL\n"
"@SYNTAX=GEOMITTEL(b1,b2[,...])\n"
"@DESCRIPTION=GEOMITTEL liefert den geometrischen Mittelwert der angegebenen "
"Argumente. Dies entspricht der n-ten Wurzel dieser Terme.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"GEOMITTEL(A1:A5) 21.279182482.\n"
"\n"
"@SEEALSO=MITTEL,HARMEAN,MEDIAN,MODE,TRIMMEAN"

#: ../plugins/fn-stat/functions.c:746
msgid ""
"@FUNCTION=COUNT\n"
"@SYNTAX=COUNT(b1, b2, ...)\n"
"@DESCRIPTION=COUNT returns the total number of integer or floating point "
"arguments passed.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"COUNT(A1:A5) equals 5.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=ANZAHL\n"
"@SYNTAX=ANZAHL(b1,b2,...)\n"
"@DESCRIPTION=ANZAHL liefert die Gesamtanzahl übergebener ganzzahliger und "
"Fließkomma-Argumente.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MITTELWERT"

#: ../plugins/fn-stat/functions.c:791
msgid ""
"@FUNCTION=COUNTA\n"
"@SYNTAX=COUNTA(b1, b2, ...)\n"
"@DESCRIPTION=COUNTA returns the number of arguments passed not including "
"empty cells.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, \"missing\", \"missing\", 25.9, and 40.1.  Then\n"
"COUNTA(A1:A5) equals 5.\n"
"\n"
"@SEEALSO=AVERAGE,COUNT,DCOUNT,DCOUNTA,PRODUCT,SUM"
msgstr ""
"@FUNCTION=ANZAHL2\n"
"@SYNTAX=ANZAHL2(b1, b2, ...)\n"
"@DESCRIPTION=ANZAHL2 liefert die Anzahl der übergebenen Argumente, wobei "
"leere Zellen nicht gezählt werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen und "
"Zeichenketten 11.4, \"fehlt\", \"fehlt\", 25.9, and 40.1. Dann liefert\n"
"ANZAHL2(A1:A5) 5.\n"
"\n"
"@SEEALSO= :: LATER"

#: ../plugins/fn-stat/functions.c:835
msgid ""
"@FUNCTION=AVERAGE\n"
"@SYNTAX=AVERAGE(value1, value2,...)\n"
"@DESCRIPTION=AVERAGE computes the average of all the values and cells "
"referenced in the argument list.  This is equivalent to the sum of the "
"arguments divided by the count of the arguments.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"AVERAGE(A1:A5) equals 23.2.\n"
"\n"
"@SEEALSO=SUM, COUNT"
msgstr ""
"@FUNCTION=MITTELWERT\n"
"@SYNTAX=MITTELWERT(Wert1,Wert2[,...])\n"
"@DESCRIPTION=MITTELWERT berechnet den Mittelwert aller übergebenen Werte und "
"Zellen. Dieser wird durch das Teilen der Gesamtsumme der Argumente durch die "
"Anzahl selbiger berechnet.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"MITTELWERT(A1:A5) 23.2.\n"
"\n"
"@SEEALSO=SUMME, ANZAHL"

#: ../plugins/fn-stat/functions.c:869
msgid ""
"@FUNCTION=MIN\n"
"@SYNTAX=MIN(b1, b2, ...)\n"
"@DESCRIPTION=MIN returns the value of the element of the values passed that "
"has the smallest value, with negative numbers considered smaller than "
"positive numbers.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"MIN(A1:A5) equals 11.4.\n"
"\n"
"@SEEALSO=MAX,ABS"
msgstr ""
"@FUNCTION=MIN\n"
"@SYNTAX=MIN(b1, b2, ...)\n"
"@DESCRIPTION=MIN liefert den Wert des übergebenen Elements mit dem kleinsten "
"Wert. Hierbei wird angenommen, dass der Wert von negativen kleiner als der "
"von positiven Zahlen ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"MIN(A1:A5) 11.4.\n"
"\n"
"@SEEALSO=MAX, ABS"

#: ../plugins/fn-stat/functions.c:913
msgid ""
"@FUNCTION=MAX\n"
"@SYNTAX=MAX(b1, b2, ...)\n"
"@DESCRIPTION=MAX returns the value of the element of the values passed that "
"has the largest value, with negative numbers considered smaller than "
"positive numbers.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"MAX(A1:A5) equals 40.1.\n"
"\n"
"@SEEALSO=MIN,ABS"
msgstr ""
"@FUNCTION=MAX\n"
"@SYNTAX=MAX(b1, b2, ...)\n"
"@DESCRIPTION=MAX liefert den Wert des übergebenen Elements mit dem größten "
"Wert. Hierbei wird angenommen, dass der Wert von negativen kleiner als der "
"von positiven Zahlen ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"MAX(A1:A5) 40.1.\n"
"\n"
"@SEEALSO=MIN, ABS"

#: ../plugins/fn-stat/functions.c:957
msgid ""
"@FUNCTION=SKEW\n"
"@SYNTAX=SKEW(n1, n2, ...)\n"
"@DESCRIPTION=SKEW returns an unbiased estimate for skewness of a "
"distribution.\n"
"\n"
"Note, that this is only meaningful if the underlying distribution really has "
"a third moment.  The skewness of a symmetric (e.g., normal) distribution is "
"zero.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If less than three numbers are given, SKEW returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"SKEW(A1:A5) equals 0.976798268.\n"
"\n"
"@SEEALSO=AVERAGE,VAR,SKEWP,KURT"
msgstr ""
"@FUNCTION=SCHIEFE\n"
"@SYNTAX=SCHIEFE(n1, n2, ...)\n"
"@DESCRIPTION=SCHIEFE liefert einen Schätzwert für die Schiefe einer "
"Verteilung.\n"
"\n"
"Beachten Sie, dass das Ergebnis lediglich aussagekräftig ist, falls die zu "
"Grunde liegende Verteilung ein drittes Moment hat. Die Schiefe einer "
"symmetrischen (also normalen) Verteilung ist null.\n"
"\n"
"* Zeichenketten und leere Zellen werden nicht berücksichtigt.\n"
"* Falls weniger als drei Argumente übergeben werden, liefert SCHIEFE einen "
"#DIV/0!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"SCHIEFE(A1:A5) 0.976798268.\n"
"\n"
"@SEEALSO=MITTELWERT,VARIANZ,SCHIEFEN,KURT"

#: ../plugins/fn-stat/functions.c:997
msgid ""
"@FUNCTION=SKEWP\n"
"@SYNTAX=SKEWP(n1, n2, ...)\n"
"@DESCRIPTION=SKEWP returns the population skewness of a data set.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If less than two numbers are given, SKEWP returns #DIV/0! error.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"SKEWP(A1:A5) equals 0.655256198.\n"
"\n"
"@SEEALSO=AVERAGE,VARP,SKEW,KURTP"
msgstr ""
"@FUNCTION=SCHIEFEN\n"
"@SYNTAX=SCHIEFEN(n1, n2, ...)\n"
"@DESCRIPTION=SCHIEFEN liefert die Schiefe der Grundgesamtheit eines "
"Datensatzes.\n"
"\n"
"* Zeichenketten und leere Zellen werden nicht berücksichtigt.\n"
"* Falls weniger als zwei Argumente übergeben werden, liefert SCHIEFEN einen "
"#DIV/0!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"SCHIEFEN(A1:A5) 0.655256198.\n"
"\n"
"@SEEALSO=MITTELWERT,VARIANZN,SCHIEFE,KURT"

#: ../plugins/fn-stat/functions.c:1032
msgid ""
"@FUNCTION=EXPONDIST\n"
"@SYNTAX=EXPONDIST(x,y,cumulative)\n"
"@DESCRIPTION=EXPONDIST function returns the exponential distribution. If the "
"@cumulative boolean is false it will return:\n"
"\n"
"\t@y * exp (-@y*@x),\n"
"\n"
"otherwise it will return\n"
"\n"
"\t1 - exp (-@y*@x).\n"
"\n"
"* If @x < 0 or @y <= 0 this will return an error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EXPONDIST(2,4,0) equals 0.001341851.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=EXPONVERT\n"
"@SYNTAX=EXPONVERT(x,y,kumulativ)\n"
"@DESCRIPTION=EXPONVERT liefert die Exponentialverteilung. Falls das logische "
"Argument @kumulativ falsch ist, liefert sie\n"
"\n"
"\t@y * exp (-@y*@x),\n"
"\n"
"andernfalls\n"
"\n"
"\t1 - exp (-@y*@x).\n"
"\n"
"* Falls @x < 0 oder @y <= 0 ist, liefert EXPONDIST einen Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"EXPONVERT(2,4,0) liefert 0.001341851.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:1072
msgid ""
"@FUNCTION=BERNOULLI\n"
"@SYNTAX=BERNOULLI(k,p)\n"
"@DESCRIPTION=BERNOULLI returns the probability p(k) of obtaining @k from a "
"Bernoulli distribution with probability parameter @p.\n"
"\n"
"* If @k != 0 and @k != 1 BERNOULLI returns #NUM! error.\n"
"* If @p < 0 or @p > 1 BERNOULLI returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"BERNOULLI(0,0.5).\n"
"\n"
"@SEEALSO=RANDBERNOULLI"
msgstr ""
"@FUNCTION=BERNOULLI\n"
"@SYNTAX=BERNOULLI(k,Wahrscheinlichkeit)\n"
"@DESCRIPTION=BERNOULLI liefert die Wahrscheinlichkeit p(k), dass eine "
"Bernoulli-Verteilung mit Wahrscheinlichkeitsparameter @p @k liefert.\n"
"\n"
"* Falls @k != 0 und @k != 1 ist, liefert BERNOULLI einen #ZAHL!-Fehler.\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert BERNOULLI einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"BERNOULLI(0,0.5).\n"
"\n"
"@SEEALSO=ZUFALL.BERNOULLI"

#: ../plugins/fn-stat/functions.c:1117
msgid ""
"@FUNCTION=GAMMALN\n"
"@SYNTAX=GAMMALN(x)\n"
"@DESCRIPTION=GAMMALN function returns the natural logarithm of the gamma "
"function.\n"
"\n"
"* If @x is non-number then GAMMALN returns #VALUE! error.\n"
"* If @x <= 0 then GAMMALN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GAMMALN(23) equals 48.471181352.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=GAMMALN\n"
"@SYNTAX=GAMMALN(x)\n"
"@DESCRIPTION=GAMMALN liefert den natürlichen Logarithmus der Gamma-"
"Funktion.\n"
"\n"
"* Falls @x keine Zahl ist, liefert GAMMALN einen #WERT!-Fehler.\n"
"* Falls @x <= 0 ist, liefert GAMMALN einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GAMMALN(23) liefert 48.471181352.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:1157
msgid ""
"@FUNCTION=GAMMADIST\n"
"@SYNTAX=GAMMADIST(x,alpha,beta,cum)\n"
"@DESCRIPTION=GAMMADIST function returns the gamma distribution. If @cum is "
"TRUE, GAMMADIST returns the incomplete gamma function, otherwise it returns "
"the probability mass function.\n"
"\n"
"* If @x < 0 GAMMADIST returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0, GAMMADIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GAMMADIST(1,2,3,0) equals 0.07961459.\n"
"\n"
"@SEEALSO=GAMMAINV"
msgstr ""
"@FUNCTION=GAMMAVERT\n"
"@SYNTAX=GAMMAVERT(x,Alpha,Beta,kumulativ)\n"
"@DESCRIPTION=GAMMAVERT liefert die Gammaverteilung. Falls @kumulativ WAHR "
"ist, liefert GAMMAVERT die unvollständige Gammafunktion, andernfalls die "
"Wahrscheinlichkeitsdichte-Funktion.\n"
"\n"
"* Falls @x < 0 ist, liefert GAMMAVERT einen #ZAHL!-Fehler.\n"
"* Falls @Alpha oder @Beta <= 0 ist, liefert GAMMAVERT einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GAMMAVERT(1,2,3,0) liefert 0.07961459.\n"
"\n"
"@SEEALSO=GAMMAINV"

#: ../plugins/fn-stat/functions.c:1198
msgid ""
"@FUNCTION=GAMMAINV\n"
"@SYNTAX=GAMMAINV(p,alpha,beta)\n"
"@DESCRIPTION=GAMMAINV function returns the inverse of the cumulative gamma "
"distribution.\n"
"\n"
"* If @p < 0 or @p > 1 GAMMAINV returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0 GAMMAINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GAMMAINV(0.34,2,4) equals 4.829093908.\n"
"\n"
"@SEEALSO=GAMMADIST"
msgstr ""
"@FUNCTION=GAMMAINV\n"
"@SYNTAX=GAMMAINV(Wahrscheinlichkeit,Alpha,Beta)\n"
"@DESCRIPTION=GAMMAINV liefert die inverse kumulative Gammaverteilung.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert GAMMAINV einen #ZAHL!-"
"Fehler.\n"
"* Falls @Alpha oder @Beta <= 0 ist, liefert GAMMAINV einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GAMMAINV(0.34,2,4) liefert 4.829093908.\n"
"\n"
"@SEEALSO=GAMMAVERT"

#: ../plugins/fn-stat/functions.c:1236
msgid ""
"@FUNCTION=CHIDIST\n"
"@SYNTAX=CHIDIST(x,dof)\n"
"@DESCRIPTION=CHIDIST function returns the one-tailed probability of the chi-"
"squared distribution. @dof is the number of degrees of freedom.\n"
"\n"
"* If @dof is non-integer it is truncated.\n"
"* If @dof < 1 CHIDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CHIDIST(5.3,2) equals 0.070651213.\n"
"\n"
"@SEEALSO=CHIINV,CHITEST"
msgstr ""
"@FUNCTION=CHIVERT\n"
"@SYNTAX=CHIVERT(x,Freiheitsgrad)\n"
"@DESCRIPTION=CHIVERT liefert die einseitige Wahrscheinlichkeit Chi²-"
"Verteilung. @Freiheitsgrad ist die Zahl der Freiheitsgrade.\n"
"\n"
"* Falls @Freiheitsgrad keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @Freiheitsgrad < 1 ist, liefert CHIVERT einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"CHIVERT(5.3,2) liefert 0.070651213.\n"
"\n"
"@SEEALSO=CHIINV,CHITEST"

#: ../plugins/fn-stat/functions.c:1272
msgid ""
"@FUNCTION=CHIINV\n"
"@SYNTAX=CHIINV(p,dof)\n"
"@DESCRIPTION=CHIINV function returns the inverse of the one-tailed "
"probability of the chi-squared distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @dof < 1 CHIINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CHIINV(0.98,7) equals 1.564293004.\n"
"\n"
"@SEEALSO=CHIDIST,CHITEST"
msgstr ""
"@FUNCTION=CHIINV\n"
"@SYNTAX=CHIINV(Wahrscheinlichkeit,Freiheitsgrad)\n"
"@DESCRIPTION=CHIINV liefert die einseitige Wahrscheinlichkeit der inversen "
"Chi²-Verteilung.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 oder @Freiheitsgrad < 1 ist, "
"liefert CHIINV einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"CHIINV(0.98,7) liefert 1.564293004.\n"
"\n"
"@SEEALSO=CHIVERT,CHITEST"

#: ../plugins/fn-stat/functions.c:1306
msgid ""
"@FUNCTION=CHITEST\n"
"@SYNTAX=CHITEST(actual_range,theoretical_range)\n"
"@DESCRIPTION=CHITEST function returns the test for independence of chi-"
"squared distribution.\n"
"\n"
"@actual_range is a range that contains the observed data points. "
"@theoretical_range is a range that contains the expected values of the data "
"points.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=CHIDIST,CHIINV"
msgstr ""
"@FUNCTION=CHITEST\n"
"@SYNTAX=CHITEST(Beobachteter_Bereich,Erwarteter_Bereich)\n"
"@DESCRIPTION=CHITEST stellt den Test auf Unabgägigkeit von der Chi²-"
"Verteilung bereit.\n"
"\n"
"@Beobachteter_Bereich ist der Bereich, der die zu beobachtenden Messpunkte "
"enthält. @Erwarteter_Bereich ist der Bereich, der die erwarteten Werte für "
"die Messpunkte enthält.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=CHIVERT,CHIINV"

#: ../plugins/fn-stat/functions.c:1401
msgid ""
"@FUNCTION=BETADIST\n"
"@SYNTAX=BETADIST(x,alpha,beta[,a,b])\n"
"@DESCRIPTION=BETADIST function returns the cumulative beta distribution. @a "
"is the optional lower bound of @x and @b is the optional upper bound of @x.\n"
"* If @a is not given, BETADIST uses 0.\n"
"* If @b is not given, BETADIST uses 1.\n"
"* If @x < @a or @x > @b BETADIST returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0, BETADIST returns #NUM! error.\n"
"* If @a >= @b BETADIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BETADIST(0.12,2,3) equals 0.07319808.\n"
"\n"
"@SEEALSO=BETAINV"
msgstr ""
"@FUNCTION=BETAVERT\n"
"@SYNTAX=BETAVERT(x,Alpha,Beta[,a,b])\n"
"@DESCRIPTION=BETAVERT liefert die kumulative Beta-Verteilung. @a ist die "
"optionale untere und @b die optionale obere Schranke von @x. \n"
"* Falls @a nicht übergeben wird, wird 0 verwendet.\n"
"* Falls @b nicht übergeben wird, wird 1 verwendet.\n"
"* Falls @x < @a oder > @b ist, liefert BETAVERT einen #ZAHL!-Fehler.\n"
"* Falls @Alpha <= 0 oder @Beta <= 0 ist, liefert BETAVERT einen #ZAHL!-"
"Fehler.\n"
"* Falls @a >= @b ist, liefert BETAVERT einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BETAVERT(0.12,2,3) liefert 0.07319808.\n"
"\n"
"@SEEALSO=BETAINV"

#: ../plugins/fn-stat/functions.c:1447
msgid ""
"@FUNCTION=BETAINV\n"
"@SYNTAX=BETAINV(p,alpha,beta[,a,b])\n"
"@DESCRIPTION=BETAINV function returns the inverse of cumulative beta "
"distribution.  @a is the optional lower bound of @x and @b is the optional "
"upper bound of @x.\n"
"\n"
"* If @a is not given, BETAINV uses 0.\n"
"* If @b is not given, BETAINV uses 1.\n"
"* If @p < 0 or @p > 1 BETAINV returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0, BETAINV returns #NUM! error.\n"
"* If @a >= @b BETAINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BETAINV(0.45,1.6,1) equals 0.607096629.\n"
"\n"
"@SEEALSO=BETADIST"
msgstr ""
"@FUNCTION=BETAINV\n"
"@SYNTAX=BETAINV(Wahrscheinlichkeit,Alpha,Beta[,a,b])\n"
"@DESCRIPTION=BETAINV liefert die inverse kumulative Beta-Verteilung. @a ist "
"die optionale untere und @b die optionale obere Schranke von @x.\n"
"* Falls @a nicht übergeben wird, wird 0 verwendet.\n"
"* Falls @b nicht übergeben wird, wird 1 verwendet.\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert BETAINV einen #ZAHL!-"
"Fehler.\n"
"* Falls @Alpha oder @Beta <= 0 ist, liefert BETAINV einen #ZAHL!-Fehler.\n"
"* Falls @a >= @b ist, liefert BETAINV einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BETAINV(0.45,1.6,1) liefert 0.607096629.\n"
"\n"
"@SEEALSO=BETAVERT"

#: ../plugins/fn-stat/functions.c:1491
#, fuzzy
msgid ""
"@FUNCTION=TDIST\n"
"@SYNTAX=TDIST(x,dof,tails)\n"
"@DESCRIPTION=TDIST function returns the Student's t-distribution. @dof is "
"the degree of freedom and @tails is 1 or 2 depending on whether you want one-"
"tailed or two-tailed distribution.\n"
"@tails = 1 returns the size of the right tail.\n"
"\n"
"* If @dof < 1 TDIST returns #NUM! error.\n"
"* If @tails is neither 1 or 2 TDIST returns #NUM! error.\n"
"* This function is Excel compatible for non-negative @x.\n"
"\n"
"Warning: the parameterization of this function is different from what is "
"used for, e.g., NORMSDIST.  This is a common source of mistakes, but "
"necessary for compatibility.\n"
"\n"
"@EXAMPLES=\n"
"TDIST(2,5,1) equals 0.050969739.\n"
"TDIST(-2,5,1) equals 0.949030261.\n"
"TDIST(0,5,2) equals 1.\n"
"\n"
"@SEEALSO=TINV,TTEST"
msgstr ""
"@FUNCTION=TVERT\n"
"@SYNTAX=TVERT(x,Freiheitsgrad,Seiten)\n"
"@DESCRIPTION=TVERT liefert die Student's-t-Verteilung. @Freiheitsgrad ist "
"der Freiheitsgrad und @Seiten legt fest an, ob die ein- oder zweiseitige "
"Funktion verwendet werden soll (Mögliche Werte sind dementsprechend 1 und "
"2).\n"
"\n"
"* Falls @Freiheitsgrad < 1 ist, liefert TVERT einen #ZAHL!-Fehler.\n"
"* Falls @Seiten weder 1 noch 2 ist, liefert TVERT einen #ZAHL-Fehler.\n"
"* Diese funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TVERT(2,5,1) liefert 0.050969739.\n"
"\n"
"@SEEALSO=TINV,TTEST"

#: ../plugins/fn-stat/functions.c:1536
#, fuzzy
msgid ""
"@FUNCTION=TINV\n"
"@SYNTAX=TINV(p,dof)\n"
"@DESCRIPTION=TINV function returns the inverse of the two-tailed Student's t-"
"distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @dof < 1 TINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"Warning: the parameterization of this function is different from what is "
"used for, e.g., NORMSINV.  This is a common source of mistakes, but "
"necessary for compatibility.\n"
"\n"
"@EXAMPLES=\n"
"TINV(0.4,32) equals 0.852998454.\n"
"\n"
"@SEEALSO=TDIST,TTEST"
msgstr ""
"@FUNCTION=TINV\n"
"@SYNTAX=TINV(Wahrscheinlichkeit,Freiheitsgrad)\n"
"@DESCRIPTION=TINV liefert die inverse zweiseitige Student-t-Verteilung.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 oder @Freiheitsgrad < 1 ist, "
"liefert TINV einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TINV(0.4,32) liefert 0.852998454.\n"
"\n"
"@SEEALSO=TVERT,TTEST"

#: ../plugins/fn-stat/functions.c:1580
msgid ""
"@FUNCTION=FDIST\n"
"@SYNTAX=FDIST(x,dof1,dof2)\n"
"@DESCRIPTION=FDIST function returns the F probability distribution. @dof1 is "
"the numerator degrees of freedom and @dof2 is the denominator degrees of "
"freedom.\n"
"\n"
"* If @x < 0 FDIST returns #NUM! error.\n"
"* If @dof1 < 1 or @dof2 < 1, FDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FDIST(2,5,5) equals 0.232511319.\n"
"\n"
"@SEEALSO=FINV"
msgstr ""
"@FUNCTION=FVERT\n"
"@SYNTAX=FVERT(x,Freiheitsgrad1,Freiheitsgrad2)\n"
"@DESCRIPTION=FVERT liefert die F-Wahrscheinlichkeitsverteilung. "
"@Freiheitsgrad1 ist der Freiheitsgrad des Zählers und @Freiheitsgrad2 der "
"des Nenners.\n"
"\n"
"* Falls @x < 0 ist, liefert FVERT einen #ZAHL!-Fehler.\n"
"* Falls @Freiheitsgrad1 < 1 oder @Freiheitsgrad2 < 1 ist, liefert FVERT "
"einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"FVERT(2,5,5) liefert 0.232511319.\n"
"\n"
"@SEEALSO=FINV"

#: ../plugins/fn-stat/functions.c:1617
msgid ""
"@FUNCTION=LANDAU\n"
"@SYNTAX=LANDAU(x)\n"
"@DESCRIPTION=LANDAU returns the probability density p(x) at @x for the "
"Landau distribution using an approximation method. \n"
"@EXAMPLES=\n"
"LANDAU(0.34).\n"
"\n"
"@SEEALSO=RANDLANDAU"
msgstr ""
"@FUNCTION=LANDAU\n"
"@SYNTAX=LANDAU(x)\n"
"@DESCRIPTION=LANDAU liefert unter Anwendung einer Annäherungsmethode die "
"Wahrscheinlichkeitsdichte p(x) bei @x für die Landau-Verteilung\n"
"@EXAMPLES=\n"
"LANDAU(0.34).\n"
"\n"
"@SEEALSO=ZUFALLLANDAU"

#: ../plugins/fn-stat/functions.c:1762
msgid ""
"@FUNCTION=FINV\n"
"@SYNTAX=FINV(p,dof1,dof2)\n"
"@DESCRIPTION=FINV function returns the inverse of the F probability "
"distribution.\n"
"\n"
"* If @p < 0 or @p > 1 FINV returns #NUM! error.\n"
"* If @dof1 < 1 or @dof2 < 1 FINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FINV(0.2,2,4) equals 2.472135955.\n"
"\n"
"@SEEALSO=FDIST"
msgstr ""
"@FUNCTION=FINV\n"
"@SYNTAX=FINV(Wahrscheinlichkeit,Freiheitsgrad1,Freiheitsgrad2)\n"
"@DESCRIPTION=FINV liefert die inverse F-Wahrscheinlichkeitsverteilung.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert FINV einen #ZAHL!-"
"Fehler.\n"
"* Falls @Freiheitsgrad1 oder @Freiheitsgrad2 < 1 ist, liefert FINV einen "
"#ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"FINV(0.2,2,4) liefert 2.472135955.\n"
"\n"
"@SEEALSO=FVERT"

#: ../plugins/fn-stat/functions.c:1798
msgid ""
"@FUNCTION=BINOMDIST\n"
"@SYNTAX=BINOMDIST(n,trials,p,cumulative)\n"
"@DESCRIPTION=BINOMDIST function returns the binomial distribution. @n is the "
"number of successes, @trials is the total number of independent trials, @p "
"is the probability of success in trials, and @cumulative describes whether "
"to return the sum of the binomial function from 0 to @n.\n"
"\n"
"* If @n or @trials are non-integer they are truncated.\n"
"* If @n < 0 or @trials < 0 BINOMDIST returns #NUM! error.\n"
"* If @n > @trials BINOMDIST returns #NUM! error.\n"
"* If @p < 0 or @p > 1 BINOMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BINOMDIST(3,5,0.8,0) equals 0.2048.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=BINOMVERT\n"
"@SYNTAX=BINOMVERT(n,Versuche,Wahrscheinlichkeit,kumulativ)\n"
"@DESCRIPTION=BINOMVERT liefert die Binomialverteilung. @n ist die Anzahl der "
"Treffer, @Versuche die Gesamtanzahl unabhängiger Versuche, "
"@Wahrscheinlichkeit die Wahrscheinlichkeit, dass ein Versuch erfolgreich ist "
"und @kumulativ legt fest, ob BINOMVERT die Summe der Binomialverteilung von "
"0 bis @n liefert.\n"
"\n"
"* Falls @n oder @Versuche keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @n < 0 oder @Versuche < 0 ist, liefert BINOMDIST einen #ZAHL!-"
"Fehler.\n"
"* Falls @n > Versuche ist, liefert BINOMVERT einen #ZAHL!-Fehler.\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert BINOMVERT einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BINOMVERT(3,5,0.8,0) liefert 0.2048.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:1843
msgid ""
"@FUNCTION=CAUCHY\n"
"@SYNTAX=CAUCHY(x,a,cum)\n"
"@DESCRIPTION=CAUCHY returns the Cauchy distribution with scale parameter @a. "
"If @cum is TRUE, CAUCHY returns the cumulative distribution.\n"
"\n"
"* If @a < 0 CAUCHY returns #NUM! error.\n"
"* If @cum != TRUE and @cum != FALSE CAUCHY returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"CAUCHY(0.43,1,TRUE) returns 0.370735.\n"
"\n"
"@SEEALSO=RANDCAUCHY"
msgstr ""
"@FUNCTION=CAUCHY\n"
"@SYNTAX=CAUCHY(x,a,Kum)\n"
"@DESCRIPTION=CAUCHY liefert die Cauchy-Verteilung mit Skalierungsparameter "
"@a. Falls @Kum WAHR ist, liefert CAUCHY die kumulative Verteilung.\n"
"\n"
"* Falls @a < 0 ist, liefert CAUCHY einen #ZAHL!-Fehler.\n"
"* Falls @Kum != WAHR und @Kum != FALSCH, liefert einen #WERT!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"CAUCHY(0.43,1,WAHR) liefert 0.370735.\n"
"\n"
"@SEEALSO=ZUFALL.CAUCHY"

#: ../plugins/fn-stat/functions.c:1881
msgid ""
"@FUNCTION=CRITBINOM\n"
"@SYNTAX=CRITBINOM(trials,p,alpha)\n"
"@DESCRIPTION=CRITBINOM function returns the smallest value for which the "
"cumulative is greater than or equal to a given value. @n is the number of "
"trials, @p is the probability of success in trials, and @alpha is the "
"criterion value.\n"
"\n"
"* If @trials is a non-integer it is truncated.\n"
"* If @trials < 0 CRITBINOM returns #NUM! error.\n"
"* If @p < 0 or @p > 1 CRITBINOM returns #NUM! error.\n"
"* If @alpha < 0 or @alpha > 1 CRITBINOM returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CRITBINOM(10,0.5,0.75) equals 6.\n"
"\n"
"@SEEALSO=BINOMDIST"
msgstr ""
"@FUNCTION=BINOMVERT\n"
"@SYNTAX=BINOMVERT(n,Versuche,Wahrscheinlichkeit,kumulativ)\n"
"@DESCRIPTION=BINOMVERT liefert die Binomialverteilung. @n ist die Anzahl der "
"Treffer, @Versuche die Gesamtanzahl unabhängiger Versuche, "
"@Wahrscheinlichkeit die Wahrscheinlichkeit, dass ein Versuch erfolgreich ist "
"und @kumulativ legt fest, ob BINOMVERT die Summe der Binomialverteilung von "
"0 bis @n liefert.\n"
"\n"
"* Falls @n oder @Versuche keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @n < 0 oder @Versuche < 0 ist, liefert BINOMDIST einen #ZAHL!-"
"Fehler.\n"
"* Falls @n > Versuche ist, liefert BINOMVERT einen #ZAHL!-Fehler.\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert BINOMVERT einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"BINOMVERT(3,5,0.8,0) liefert 0.2048.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:1921
msgid ""
"@FUNCTION=PERMUT\n"
"@SYNTAX=PERMUT(n,k)\n"
"@DESCRIPTION=PERMUT function returns the number of permutations. @n is the "
"number of objects, @k is the number of objects in each permutation.\n"
"\n"
"* If @n = 0 PERMUT returns #NUM! error.\n"
"* If @n < @k PERMUT returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"PERMUT(7,3) equals 210.\n"
"\n"
"@SEEALSO=COMBIN"
msgstr ""
"@FUNCTION=VARIATIONEN\n"
"@SYNTAX=VARIATIONEN(n,k)\n"
"@DESCRIPTION=VARIATIONEN liefert die Anzahl der Permutationen. @n ist die "
"Objektanzahl, @k die Objektanzahl in jeder Permutation.\n"
"\n"
"* Falls @n = 0 ist, liefert VARIATIONEN einen #ZAHL!-Fehler.\n"
"* Falls @n < @k, liefert VARIATIONEN einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@BEISPIELE=\n"
"VARIATIONEN(7,3) liefert 210.\n"
"\n"
"@SEEALSO=KOMBINATIONEN"

#: ../plugins/fn-stat/functions.c:1957
msgid ""
"@FUNCTION=HYPGEOMDIST\n"
"@SYNTAX=HYPGEOMDIST(x,n,M,N[,cumulative])\n"
"@DESCRIPTION=HYPGEOMDIST function returns the hypergeometric distribution. "
"@x is the number of successes in the sample, @n is the number of trials, @M "
"is the number of successes overall, and @N is the population size.\n"
"\n"
"If the optional argument @cumulative is TRUE, the cumulative left tail will "
"be returned.\n"
"\n"
"* If @x,@n,@M or @N is a non-integer it is truncated.\n"
"* If @x,@n,@M or @N < 0 HYPGEOMDIST returns #NUM! error.\n"
"* If @x > @M or @n > @N HYPGEOMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HYPGEOMDIST(1,2,3,10) equals 0.4666667.\n"
"\n"
"@SEEALSO=BINOMDIST,POISSON"
msgstr ""
"@FUNCTION=HYPGEOMVERT\n"
"@SYNTAX=HYPGEOMVERT(x,n,M,N)\n"
"@DESCRIPTION=HYPGEOMVERT liefert die hypergeometrische Verteilung. @x ist "
"die Anzahl der Treffer in der Stichprobe, @n die Anzahl der Versuche, @M die "
"Gesamtanzahl der Treffer und @N die Größe der Grundgesamtheit.\n"
"\n"
"* Falls @x, @n, @M oder @N keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @x, @n, @M oder @N < 0 ist, liefert HYPERGEOMVERT einen #ZAHL!-"
"Fehler.\n"
"* Falls @x > @M oder @n > @N, liefert HYPERGEOMVERT einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"HYPERGEOMVERT(1,2,3,10) liefert 0.4666667.\n"
"\n"
"@SEEALSO=BINOMVERT,POISSON"

#: ../plugins/fn-stat/functions.c:2004
msgid ""
"@FUNCTION=CONFIDENCE\n"
"@SYNTAX=CONFIDENCE(x,stddev,size)\n"
"@DESCRIPTION=CONFIDENCE function returns the confidence interval for a mean. "
"@x is the significance level, @stddev is the population standard deviation, "
"and @size is the size of the sample.\n"
"\n"
"* If @size is non-integer it is truncated.\n"
"* If @size < 0 CONFIDENCE returns #NUM! error.\n"
"* If @size is 0 CONFIDENCE returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CONFIDENCE(0.05,1,33) equals 0.341185936.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=KONFIDENZ\n"
"@SYNTAX=KONFIDENZ(x,Stdabw,Größe)\n"
"@DESCRIPTION=KONFIDENZ liefert das Konfidenzintervall für einen Mittelwert. "
"@x ist das Signifikanzniveau, @Stdabw die Standardabweichung der "
"Grundgesamtheit und @Größe die Größe der Stichprobe.\n"
"\n"
"* Falls @Größe keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Falls @Größe < 0 ist, liefert KONFIDENZ einen #ZAHL!-Fehler.\n"
"* Falls @Größe 0 ist, liefert KONFIDENZ einen #DIV/0!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"CONFIDENCE(0.05,1,33) liefert 0.341185936.\n"
"\n"
"@SEEALSO=MITTELWERT"

#: ../plugins/fn-stat/functions.c:2042
msgid ""
"@FUNCTION=STANDARDIZE\n"
"@SYNTAX=STANDARDIZE(x,mean,stddev)\n"
"@DESCRIPTION=STANDARDIZE function returns a normalized value. @x is the "
"number to be normalized, @mean is the mean of the distribution, @stddev is "
"the standard deviation of the distribution.\n"
"\n"
"* If @stddev is 0 STANDARDIZE returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"STANDARDIZE(3,2,4) equals 0.25.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=NORMIEREN\n"
"@SYNTAX=NORMIEREN(x,Mittelwert,Stdabw)\n"
"@DESCRIPTION=NORMIEREN liefert einen normierten Wert. @x ist die zu "
"normierende Zahl, @Mittelwert der Mittelwert der Verteilung und @Stdabw die "
"Standardabweichung der Verteilung.\n"
"\n"
"* Falls @Stdabw 0 ist, liefert NORMIEREN einen #DIV/0!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"NORMIEREN(3,2,4) liefert 0.25.\n"
"\n"
"@SEEALSO=MITTELWERT"

#: ../plugins/fn-stat/functions.c:2079
msgid ""
"@FUNCTION=WEIBULL\n"
"@SYNTAX=WEIBULL(x,alpha,beta,cumulative)\n"
"@DESCRIPTION=WEIBULL function returns the Weibull distribution. If the "
"@cumulative boolean is true it will return:\n"
"\n"
"\t1 - exp (-(@x/@beta)^@alpha),\n"
"\n"
"otherwise it will return\n"
"\n"
"\t(@alpha/@beta^@alpha) * @x^(@alpha-1) * exp(-(@x/@beta^@alpha)).\n"
"\n"
"* If @x < 0 WEIBULL returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0 WEIBULL returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"WEIBULL(3,2,4,0) equals 0.213668559.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=WEIBULL\n"
"@SYNTAX=WEIBULL(x,Alpha,Beta,kumulativ)\n"
"@DESCRIPTION=WEIBULL liefert die Weibull-Verteilung. Falls der Boolsche Wert "
"@kumulativ WAHR ist, lautet die Funktion:\n"
"\n"
"\t1 - exp (-(@x/@beta)^@alpha),\n"
"\n"
"andernfalls liefert sie:\n"
"\n"
"\t(@alpha/@beta^@alpha) * @x^(@alpha-1) * exp(-(@x/@beta^@alpha)).\n"
"\n"
"* Falls @x < 0 ist, liefert WEIBULL einen #ZAHL!-Fehler.\n"
"* Falls @Alpha <= 0 oder @Beta <= 0 ist, liefert WEIBULL einen #ZAHL!-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WEIBULL(3,2,4,0) liefert 0.213668559.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:2121
#, fuzzy
msgid ""
"@FUNCTION=NORMDIST\n"
"@SYNTAX=NORMDIST(x,mean,stddev,cumulative)\n"
"@DESCRIPTION=The NORMDIST function returns the value of the probability "
"density function or the cumulative distribution function for the normal "
"distribution with the mean given by @mean, and the standard deviation given "
"by @stddev. If @cumulative is FALSE, NORMDIST returns the value of the "
"probability density function at the value @x. If @cumulative is TRUE, "
"NORMDIST returns the value of the cumulative distribution function at @x.\n"
"\n"
"* If @stddev is 0 NORMDIST returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMDIST(2,1,2,0) equals 0.176032663.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=NORMVERT\n"
"@SYNTAX=NORMVERT(x,Mittelwert,Stdabw,kumulativ)\n"
"@DESCRIPTION=NORMVERT liefert die kumulative Normalverteilung. @x ist der "
"Wert, für den die Verteilung erzeugt werden soll, @Mittelwert der Mittelwert "
"der Verteilung und @Stdabw die Standardabweichung.\n"
"\n"
"* Falls @Stdabw 0 ist, liefert NORMVERT einen #DIV/0!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"NORMDIST(2,1,2,0) liefert 0.176032663.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:2167
msgid ""
"@FUNCTION=NORMINV\n"
"@SYNTAX=NORMINV(p,mean,stddev)\n"
"@DESCRIPTION=NORMINV function returns the inverse of the normal cumulative "
"distribution. @p is the given probability corresponding to the normal "
"distribution, @mean is the arithmetic mean of the distribution, and @stddev "
"is the standard deviation of the distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @stddev <= 0 NORMINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMINV(0.76,2,3) equals 4.118907689.\n"
"\n"
"@SEEALSO=NORMDIST,NORMSDIST,NORMSINV,STANDARDIZE,ZTEST"
msgstr ""
"@FUNCTION=NORMINV\n"
"@SYNTAX=NORMINV(Wahrscheinlichkeit,Mittelwert,Stdabw)\n"
"@DESCRIPTION=NORMINV liefert die inverse Normalverteilung. "
"@Wahrscheinlichkeit ist die der Normalverteilung entsprechende "
"Wahrscheinlichkeit, @Mittelwert der arithmetische Mittelwert der Verteilung "
"und @Stdabw die Standardabweichung der Verteilung.\n"
"\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 oder @Stdabw <= 0 ist, liefert "
"NORMINV einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"NORMINV(0.76,2,3) liefert 4.118907689.\n"
"\n"
"@SEEALSO=NORMVERT,STANDNORMVERT,STANDNORMINV,NORMIEREN,ZTEST"

#: ../plugins/fn-stat/functions.c:2206
msgid ""
"@FUNCTION=KURT\n"
"@SYNTAX=KURT(n1, n2, ...)\n"
"@DESCRIPTION=KURT returns an unbiased estimate of the kurtosis of a data "
"set.\n"
"Note, that this is only meaningful if the underlying distribution really has "
"a fourth moment.  The kurtosis is offset by three such that a normal "
"distribution will have zero kurtosis.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If fewer than four numbers are given or all of them are equal KURT returns "
"#DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"KURT(A1:A5) equals 1.234546305.\n"
"\n"
"@SEEALSO=AVERAGE,VAR,SKEW,KURTP"
msgstr ""
"@FUNCTION=KURT\n"
"@SYNTAX=KURT(n1, n2, ...)\n"
"@DESCRIPTION=KURT liefert einen Schätzwert für die Kurtosis eines "
"Datensatzes.\n"
"\n"
"Beachten Sie, dass das Ergebnis lediglich aussagekräftig ist, falls die zu "
"Grunde liegende Verteilung ein viertes Moment hat. Die Kurtosis einer "
"symmetrischen (also normalen) Verteilung ist null.\n"
"\n"
"* Zeichenketten und leere Zellen werden nicht berücksichtigt.\n"
"* Falls weniger als vier Argumente übergeben werden oder sie alle gleich "
"sind, liefert KURT einen #DIV/0!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"KURT(A1:A5) 1.234546305.\n"
"\n"
"@SEEALSO=MITTELWERT,VARIANZ,SCHIEFE,KURTN"

#: ../plugins/fn-stat/functions.c:2247
msgid ""
"@FUNCTION=KURTP\n"
"@SYNTAX=KURTP(n1, n2, ...)\n"
"@DESCRIPTION=KURTP returns the population kurtosis of a data set.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If fewer than two numbers are given or all of them are equal KURTP returns "
"#DIV/0! error.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"KURTP(A1:A5) equals -0.691363424.\n"
"\n"
"@SEEALSO=AVERAGE,VARP,SKEWP,KURT"
msgstr ""
"@FUNCTION=SCHIEFEN\n"
"@SYNTAX=SCHIEFEN(n1, n2, ...)\n"
"@DESCRIPTION=SCHIEFEN liefert die Schiefe der Grundgesamtheit eines "
"Datensatzes.\n"
"\n"
"* Zeichenketten und leere Zellen werden nicht berücksichtigt.\n"
"* Falls weniger als zwei Argumente übergeben werden, liefert SCHIEFEN einen "
"#DIV/0!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"SCHIEFEN(A1:A5) 0.655256198.\n"
"\n"
"@SEEALSO=MITTELWERT,VARIANZN,SCHIEFE,KURT"

#: ../plugins/fn-stat/functions.c:2282
msgid ""
"@FUNCTION=AVEDEV\n"
"@SYNTAX=AVEDEV(n1, n2, ...)\n"
"@DESCRIPTION=AVEDEV returns the average of the absolute deviations of a data "
"set from their mean.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"AVEDEV(A1:A5) equals 7.84.\n"
"\n"
"@SEEALSO=STDEV"
msgstr ""
"@FUNCTION=MITTELABW\n"
"@SYNTAX=MITTELABW(n1, n2, ...)\n"
"@DESCRIPTION=MITTELABW liefert den Mittelwert der absoluten Abweichungen "
"eines Datensatzes vom Mittelwert.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"AVEDEV(A1:A5) 7.84.\n"
"\n"
"@SEEALSO=STABW"

#: ../plugins/fn-stat/functions.c:2315
msgid ""
"@FUNCTION=DEVSQ\n"
"@SYNTAX=DEVSQ(n1, n2, ...)\n"
"@DESCRIPTION=DEVSQ returns the sum of squares of deviations of a data set "
"from the sample mean.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"DEVSQ(A1:A5) equals 470.56.\n"
"\n"
"@SEEALSO=STDEV"
msgstr ""
"@FUNCTION=SUMQUADABW\n"
"@SYNTAX=SUMQUADABW(n1, n2, ...)\n"
"@DESCRIPTION=SUMQUADABW liefert die Quadratsumme der Abweichungen eines "
"Datensatzes vom ermittelten Mittelwert.\n"
"\n"
"* Zeichenketten und leere Zellen werden ignoriert.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"SUMQUADABW(A1:A5) 470.56.\n"
"\n"
"@SEEALSO=STDABW"

#: ../plugins/fn-stat/functions.c:2350
msgid ""
"@FUNCTION=FISHER\n"
"@SYNTAX=FISHER(x)\n"
"@DESCRIPTION=FISHER function returns the Fisher transformation at @x.\n"
"\n"
"* If @x is not a number, FISHER returns #VALUE! error.\n"
"* If @x <= -1 or @x >= 1, FISHER returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FISHER(0.332) equals 0.345074339.\n"
"\n"
"@SEEALSO=SKEW"
msgstr ""
"@FUNCTION=FISHER\n"
"@SYNTAX=FISHER(x)\n"
"@DESCRIPTION=FISHER liefert die Fisher-Transformation bei @x.\n"
"\n"
"* Falls @x keine Zahl ist, liefert FISHER einen #WERT!-Fehler.\n"
"* Falls @x <= -1 oder >= 1 ist, liefert FISHER einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"FISHER(0.332) liefert 0.345074339.\n"
"\n"
"@SEEALSO=SCHIEFE"

#: ../plugins/fn-stat/functions.c:2388
msgid ""
"@FUNCTION=POISSON\n"
"@SYNTAX=POISSON(x,mean,cumulative)\n"
"@DESCRIPTION=POISSON function returns the Poisson distribution. @x is the "
"number of events, @mean is the expected numeric value @cumulative describes "
"whether to return the sum of the Poisson function from 0 to @x.\n"
"\n"
"* If @x is a non-integer it is truncated.\n"
"* If @x < 0 POISSON returns #NUM! error.\n"
"* If @mean <= 0 POISSON returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"POISSON(3,6,0) equals 0.089235078.\n"
"\n"
"@SEEALSO=NORMDIST, WEIBULL"
msgstr ""
"@FUNCTION=POISSON\n"
"@SYNTAX=POISSON(x,Mittelwert,kumulativ)\n"
"@DESCRIPTION=POISSON liefert die Poisson-Verteilung. @x ist die "
"Ereignisanzahl, @Mittelwert der erwartete numerische Wert und @kumulativ "
"gibt an, ob die Summe der Poisson-Funktion von 0 bis @x geliefert werden "
"soll.\n"
"\n"
"* Falls @x keine Ganzzahl ist, werden die Nachkommastellen abgeschnitten.\n"
"* Falls @x < 0 ist, liefert POISSON einen #ZAHL!-Fehler.\n"
"* Falls @Mittelwert <= 0 ist, liefert POISSON einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"POISSON(3,6,0) liefert 0.089235078.\n"
"\n"
"@SEEALSO=NORMVERT, WEIBULL"

#: ../plugins/fn-stat/functions.c:2430
msgid ""
"@FUNCTION=PEARSON\n"
"@SYNTAX=PEARSON(array1,array2)\n"
"@DESCRIPTION=PEARSON returns the Pearson correlation coefficient of two data "
"sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=INTERCEPT,LINEST,RSQ,SLOPE,STEYX"
msgstr ""
"@FUNCTION=PEARSON\n"
"@SYNTAX=PEARSON(Datenfeld1,Datenfeld2)\n"
"@DESCRIPTION=PEARSON liefert die Pearsonschen Korrelationskoeffizienten "
"zweier Datensätze.\n"
"\n"
"* Zeichenketten und leere Zellen werden ignoriert.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-stat/functions.c:2458
msgid ""
"@FUNCTION=RSQ\n"
"@SYNTAX=RSQ(array1,array2)\n"
"@DESCRIPTION=RSQ returns the square of the Pearson correlation coefficient "
"of two data sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=CORREL,COVAR,INTERCEPT,LINEST,LOGEST,PEARSON,SLOPE,STEYX,TREND"
msgstr ""
"@FUNCTION=BESTIMMTHEITSMASS\n"
"@SYNTAX=BESTIMMTHEITSMASS(Datenfeld1,Datenfeld2)\n"
"@DESCRIPTION=BESTIMMTHEITSMASS liefert das Quadrat zweier Pearsonscher "
"Korrelationskoeffizienten zweier Datensätze.\n"
"\n"
"* Zeichenketten und leere Zellen werden ignoriert.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-stat/functions.c:2492
msgid ""
"@FUNCTION=MEDIAN\n"
"@SYNTAX=MEDIAN(n1, n2, ...)\n"
"@DESCRIPTION=MEDIAN returns the median of the given data set.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If even numbers are given MEDIAN returns the average of the two numbers in "
"the middle.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"MEDIAN(A1:A5) equals 21.3.\n"
"\n"
"@SEEALSO=AVERAGE,COUNT,COUNTA,DAVERAGE,MODE,SSMEDIAN,SUM"
msgstr ""
"@FUNCTION=MEDIAN\n"
"@SYNTAX=MEDIAN(n1, n2, ...)\n"
"@DESCRIPTION=MEDIAN liefert den Median des übergebenen Datensatzes.\n"
"\n"
"* Zeichenketten und leere Zellen werden ignoriert.\n"
"* Falls gerade Zahlen übergeben werden, liefert MEDIAN den Mittelwert der "
"beiden mittleren Zahlen.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"MEDIAN(A1:A5) 21.3.\n"
"\n"
"@SEEALSO= LATER"

#: ../plugins/fn-stat/functions.c:2528
msgid ""
"@FUNCTION=SSMEDIAN\n"
"@SYNTAX=SSMEDIAN(array[,interval)]\n"
"@DESCRIPTION=The SSMEDIAN function returns the median for grouped data as "
"commonly determined in the social sciences. The data points given in @array "
"are assumed to be the result of grouping data into intervals of length "
"@interval\n"
"\n"
"* If @interval is not given, SSMEDIAN uses 1.\n"
"* If @array is empty, SSMEDIAN returns #NUM! error.\n"
"* If @interval <= 0, SSMEDIAN returns #NUM! error.\n"
"* SSMEDIAN does not check whether the data points are at least @interval "
"apart.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, A3 contain numbers 7, 8, 8.  Then\n"
"SSMEDIAN(A1:A3, 1) equals 7.75.\n"
"\n"
"@SEEALSO=MEDIAN"
msgstr ""
"@FUNCTION=PERZENTILE\n"
"@SYNTAX=PERZENTILE(Datenfeld,k)\n"
"@DESCRIPTION=PERZENTILE liefert die 100*@kte Perzentile der übergebenen "
"Datenpunkte (also eine Zahl x, bei der der @k-te Teil der Datenpunkte "
"kleiner als x ist).\n"
"\n"
"* Falls @Datenfeld leer ist, liefert PERZENTILE einen #ZAHL!-Fehler.\n"
"* Falls @k < 0 oder > 1 ist, liefert PERZENTILE einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"PERZENTILE(A1:A5,0.42) 20.02.\n"
"\n"
"@SEEALSO=QUARTILE"

#: ../plugins/fn-stat/functions.c:2634
#, fuzzy
msgid ""
"@FUNCTION=LARGE\n"
"@SYNTAX=LARGE(n, k)\n"
"@DESCRIPTION=LARGE returns the k-th largest value in a data set.\n"
"\n"
"* If data set is empty LARGE returns #NUM! error.\n"
"* If @k <= 0 or @k is greater than the number of data items given LARGE "
"returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"LARGE(A1:A5,2) equals 25.9.\n"
"LARGE(A1:A5,4) equals 17.3.\n"
"\n"
"@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,SMALL"
msgstr ""
"@FUNCTION=KGRÖSSTE\n"
"@SYNTAX=KGRÖSSTE(n1, n2, ..., k)\n"
"@DESCRIPTION=KGRÖSSTE liefert den @k-t größten Wert in einem Datensatz.\n"
"\n"
"* Falls kein Datensatz übergeben wird, liefert KGRÖSSTE einen #ZAHL!-"
"Fehler.\n"
"* Falls @k <= 0 oder @k größer ist als die Anzahl der übergebenen "
"Datenobjekte, liefert KGRÖSSTE einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert \n"
"KGRÖSSTE(A1:A5,2) 25.9 und\n"
"KGRÖSSTE(A1:A5,4) 17.3.\n"
"\n"
"@SEEALSO=PERZENTILE,QUANTILSRANG,QUARTILE,KKLEINSTE"

#: ../plugins/fn-stat/functions.c:2685
#, fuzzy
msgid ""
"@FUNCTION=SMALL\n"
"@SYNTAX=SMALL(n, k)\n"
"@DESCRIPTION=SMALL returns the k-th smallest value in a data set.\n"
"\n"
"* If data set is empty SMALL returns #NUM! error.\n"
"* If @k <= 0 or @k is greater than the number of data items given SMALL "
"returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"SMALL(A1:A5,2) equals 17.3.\n"
"SMALL(A1:A5,4) equals 25.9.\n"
"\n"
"@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,LARGE"
msgstr ""
"@FUNCTION=KKLEINSTE\n"
"@SYNTAX=KKLEINSTE(n1, n2, ..., k)\n"
"@DESCRIPTION=KKLEINSTE liefert den @k-t kleinsten Wert in einem Datensatz.\n"
"\n"
"* Falls kein Datensatz übergeben wird, liefert KKLEINSTE einen #ZAHL!-"
"Fehler.\n"
"* Falls @k <= 0 oder @k größer ist als die Anzahl der übergebenen "
"Datenobjekte, liefert KKLEINSTE einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert \n"
"KKLEINSTE(A1:A5,2) 17.3 und\n"
"KKLEINSTE(A1:A5,4) 25.9.\n"
"\n"
"@SEEALSO=PERZENTILE,QUANTILSRANG,QUARTILE,KKGRÖSSTE"

#: ../plugins/fn-stat/functions.c:2762
msgid ""
"@FUNCTION=PROB\n"
"@SYNTAX=PROB(x_range,prob_range,lower_limit[,upper_limit])\n"
"@DESCRIPTION=PROB function returns the probability that values in a range or "
"an array are between two limits. If @upper_limit is not given, PROB returns "
"the probability that values in @x_range are equal to @lower_limit.\n"
"\n"
"* If the sum of the probabilities in @prob_range is not equal to 1 PROB "
"returns #NUM! error.\n"
"* If any value in @prob_range is <=0 or > 1, PROB returns #NUM! error.\n"
"* If @x_range and @prob_range contain a different number of data entries, "
"PROB returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=BINOMDIST,CRITBINOM"
msgstr ""
"@FUNCTION=WAHRSCHBEREICH\n"
"@SYNTAX=WAHRSCHBEREICH(X_Bereich,Wahrscheinlichkeitsbereich,limes_inferior[,"
"limes_superior])\n"
"@DESCRIPTION=WAHRSCHBEREICH liefert die Wahrscheinlichkeit, dass Werte in "
"einem Bereich oder einer Zeichenkette innerhalb zweier Grenzwerte liegen.\n"
"\n"
"* Falls @limes_superior nicht übergeben wird, liefert WAHRSCHBEREICH die "
"Wahrscheinlichkeit, dass Werte in @X_Bereich gleich @limes_inferior sind.\n"
"* Falls die Summe der Wahrscheinlichkeiten in @Wahrscheinlichkeitsbereich "
"ungleich 1 ist, liefert WAHRSCHBEREICH einen #ZAHL!-Fehler.\n"
"* Falls ein Wert in @Wahrscheinlichkeitsbereich <=0 oder > 1 ist, liefert "
"WAHRSCHBEREICH einen #ZAHL!-Fehler.\n"
"* Falls @X_Bereich und @Wahrscheinlichkeitsbereich eine unterschiedliche "
"Anzahl an Dateneinträgen haben, liefert WAHRSCHBEREICH einen #NV!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=BINOMVERT,KRITBINOM"

#: ../plugins/fn-stat/functions.c:2857
msgid ""
"@FUNCTION=STEYX\n"
"@SYNTAX=STEYX(known_y's,known_x's)\n"
"@DESCRIPTION=STEYX function returns the standard error of the predicted y-"
"value for each x in the regression.\n"
"\n"
"* If @known_y's and @known_x's are empty or have a different number of "
"arguments then STEYX returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"STEYX(A1:A5,B1:B5) equals 1.101509979.\n"
"\n"
"@SEEALSO=PEARSON,RSQ,SLOPE"
msgstr ""
"@FUNCTION=STFEHLERYX\n"
"@SYNTAX=STFEHLERYX(Y_Werte,X_Werte)\n"
"@DESCRIPTION=STFEHLERYX liefert den Standardfehler des vorhergesagten y-"
"Wertes zu jedem x in der Regression.\n"
"\n"
"* Falls @X_Werte und @X_Werte leer sind oder eine unterschiedliche "
"Argumentanzahl haben, liefert STFEHLERYX einen #NV-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1 und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 und "
"42.7. Dann liefert\n"
"STFEHLERYX(A1:A5,B1:B5) 1.101509979.\n"
"\n"
"@SEEALSO= LATER"

#: ../plugins/fn-stat/functions.c:3015
msgid ""
"@FUNCTION=ZTEST\n"
"@SYNTAX=ZTEST(ref,x)\n"
"@DESCRIPTION=ZTEST returns the two-tailed probability of a z-test.\n"
"\n"
"@ref is the data set and @x is the value to be tested.\n"
"\n"
"* If @ref contains less than two data items ZTEST returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"ZTEST(A1:A5,20) equals 0.254717826.\n"
"\n"
"@SEEALSO=CONFIDENCE,NORMDIST,NORMINV,NORMSDIST,NORMSINV,STANDARDIZE"
msgstr ""
"@FUNCTION=ZTEST\n"
"@SYNTAX=ZTEST(Bezug,x)\n"
"@DESCRIPTION=ZTEST liefert die zweiseitige Wahrscheinlichkeit eines Z-"
"Tests.\n"
"\n"
"@Bezug ist der Datensatz und @x der zu prüfende Wert.\n"
"\n"
"* Falls @Bezug weniger als zwei Datenobjekte enthält, liefert ZTEST einen "
"#DIV/0!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"ZTEST(A1:A5,20) 0.254717826.\n"
"\n"
"@SEEALSO=LATER"

#: ../plugins/fn-stat/functions.c:3071
msgid ""
"@FUNCTION=AVERAGEA\n"
"@SYNTAX=AVERAGEA(number1,number2,...)\n"
"@DESCRIPTION=AVERAGEA returns the average of the given arguments.  Numbers, "
"text and logical values are included in the calculation too. If the cell "
"contains text or the argument evaluates to FALSE, it is counted as value "
"zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  "
"Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"AVERAGEA(A1:A5) equals 18.94.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=MITTELWERT2\n"
"@SYNTAX=MITTELWERT2(Argument1,Argument2[,...])\n"
"@DESCRIPTION=MITTELWERT2 berechnet den Mittelwert der übergebenen Argumente. "
"Zahlen, Text und logische Werte werden ebenfalls in die Berechnung "
"einbezogen. Falls die Zelle Text enthält oder das Argument FALSCH ist, wird "
"sie bzw. es als Wert null (0) gewertet, falls es WAHR ist als eins (1). "
"Beachten Sie, dass leere Zellen bei der Berechnung nicht berücksichtigt "
"werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"\"fehlt\", 25.9 und 40.1. Dann liefert\n"
"MITTELWERT2(A1:A5) 18.94.\n"
"\n"
"@SEEALSO=MITTELWERT"

#: ../plugins/fn-stat/functions.c:3109
msgid ""
"@FUNCTION=MAXA\n"
"@SYNTAX=MAXA(number1,number2,...)\n"
"@DESCRIPTION=MAXA returns the largest value of the given arguments.  "
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"MAXA(A1:A5) equals 40.1.\n"
"\n"
"@SEEALSO=MAX,MINA"
msgstr ""
"@FUNCTION=MAX2\n"
"@SYNTAX=MAX2(Argument1,Argument2[,...])\n"
"@DESCRIPTION=MAX2 liefert den Wert des größten übergeben Arguments. Zahlen, "
"Text und logische Werte werden ebenfalls in die Berechnung einbezogen. Falls "
"die Zelle Text enthält oder das Argument FALSCH ist, wird sie bzw. es als "
"Wert null (0) gewertet, falls es WAHR ist als eins (1). Beachten Sie, dass "
"leere Zellen bei der Berechnung nicht berücksichtigt werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"\"fehlt\", 25.9 und 40.1. Dann liefert\n"
"MAX2(A1:A5) 40.1.\n"
"\n"
"@SEEALSO=MAX,MIN2"

#: ../plugins/fn-stat/functions.c:3147
msgid ""
"@FUNCTION=MINA\n"
"@SYNTAX=MINA(number1,number2,...)\n"
"@DESCRIPTION=MINA returns the smallest value of the given arguments.  "
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"MINA(A1:A5) equals 0.\n"
"\n"
"@SEEALSO=MIN,MAXA"
msgstr ""
"@FUNCTION=MIN2\n"
"@SYNTAX=MIN2(Argument1,Argument2[,...])\n"
"@DESCRIPTION=MIN2 liefert den Wert des kleinsten übergeben Arguments. "
"Zahlen, Text und logische Werte werden ebenfalls in die Berechnung "
"einbezogen. Falls die Zelle Text enthält oder das Argument FALSCH ist, wird "
"sie bzw. es als Wert null (0) gewertet, falls es WAHR ist als eins (1). "
"Beachten Sie, dass leere Zellen bei der Berechnung nicht berücksichtigt "
"werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"\"fehlt\", 25.9 und 40.1. Dann liefert\n"
"MAX2(A1:A5) 11.4.\n"
"\n"
"@SEEALSO=MIN,MAX2"

#: ../plugins/fn-stat/functions.c:3185
msgid ""
"@FUNCTION=VARA\n"
"@SYNTAX=VARA(number1,number2,...)\n"
"@DESCRIPTION=VARA calculates sample variance of the given sample.\n"
"To get the true variance of a complete population use VARPA.\n"
"VARA is also known as the N-1-variance.\n"
"Under reasonable conditions, it is the maximum-likelihood estimator for the "
"true variance.\n"
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"VARA(A1:A5) equals 228.613.\n"
"\n"
"@SEEALSO=VAR,VARPA"
msgstr ""
"@FUNCTION=VARIANZ2\n"
"@SYNTAX=VARIANZ2(Zahl1,Zahl2,...)\n"
"@DESCRIPTION=VARIANZ2 liefert die Varianz auf Basis einer Stichprobe. In die "
"Berechnung werden Zahlen, Text und logische Werte einbezogen. Falls die "
"Zelle Text enthält oder das Argument FALSCH ist, wird es als Wert null (0) "
"angesehen. Falls das Argument WAHR ist, als eins (1). Beachten Sie, dass "
"leere Zellen ignoriert werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen bzw. "
"Zeichenketten 11.4, 17.3, \"fehlt\", 25.9 und 40.1. Dann liefert\n"
"VARIANZ2(A1:A5) 228.613.\n"
"\n"
"@SEEALSO=VARIANZ,VARIANZN2"

#: ../plugins/fn-stat/functions.c:3229
msgid ""
"@FUNCTION=VARPA\n"
"@SYNTAX=VARPA(number1,number2,...)\n"
"@DESCRIPTION=VARPA calculates the variance of an entire population.\n"
"VARPA is also known as the N-variance.\n"
"Numbers, text and logical values are included in the calculation too.  If "
"the cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"VARPA(A1:A5) equals 182.8904.\n"
"\n"
"@SEEALSO=VARA,VARP"
msgstr ""
"@FUNCTION=VARIANZN2\n"
"@SYNTAX=VARIANZN2(Zahl1,Zahl2,...)\n"
"@DESCRIPTION=VARIANZN2 liefert die Varianz auf Basis einer Stichprobe. In "
"die Berechnung werden Zahlen, Text und logische Werte einbezogen. Falls die "
"Zelle Text enthält oder das Argument FALSCH ist, wird es als Wert null (0) "
"angesehen. Falls das Argument WAHR ist, als eins (1). Beachten Sie, dass "
"leere Zellen ignoriert werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen bzw. "
"Zeichenketten 11.4, 17.3, \"fehlt\", 25.9 und 40.1. Dann liefert\n"
"VARIANZ2(A1:A5) 228.613.\n"
"\n"
"@SEEALSO=VARIANZ,VARIANZN2"

#: ../plugins/fn-stat/functions.c:3268
msgid ""
"@FUNCTION=STDEVA\n"
"@SYNTAX=STDEVA(number1,number2,...)\n"
"@DESCRIPTION=STDEVA returns the sample standard deviation of the given "
"sample.\n"
"To obtain the population standard deviation of a whole population use "
"STDEVPA.\n"
"STDEVA is also known as the N-1-standard deviation.\n"
"Under reasonable conditions, it is the maximum-likelihood estimator for the "
"true population standard deviation.\n"
"Numbers, text and logical values are included in the calculation too.  If "
"the cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"STDEVA(A1:A5) equals 15.119953704.\n"
"\n"
"@SEEALSO=STDEV,STDEVPA"
msgstr ""
"@FUNCTION=VARIANZN2\n"
"@SYNTAX=VARIANZN2(Zahl1,Zahl2,...)\n"
"@DESCRIPTION=VARIANZN2 liefert die Varianz auf Basis einer Stichprobe. In "
"die Berechnung werden Zahlen, Text und logische Werte einbezogen. Falls die "
"Zelle Text enthält oder das Argument FALSCH ist, wird es als Wert null (0) "
"angesehen. Falls das Argument WAHR ist, als eins (1). Beachten Sie, dass "
"leere Zellen ignoriert werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen bzw. "
"Zeichenketten 11.4, 17.3, \"fehlt\", 25.9 und 40.1. Dann liefert\n"
"VARIANZ2(A1:A5) 228.613.\n"
"\n"
"@SEEALSO=VARIANZ,VARIANZN2"

#: ../plugins/fn-stat/functions.c:3313
msgid ""
"@FUNCTION=STDEVPA\n"
"@SYNTAX=STDEVPA(number1,number2,...)\n"
"@DESCRIPTION=STDEVPA returns the population standard deviation of an entire "
"population.\n"
"This is also known as the N-standard deviation\n"
"Numbers, text and logical values are included in the calculation too.  If "
"the cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"STDEVPA(A1:A5) equals 13.523697719.\n"
"\n"
"@SEEALSO=STDEVA,STDEVP"
msgstr ""
"@FUNCTION=VARIANZN2\n"
"@SYNTAX=VARIANZN2(Zahl1,Zahl2,...)\n"
"@DESCRIPTION=VARIANZN2 liefert die Varianz auf Basis einer Stichprobe. In "
"die Berechnung werden Zahlen, Text und logische Werte einbezogen. Falls die "
"Zelle Text enthält oder das Argument FALSCH ist, wird es als Wert null (0) "
"angesehen. Falls das Argument WAHR ist, als eins (1). Beachten Sie, dass "
"leere Zellen ignoriert werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen bzw. "
"Zeichenketten 11.4, 17.3, \"fehlt\", 25.9 und 40.1. Dann liefert\n"
"VARIANZ2(A1:A5) 228.613.\n"
"\n"
"@SEEALSO=VARIANZ,VARIANZN2"

#: ../plugins/fn-stat/functions.c:3353
msgid ""
"@FUNCTION=PERCENTRANK\n"
"@SYNTAX=PERCENTRANK(array,x[,significance])\n"
"@DESCRIPTION=PERCENTRANK function returns the rank of a data point in a data "
"set.  @array is the range of numeric values, @x is the data point which you "
"want to rank, and the optional @significance specifies the number of "
"significant digits for the returned value, truncating the remainder.  If "
"@significance is omitted, PERCENTRANK uses three digits.\n"
"\n"
"* If @array contains no data points, PERCENTRANK returns #NUM! error.\n"
"* If @significance is less than one, PERCENTRANK returns #NUM! error.\n"
"* If @x exceeds the largest value or is less than the smallest value in "
"@array, PERCENTRANK returns #NUM! error.\n"
"* If @x does not match any of the values in @array or @x matches more than "
"once, PERCENTRANK interpolates the returned value.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,QUARTILE,SMALL"
msgstr ""

#: ../plugins/fn-stat/functions.c:3466
msgid ""
"@FUNCTION=PERCENTILE\n"
"@SYNTAX=PERCENTILE(array,k)\n"
"@DESCRIPTION=PERCENTILE function returns the 100*@k-th percentile of the "
"given data points (that is, a number x such that a fraction @k of the data "
"points are less than x).\n"
"\n"
"* If @array is empty, PERCENTILE returns #NUM! error.\n"
"* If @k < 0 or @k > 1, PERCENTILE returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"PERCENTILE(A1:A5,0.42) equals 20.02.\n"
"\n"
"@SEEALSO=QUARTILE"
msgstr ""
"@FUNCTION=PERZENTILE\n"
"@SYNTAX=PERZENTILE(Datenfeld,k)\n"
"@DESCRIPTION=PERZENTILE liefert die 100*@kte Perzentile der übergebenen "
"Datenpunkte (also eine Zahl x, bei der der @k-te Teil der Datenpunkte "
"kleiner als x ist).\n"
"\n"
"* Falls @Datenfeld leer ist, liefert PERZENTILE einen #ZAHL!-Fehler.\n"
"* Falls @k < 0 oder > 1 ist, liefert PERZENTILE einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"PERZENTILE(A1:A5,0.42) 20.02.\n"
"\n"
"@SEEALSO=QUARTILE"

#: ../plugins/fn-stat/functions.c:3518
msgid ""
"@FUNCTION=QUARTILE\n"
"@SYNTAX=QUARTILE(array,quart)\n"
"@DESCRIPTION=QUARTILE function returns the quartile of the given data "
"points.\n"
"\n"
"If @quart is equal to: QUARTILE returns:\n"
"0                      the smallest value of @array.\n"
"1                      the first quartile\n"
"2                      the second quartile\n"
"3                      the third quartile\n"
"4                      the largest value of @array.\n"
"\n"
"* If @array is empty, QUARTILE returns #NUM! error.\n"
"* If @quart < 0 or @quart > 4, QUARTILE returns #NUM! error.\n"
"* If @quart is not an integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"QUARTILE(A1:A5,1) equals 17.3.\n"
"\n"
"@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,SMALL"
msgstr ""
"@FUNCTION=QUARTILE\n"
"@SYNTAX=QUARTILE(Feld,Quart)\n"
"@DESCRIPTION=QUARTILE liefert die Quartile der angegebenen Datenpunkte.\n"
"\n"
"Falls @Quart gleich: liefert QUARTILE:\n"
"0                      den kleinsten Wert von @Feld.\n"
"1                      die erste Quartile\n"
"2                      die zweite Quartile\n"
"3                      die dritte Quartile\n"
"4                      den größten Wert von @Feld.\n"
"\n"
"* Falls @Feld leer ist, liefert QUARTILE einen #ZAHL!-Fehler.\n"
"* Falls @Quart < 1 oder > 4 ist, liefert QUARTILE einen #ZAHL!-Fehler.\n"
"* Falls @Quart keine Ganzzahl ist, werden die Nachkommastellen "
"abgeschnitten.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1. Dann liefert\n"
"QUARTILE(A1:A5,1) 17.3.\n"
"\n"
"@SEEALSO= :: LATER"

#: ../plugins/fn-stat/functions.c:3577
msgid ""
"@FUNCTION=FTEST\n"
"@SYNTAX=FTEST(array1,array2)\n"
"@DESCRIPTION=FTEST function returns the two-tailed probability that the "
"variances in the given two data sets are not significantly different.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"FTEST(A1:A5,B1:B5) equals 0.510815017.\n"
"\n"
"@SEEALSO=FDIST,FINV"
msgstr ""
"@FUNCTION=FTEST\n"
"@SYNTAX=FTEST(Datenfeld1,Datenfeld2)\n"
"@DESCRIPTION=FTEST liefert die zweiseitige Wahrscheinlichkeit, dass die "
"Varianzen in den zwei übergebenen Datensätzen nicht signifikant verschieden "
"sind.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1, und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 "
"und 42.7. Dann liefert\n"
"FTEST(A1:A5,B1:B5) 0.510815017.\n"
"\n"
"@SEEALSO=FVERT,FINV"

#: ../plugins/fn-stat/functions.c:3642
msgid ""
"@FUNCTION=TTEST\n"
"@SYNTAX=TTEST(array1,array2,tails,type)\n"
"@DESCRIPTION=TTEST function returns the probability of a Student's t-Test. \n"
"@array1 is the first data set and @array2 is the second data set.  If @tails "
"is one, TTEST uses the one-tailed distribution and if @tails is two, TTEST "
"uses the two-tailed distribution.  @type determines the kind of the test:\n"
"\n"
"\t1  Paired test\n"
"\t2  Two-sample equal variance\n"
"\t3  Two-sample unequal variance\n"
"\n"
"* If the data sets contain a different number of data points and the test is "
"paired (@type one), TTEST returns the #N/A error.\n"
"* @tails and @type are truncated to integers.\n"
"* If @tails is not one or two, TTEST returns #NUM! error.\n"
"* If @type is any other than one, two, or three, TTEST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.\n"
"TTEST(A1:A5,B1:B5,2,1) equals 0.006255239.\n"
"TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.\n"
"TTEST(A1:A5,B1:B5,1,3) equals 0.113821797.\n"
"\n"
"@SEEALSO=FDIST,FINV"
msgstr ""
"@FUNCTION=TTEST\n"
"@SYNTAX=TTEST(Datenfeld1,Datenfeld2,Tails,Typ)\n"
"@DESCRIPTION=TTEST liefert die Wahrscheinlichkeit eines Student's-T-Tests. \n"
"@Datenfeld1 ist der erste und @Datenfeld2 der zweite Datensatz. Falls @Tails "
"1 ist, verwendet TTEST die one-tailed und falls @Tails 2 ist, die two-tailed "
"Verteilung. @Typ legt den Typ des Tests fest:\n"
"\n"
"\t1 Gepaarter Test\n"
"\t2 Zwei Stichproben, gleiche Varianz\n"
"\t3  Zwei Stichproben, unterschiedliche Varianz\n"
"\n"
"* Falls die Datensätze eine unterschiedliche Anzahl an Datenpunkten "
"enthalten und der Test gepaart ist (@Typ 1), liefert TTEST einen #NV!-"
"Fehler.\n"
"* @tails and @type are truncated to integers.\n"
"* Falls @Tails weder 1 noch 2 ist, liefert TTEST einen #ZAHL!-Fehler.\n"
"* Falls @Typ weder 1, noch 2 oder 3 ist, liefert TTEST einen #ZAHL!-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1 und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 "
"sowie 42.7. Dann liefert\n"
"TTEST(A1:A5,B1:B5,1,1) 0.003127619,\n"
"TTEST(A1:A5,B1:B5,2,1) 0.006255239,\n"
"TTEST(A1:A5,B1:B5,1,2) 0.111804322 und\n"
"TTEST(A1:A5,B1:B5,1,3) 0.113821797.\n"
"\n"
"@SEEALSO=FVERT,FINV"

#: ../plugins/fn-stat/functions.c:3826
msgid ""
"@FUNCTION=FREQUENCY\n"
"@SYNTAX=FREQUENCY(data_array,bins_array)\n"
"@DESCRIPTION=FREQUENCY function counts how often given values occur within a "
"range of values.  The results are given as an array.\n"
"\n"
"@data_array is a data array for which you want to count the frequencies.  "
"@bin_array is an array containing the intervals into which you want to group "
"the values in data_array.  If the @bin_array is empty, FREQUENCY returns the "
"number of data points in @data_array.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=HÄUFIGKEIT\n"
"@SYNTAX=HÄUFIGKEIT(Datenfeld,Klassenfeld)\n"
"@DESCRIPTION=HÄUFIGKEIT zählt, wie oft die übergebenen Werte innerhalb eines "
"Wertebereichs. Das Ergebnis wird als Datenfeld übergeben.\n"
"\n"
"@Datenfeld ist das Datenfeld, in dem die Häufigkeit berechnet werden soll. "
"@Klassen_Datenfeld ist das Datenfeld, das die Intervalle enthält, in denen "
"die Werte in @Datenfeld gruppiert werden sollen. Falls @Klassen_Datenfeld "
"leer ist, liefert HÄUFIGKEIT die Anzahl der Datenpunkte in @Datenfeld.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-stat/functions.c:3906
msgid ""
"@FUNCTION=LINEST\n"
"@SYNTAX=LINEST(known_y's[,known_x's[,const[,stat]]])\n"
"@DESCRIPTION=LINEST function calculates the ``least squares'' line that best "
"fit to your data in @known_y's.  @known_x's contains the corresponding x's "
"where y=mx+b.\n"
"\n"
"LINEST returns an array having two columns and one row.  The slope (m) of "
"the regression line y=mx+b is given in the first column and the y-intercept "
"(b) in the second.\n"
"\n"
"If @stat is TRUE, extra statistical information will be returned. Extra "
"statistical information is written below the regression line coefficients in "
"the result array.  Extra statistical information consists of four rows of "
"data.  In the first row the standard error values for the coefficients m1, "
"(m2, ...), b are represented.  The second row contains the square of R and "
"the standard error for the y estimate.  The third row contains the F-"
"observed value and the degrees of freedom.  The last row contains the "
"regression sum of squares and the residual sum of squares.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
"* If @known_y's and @known_x's have unequal number of data points, LINEST "
"returns #NUM! error.\n"
"* If @const is FALSE, the line will be forced to go through the origin, i."
"e., b will be zero. The default is TRUE.\n"
"* The default of @stat is FALSE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGEST,TREND"
msgstr ""

#: ../plugins/fn-stat/functions.c:4169
msgid ""
"@FUNCTION=LOGREG\n"
"@SYNTAX=LOGREG(known_y's[,known_x's[,const[,stat]]])\n"
"@DESCRIPTION=LOGREG function transforms your x's to z=ln(x) and applies the "
"``least squares'' method to fit the linear equation\n"
"y = m * z + b \n"
"to your y's and z's --- equivalent to fitting the equation\n"
"y = m * ln(x) + b \n"
"to y's and x's. \n"
"\n"
"If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGREG returns an "
"array having two columns and one row. m is given in the first column and b "
"in the second. \n"
"\n"
"If @known_y's and @known_x's have unequal number of data points, LOGREG "
"returns #NUM! error.\n"
"\n"
"If @const is FALSE, the curve will be forced to go through [1; 0], i.e., b "
"will be zero. The default is TRUE.\n"
"\n"
"If @stat is TRUE, extra statistical information will be returned which "
"applies to the state AFTER transformation to z. Extra statistical "
"information is written below m and b in the result array.  Extra statistical "
"information consists of four rows of data.  In the first row the standard "
"error values for the coefficients m, b are represented.  The second row "
"contains the square of R and the standard error for the y estimate. The "
"third row contains the F-observed value and the degrees of freedom.  The "
"last row contains the regression sum of squares and the residual sum of "
"squares.The default of @stat is FALSE.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGFIT,LINEST,LOGEST"
msgstr ""

#: ../plugins/fn-stat/functions.c:4439
msgid ""
"@FUNCTION=LOGFIT\n"
"@SYNTAX=LOGFIT(known_y's,known_x's)\n"
"@DESCRIPTION=LOGFIT function applies the ``least squares'' method to fit the "
"logarithmic equation\n"
"y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 \n"
"to your data. The graph of the equation is a logarithmic curve moved "
"horizontally by c and possibly mirrored across the y-axis (if sign = -1).\n"
"\n"
"LOGFIT returns an array having five columns and one row. `Sign' is given in "
"the first column, `a', `b', and `c' are given in columns 2 to 4. Column 5 "
"holds the sum of squared residuals.\n"
"\n"
"An error is returned when there are less than 3 different x's or y's, or "
"when the shape of the point cloud is too different from a ``logarithmic'' "
"one.\n"
"\n"
"You can use the above formula \n"
"= a + b * ln(sign * (x - c)) \n"
"or rearrange it to \n"
"= (exp((y - a) / b)) / sign + c \n"
"to compute unknown y's or x's, respectively. \n"
"\n"
"Technically, this is non-linear fitting by trial-and-error. The accuracy of "
"`c' is: width of x-range -> rounded to the next smaller (10^integer), times "
"0.000001. There might be cases in which the returned fit is not the best "
"possible.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGREG,LINEST,LOGEST"
msgstr ""

#: ../plugins/fn-stat/functions.c:4542
msgid ""
"@FUNCTION=TREND\n"
"@SYNTAX=TREND(known_y's[,known_x's[,new_x's[,const]]])\n"
"@DESCRIPTION=TREND function estimates future values of a given data set "
"using the ``least squares'' line that best fit to your data. @known_y's is "
"the y-values where y=mx+b and @known_x's contains the corresponding x-"
"values.  @new_x's contains the x-values for which you want to estimate the y-"
"values. If @const is FALSE, the line will be forced to go through the "
"origin, i.e., b will be zero.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
"* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
"* If @const is omitted, it is assumed to be TRUE.\n"
"* If @known_y's and @known_x's have unequal number of data points, TREND "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}.\n"
"\n"
"@SEEALSO=LINEST"
msgstr ""
"@FUNCTION=TREND\n"
"@SYNTAX=TREND(Y_Werte[,X_Werte],Neue_X_Werte[,konstant]])\n"
"@DESCRIPTION=TREND schätzt die zukünftigen Werte des übergebenen Datensatzes "
"ab, wobei die Näherungsgerade verwendet wird, die am besten zu den Daten "
"passt. @Y_Werte sind die Y-Werte, wobei y=mx+b gilt und @X_Werte enthält die "
"entsprechenden X-Werte. @Neue_X_Werte enthält die X-Werte, für die Sie die Y-"
"Werte abschätzen lassen wollen.\n"
"\n"
"* Falls @X_Werte nicht übergeben wird, wird ein Datenfeld der Form {1, 2, "
"3, ...} verwendet.\n"
"* Falls @Neue_X_Werte nicht übergeben wird, wird dieses gleich @X_Werte "
"angenommen.\n"
"* Falls @Y_Werte und X_Werte nicht die gleiche Anzahl an Datenpunkten "
"enthalten, liefert TREND einen #ZAHL!-Fehler.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1 und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 und "
"42.7. Dann liefert\n"
"TREND(A1:A5,B1:B5) = {12.1, 15.7, 21.6, 26.7, 39.7}.\n"
"\n"
"@SEEALSO=RGP"

#: ../plugins/fn-stat/functions.c:4660
msgid ""
"@FUNCTION=LOGEST\n"
"@SYNTAX=LOGEST(known_y's[,known_x's,const,stat])\n"
"@DESCRIPTION=LOGEST function applies the ``least squares'' method to fit an "
"exponential curve of the form\n"
"\n"
"\ty = b * m{1}^x{1} * m{2}^x{2}... to your data.\n"
"\n"
"If @stat is TRUE, extra statistical information will be returned. Extra "
"statistical information is written below the regression line coefficients in "
"the result array.  Extra statistical information consists of four rows of "
"data.  In the first row the standard error values for the coefficients m1, "
"(m2, ...), b are represented.  The second row contains the square of R and "
"the standard error for the y estimate.  The third row contains the F-"
"observed value and the degrees of freedom.  The last row contains the "
"regression sum of squares and the residual sum of squares.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGEST returns "
"an array { m{n},m{n-1}, ...,m{1},b }.\n"
"* If @known_y's and @known_x's have unequal number of data points, LOGEST "
"returns #NUM! error.\n"
"* If @const is FALSE, the line will be forced to go through (0,1),i.e., b "
"will be one.  The default is TRUE.\n"
"* The default of @stat is FALSE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=GROWTH,TREND"
msgstr ""

#: ../plugins/fn-stat/functions.c:4905
msgid ""
"@FUNCTION=GROWTH\n"
"@SYNTAX=GROWTH(known_y's[,known_x's,new_x's,const])\n"
"@DESCRIPTION=GROWTH function applies the ``least squares'' method to fit an "
"exponential curve to your data and predicts the exponential growth by using "
"this curve. \n"
"GROWTH returns an array having one column and a row for each data point in "
"@new_x.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
"* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
"* If @known_y's and @known_x's have unequal number of data points, GROWTH "
"returns #NUM! error.\n"
"* If @const is FALSE, the line will be forced to go through the origin, i."
"e., b will be zero. The default is TRUE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGEST,GROWTH,TREND"
msgstr ""

#: ../plugins/fn-stat/functions.c:5020
msgid ""
"@FUNCTION=FORECAST\n"
"@SYNTAX=FORECAST(x,known_y's,known_x's)\n"
"@DESCRIPTION=FORECAST function estimates a future value according to "
"existing values using simple linear regression.  The estimated future value "
"is a y-value for a given x-value (@x).\n"
"\n"
"* If @known_x or @known_y contains no data entries or different number of "
"data entries, FORECAST returns #N/A error.\n"
"* If the variance of the @known_x is zero, FORECAST returns #DIV/0 error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"FORECAST(7,A1:A5,B1:B5) equals -10.859397661.\n"
"\n"
"@SEEALSO=INTERCEPT,TREND"
msgstr ""
"@FUNCTION=SCHÄTZER\n"
"@SYNTAX=SCHÄTZER(x,Y_Werte,X_Werte)\n"
"@DESCRIPTION=SCHÄTZER schätzt einen zukünftigen Wert anhand der bekannten "
"Werte unter Verwendung der einfachen linearen Regression ab. Der Schätzwert "
"ist der zum übergebenen X-Wert @x gehörige Y-Wert.\n"
"\n"
"* Falls @Y_Werte oder @X_Werte null ist, keinen Dateneintrag LATER, liefert "
"SCHÄTZER einen #NV-Fehler.\n"
"* Falls die Varianz oder @X_Werte null ist, liefert SCHÄTZER einen #DIV/0-"
"Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1 und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 "
"sowie 42.7. Dann liefert\n"
"SCHÄTZER(7,A1:A5,B1:B5) -10.859397661.\n"
"\n"
"@SEEALSO=ACHSENABSCHNITT,TREND"

#: ../plugins/fn-stat/functions.c:5094
msgid ""
"@FUNCTION=INTERCEPT\n"
"@SYNTAX=INTERCEPT(known_y's,known_x's)\n"
"@DESCRIPTION=INTERCEPT function calculates the point where the linear "
"regression line intersects the y-axis.\n"
"\n"
"* If @known_x or @known_y contains no data entries or different number of "
"data entries, INTERCEPT returns #N/A error.\n"
"* If the variance of the @known_x is zero, INTERCEPT returns #DIV/0 error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"INTERCEPT(A1:A5,B1:B5) equals -20.785117212.\n"
"\n"
"@SEEALSO=FORECAST,TREND"
msgstr ""
"@FUNCTION=ACHSENABSCHNITT\n"
"@SYNTAX=ACHSENABSCHNITT(Y_Werte,X_Werte)\n"
"@DESCRIPTION=ACHSENABSCHNITT berechnet den Punkt, an dem die lineare "
"Regressionsgerade die Y-Achse schneidet.\n"
"\n"
"* Falls @X_Werte oder @Y_Werte keine Dateneinträge oder eine "
"unterschiedliche Anzahl selbiger enthält, liefert ACHSENABSCHNITT einen #NV-"
"Fehler.\n"
"* Falls die Varianz der @X_Werte null ist, liefert ACHSENABSCHNITT EINEN "
"#DIV/0-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1 und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 und "
"42.7. Dann liefert\n"
"ACHSENABSCHNITT(A1:A5,B1:B5) -20.785117212.\n"
"\n"
"@SEEALSO=SCHÄTZER,TREND"

#: ../plugins/fn-stat/functions.c:5148
msgid ""
"@FUNCTION=SLOPE\n"
"@SYNTAX=SLOPE(known_y's,known_x's)\n"
"@DESCRIPTION=SLOPE returns the slope of the linear regression line.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"SLOPE(A1:A5,B1:B5) equals 1.417959936.\n"
"\n"
"@SEEALSO=STDEV,STDEVPA"
msgstr ""
"@FUNCTION=STEIGUNG\n"
"@SYNTAX=STEIGUNG(Y_Werte,X_Werte)\n"
"@DESCRIPTION=STEIGUNG liefert die Steigung der Regressionsgeraden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11.4, 17.3, "
"21.3, 25.9 und 40.1 und die Zellen B1, B2, ... B5 23.2, 25.8, 29.9, 33.5 und "
"42.7. Dann liefert\n"
"STEIGUNG(A1:A5,B1:B5) 1.417959936.\n"
"\n"
"@SEEALSO=STDABW, LATER"

#: ../plugins/fn-stat/functions.c:5196
msgid ""
"@FUNCTION=SUBTOTAL\n"
"@SYNTAX=SUBTOTAL(function_nbr,ref1,ref2,...)\n"
"@DESCRIPTION=SUBTOTAL function returns a subtotal of given list of "
"arguments. @function_nbr is the number that specifies which function to use "
"in calculating the subtotal.\n"
"\n"
"The following functions are available:\n"
"\n"
"\t1   AVERAGE\n"
"\t2   COUNT\n"
"\t3   COUNTA\n"
"\t4   MAX\n"
"\t5   MIN\n"
"\t6   PRODUCT\n"
"\t7   STDEV\n"
"\t8   STDEVP\n"
"\t9   SUM\n"
"\t10   VAR\n"
"\t11   VARP\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39.  Then\n"
"SUBTOTAL(1,A1:A5) equals 30.\n"
"SUBTOTAL(6,A1:A5) equals 22378356.\n"
"SUBTOTAL(7,A1:A5) equals 6.164414003.\n"
"SUBTOTAL(9,A1:A5) equals 150.\n"
"SUBTOTAL(11,A1:A5) equals 30.4.\n"
"\n"
"@SEEALSO=COUNT,SUM"
msgstr ""
"@FUNCTION=TEILERGEBNIS\n"
"@SYNTAX=TEILERGEBNIS(Funktionsnummer,Bezug1,Bezug2,...)\n"
"@DESCRIPTION=TEILERGEBNIS liefert ein Teilergebnis der übergebenen "
"Argumentliste. @Funktionsnummer ist die Zahl, die festlegt, welche Funktion "
"zur Berechnung des Teilergebnisses verwendet werden soll.\n"
"\n"
"Folgende Funktionen sind verfügbar:\n"
"\n"
"\t1   MITTELWERT\n"
"\t2   ANZAHL\n"
"\t3   ANZAHL2\n"
"\t4   MAX\n"
"\t5   MIN\n"
"\t6   PRODUKT\n"
"\t7   STDABW\n"
"\t8   STDABWN\n"
"\t9   SUMME\n"
"\t10   VAR\n"
"\t11   VAR2\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 23, 27, 28, 33 "
"und 39. Dann liefert\n"
"TEILERGEBNIS(1,A1:A5) 30.\n"
"TEILERGEBNIS(6,A1:A5) 22378356.\n"
"TEILERGEBNIS(7,A1:A5) 6.164414003.\n"
"TEILERGEBNIS(9,A1:A5) 150.\n"
"TEILERGEBNIS(11,A1:A5) 30.4.\n"
"\n"
"@SEEALSO=ANZAHL, SUMME"

#: ../plugins/fn-stat/functions.c:5302
msgid ""
"@FUNCTION=CRONBACH\n"
"@SYNTAX=CRONBACH(ref1,ref2,...)\n"
"@DESCRIPTION=CRONBACH returns Cronbach's alpha for the given cases.\n"
"@ref1 is a data set, @ref2 the second data set, etc..\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=CRONBACH\n"
"@SYNTAX=CRONBACH(Bezug1,Bezug2,...)\n"
"@DESCRIPTION=CRONBACH liefert das Cronbach'sche Alpha für die angegebenen "
"Fälle.\n"
"@Bezug1 ist der erste, @Bezug2 der zweite Datensatz u.s.w..\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-stat/functions.c:5424
msgid ""
"@FUNCTION=GEOMDIST\n"
"@SYNTAX=GEOMDIST(k,p,cum)\n"
"@DESCRIPTION=GEOMDIST returns the probability p(k) of obtaining @k from a "
"geometric distribution with probability parameter @p.\n"
"\n"
"* If @k < 0 GEOMDIST returns #NUM! error.\n"
"* If @p < 0 or @p > 1 GEOMDIST returns #NUM! error.\n"
"* If @cum != TRUE and @cum != FALSE GEOMDIST returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"GEOMDIST(2,10.4,TRUE).\n"
"\n"
"@SEEALSO=RANDGEOM"
msgstr ""
"@FUNCTION=GEOMVERT\n"
"@SYNTAX=GEOMVERT(k,Wahrscheinlichkeit,Kum)\n"
"@DESCRIPTION=GEOMVERT liefert die Wahrscheinlichkeit @Wahrscheinlichkeit(k), "
"dass eine geometrische Verteilung mit Wahrscheinlichkeitsparameter "
"@Wahrscheinlichkeit @k liefert.\n"
"\n"
"* Falls @k < 0 ist, liefert GEOMVERT einen #ZAHL!-Fehler.\n"
"* Falls @Wahrscheinlichkeit < 0 oder > 1 ist, liefert GEOMVERT einen #ZAHL!-"
"Fehler.\n"
"* Falls @Kum != WAHR und @Kum != FALSCH, liefert GEOMVERT einen #ZAHL!-"
"Fehler.\n"
"\n"
"@EXAMPLES=\n"
"GEOMVERT(2,10.4,WAHR).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.GEOM"

#: ../plugins/fn-stat/functions.c:5463
msgid ""
"@FUNCTION=LOGISTIC\n"
"@SYNTAX=LOGISTIC(x,a)\n"
"@DESCRIPTION=LOGISTIC returns the probability density p(x) at @x for a "
"logistic distribution with scale parameter @a.\n"
"\n"
"@EXAMPLES=\n"
"LOGISTIC(0.4,1).\n"
"\n"
"@SEEALSO=RANDLOGISTIC"
msgstr ""
"@FUNCTION=LOGISTISCH\n"
"@SYNTAX=LOGISTISCH(x,a)\n"
"@DESCRIPTION=LOGISTISCH liefert die Wahrscheinlichkeitsdichte p(x) bei @x "
"für eine logistische Verteilung Skalierungsparameter @a.\n"
"\n"
"@EXAMPLES=\n"
"LOGISTISCH(0.4,1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.LOGISTISCH"

#: ../plugins/fn-stat/functions.c:5502
msgid ""
"@FUNCTION=PARETO\n"
"@SYNTAX=PARETO(x,a,b)\n"
"@DESCRIPTION=PARETO returns the probability density p(x) at @x for a Pareto "
"distribution with exponent @a and scale @b.\n"
"\n"
"@EXAMPLES=\n"
"PARETO(0.6,1,2).\n"
"\n"
"@SEEALSO=RANDPARETO"
msgstr ""
"@FUNCTION=PARETO\n"
"@SYNTAX=PARETO(x,a,b)\n"
"@DESCRIPTION=PARETO liefert die Wahrscheinlichkeitsdichte p(x) bei @x für "
"eine Pareto-Verteilung mit Exponent @a Skalierung @b.\n"
"\n"
"@EXAMPLES=\n"
"PARETO(0.6,1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.PARETO"

#: ../plugins/fn-stat/functions.c:5543
msgid ""
"@FUNCTION=RAYLEIGH\n"
"@SYNTAX=RAYLEIGH(x,sigma)\n"
"@DESCRIPTION=RAYLEIGH returns the probability density p(x) at @x for a "
"Rayleigh distribution with scale parameter @sigma.\n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGH(0.4,1).\n"
"\n"
"@SEEALSO=RANDRAYLEIGH"
msgstr ""
"@FUNCTION=RAYLEIGH\n"
"@SYNTAX=RAYLEIGH(x,Sigma)\n"
"@DESCRIPTION=RAYLEIGH liefert die Wahrscheinlichkeitsdichte p(x) bei @x für "
"eine Rayleigh-Verteilung mit Skalierungsparameter @Sigma.\n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGH(0.4,1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.RAYLEIGH"

#: ../plugins/fn-stat/functions.c:5586
msgid ""
"@FUNCTION=RAYLEIGHTAIL\n"
"@SYNTAX=RAYLEIGHTAIL(x,a,sigma)\n"
"@DESCRIPTION=RAYLEIGHTAIL returns the probability density p(x) at @x for a "
"Rayleigh tail distribution with scale parameter @sigma and lower limit @a.\n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGHTAIL(0.6,0.3,1).\n"
"\n"
"@SEEALSO=RANDRAYLEIGHTAIL"
msgstr ""
"@FUNCTION=RAYLEIGHTAIL\n"
"@SYNTAX=RAYLEIGHTAIL(x,a,Sigma)\n"
"@DESCRIPTION=RAYLEIGHTAIL liefert die Wahrscheinlichkeitsdichte p(x) bei @x "
"für eine Rayleigh-Tail-Verteilung mit Skalierungsparameter @Sigma und "
"Untergrenze @a.\n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGHTAIL(0.6,0.3,1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.RAYLEIGHTAIL"

#: ../plugins/fn-stat/functions.c:5632
msgid ""
"@FUNCTION=EXPPOWDIST\n"
"@SYNTAX=EXPPOWDIST(x,a,b)\n"
"@DESCRIPTION=EXPPOWDIST returns the probability density p(x) at @x for "
"Exponential Power distribution with scale parameter @a and exponent @b.\n"
"This distribution has been recommended for lifetime analysis when a U-shaped "
"hazard function is desired. This corresponds to rapid failure once the "
"product starts to wear out after a period of steady or even improving "
"reliability.\n"
"@EXAMPLES=\n"
"EXPPOWDIST(0.4,1,2).\n"
"\n"
"@SEEALSO=RANDEXPPOW"
msgstr ""
"@FUNCTION=EXPVERT\n"
"@SYNTAX=EXPVERT(x,a,b)\n"
"@DESCRIPTION=EXPVERT liefert die Wahrscheinlichkeitsdichte p(x) bei @x für "
"die exponenzielle Verteilung mit Skalierungsparameter @a und Exponent @b.\n"
"\n"
"@EXAMPLES=\n"
"EXPVERT(0.4,1,2).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.EXP"

#: ../plugins/fn-stat/functions.c:5671
msgid ""
"@FUNCTION=LAPLACE\n"
"@SYNTAX=LAPLACE(x,a)\n"
"@DESCRIPTION=LAPLACE returns the probability density p(x) at @x for Laplace "
"distribution with mean @a. \n"
"@EXAMPLES=\n"
"LAPLACE(0.4,1).\n"
"\n"
"@SEEALSO=RANDLAPLACE"
msgstr ""
"@FUNCTION=LAPLACE\n"
"@SYNTAX=LAPLACE(x,a)\n"
"@DESCRIPTION=LAPLACE liefert die mögliche Dichte p(x) bei @x für eine "
"Laplace-Verteilung mit Mittelwert @a.\n"
"@EXAMPLES=\n"
"LAPLACE(0.4,1).\n"
"\n"
"@SEEALSO=ZUFALLSZAHL.LAPLACE"

#: ../plugins/fn-string/functions.c:61
msgid ""
"@FUNCTION=CHAR\n"
"@SYNTAX=CHAR(x)\n"
"@DESCRIPTION=CHAR returns the ASCII character represented by the number @x.\n"
"\n"
"@EXAMPLES=\n"
"CHAR(65) equals A.\n"
"\n"
"@SEEALSO=CODE"
msgstr ""
"@FUNCTION=ZEICHEN\n"
"@SYNTAX=ZEICHEN(x)\n"
"@DESCRIPTION=ZEICHEN liefert das durch die Zahl @x repräsentierte ASCII-"
"Zeichen.\n"
"\n"
"@EXAMPLES=\n"
"CHAR(65) liefert A.\n"
"\n"
"@SEEALSO=CODE"

#: ../plugins/fn-string/functions.c:107
msgid ""
"@FUNCTION=UNICHAR\n"
"@SYNTAX=UNICHAR(x)\n"
"@DESCRIPTION=UNICHAR returns the Unicode character represented by the number "
"@x.\n"
"\n"
"@EXAMPLES=\n"
"UNICHAR(65) equals A.\n"
"UNICHAR(960) equals a small Greek pi.\n"
"\n"
"@SEEALSO=CHAR,UNICODE,CODE"
msgstr ""
"@FUNCTION=UNIZEICHEN\n"
"@SYNTAX=UNIZEICHEN(x)\n"
"@DESCRIPTION=UNIZEICHEN liefert das durch die Zahl @x repräsentierte Unicode-"
"Zeichen.\n"
"\n"
"@EXAMPLES=\n"
"CHAR(65) liefert A.\n"
"UNICHAR(960) liefert ein kleines griechisches Pi.\n"
"\n"
"@SEEALSO=ZEICHEN,UNICODE,CODE"

#: ../plugins/fn-string/functions.c:142
msgid ""
"@FUNCTION=CODE\n"
"@SYNTAX=CODE(char)\n"
"@DESCRIPTION=CODE returns the ASCII number for the character @char.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CODE(\"A\") equals 65.\n"
"\n"
"@SEEALSO=CHAR"
msgstr ""
"@FUNCTION=CODE\n"
"@SYNTAX=CODE(Zeichen)\n"
"@DESCRIPTION=CODE liefert die ASCII-Zahl für das Zeichen @Zeichen.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"CODE(\"A\") liefert 65.\n"
"\n"
"@SEEALSO=ZEICHEN"

#: ../plugins/fn-string/functions.c:190
msgid ""
"@FUNCTION=UNICODE\n"
"@SYNTAX=UNICODE(char)\n"
"@DESCRIPTION=UNICODE returns the Unicode number for the character @char.\n"
"\n"
"\n"
"@EXAMPLES=\n"
"UNICODE(\"A\") equals 65.\n"
"\n"
"@SEEALSO=UNICHAR,CODE,CHAR"
msgstr ""
"@FUNCTION=UNICODE\n"
"@SYNTAX=UNICODE(Zeichen)\n"
"@DESCRIPTION=UNICODE liefert die Unicode-Zahl für das Zeichen @Zeichen.\n"
"\n"
"\n"
"@EXAMPLES=\n"
"CODE(\"A\") liefert 65.\n"
"\n"
"@SEEALSO=UNIZEICHEN,CODE,ZEICHEN"

#: ../plugins/fn-string/functions.c:219
msgid ""
"@FUNCTION=EXACT\n"
"@SYNTAX=EXACT(string1, string2)\n"
"@DESCRIPTION=EXACT returns true if @string1 is exactly equal to @string2 "
"(this routine is case sensitive).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EXACT(\"key\",\"key\") equals TRUE.\n"
"EXACT(\"key\",\"Key\") equals FALSE.\n"
"\n"
"@SEEALSO=LEN, SEARCH, DELTA"
msgstr ""
"@FUNCTION=IDENTISCH\n"
"@SYNTAX=IDENTISCH(Zeichenkette1, Zeichenkette2)\n"
"@DESCRIPTION=IDENTISCH liefert WAHR, falls @Zeichenkette1 identisch mit "
"@Zeichenkette2 ist (Hierbei wird zwischen Groß- und Kleinschreibung "
"unterschieden).\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"IDENTISCH(\"Schlüssel\",\"Schlüssel\") liefert WAHR.\n"
"IDENTISCH(\"Schlüssel\",\"SChlüssel\") liefert FALSCH.\n"
"\n"
"@SEEALSO=LÄNGE, SUCHEN, DELTA"

#: ../plugins/fn-string/functions.c:247
msgid ""
"@FUNCTION=LEN\n"
"@SYNTAX=LEN(string)\n"
"@DESCRIPTION=LEN returns the length in characters of the string @string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LEN(\"Helsinki\") equals 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LENB"
msgstr ""
"@FUNCTION=LÄNGE\n"
"@SYNTAX=LÄNGE(Zeichenkette)\n"
"@DESCRIPTION=LÄNGE liefert die Länge der Zeichen in der Zeichenkette "
"@Zeichenkette.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LÄNGE(\"Helsinki\") liefert 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LENB"

#: ../plugins/fn-string/functions.c:271
msgid ""
"@FUNCTION=LENB\n"
"@SYNTAX=LENB(string)\n"
"@DESCRIPTION=LENB returns the length in bytes of the string @string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LENB(\"Helsinki\") equals 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LEN"
msgstr ""
"@FUNCTION=LÄNGE\n"
"@SYNTAX=LÄNGE(Zeichenkette)\n"
"@DESCRIPTION=LÄNGE liefert die Länge der Zeichen in der Zeichenkette "
"@Zeichenkette.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LÄNGE(\"Helsinki\") liefert 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LEN"

#: ../plugins/fn-string/functions.c:296
msgid ""
"@FUNCTION=LEFT\n"
"@SYNTAX=LEFT(text[,num_chars])\n"
"@DESCRIPTION=LEFT returns the leftmost @num_chars characters or the left "
"character if @num_chars is not specified.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LEFT(\"Directory\",3) equals \"Dir\".\n"
"\n"
"@SEEALSO=MID, RIGHT"
msgstr ""
"@FUNCTION=LINKS\n"
"@SYNTAX=LINKS(Text[,Anzahl_Zeichen])\n"
"@DESCRIPTION=LINKS liefert die ersten @Anzahl_Zeichen Zeichen oder das erste "
"Zeichen, falls @Anzahl_Zeichen nicht angegeben ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"LINKS(\"Verzeichnis\",3) liefert \"Ver\".\n"
"\n"
"@SEEALSO=TEIL, RECHTS"

#: ../plugins/fn-string/functions.c:333
msgid ""
"@FUNCTION=LOWER\n"
"@SYNTAX=LOWER(text)\n"
"@DESCRIPTION=LOWER returns a lower-case version of the string in @text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOWER(\"J. F. Kennedy\") equals \"j. f. kennedy\".\n"
"\n"
"@SEEALSO=UPPER"
msgstr ""
"@FUNCTION=KLEIN\n"
"@SYNTAX=KLEIN(Text)\n"
"@DESCRIPTION=KLEIN liefert die Zeichenkette @Text in Kleinschreibung.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"KLEIN(\"J. F. Kennedy\") liefert \"j. f. kennedy\".\n"
"\n"
"@SEEALSO=GROSS"

#: ../plugins/fn-string/functions.c:358
msgid ""
"@FUNCTION=MID\n"
"@SYNTAX=MID(string, position, length)\n"
"@DESCRIPTION=MID returns a substring from @string starting at @position for "
"@length characters.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MID(\"testing\",2,3) equals \"est\".\n"
"\n"
"@SEEALSO=LEFT, RIGHT"
msgstr ""
"@FUNCTION=TEIL\n"
"@SYNTAX=TEIL(Zeichenkette, Position, Länge)\n"
"@DESCRIPTION=TEIL liefert einen @Länge langen Teil der Zeichenkette "
"@Zeichenkette, beginnend bei @Position.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TEIL(\"mal testen\",2,3) liefert \"al \".\n"
"\n"
"@SEEALSO=LINKS, RECHTS"

#: ../plugins/fn-string/functions.c:403
msgid ""
"@FUNCTION=RIGHT\n"
"@SYNTAX=RIGHT(text[,num_chars])\n"
"@DESCRIPTION=RIGHT returns the rightmost @num_chars characters or the right "
"character if @num_chars is not specified.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RIGHT(\"end\") equals \"d\".\n"
"RIGHT(\"end\",2) equals \"nd\".\n"
"\n"
"@SEEALSO=MID, LEFT"
msgstr ""
"@FUNCTION=RECHTS\n"
"@SYNTAX=RECHTS(Text[,Anzahl_Zeichen])\n"
"@DESCRIPTION=RECHTS liefert die letzten @Anzahl_Zeichen Zeichen oder das "
"letzte Zeichen, falls @Anzahl_Zeichen nicht angegeben ist.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"RECHTS(\"Ende\") liefert \"e\".\n"
"RECHTS(\"Ende\") liefert \"e\".\n"
"\n"
"@SEEALSO=TEIL, LINKS"

#: ../plugins/fn-string/functions.c:445
msgid ""
"@FUNCTION=UPPER\n"
"@SYNTAX=UPPER(text)\n"
"@DESCRIPTION=UPPER returns a upper-case version of the string in @text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"UPPER(\"cancelled\") equals \"CANCELLED\".\n"
"\n"
"@SEEALSO=LOWER"
msgstr ""
"@FUNCTION=GROSS\n"
"@SYNTAX=GROSS(Text)\n"
"@DESCRIPTION=GROSS liefert die Zeichenkette @Text in Großschreibung.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GROSS(\"abgebrochen\") liefert \"ABGEBROCHEN\".\n"
"\n"
"@SEEALSO=KLEIN"

#: ../plugins/fn-string/functions.c:470
msgid ""
"@FUNCTION=CONCATENATE\n"
"@SYNTAX=CONCATENATE(string1[,string2...])\n"
"@DESCRIPTION=CONCATENATE returns the string obtained by concatenation of the "
"given strings.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CONCATENATE(\"aa\",\"bb\") equals \"aabb\".\n"
"\n"
"@SEEALSO=LEFT, MID, RIGHT"
msgstr ""
"@FUNCTION=VERKETTEN\n"
"@SYNTAX=VERKETTEN(Zeichenkette1[,Zeichenkette 2...])\n"
"@DESCRIPTION=VERKETTEN verkettet Zeichenketten und liefert die daraus "
"entstehende Zeichenkette.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"VERKETTEN(\"aa\",\"bb\") liefert \"aabb\".\n"
"\n"
"@SEEALSO=LINKS, TEIL, RECHTS"

# FIXME: check for mathematical correctness
#: ../plugins/fn-string/functions.c:498
msgid ""
"@FUNCTION=REPT\n"
"@SYNTAX=REPT(string,num)\n"
"@DESCRIPTION=REPT returns @num repetitions of @string.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"REPT(\".\",3) equals \"...\".\n"
"\n"
"@SEEALSO=CONCATENATE"
msgstr ""
"@FUNCTION=WIEDERHOLEN\n"
"@SYNTAX=WIEDERHOLEN(Zeichenkette,Anzahl)\n"
"@DESCRIPTION=WIEDERHOLEN liefert @Zeichenkette @Zahl mal.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WIEDERHOLEN(\".\",3) liefert \"...\".\n"
"\n"
"@SEEALSO=IMLÄNGE"

#: ../plugins/fn-string/functions.c:548
msgid ""
"@FUNCTION=CLEAN\n"
"@SYNTAX=CLEAN(string)\n"
"@DESCRIPTION=CLEAN removes any non-printable characters from @string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CLEAN(\"one\"\\&char(7)) equals \"one\".\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=SÄUBERN\n"
"@SYNTAX=SÄUBERN(Zeichenkette)\n"
"@DESCRIPTION=SÄUBERN entfernt alle nicht druckbaren Zeichen aus der "
"Zeichenkette @Zeichenkette.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"SÄUBERN(\"Eins\"\\&char(7)) liefert \"Eins\".\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-string/functions.c:584
msgid ""
"@FUNCTION=FIND\n"
"@SYNTAX=FIND(string1,string2[,start])\n"
"@DESCRIPTION=FIND returns position of @string1 in @string2 (case-sensitive), "
"searching only from character @start onwards (assuming 1 if omitted).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FIND(\"ac\",\"Jack\") equals 2.\n"
"\n"
"@SEEALSO=EXACT, LEN, MID, SEARCH"
msgstr ""
"@FUNCTION=FINDEN\n"
"@SYNTAX=FINDEN(Zeichenkette1, Zeichenkette2[, Beginn])\n"
"@DESCRIPTION=FINDEN liefert die Position von @Zeichenkette1 in "
"@Zeichenkette2 unter Berüchsichtigung der Groß-/Kleinschreibung, wobei "
"lediglich ab dem Zeichen @Beginn gesucht wird.\n"
"\n"
"* Falls @Beginn nicht übergeben wird, wird @Beginn = 1 angenommen.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@BEISPIELE?\n"
"FINDEN(\"it\",\"Fritz\") liefert 3.\n"
"\n"
"@SEEALSO=IDENTISCH, LÄNGE, TEIL, SUCHEN"

# FIXME: check for mathematical correctness
#: ../plugins/fn-string/functions.c:628
msgid ""
"@FUNCTION=FIXED\n"
"@SYNTAX=FIXED(num,[decimals, no_commas])\n"
"@DESCRIPTION=FIXED returns @num as a formatted string with @decimals numbers "
"after the decimal point, omitting commas if requested by @no_commas.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FIXED(1234.567,2) equals \"1,234.57\".\n"
"\n"
"@SEEALSO=TEXT, VALUE, DOLLAR"
msgstr ""
"@FUNCTION=FEST\n"
"@SYNTAX=FEST(Zahl[, Dezimalen, keine_Kommata])\n"
"@DESCRIPTION=FEST liefert @Zahl als formatierte Zeichenkette mit @Dezimalen "
"Zahlen hinter dem Dezimalpunkt, wobei Kommata übergangen werden, falls "
"@Keine_Kommata übergeben wurde.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"FEST(1234.567,2) liefert \"1,234.57\".\n"
"\n"
"@SEEALSO="

# FIXME: check for mathematical correctness
#: ../plugins/fn-string/functions.c:694
msgid ""
"@FUNCTION=PROPER\n"
"@SYNTAX=PROPER(string)\n"
"@DESCRIPTION=PROPER returns @string with initial of each word capitalised.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"PROPER(\"j. f. kennedy\") equals \"J. F. Kennedy\".\n"
"\n"
"@SEEALSO=LOWER, UPPER"
msgstr ""
"@FUNCTION=GROSS2\n"
"@SYNTAX=GROSS2(Zeichenkette)\n"
"@DESCRIPTION=GROSS2 liefert @Zeichenkette, wobei der erste Buchstebe jedes "
"Worts groß geschrieben wird.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GROSS2(\"j. f. kennedy\") liefert \"J. F. Kennedy\".\n"
"\n"
"@SEEALSO=KLEIN, GROSS"

#: ../plugins/fn-string/functions.c:749
msgid ""
"@FUNCTION=REPLACE\n"
"@SYNTAX=REPLACE(old,start,num,new)\n"
"@DESCRIPTION=REPLACE returns @old with @new replacing @num characters from "
"@start.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"REPLACE(\"testing\",2,3,\"*****\") equals \"t*****ing\".\n"
"\n"
"@SEEALSO=MID, SEARCH, SUBSTITUTE, TRIM"
msgstr ""
"@FUNCTION=ERSETZEN\n"
"@SYNTAX=ERSETZEN(alt,Beginn,Zahl,neu)\n"
"@DESCRIPTION=ERSETZEN liefert @alt, wobei @Zahl Zeichen vom @Beginn an durch "
"@neu ersetzt werden.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"ERSETZEN(\"testing\",2,3,\"*****\") liefert \"t*****ing\".\n"
"\n"
"@SEEALSO= :: LATER"

#: ../plugins/fn-string/functions.c:805
msgid ""
"@FUNCTION=T\n"
"@SYNTAX=T(value)\n"
"@DESCRIPTION=T returns @value if and only if it is text, otherwise a blank "
"string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"T(\"text\") equals \"text\".\n"
"T(64) returns an empty cell.\n"
"\n"
"@SEEALSO=CELL, N, VALUE"
msgstr ""
"@FUNCTION=T\n"
"@SYNTAX=T(Wert)\n"
"@DESCRIPTION=T liefert @Wert, falls und nur falls dieser Text ist, sonst "
"eine leere Zeichenkette.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"T(\"Text\") liefert \"Text\".\n"
"T(64) liefert eine leere Zelle.\n"
"\n"
"@SEEALSO=ZELLE, N, WERT"

#: ../plugins/fn-string/functions.c:836
msgid ""
"@FUNCTION=TEXT\n"
"@SYNTAX=TEXT(value,format_text)\n"
"@DESCRIPTION=TEXT returns @value as a string with the specified format.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TEXT(3.223,\"$0.00\") equals \"$3.22\".\n"
"TEXT(date(1999,4,15),\"mmmm, dd, yy\") equals \"April, 15, 99\".\n"
"\n"
"@SEEALSO=DOLLAR, FIXED, VALUE"
msgstr ""
"@FUNCTION=TEXT\n"
"@SYNTAX=TEXT(Wert,Text_Formatierung)\n"
"@DESCRIPTION=TEXT liefert @Wert als Zeichenkette im angegebenen Format.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"TEXT(3.223,\"$0.00\") liefert \"$3.22\".\n"
"TEXT(DATUM(1999,4,15),\"mmmm, dd, yy\") lierfert \"April, 15, 99\".\n"
"\n"
"@SEEALSO=EURO"

#: ../plugins/fn-string/functions.c:894
msgid ""
"@FUNCTION=TRIM\n"
"@SYNTAX=TRIM(text)\n"
"@DESCRIPTION=TRIM returns @text with only single spaces between words.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TRIM(\"  a bbb  cc\") equals \"a bbb cc\".\n"
"\n"
"@SEEALSO=CLEAN, MID, REPLACE, SUBSTITUTE"
msgstr ""
"@FUNCTION=GLÄTTEN\n"
"@SYNTAX=GLÄTTEN(Text)\n"
"@DESCRIPTION=GLÄTTEN liefert den Text mit einem Leerzeichen zwischen den "
"Worten.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"GLÄTTEN(\"  a bbb  c\") liefert \"a bbb cc\".\n"
"\n"
"@SEEALSO=SÄUBERN, TEIL, ERSETZEN, WECHSELN"

# $ durch Euro ersetzen!
#: ../plugins/fn-string/functions.c:948
msgid ""
"@FUNCTION=VALUE\n"
"@SYNTAX=VALUE(text)\n"
"@DESCRIPTION=VALUE returns numeric value of @text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"VALUE(\"$1,000\") equals 1000.\n"
"\n"
"@SEEALSO=DOLLAR, FIXED, TEXT"
msgstr ""
"@FUNCTION=WERT\n"
"@SYNTAX=WERT(Text)\n"
"@DESCRIPTION=WERT liefert den numerischen Wert von @Text.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WERT(\"$1,000\") liefert 1000.\n"
"\n"
"@SEEALSO=EURO, FEST, TEXT"

#: ../plugins/fn-string/functions.c:988
msgid ""
"@FUNCTION=SUBSTITUTE\n"
"@SYNTAX=SUBSTITUTE(text, old, new [,num])\n"
"@DESCRIPTION=SUBSTITUTE replaces @old with @new in @text.  Substitutions are "
"only applied to instance @num of @old in @text, otherwise every one is "
"changed.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SUBSTITUTE(\"testing\",\"test\",\"wait\") equals \"waiting\".\n"
"\n"
"@SEEALSO=REPLACE, TRIM"
msgstr ""
"@FUNCTION=WECHSELN\n"
"@SYNTAX=WECHSELN(Text,Alt,Neu[,Zahl])\n"
"@DESCRIPTION=WECHSELN ersetzt @Alt in @Text durch @Neu. Ersetzungen werden "
"nur auf Instanz @Zahl von @Alt in @Text angewandt, andernfalls werden alle "
"verändert.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"WECHSELN(\"\testen\",\"test\",\"wart\") liefert \"warten\".\n"
"\n"
"@SEEALSO=ERSETZEN, GLÄTTEN"

#: ../plugins/fn-string/functions.c:1066
msgid ""
"@FUNCTION=DOLLAR\n"
"@SYNTAX=DOLLAR(num[,decimals])\n"
"@DESCRIPTION=DOLLAR returns @num formatted as currency.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DOLLAR(12345) equals \"$12,345.00\".\n"
"\n"
"@SEEALSO=FIXED, TEXT, VALUE"
msgstr ""
"@FUNCTION=DOLLAR\n"
"@SYNTAX=DOLLAR(Zahl[,Dezimalen])\n"
"@DESCRIPTION=DOLLAR liefert @Zahl als Währung formatiert.\n"
"\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"DOLLAR(12345) liefert \"$12,345.00\".\n"
"\n"
"@SEEALSO=FEST, TEXT, WERT"

#: ../plugins/fn-string/functions.c:1144
msgid ""
"@FUNCTION=SEARCH\n"
"@SYNTAX=SEARCH(search_string,text[,start_num])\n"
"@DESCRIPTION=SEARCH returns the location of the @search_ string within "
"@text. The search starts  with the @start_num character of text @text.  If "
"@start_num is omitted, it is assumed to be one.  The search is not case "
"sensitive.\n"
"\n"
"@search_string can contain wildcard characters (*) and question marks (?). A "
"question mark matches any character and a wildcard matches any string "
"including the empty string.  If you want the actual wildcard or question "
"mark to be found, use tilde (~) before the character.\n"
"\n"
"* If @search_string is not found, SEARCH returns #VALUE! error.\n"
"* If @start_num is less than one or it is greater than the length of @text, "
"SEARCH returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SEARCH(\"c\",\"Cancel\") equals 1.\n"
"SEARCH(\"c\",\"Cancel\",2) equals 4.\n"
"\n"
"@SEEALSO=FIND"
msgstr ""
"@FUNCTION=SUCHEN\n"
"@SYNTAX=SUCHEN(Text,innerhalb[,Ausgangszahl])\n"
"@DESCRIPTION=SUCHEN liefert die Position eines Zeichens oder Texts @Text "
"innerhalb einer anderen Zeichenkette @innerhalb, wobei die Suche bei "
"@Ausgangszahl Zeichen des Texts @Text beginnt. \n"
"@Text kann Joker- (*) und Fragezeichen (?) enthalten, um die Suche zu "
"beeinflussen.\n"
"Für ein Fragezeichen kann ein beliebiges Zeichen und ein Joker-Zeichen eine "
"beliebige Zeichenkette stehen. Falls nach einem Joker- oder Fragezeichen "
"gesucht werden soll, muss eine Tilde (~) vor dem Zeichen übergeben werden.\n"
"\n"
"* Beim Suchen wird nicht zwischen Groß- und Kleinschreibung unterschieden.\n"
"* Falls der Suchtext @Text nicht gefunden wird, liefert SUCHEN einen #WERT!-"
"Fehler.\n"
"* Falls @Ausgangszahl nicht übergegeben wird, wird dafür eins angenommen.\n"
"* Falls @Ausganzgszahl < 1 oder > Länge von @innerhalb ist, liefert SUCHEN "
"einen #WERT-Fehler.\n"
"* Diese Funktion ist Excel-kompatibel.\n"
"\n"
"@EXAMPLES=\n"
"SUCHEN(\"b\",\"Abbrechen\") liefert 2.\n"
"SUCHEN(\"b\",\"Abbrechen\",3) liefert 3.\n"
"\n"
"@SEEALSO=FINDEN"

#: ../plugins/fn-string/functions.c:1221
msgid ""
"@FUNCTION=ASC\n"
"@SYNTAX=ASC(string)\n"
"@DESCRIPTION=ASC a compatibility function that is meaningless in Gnumeric.  "
"In MS Excel (tm) it converts 2 byte @string into single byte text.\n"
"\n"
"@EXAMPLES=\n"
"CHAR(\"Foo\") equals \"Foo\".\n"
"\n"
"@SEEALSO="
msgstr ""

#: ../plugins/fn-tsa/functions.c:321
msgid ""
"@FUNCTION=interpolation\n"
"@SYNTAX=interpolation(abscissas,ordinates,targets[,interpolation])\n"
"@DESCRIPTION= \n"
"interpolation returns interpolated values corresponding\n"
"to the given abscissa targets as a one column matrix.\n"
"\n"
"@abscissas are the absicssas of the data to interpolate.\n"
"@ordinates are the ordinates of the data to interpolate.\n"
"* Strings and empty cells in @abscissas and @ordinates are simply ignored.\n"
"@targets are the abscissas of the interpolated data. If several data\n"
"are provided, they must be in the same column, in consecutive cells\n"
"@interpolation is the method to be used for the interpolation;\n"
"possible values are:\n"
"- 0: linear;\n"
"- 1: linear with averaging;\n"
"- 2: staircase;\n"
"- 3: staircase with averaging;\n"
"- 4: natural cubic spline;\n"
"- 5: natural cubic spline with averaging.\n"
"\n"
"If an averaging method is used, the number of returned values\n"
"is one less than the number of targets since the evaluation is made by\n"
"averaging the interpolation over the interval between two consecutive data;\n"
"in that case, the targets values must be given in increasing order."
msgstr ""

#: ../plugins/fn-tsa/functions.c:607
msgid ""
"@FUNCTION=periodogram\n"
"@SYNTAX=periodogram(ordinates,[filter,[abscissas,[interpolation,"
"[number]]]])\n"
"@DESCRIPTION= \n"
"periodogram returns the periodogram of the data\n"
"as a one column matrix.\n"
"\n"
"@ordinates are the ordinates of the data to interpolate.\n"
"@filter gives the window function to  be used. Possible values are:\n"
"- 0: no filter (rectangular window);\n"
"- 1: Bartlett (triangular window);\n"
"- 2: Hahn (cosine window);\n"
"- 3: Welch (parabolic window);\n"
"@abscissas are the absicssas of the data to interpolate. If no\n"
"abscissa is given, it is supposed that the data absicssas are regularly\n"
"spaced. Otherwise, an interpolation method will be used to evaluate\n"
"regularly spaced data.\n"
"* Strings and empty cells in @abscissas and @ordinates are simply ignored.\n"
"@interpolation is the method to be used for the interpolation;\n"
"possible values are:\n"
"- 0: linear;\n"
"- 1: linear with averaging;\n"
"- 2: staircase;\n"
"- 3: staircase with averaging;\n"
"- 4: natural cubic spline;\n"
"- 5: natural cubic spline with averaging.\n"
"@number is the number of interpolated data to be used. If not given,\n"
"a default number is automatically evaluated.\n"
msgstr ""

#: ../plugins/gda/plugin-gda.c:319
msgid ""
"@FUNCTION=EXECSQL\n"
"@SYNTAX=EXECSQL(dsn,username,password,sql)\n"
"@DESCRIPTION=The EXECSQL function lets you execute a command in a database "
"server, and show the results returned in current sheet. It uses libgda as "
"the means for accessing the databases.\n"
"For using it, you need first to set up a libgda data source.\n"
"@EXAMPLES=\n"
"To get all the data from the table \"Customers\" present in the "
"\"mydatasource\" GDA data source, you would use:\n"
"EXECSQL(\"mydatasource\",\"username\",\"password\",\"SELECT * FROM customers"
"\")\n"
"@SEEALSO=READDBTABLE"
msgstr ""
"@FUNCTION=AUSFSQL\n"
"@SYNTAX=AUSFSQL(DSN,Benutzername,Passwort,SQL)\n"
"@DESCRIPTION=AUSFSQL ermöglicht es Ihnen, eine Abfrage an einen\n"
"Datenbank-Server durchzuführen und das Ergebnis im momentan angezeigten "
"Blatt\n"
"anzuzeigen. Als Bindeglied für den Datenbankzugriff wird libgda verwendet.\n"
"\n"
"@EXAMPLES=\n"
"Um alle Daten aus der Tabelle »Kunden« in der GDA-Datenquelle "
"»MeineDatenquelle« abzurufen, müssen Sie verwenden:\n"
"AUSFSQL(\"MeineDatenQuelle\",\"Benutzername\",\"Passwort\",\"SELECT * FROM "
"Kunden\"\n"
"@SEEALSO=DBTABELLELESEN"

#: ../plugins/gda/plugin-gda.c:391
#, fuzzy
msgid ""
"@FUNCTION=READDBTABLE\n"
"@SYNTAX=READDBTABLE(dsn,username,password,table)\n"
"@DESCRIPTION=The READDBTABLE function lets you get the contents of a table, "
"as stored in a database. For using it, you need first to set up a libgda "
"data source.\n"
"Note that this function returns all the rows in the given table. If you want "
"to get data from more than one table or want a more precise selection "
"(conditions), use the EXECSQL function.\n"
"@EXAMPLES=\n"
"To get all the data from the table \"Customers\" present in the "
"\"mydatasource\" GDA data source, you would use:\n"
"READDBTABLE(\"mydatasource\",\"username\",\"password\",\"customers\")\n"
"@SEEALSO=EXECSQL"
msgstr ""
"@FUNCTION=AUSFSQL\n"
"@SYNTAX=AUSFSQL(DSN,Benutzername,Passwort,SQL)\n"
"@DESCRIPTION=AUSFSQL ermöglicht es Ihnen, eine Abfrage an einen\n"
"Datenbank-Server durchzuführen und das Ergebnis im momentan angezeigten "
"Blatt\n"
"anzuzeigen. Als Bindeglied für den Datenbankzugriff wird libgda verwendet.\n"
"\n"
"@EXAMPLES=\n"
"Um alle Daten aus der Tabelle »Kunden« in der GDA-Datenquelle "
"»MeineDatenquelle« abzurufen, müssen Sie verwenden:\n"
"AUSFSQL(\"MeineDatenQuelle\",\"Benutzername\",\"Passwort\",\"SELECT * FROM "
"Kunden\"\n"
"@SEEALSO=DBTABELLELESEN"

#: ../plugins/numtheory/numtheory.c:206
msgid ""
"@FUNCTION=NT_PHI\n"
"@SYNTAX=NT_PHI(n)\n"
"@DESCRIPTION=NT_PHI function calculates the number of integers less than or "
"equal to @n that are relatively prime to @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_SIGMA"
msgstr ""
"@FUNCTION=NT_PHI\n"
"@SYNTAX=NT_PHI(n)\n"
"@DESCRIPTION=NT_PHI liefert die Anzahl der Ganzzahlen kleiner oder gleich "
"@n, die zugleich Primteiler von @n sind.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_SIGMA"

#. xgettext: you can translate the funny character as an 'o' if unicode is not available.
#: ../plugins/numtheory/numtheory.c:244
msgid ""
"@FUNCTION=NT_MU\n"
"@SYNTAX=NT_MU(n)\n"
"@DESCRIPTION=NT_MU function (Möbius mu function) returns \n"
"0  if @n is divisible by the square of a prime .\n"
"Otherwise it returns: \n"
"\n"
"  -1 if @n has an odd  number of different prime factors .\n"
"   1  if @n has an even number of different prime factors .\n"
"\n"
"* If @n = 1 NT_MU returns 1.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_PHI"
msgstr ""
"@FUNCTION=NT_MU\n"
"@SYNTAX=NT_MU(n)\n"
"@DESCRIPTION=NT_MU (Möbius Mu) liefert 0, falls @n durch das Quadrat einer "
"Primzahl teilbar ist.\n"
"Andernfalls liefert es:\n"
"  -1, falls @n eine ungerade Anzahl verschiedener Primfaktoren besitzt.\n"
"  1, falls @n eine gerade Anzahl verschiedener Primfaktoren besitzt.\n"
"\n"
"* Falls @n = 1 ist, liefert NT_MU 1\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITERPRIM, NT_PHI"

#: ../plugins/numtheory/numtheory.c:286
msgid ""
"@FUNCTION=NT_D\n"
"@SYNTAX=NT_D(n)\n"
"@DESCRIPTION=NT_D function calculates the number of divisors of @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_PHI, NT_SIGMA"
msgstr ""
"@FUNCTION=NT_D\n"
"@SYNTAX=NT_D(n)\n"
"@DESCRIPTION=NT_D liefert die Anzahl der Teiler von @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITERPRIM, NT_PHI, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:322
msgid ""
"@FUNCTION=NT_SIGMA\n"
"@SYNTAX=NT_SIGMA(n)\n"
"@DESCRIPTION=NT_SIGMA function calculates the sum of the divisors of @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_PHI"
msgstr ""
"@FUNCTION=NT_SIGMA\n"
"@SYNTAX=NT_SIGMA(n)\n"
"@DESCRIPTION=NT_SIGMA liefert die Summe der Teiler von @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITERPRIM, NT_D, NT_PHI"

#: ../plugins/numtheory/numtheory.c:359
msgid ""
"@FUNCTION=ITHPRIME\n"
"@SYNTAX=ITHPRIME(i)\n"
"@DESCRIPTION=ITHPRIME function returns the @ith prime.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, NT_SIGMA"
msgstr ""
"@FUNCTION=ITERPRIM\n"
"@SYNTAX=ITERPRIM(i)\n"
"@DESCRIPTION=ITERPRIM liefert den @i-ten Primteiler.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:389
msgid ""
"@FUNCTION=ISPRIME\n"
"@SYNTAX=ISPRIME(i)\n"
"@DESCRIPTION=ISPRIME function returns TRUE if @i is prime and FALSE "
"otherwise.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_D, NT_SIGMA"
msgstr ""
"@FUNCTION=ISTPRIM\n"
"@SYNTAX=ISTPRIM(i)\n"
"@DESCRIPTION=ISTPRIM liefert WAHR, falls @i prim ist, sonst FALSCH.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITERPRIM, NT_D, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:447
msgid ""
"@FUNCTION=PFACTOR\n"
"@SYNTAX=PFACTOR(n)\n"
"@DESCRIPTION=PFACTOR function returns the smallest prime factor of its "
"argument.\n"
"\n"
"The argument must be at least 2, or else a #VALUE! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME"
msgstr ""
"@FUNCTION=PFAKTOR\n"
"@SYNTAX=PFAKTOR(n)\n"
"@DESCRIPTION=PFAKTOR liefert den kleinsten Primfaktor des übergebenen "
"Arguments.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITERPRIM"

#: ../plugins/numtheory/numtheory.c:483
msgid ""
"@FUNCTION=NT_PI\n"
"@SYNTAX=NT_PI(n)\n"
"@DESCRIPTION=NT_PI function returns the number of primes less than or equal "
"to @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_PHI, NT_D, NT_SIGMA"
msgstr ""
"@FUNCTION=NT_PI\n"
"@SYNTAX=NT_PI(n)\n"
"@DESCRIPTION=NT_PI liefert die Anzahl der Primzahlen, die kleiner als @n "
"sind.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITERPRIM, NT_PHI, NT_D, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:518
msgid ""
"@FUNCTION=BITOR\n"
"@SYNTAX=BITOR(a,b)\n"
"@DESCRIPTION=BITOR function returns bitwise or-ing of its arguments.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITXOR,BITAND"
msgstr ""
"@FUNCTION=BITODER\n"
"@SYNTAX=BITODER(a,b)\n"
"@DESCRIPTION=BITODER liefert das Ergebnis der bitweisen ODER-Verknüpfung der "
"übergebenen Argumente.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITXODER,BITUND"

#: ../plugins/numtheory/numtheory.c:545
msgid ""
"@FUNCTION=BITXOR\n"
"@SYNTAX=BITXOR(a,b)\n"
"@DESCRIPTION=BITXOR function returns bitwise exclusive or-ing of its "
"arguments.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITOR,BITAND"
msgstr ""
"@FUNCTION=BITXODER\n"
"@SYNTAX=BITXODER(a,b)\n"
"@DESCRIPTION=BITXODER liefert das Ergebnis der bitweisen exklusiven ODER-"
"Verknüpfung der übergebenen Argumente.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITODER,BITUND"

#: ../plugins/numtheory/numtheory.c:573
msgid ""
"@FUNCTION=BITAND\n"
"@SYNTAX=BITAND(a,b)\n"
"@DESCRIPTION=BITAND function returns bitwise and-ing of its arguments.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITOR,BITXOR"
msgstr ""
"@FUNCTION=BITUND\n"
"@SYNTAX=BITUND(a,b)\n"
"@DESCRIPTION=BITUND liefert das Ergebnis der bitweisen UND-Verknüpfung der "
"übergebenen Argumente.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITODER,BITXODER"

#: ../plugins/numtheory/numtheory.c:601
msgid ""
"@FUNCTION=BITLSHIFT\n"
"@SYNTAX=BITLSHIFT(x,n)\n"
"@DESCRIPTION=BITLSHIFT function returns @x bit-shifted left by @n bits.\n"
"\n"
"* If @n is negative, a right shift will in effect be performed.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITRSHIFT"
msgstr ""
"@FUNCTION=BITSCHIEBEL\n"
"@SYNTAX=BITSCHIEBEL(x,n)\n"
"@DESCRIPTION=Die BITSCHIEBEL Funktion liefert das Ergebnis der Bitschiebe-"
"Operation auf @x um @n Bits nach links.\n"
"\n"
"* Falls @n negativ ist, wird eine Bitschiebe-Operation nach rechts "
"durchgeführt.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITSCHIEBER"

#: ../plugins/numtheory/numtheory.c:634
msgid ""
"@FUNCTION=BITRSHIFT\n"
"@SYNTAX=BITRSHIFT(x,n)\n"
"@DESCRIPTION=BITRSHIFT function returns @x bit-shifted right by @n bits.\n"
"\n"
"* If @n is negative, a left shift will in effect be performed.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITLSHIFT"
msgstr ""
"@FUNCTION=BITSCHIEBER\n"
"@SYNTAX=BITSCHIEBER(x,n)\n"
"@DESCRIPTION=Die BITSCHIEBER Funktion liefert das Ergebnis der Bitschiebe-"
"Operation auf @x um @n Bits nach rechts.\n"
"\n"
"* Falls @n negativ ist, wird eine Bitschiebe-Operation nach links "
"durchgeführt.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITSCHIEBEL"

#: ../plugins/sample_datasource/sample_datasource.c:272
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=atl_last\n"
"@SYNTAX=ATL_LAST (tag)\n"
"@DESCRIPTION=ATL_LAST is a sample implemention of a real time data source. "
"It takes a string tag and monitors the named pipe /tmp/atl for changes to "
"the value of that tag.\n"
"\n"
"* This is not intended to be generally enabled and is OFF by default.\n"
"\n"
"@EXAMPLES=\n"
"ATL_LAST(\"IBM\")\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ATL.ZULETZT\n"
"@SYNTAX=ATL.ZULETZT (Kennung)\n"
"@DESCRIPTION=ATL.ZULETZT ist ein Implementierungsbeispiel für eine "
"Echtzeitdatenquelle. Es nimmt eine Kennungszeichenkette und überwacht die "
"Named-Pipe »/tmp/alt« auf Änderungen an dieser Kennung.\n"
"\n"
"* Dies ist nicht dazu gedacht, generell aktiviert zu sein und ist per "
"Vorgabe DEAKTIVIERT.\n"
"\n"
"@EXAMPLES=\n"
"ATL.ZULETZT(\"IBM\")\n"
"@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COLUMN\n"
#~ "@SYNTAX=COLUMN([reference])\n"
#~ "@DESCRIPTION=COLUMN function returns the column number of the current "
#~ "cell unless @reference is given. In that case, it returns an array of the "
#~ "column numbers of all cells in @reference. \n"
#~ "* If @reference is neither an array nor a reference nor a range, COLUMN "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMN() in E1 equals 5.\n"
#~ "\n"
#~ "@SEEALSO=COLUMNS,ROW,ROWS"
#~ msgstr ""
#~ "@FUNCTION=SPALTE\n"
#~ "@SYNTAX=SPALTE([Bezug])\n"
#~ "@DESCRIPTION=SPALTE liefert die Spaltennummer der momentan gewählten "
#~ "Zelle, falls @Bezug nicht übergeben wird. Andernfalls liefert es ein "
#~ "Datenfeld mit den Spaltennummern aller Zellen in @Bezug.\n"
#~ "\n"
#~ "* Falls @Bezug weder ein Feld, noch ein Bezug oder Bereich ist, liefert "
#~ "SPALTE einen #WERT!-Fehler.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "SPALTE() in E1 liefert 5.\n"
#~ "\n"
#~ "@SEEALSO=SPALTEN, ZEILE, ZEILEN"

#~ msgid ""
#~ "@FUNCTION=ROW\n"
#~ "@SYNTAX=ROW([reference])\n"
#~ "@DESCRIPTION=ROW function returns an array of the row numbers taking a "
#~ "default argument of the containing cell position.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, ROW "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROW() in G13 equals 13.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROWS"
#~ msgstr ""
#~ "@FUNCTION=ZEILE\n"
#~ "@SYNTAX=ZEILE([Bezug])\n"
#~ "@DESCRIPTION=ZEILE liefert ein Feld mit den Zeilennummern, wobei als "
#~ "Vorgabeargument die Position der enthaltenden Zelle verwendet wird.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ZEILE() in G13 liefert 13.\n"
#~ "\n"
#~ "@SEEALSO=SPALTE,SPALTEN,ZEILEN"

#~ msgid ""
#~ "@FUNCTION=FLOOR\n"
#~ "@SYNTAX=FLOOR(x[,significance])\n"
#~ "@DESCRIPTION=FLOOR function rounds @x down to the next nearest multiple "
#~ "of @significance.\n"
#~ "\n"
#~ "* @significance defaults to 1.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "FLOOR(0.5) equals 0.\n"
#~ "FLOOR(5,2) equals 4.\n"
#~ "FLOOR(-5,-2) equals -4.\n"
#~ "FLOOR(-5,2) equals #NUM!.\n"
#~ "\n"
#~ "@SEEALSO=CEIL, CEILING, ABS, INT, MOD"
#~ msgstr ""
#~ "@FUNCTION=UNTERGRENZE\n"
#~ "@SYNTAX=UNTERGRENZE(x[,Signifikanz])\n"
#~ "@DESCRIPTION=UNTERGRENZE rundet @x auf das nächste Vielfache von "
#~ "@Signifikanz ab.\n"
#~ "\n"
#~ "* Die Vorgabe für @Signifikanz ist 1.\n"
#~ "* Diese Funktion ist Excel-kompatibel.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "UNTERGRENZE(0.5) liefert 0.\n"
#~ "UNTERGRENZE(5,2) liefert 4.\n"
#~ "UNTERGRENZE(-5,-2) liefert -4.\n"
#~ "UNTERGRENZE(-5,2) liefert #ZAHL!.\n"
#~ "\n"
#~ "@SEEALSO=OBERGRENZE, ABS, GANZZAHL"

#~ msgid ""
#~ "@FUNCTION=SUMPRODUCT\n"
#~ "@SYNTAX=SUMPRODUCT(range1,range2,...)\n"
#~ "@DESCRIPTION=SUMPRODUCT function multiplies corresponding data entries in "
#~ "the given arrays or ranges, and then returns the sum of those products.  "
#~ "If an array entry is not numeric, the value zero is used instead.\n"
#~ "\n"
#~ "* If arrays or range arguments do not have the same dimensions, "
#~ "SUMPRODUCT returns #VALUE! error.\n"
#~ "* This function is Excel compatible.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, "
#~ "21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and "
#~ "39.  Then\n"
#~ "SUMPRODUCT(A1:A5,B1:B5) equals 3370.\n"
#~ "\n"
#~ "@SEEALSO=SUM,PRODUCT"
#~ msgstr ""
#~ "@FUNCTION=SUMMENPRODUKT\n"
#~ "@SYNTAX=SUMMENPRODUKT(Bereich1,Bereich2,...)\n"
#~ "@DESCRIPTION=SUMMENPRODUKT multipliziert die entsprechenden Dateneinträge "
#~ "in den angegebenen Feldern oder Bereichen und liefert dann die Summe "
#~ "dieser Produkte. Falls ein Feldeintrag nicht numerisch ist, wird "
#~ "stattdessen der Wert Null verwendet.\n"
#~ "\n"
#~ "* Falls Felder- oder Bereichsargumente unterschiedliche Dimensionen "
#~ "haben, liefert SUMMENPRODUKT einen #WERT!-Fehler.\n"
#~ "* Diese Funktion ist Excel-kompatibel.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "Angenommen, die Zellen A1, A2, ..., A5 enthalten die Zahlen 11, 15, 17, "
#~ "21 und 43 und die Zellen B1, B2, ..., B5 13, 22, 31, 33 sowie 39. Dann "
#~ "liefert\n"
#~ "SUMMENPRODUKT(A1:A5,B1:B5) 3370.\n"
#~ "\n"
#~ "@SEEALSO=SUMME, PRODUKT"
