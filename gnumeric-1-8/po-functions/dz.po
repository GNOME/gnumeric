# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: gnumeric-function.head.pot\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2007-12-29 14:31-0500\n"
"PO-Revision-Date: 2007-03-15 11:22+0530\n"
"Last-Translator: sonam pelden <sonaa_peldn@yahoo.com>\n"
"Language-Team: Dzongkha <pgeyleg@dit.gov.bt>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n!=1);\n"
"X-Poedit-Language: Dzongkha\n"
"X-Poedit-Country: Bhutan\n"
"X-Poedit-SourceCharset: UTF-8\n"

#: ../plugins/derivatives/options.c:174
#, no-c-format
msgid ""
"@FUNCTION=CUM_BIV_NORM_DIST\n"
"@SYNTAX=CUM_BIV_NORM_DIST(a,b,rho)\n"
"@DESCRIPTION=CUM_BIV_NORM_DIST calculates the cumulative bivariate normal "
"distribution from parameters a, b & rho.\n"
"The return value is the probability that two random variables with "
"correlation @rho are respectively each less than @a and @b.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NORMDIST,NORMSDIST,NORMSINV"
msgstr ""
"@FUNCTION=CUM_BIV_NORM_DIST\n"
"@SYNTAX=CUM_BIV_NORM_DIST(a,b,rho)\n"
"@DESCRIPTION=CUM_BIV_NORM_DIST དེ་གིས་  ཚད་བཟུང་a, b & rhoལས་རིམ་གྱིས་བསག་པའི་  བའི་"
"བི་རིཊི་སྤྱིར་གཏང་བཀྲམ་སྤེལ་འདི་རྩིས་སྟོནམ་ཨིན།\n"
"སླར་ལོག་གནས་གོང་འདི་  @rhoམཐུན་མོས་ཀྱི་འབྲེལ་བ་དང་ཅིག་ཁར་གང་བྱུང་གཉིས་འགྱུར་ཅན་འབད་མི་འབྱུང་སྲིད་"
"པ་ཨིན་མི་འདི་  རེ་རེ་སྦེ་@a དང་ @bཉུངམ་ཅིག་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NORMDIST,NORMSDIST,NORMSINV"

#: ../plugins/derivatives/options.c:234
msgid ""
"@FUNCTION=OPT_BS\n"
"@SYNTAX=OPT_BS(call_put_flag,spot,strike,time,rate,volatility [,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS uses the Black-Scholes model to calculate the price of a "
"European option using call_put_flag, @call_put_flag, 'c' or 'p' struck at "
"@strike on an asset with spot price @spot.\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date. \n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed in the same units as @strike and "
"@spot.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BS\n"
"@SYNTAX=OPT_BS(call_put_flag,spot,strike,time,rate,volatility [,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS དེ་གིས་   ས་ཁོངས་གོང་ཚད་ @spotདང་ཅིག་ཁར་བདོག་གཏད་@strikeཅིག་གུ་ "
"call_put_flag, @call_put_flag, 'c' ཡང་ན་ 'p' ལག་ལེན་འཐབ་ཐོག་ལས་  ཡུ་རོ་པིན་གདམ་ཁ་"
"ཅིག་གི་ཚད་རྩིས་བཏོན་ནི་ལུ་  བེལེཀ་-ཤོལསི་ལག་ལེན་འཐབ་ཨིན།\n"
"@time འདི་  ལོ་གྲངས་གསལ་སྟོན་འབད་ཡོད་མི་གདམ་ཁ་གི་  དུས་ཡུན་ཚང་བའི་ཆུ་ཚོད་འདི་ཨིན།\n"
"@rate འདི་  ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་ཨིན།\n"
"@volatility འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་དུས་ཡུན་གྱི་དོན་ལུ་  བརྒྱ་ཆའི་ནང་ལོ་རིམ་བཞིན་དུ་ཡལ་མི་"
"ཨིན། \n"
"@cost_of_carry འདི་  ཅ་མཛོད་མཐུན་མོང་གི་དོན་ལུ་  འོག་ལུ་ཡོད་མི་གདོག་གཏད་ཀྱི་གནས་གོང་ནང་ཉམས་"
"པ་ཅིག་ཨིན་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"* སླར་ལོག་ཡོད་པའི་གནས་གོང་འདི་  @strike དང་ @spotསྦེ་ཆ་ཕྲན་གཅིག་པའི་ནང་གསལ་སྟོན་འབད་ནི་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:304
msgid ""
"@FUNCTION=OPT_BS_DELTA\n"
"@SYNTAX=OPT_BS_DELTA(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_DELTA uses the Black-Scholes model to calculate the "
"'delta' of a European option with call_put_flag, @call_put_flag, 'c' or 'p' "
"struck at @strike on an asset with spot price @spot.\n"
"Where @time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date. \n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed in the same units as @strike and "
"@spot.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BS_DELTA\n"
"@SYNTAX=OPT_BS_DELTA(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_DELTA དེ་གིས་  ས་ཁོངས་གོང་ཚད་@spotདང་ཅིག་ཁར་  བདོག་གཏད་"
"@strikeཅིག་གུ་call_put_flag, @call_put_flag, 'c' ཡང་ན་ 'p'དང་ཅིག་ཁར་  ཡུ་རོ་པིན་"
"གདམ་ཁ་ཅིག་གི་ 'ཌེལ་ཊ'འདི་རྩིས་བཏོན་ནི་ལུ་  བེལེཀ་-ཤོལསི་འདི་ལག་ལེན་འཐབ་ཨིན། \n"
"@time འདི་  ལོ་གྲངས་ནང་སླབ་ཡོད་པའི་གནམ་ཁ་གི་དུས་ཡུན་ཚང་བ་ལུ་ཆུ་ཚོད་ཨིན་མི་ལུ།\n"
"@rate འདི་  ཉན་ཁ་མེད་པའི་སྐྱེད་ཚད་ཨིན།\n"
"@volatility འདི་  ཚེས་གྲངས་བསྟར་སྤྱོད་འབད་མི་ལུ་དུས་ཡུན་གྱི་དོན་ལུ་བདོག་གཏད་ཀྱི་  བརྒྱ་ཆའི་ནང་ལོ་"
"བསྟར་ཡལ་བའི་རང་བཞིན་ཨིན། \n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་མི་གདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་ནི་"
"འདི་ཨིན་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"* སླར་ལོག་འབད་ཡོད་པའི་གནས་གོང་འདི་   @strike དང་ @spotསྦེ་ཆ་ཕྲན་གཅིག་པ་སྦེ་གསལ་སྟོན་འབད་ནི་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:359
msgid ""
"@FUNCTION=OPT_BS_GAMMA\n"
"@SYNTAX=OPT_BS_GAMMA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_GAMMA uses the Black-Scholes model to calculate the "
"'gamma' of a European option struck at @strike on an asset with spot price "
"@spot.\n"
"\n"
"(The gamma of an option is the second derivative of its price with respect "
"to the price of the underlying asset, and is the same for calls and puts.)\n"
"\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as the rate of change of delta per "
"unit change in @spot.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA"
msgstr ""
"@FUNCTION=OPT_BS_GAMMA\n"
"@SYNTAX=OPT_BS_GAMMA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_GAMMA དེ་གིས་  ས་གནས་གོང་ཚད་@spot དང་ཅིག་ཁར་བདོག་གཏད་ཅིག་གུ་ "
"@strikeལུ་ ཡུ་རོ་པིན་གདམ་ཁ་སིཊཀ་ཅིག་གི་ 'གམ་མ' འདི་རྩིས་བཏོན་ནི་ལུ་  ཤོལསི་གནགཔོ་གི་དཔེ་འདི་ལག་"
"ལེན་འཐབ་ཨིན།  \n"
"\n"
"(གདམ་ཁ་ཅིག་གི་གམ་མ་འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་གོང་ཚད་ལུ་འབྲེལ་བའི་དེའི་གོང་ཚད་ཀྱི་  འགྱུར་བ་"
"གཉིས་པ་འདི་ཨིནམ་དང་  ཀོལསི་དང་བཙུགས་ནི་ལུ་ལྕོགས་ཐདཔ་ཨིན།)\n"
"\n"
"@time འདི་  ལོ་གྲངས་ནང་གདམ་ཁ་གསལ་སྟོན་འབད་དེ་ཡོད་པའི་དུས་ཡུན་ཚང་མི་ལུ་  ཆུ་ཚོད་ཨིན།\n"
"@rate འདི་  བརྒྱ་ཆའི་ནང་བསྟར་སྤྱོད་ཚེས་གྲངས་ལུ་ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་ཨིན།\n"
"@volatility འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་ལུ་དུས་ཡུན་གྱི་དོན་ལུ་  བརྒྱ་ཆའིནང་ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་"
"ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་མི་གདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་པ་"
"འདི་ཨིནམ་དང་  འདི་  བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"* སླར་ལོག་འབད་ཡོད་པའི་གནས་གོང་འདི་  @spotནང་བསྒྱུར་བཅོས་ཆ་ཕྲན་རེ་རེའི་ཌེལ་ཊ་གི་  ཚད་བསྒྱུར་བཅོས་"
"སྦེ་གསལ་སྟོན་འབད་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_VEGA"

#: ../plugins/derivatives/options.c:429
msgid ""
"@FUNCTION=OPT_BS_THETA\n"
"@SYNTAX=OPT_BS_THETA(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_THETA uses the Black-Scholes model to calculate the "
"'theta' of a European option with call_put_flag, @call_put_flag struck at "
"@strike on an asset with spot price @spot.\n"
"\n"
"(The theta of an option is the rate of change of its price with respect to "
"time to expiry.)\n"
"\n"
"@time is the time to maturity of the option expressed in years\n"
"and @rate is the risk-free interest rate to the exercise date, in percent.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as minus the rate of change of option "
"value, per 365.25 days.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BS_THETA\n"
"@SYNTAX=OPT_BS_THETA(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_THETA དེ་གིས་  ས་ཁོངས་གོང་ཚད་@spot དང་ཅིག་ཁར་བདོག་གཏད་ཅིག་གུ་ "
"@strikeལུ་  call_put_flag, @call_put_flag སིཊཀ་ དང་ཅིག་ཁར་  ཡུ་རོ་པིན་གདམ་ཁ་ཅིག་གི་ "
"'ཐི་ཊ'འདི་རྩིས་བཏོན་ནི་ལུ་  ཤོལསི་གནགཔོ་དཔེ་འདི་ལག་ལེན་འཐབ་ཨིན།\n"
"\n"
"(གདམ་ཁ་འདི་གི་ཐེ་ཊ་འདི་  དུས་ཡུན་ཡལ་མི་ལུ་འབྲེལ་མི་དང་ཅིག་ཁར་དེའི་གོང་ཚད་ཀྱི་བསྒྱུར་བཅོས་འདི་ཨིན།)\n"
"\n"
"@time འདི་  ལོ་གྲངས་ནང་གདམ་ཁ་གསལ་སྟོན་འབད་དེ་ཡོད་མི་གི་  དུས་ཡུན་ཚང་བ་ལུ་ཆུ་ཚོད་འདི་ཨིནམ་\n"
"དང་ @rate འདི་  བརྒྱ་ཆའི་ནང་  བསྟར་སྤྱོད་ཚེས་གྲངས་ལུ་  ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་འདི་ཨིན།\n"
"@volatility འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་དུས་ཡུན་གྱི་དོན་ལུ་  བདོག་གཏད་ཀྱི་བརྒྱ་ཆའི་ནང་  ལོ་"
"བསྟར་ཡལ་བའི་རང་བཞིན་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་པ་"
"འདི་ཨིན།\n"
"* སླར་ལོག་འབད་མི་གནས་གོང་འདི་  365.25 ཉིནམ་རེ་རེ་ལུ་  གདམ་ཁའི་གནས་གོང་གི་བསྒྱུར་བཅོས་ཀྱི་ཚད་ཕབ་"
"ཆ་སྦེ་གསལ་སྟོན་འབད་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_VEGA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:486
#, no-c-format
msgid ""
"@FUNCTION=OPT_BS_VEGA\n"
"@SYNTAX=OPT_BS_VEGA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_VEGA uses the Black-Scholes model to calculate the "
"'vega' of a European option struck at @strike on an asset with spot price "
"@spot.\n"
"(The vega of an option is the rate of change of its price with respect to "
"volatility, and is the same for calls and puts.)\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
" @time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% volatility.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BS_VEGA\n"
"@SYNTAX=OPT_BS_VEGA(spot,strike,time,rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_VEGA དེ་གིས་ ས་ཁོངས་གོང་ཚད་@spot དང་ཅིག་ཁར་བདོག་གཏད་ཅིག་གུ་ "
"@strikeལུ་  ཡུ་རོ་པིན་གདམ་ཁ་སིཊཀ་ཅིག་གི་  'ཝི་ག་' འདི་རྩིས་བཏོན་ནི་ལུ་  བེལཀེ་-ཤོལསི་དཔེ་འདི་ལག་"
"ལེན་འཐབ་ཨིན། \n"
"གདམ་ཁ་འད་གི་ཝི་ག་འདི་  ཡལ་བའི་རང་བཞིན་དང་འབྲེལ་བའི་དེ་འི་གོང་ཚད་ཀྱི་ བསྒྱུར་བཅོས་ཚད་འདི་ཨིནམ་"
"དང་  ཀོལསི་དང་བཙུགས་ནི་གི་དོན་ལུ་ལྕོགས་ཐདཔ་ཨིན།)\n"
"@volatility འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་  དུས་ཡུན་གྱི་དོན་ལུ་བདོག་གཏད་ཀྱི་  བརྒྱ་ཆའི་ནང་ ལོ་"
"བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
" @time འདི་  ལོ་གྲངས་གདམ་ཁ་གསལ་སྟོན་འབད་བའི་  དུས་ཡུན་ཚང་བའི་ཆུ་ཚོད་ཨིན།\n"
"@rate འདི་  བརྒྱ་ཆའི་ནང་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་ ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚེད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་མི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"\n"
"* སླར་ལོག་འབད་དེ་ཡོད་པའི་གནས་གོང་འདི་  ཡལ་བའི་རང་བཞིན་100%རེ་རེ་གི་ཚད་བསྒྱུར་བཅོས་སྦེ་གསལ་སྟོན་"
"འབད་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:561
#, no-c-format
msgid ""
"@FUNCTION=OPT_BS_RHO\n"
"@SYNTAX=OPT_BS_RHO(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_RHO uses the Black-Scholes model to calculate the 'rho' "
"of a European option with call_put_flag, @call_put_flag struck at @strike on "
"an asset with spot price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"\n"
"(The rho of an option is the rate of change of its price with respect to the "
"risk free interest rate.)\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% change in @rate.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BS_RHO\n"
"@SYNTAX=OPT_BS_RHO(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_RHO དེ་གིས་  ས་ཁོངས་གོང་ཚད་@spot དང་ཅིག་ཁར་བདོག་གཏད་ཅིག་གུ་ "
"@strikeལུ་  call_put_flag, @call_put_flag struck ཅིག་ཁར་ཡུ་རོ་པིན་གདམ་ཁ་ཅིག་གི་ 'རཱོ' "
"འདི་རྩིས་བརྐྱབ་ནི་ལུ་  བེལེཀ་-ཤོལསི་དཔེ་འདི་ལག་ལེན་འཐབ་ཨིན།  \n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཅིག་ཨིན་ན་"
"མེན་ན་བརྡ་སྟོན་ནི་ཨིན།\n"
"\n"
"(གདམ་ཁ་འདི་གི་རཱོ་འདི་  ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་འདི་ལུ་འབྲེལ་བའི་  དེ་འི་གོང་ཚད་ཀྱི་ཚད་བསྒྱུར་བ་འདི་"
"ཨིན།)\n"
"@time འདི་  ལོ་གྲངས་ཚུ་ནང་གདམ་ཁ་གསལ་སྟོན་འབད་བའི་  དུས་ཡུན་ཚང་་བའི་ཆུ་ཚོད་ཨིན།\n"
"@rate འདི་   བརྒྱ་ཆའི་ནང་སྦེ་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་"
"པ་འདི་ཨིནམ་ལས་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"* སླར་ལོག་འབད་བའི་གནས་གོང་འདི་  @rateནང་ བསྒྱུར་བཅོས་100% རེ་རེའི་གདམ་ཁའི་གནས་གོང་གི་ཚད་བསྒྱུར་"
"བ་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_THETA, OPT_BS_VEGA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:629
#, no-c-format
msgid ""
"@FUNCTION=OPT_BS_CARRYCOST\n"
"@SYNTAX=OPT_BS_CARRYCOST(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_CARRYCOST uses the Black-Scholes model to calculate the "
"'elasticity' of a European option struck at @strike on an asset with spot "
"price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"\n"
"(The elasticity of an option is the rate of change of its price with respect "
"to its cost of carry.)\n"
"\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.  @time is the time to maturity of the "
"option expressed in years.\n"
"@rate is the risk-free interest rate to the exercise date, in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% volatility.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BS_CARRYCOST\n"
"@SYNTAX=OPT_BS_CARRYCOST(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BS_CARRYCOST དེ་གིས་  ས་ཁོངས་གོང་ཚད་ @spot དང་ཅིག་ཁར་བདོག་གཏད་ཅིག་"
"གུ་@strikeལུ་  ཡུ་རོ་པིན་གདམ་ཁ་ཐོགས་ནི་ཅིག་གི་ 'བསྣར་བཏུབ་པའི'འདི་རྩིས་བཏོན་ནི་ལུ་  བེལེཀ་-ཤོལསི་"
"འདི་ལག་ལེན་འཐབ་ཨིན།  \n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་འདི་ཨིན།\n"
"\n"
"(གདམ་ཁ་འདི་གི་བསྣར་བཏུབ་པ་འདི་  འབག་ཚུགས་པའི་གོང་ཚད་དེ་དང་འབྲེལ་བའི་  ཚད་བགྱུར་བའི་གདམ་ཁ་ཅིག་"
"ཨིན།)\n"
"\n"
"@volatility འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་དུས་ཡུན་གྱི་དོན་ལུ་  བདོག་གཏད་ཀྱི་ བརྒྱ་ཆའི་ནང་ལོ་བསྟར་"
"ཡལ་བའི་རང་བཞིན་ཨིན།  @time འདི་ ལོ་གྲངས་ཚུ་ནང་གདམ་ཁ་གསལ་སྟོན་འབད་བའི་  དུས་ཡུན་ཚང་བའི་ཆུ་"
"ཚོད་ཨིན།\n"
"@rate འདི་  བརྒྱ་ཆའི་ནང་སྦེ་ བསྟར་སྤྱོད་ཚེས་གྲངས་ལུ་ ཉེན་ཁ་མེད་པའི་སྐྱེ་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་"
"པ་འདི་ཨིནམ་དང་ འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"\n"
"* སླར་ལོག་འབད་བའི་གནས་གོང་འདི་  ཡལ་བའི་རང་བཞིན་100% རེ་རེའི་གདམ་ཁའི་གནས་གོང་གི་  ཚད་འགྱུར་བ་"
"སྦེ་གསལ་སྟོན་འབད་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:701
#, no-c-format
msgid ""
"@FUNCTION=OPT_GARMAN_KOHLHAGEN\n"
"@SYNTAX=OPT_GARMAN_KOHLHAGEN(call_put_flag,spot,strike,time,domestic_rate,"
"foreign_rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_GARMAN_KOHLHAGEN values the theoretical price of a European "
"currency option struck at @strike on an asset with spot price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date. \n"
"@time the number of days to exercise.\n"
"@domestic_rate is the domestic risk-free interest rate to the exercise "
"date.\n"
"@foreign_rate is the foreign risk-free interest rate to the exercise date, "
"in percent.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"* The returned value will be expressed as the rate of change of option "
"value, per 100% volatility.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_GARMAN_KOHLHAGEN\n"
"@SYNTAX=OPT_GARMAN_KOHLHAGEN(call_put_flag,spot,strike,time,domestic_rate,"
"foreign_rate,volatility[,cost_of_carry])\n"
"@DESCRIPTION=OPT_GARMAN_KOHLHAGEN དེ་གིས་  ས་ཁོངས་གོང་ཚད་ @spot དང་ཅིག་ཁར་བདོག་གཏད་"
"ཅིག་གུ་ @strikeལུ་  ཡུ་རོ་པིན་དངུལ་གྱི་གདམ་ཁ་ཐོགས་ནི་ཅིག་གི་  འཆར་བའི་གོང་ཚད་འདི་ཕན་ཐོགསཔ་སྦེ་"
"བརྩིཝ་ཨིན། \n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡངན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ཨིན།\n"
"@volatility འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་  དུས་ཡུན་གྱི་དོན་ལུ་བདོག་གཏད་ཀྱི་  བརྒྱ་ཆའི་ནང་  ལོ་"
"བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"@time འདི་  བསྟར་སྤྱོད་འབད་ནིའི་ཉིནམ་གྱི་གྲངས་ཨིན།\n"
"@domestic_rate འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་  ནང་འཁོད་ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་ཨིན།\n"
"@foreign_rate འདི་  བརྒྱ་ཆའི་ནང་སྦེ་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་  ཕྱིའི་ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་"
"ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་"
"པ་འདི་ཨིནམ་དང་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"* སླར་ལོག་འབད་བའི་གནས་གོང་འདི་  ཡལ་བའི་རང་བཞིན་100% རེ་རེའི་གདམ་ཁ་གནས་གོང་གི་འགྱུར་བའི་ ཚད་"
"སྦེ་གསལ་སྟོན་འབད་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:772
#, no-c-format
msgid ""
"@FUNCTION=OPT_FRENCH\n"
"@SYNTAX=OPT_FRENCH(call_put_flag,spot,strike,time,t2,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_FRENCH values the theoretical price of a European option "
"adjusted for trading day volatility, struck at @strike on an asset with spot "
"price @spot.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@volatility is the annualized volatility, in percent, of the asset for the "
"period through to the exercise date.\n"
" @time the number of calendar days to exercise divided by calendar days in "
"the year.\n"
"@t2 is the number of trading days to exercise divided by trading days in the "
"year.\n"
"@rate is the risk-free interest rate.\n"
"@cost_of_carry is the leakage in value of the underlying asset, to the "
"exercise date, in percent.\n"
"For common stocks, this would be the dividend yield.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_FRENCH\n"
"@SYNTAX=OPT_FRENCH(call_put_flag,spot,strike,time,t2,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_FRENCH དེ་གིས་ ས་ཁོངས་གོང་ཚད་ @spotདང་ཅིག་ཁར་བདོག་གཏད་ཅིག་གུ་ "
"@strike ཐོགས་ཡོད་མི་ལུ་  ཚོང་འབྲེལ་འཐབ་ནིའི་ཉིནམ་ཡལ་བའི་རང་བཞིན་གྱི་དོན་ལུ་  ཡུ་རོ་པིན་གདམ་ཁའི་"
"བདེ་སྒྲིག་ཅིག་གི་  གྲུབ་མཐའི་གོང་ཚད་འདི་ཕན་ཐོགཔ་སྦེ་བརྩིཝ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  གདམ་ཁ་འདི་ཀོལ་ཡངན་བཙུགས་ཨིན་ན་མེན་ན་བརྡ་སྟོན་ནི་"
"ཨིན།\n"
"@volatility འདི་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་དུས་ཡུན་གྱི་དོན་ལུ་  བརྒྱ་ཆའི་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་"
"བཞིན་ཨིན།\n"
" @time འདི་  ལོའི་ནང་ཟླ་ཐའི་ཉིནམ་གྱིས་  བསྟར་སྤྱོད་བགོ་བཤའ་བརྐྱབ་ནི་ལུ་  ཟླ་ཐོའི་ཉིནམ་ཚུ་གི་ཨང་གྲངས་"
"ཨིན།\n"
"@t2 འདི་  ལོ་གཅིག་ནང་ཚོང་འབྲེལ་འཐབ་པའི་ཉིནམ་གྱིས་  བསྟར་སྤྱོད་བགོ་བཤའ་བརྐྱབ་ནི་ལུ་  ཚོང་འབྲེལ་ཉིནམ་"
"གྱི་ཨང་གྲངས་ཨིན།\n"
"@rate འདི་  ཉེན་ཁ་མེད་པའི་སྐྱེད་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  བརྒྱ་ཆའི་ནང་སྦེ་  བསྟར་སྤྱོད་ཚེས་གྲངས་འདི་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་"
"གནས་གོང་ཉམས་པའདི་ཨིན།\n"
"ཅ་མཛོད་མཐུན་མོང་གི་དོན་ལུ་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:836
#, no-c-format
msgid ""
"@FUNCTION=OPT_JUMP_DIFF\n"
"@SYNTAX=OPT_JUMP_DIFF(call_put_flag,spot,strike,time,rate,volatility,lambda,"
"gamma)\n"
"@DESCRIPTION=OPT_JUMP_DIFF models the theoretical price of an option "
"according to the Jump Diffusion process (Merton).\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price of the option.\n"
"@time is the time to maturity of the option expressed in years.\n"
"@rate is the annualized rate of interest.\n"
"@volatility is the annualized volatility of the underlying asset.\n"
"@lambda is expected number of 'jumps' per year.\n"
"@gamma is proportion of volatility explained by the 'jumps.'\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_JUMP_DIFF\n"
"@SYNTAX=OPT_JUMP_DIFF(call_put_flag,spot,strike,time,rate,volatility,lambda,"
"gamma)\n"
"@DESCRIPTION=OPT_JUMP_DIFFདེ་གིས་  ཡར་སེང་དར་ཁྱབ་(མར་ཊོན་)ལུ་ གཞི་བཞག་སྟེ་  གདམ་ཁ་འདི་"
"གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོན་འབདཝ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་མི་གི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁའི་གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@time འདི་  ལོ་གྲངས་ཚུ་ནང་གདམ་ཁ་གསལ་སྟོན་འབད་དེ་ཡོད་མི་གི་  དུས་ཡུན་ཚང་ནི་ལུ་ཆུ་ཚོད་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཚད་འདི་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"@lambda འདི་  ལོ་རེའི་ནང་རེ་བ་བསྐྱེད་པའི་ 'ཡར་སེང་' གི་ཨང་གྲངས་ཨིན།\n"
"@gamma འདི་ 'jumps'གིས་གསལ་བཤད་འབད་ཡོད་པའི་ཡལ་བའི་རང་བཞིན་གྱི་སྙོམས་ཚད་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:935
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_MILTERSEN_SCHWARTZ\n"
"@SYNTAX=OPT_MILTERSEN_SCHWARTZ(call_put_flag,p_t,f_t,x,t1,t2,v_s,v_e,v_f,"
"rho_se,rho_sf,rho_ef,kappa_e,kappa_f)\n"
"@DESCRIPTION=OPT_MILTERSEN_SCHWARTZ models the theoretical price of options "
"on commodities futures according to Miltersen & Schwartz. \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@p_t is a zero coupon bond with expiry at option maturity.\n"
"@f_t is the futures price.\n"
"@x is the strike price.\n"
"@t1 is the time to maturity of the option.\n"
"@t2 is the time to maturity of the underlying commodity futures contract.\n"
"@v_s is the volatility of the spot commodity price.\n"
"@v_e is the volatility of the future convenience yield.\n"
"@v_f is the volatility of the forward rate of interest.\n"
"@rho_se is correlation between the spot commodity price and the convenience "
"yield.\n"
"@rho_sf is correlation between the spot commodity price and the forward "
"interest rate.\n"
"@rho_ef is correlation between the forward interest rate and the convenience "
"yield.\n"
"@kappa_e is the speed of mean reversion of the convenience yield.\n"
"@kappa_f is the speed of mean reversion of the forward interest rate.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_MILTERSEN_SCHWARTZ\n"
"@SYNTAX=OPT_MILTERSEN_SCHWARTZ(call_put_flag,p_t,f_t,x,t1,t2,v_s,v_e,v_f,"
"rho_se,rho_sf,rho_ef,kappa_e,kappa_f)\n"
"@DESCRIPTION=OPT_MILTERSEN_SCHWARTZ དེ་གིས   མིལ་ཊར་སན་དང་སིཆ་ཝརཌིསི་བཟུམ་སྦེ་བ་ཅིན་ "
"ཚོང་ཟོག་མ་འོངས་མི་གུ་  གདམ་ཁའི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོན་འབདཝ་ཨིན། \n"
"@call_put_flag འདི་'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@p_t འདི་  གདམ་ཁའི་དུས་ཡུན་ཚང་བ་ལུ་ཡལ་མི་དང་ཅིག་ཁར་  ཀླད་ཀོར་འཛིན་ཤོག་བཱོནཌི་ཅིག་ཨིན།\n"
"@f_t འདི་  མ་འོངས་པའི་གོང་ཚད་ཨིན།\n"
"@x འདི་གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@t1 འདི་  གདམ་ཁའི་དུས་ཡུན་ཚང་བ་ལུ་ཆུ་ཚོད་འདི་ཨིན།\n"
"@t2 འདི་  འོག་ལུ་ཡོད་པའི་ཚོང་ཟོག་མ་འོངས་པ་འབྲེལ་བའི་  དུས་ཡུན་ཚང་བ་ལུ་ཆུ་ཚོད་འདི་ཨིན།\n"
"@v_s འདི་ས་ཁོངས་ཚོང་ཟོག་གོང་ཚད་ཀྱི་ཡལ་བའི་རང་བཞིན་ཨིན།\n"
"@v_e འདི་  མ་འོངས་པའི་བདེ་སྟབས་ཐོན་འབྲས་ཀྱི་ཡལ་བའི་རང་བཞིན་ཨིན།\n"
"@v_f འདི་  སྐྱེད་ཀྱི་གདོང་བསྐྱོད་ཚད་ཀྱི་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"@rho_se འདི་  ས་ཁོངས་ཚོང་ཟོག་གོང་ཚད་དང་བདེ་སྟབས་ཐོན་འབྲས་ཀྱི་བར་ནའི་ཕན་ཚུན་འབྲེལ་བ་ཨིན།\n"
"@rho_sf འདི་   ས་ཁོངས་ཚོང་ཟོག་གོང་ཚད་དང་ གདོང་བསྐྱོད་སྐྱེད་ཚད་ཀྱི་བར་ནའི་ཕན་ཚུན་འབྲེལ་བ་ཨིན།\n"
"@rho_ef འདི་  གདོང་བསྐྱོད་སྐྱེད་ཚད་དང་  བདེ་སྟབས་ཐོན་འབྲས་ཀྱི་བར་ནའི་ཕན་ཚུན་འབྲེལ་བ་ཨིན།\n"
"@kappa_e འདི་  བདེ་སྟབས་ཐོན་འབྲས་ཀྱི་བར་མའི་ཆ་གྲངས་སླར་ལོག་གི་མགྱོགས་ཚད་འདི་ཨིན།\n"
"@kappa_f འདི་  གདོང་བསྐྱོད་སྐྱེད་ཚད་ཀྱི་བར་མའི་ཆ་གྲངས་སླར་ལོག་གི་མགྱོགས་ཚད་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1048
#, no-c-format
msgid ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(call_put_flag,spot,strike,t1,t2,rate,d,volatility)\n"
"@DESCRIPTION=OPT_RGW models the theoretical price of an american option "
"according to the Roll-Geske-Whaley approximation where: \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@t1 is the time to the dividend payout.\n"
"@t2 is the time to option expiration.\n"
"@rate is the annualized rate of interest.\n"
"@d is the amount of the dividend to be paid.\n"
"@volatility is the annualized rate of volatility of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_RGW\n"
"@SYNTAX=OPT_RGW(call_put_flag,spot,strike,t1,t2,rate,d,volatility)\n"
"@DESCRIPTION=OPT_RGW དེ་གིས་   རོལ་-གེསི་ཀི་-ཝ་ལེ་ ཆ་མཚུངས་དང་འཁྲིལ་བ་ཅིན་  ཨ་མི་རི་ཀཱན་"
"གདམ་ཁ་ཅིག་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན་  དེ་ཡང་: \n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡངན་བཙུགས་ནི་ཨིན་ན་མེན་"
"ན་བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་ས་ལུ་  གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@t1 འདི་  བགོ་བཤའ་བརྐྱབ་པའི་པེ་ཨའུཏི་ལུ་ཆུ་ཚོད་འདི་ཨིན།\n"
"@t2 འདི་  གདམ་ཁ་ཡལ་ནི་ལུ་ཆུ་ཚོད་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཚད་འདི་ཨིན།\n"
"@d འདི་  སྤྲོད་ནི་ཨིན་པའི་བགོ་བཤའ་གི་གྲངས་ཚད་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་ཡལ་བའི་རང་བཞིན་གྱི་ལོ་བསྟར་ཚད་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1105
#, no-c-format
msgid ""
"@FUNCTION=OPT_BAW_AMER\n"
"@SYNTAX=OPT_BAW_AMER(call_put_flag,spot,strike,time,rate,cost_of_carry,"
"volatility)\n"
"@DESCRIPTION=OPT_BAW_AMER models the theoretical price of an option "
"according to the Barone Adesie & Whaley approximation. \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BAW_AMER\n"
"@SYNTAX=OPT_BAW_AMER(call_put_flag,spot,strike,time,rate,cost_of_carry,"
"volatility)\n"
"@DESCRIPTION=OPT_BAW_AMER དེ་གིས་  བ་རོན་ཨེ་ཌི་སི་དང་ ཝ་ལེ་ཆ་མཚུངས་དང་འཁྲིལ་བ་ཅིན་  གདམ་"
"ཁ་འདི་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན། \n"
"@call_put_flag འདི་  'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  ཀོལ་ཡང་ན་བཙུགས་ནི་འདི་གདམ་ཁ་ཨིན་ན་"
"མེན་ན་བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་པའི་  གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@time འདི་  གདམ་ཁའི་དུས་ཡུན་ཚང་བ་ལུ་ཉིནམ་གྱི་ཨང་གྲངས་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ཉེན་ཁ་མེད་པའི་ལོ་བསྟར་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཀྱི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་པ་"
"འདི་ཨིནམ་དང་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1291
#, no-c-format
msgid ""
"@FUNCTION=OPT_BJER_STENS\n"
"@SYNTAX=OPT_BJER_STENS(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BJER_STENS models the theoretical price of american options "
"according to the Bjerksund & Stensland approximation technique.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BJER_STENS\n"
"@SYNTAX=OPT_BJER_STENS(call_put_flag,spot,strike,time,rate,volatility[,"
"cost_of_carry])\n"
"@DESCRIPTION=OPT_BJER_STENS དེ་གིས་  ཇརཀ་སནཌི་དང་སི་ཊེནསི་ལེནཌི་ཆ་མཚུངས་ཐབས་ཤེས་དང་འཁྲིལ་"
"བ་ཅིན་  ཨ་མི་རི་ཀཱན་གདམ་ཁ་ཚུ་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ནི་འདི་ཨིན་ན་"
"མེན་ན་བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་འདི་ཐོགས་འབད་ཡོད་པའི་གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@time འདི་  གདམ་ཁའི་དུས་ཡུན་ཚང་ནི་ལུ་ཉིནམ་གྱི་གྲངས་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ཉེན་ཁ་མེན་པའི་ལོ་བསྟར་ཚད་འདི་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་   འདི་  བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1378
#, no-c-format
msgid ""
"@FUNCTION=OPT_EXEC\n"
"@SYNTAX=OPT_EXEC(call_put_flag,spot,strike,time,rate,volatility,"
"cost_of_carry,lambda)\n"
"@DESCRIPTION=OPT_EXEC models the theoretical price of executive stock "
"options @call_put_flag is 'c' or 'p' to indicate whether the option is a "
"call or a put.\n"
"One would expect this to always be a call option.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@lambda is the jump rate for executives. The model assumes executives "
"forfeit their options if they leave the company.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_EXEC\n"
"@SYNTAX=OPT_EXEC(call_put_flag,spot,strike,time,rate,volatility,"
"cost_of_carry,lambda)\n"
"@DESCRIPTION=OPT_EXEC དེ་གིས་  ལག་ལེན་འཐབ་ནིའི་ཅ་མཛོད་གདམ་ཁ་ཚུ་གི་  གྲུབ་མཐའི་གོང་ཚད་འདི་"
"དཔེ་སྟོནམ་ཨིན། @call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་"
"བཙུགས་ནི་ཨིན་ན་མེན་ན་བརྡ་སྟོན་ནི་འདི་ཨིན།\n"
"གཅིག་གིས་འདི་ཨ་རྟག་རང་ཀོལ་གདམ་ཁ་རེ་བ་བསྐྱེདཔ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་པའི་  གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@time འདི་  གདམ་ཁ་ལུ་དུས་ཡུན་ཚང་ནི་ལུ་ཉིནམ་གྱི་གྲངས་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ཉེན་ཁ་མེད་པའི་ལོ་བསྟར་ཚད་འདི་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་"
"པ་འདི་ཨིནམ་དང་  འདི་ བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"@lambda འདི་  ལག་ལེན་འཐབ་ནིའི་དོན་ལུ་ཡར་སེང་ཚད་ཨིན།དེ་ཚུ་གིས་ཚོང་སྡེ་བཞག་པ་ཅིན་  དཔེ་ཚུ་གིས་"
"འཐུས་ཤོར་ཡོདཔ་སྦེ་བརྩིཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1429
#, no-c-format
msgid ""
"@FUNCTION=OPT_FORWARD_START\n"
"@SYNTAX=OPT_FORWARD_START(call_put_flag,spot,alpha,time1,time,rate,"
"volatility,cost_of_carry)\n"
"@DESCRIPTION=OPT_FORWARD_START models the theoretical price of forward start "
"options\n"
" @call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@alpha is a fraction that set the strike price the future date @time1.\n"
"@time1 is the number of days until the option starts.\n"
"@time is the number of days to maturity of the option.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_FORWARD_START\n"
"@SYNTAX=OPT_FORWARD_START(call_put_flag,spot,alpha,time1,time,rate,"
"volatility,cost_of_carry)\n"
"@DESCRIPTION=OPT_FORWARD_START དེ་གིས་  གདོང་བསྐྱོད་འགོ་བཙུགས་གདམ་ཁ་ཚུ་གི་  གྲུབ་མཐའི་གོང་"
"ཚད་འདི་དཔེ་སྟོནམ་ཨིན།\n"
" @call_put_flag འདི་'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་   གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ནི་ཨིན་ན་"
"མེན་ན་བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@alpha འདི་ མ་འོངས་པའི་ཚེས་གྲངས་@time1གི་གོང་ཚད་བརྐྱབ་ནི་གཞི་སྒྲིག་འབད་མི་བགོ་གྲངས་འདི་ཨིན། \n"
"@time1 འདི་  གདམ་ཁ་འདི་འགོ་མ་བཙུགས་ཚུན་ཚོད་ཀྱི་ཉིནམ་གྲངས་འདི་ཨིན།\n"
"@time འདི་  གདམ་ཁའི་དུས་ཡུན་ཚང་བ་ལུ་ཉིནམ་གྱི་གྲངས་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་གྲངས་ཉེན་ཁ་མེད་པ་འདི་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གོང་ཚད་ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་  འདི་བགོ་བཤའི་ཐོན་འབྲས་ཨིན།\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1495
#, no-c-format
msgid ""
"@FUNCTION=OPT_TIME_SWITCH\n"
"@SYNTAX=OPT_TIME_SWITCH(call_put_flag,spot,strike,a,time,m,dt,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_TIME_SWITCH models the theoretical price of time switch "
"options. (Pechtl 1995)\n"
"The holder receives @a * @dt for each period dt that the asset price was "
"greater than the strike price (for a call) or below it (for a put). \n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@a is the amount received for each time period as discussed above.\n"
"@time is the maturity of the option in years.\n"
"@m is the number of time units the option has already met the condition.\n"
"@dt is the agreed upon discrete time period (often a day) expressed as a "
"fraction of a year.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_TIME_SWITCH\n"
"@SYNTAX=OPT_TIME_SWITCH(call_put_flag,spot,strike,a,time,m,dt,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_TIME_SWITCH དེ་གིས་  ཆུ་ཚོད་སོར་བསྒྱུར་གདམ་ཁ་ཚུ་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་"
"སྟོནམ་ཨིན། (Pechtl 1995)\n"
"བཤེད་མི་དེ་གིས་ @a * @dt འདི་   དུས་ཡུན་ཌི་ཊི་རེ་རེ་ལུ་ཨིན་མི་དེ་ཡང་  བདོག་གཏད་གོང་ཚད་  (ཀོལ་གྱི་"
"དོན་ལུ་) ཡང་ན་དེའི་འོག་གི་(བཙུགས་ཀྱི་དོན་ལུ་)ལས་སྦོམ་མི་འདི་ཨིན། \n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་པའི་གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@a འདི་  ལྟག་ལུ་གྲོས་བསྡུར་འབད་དོ་བཟུམ་སྦེ་  དུས་ཡུན་རེ་རེ་གི་དོན་ལུ་གྲངས་ཚད་ཐོབ་ཡོདཔ་འདི་ཨིན།\n"
"@time འདི་  ལོའི་ནང་གདམ་ཁ་གི་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@m འདི་  གདམ་ཁ་དེ་གིས་ཧེ་མ་ལས་རང་གནས་སྟངས་ཚང་བའི་  ཆུ་ཚོད་ཀྱི་ཆ་ཕྲན་ཚུ་གི་ཨང་གྲངས་ཨིན།\n"
"@dt འདི་  ལོའི་བགོ་གྲངས་སྦེ་གསལ་སྟོན་འབད་ཡོད་མི་ ཆུ་ཚོད་དུས་ཡུན་(ཉིནམ་གཅིག་ནང་ལོག་ཅི་ལོག་ཅི་)སོ་སོ་"
"ལུ་ཁ་བཟེད་ནི་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་   འོག་ལུ་ཡོད་མི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་  འདི་བགོ་བཤའི་ཐོན་འབྲས་ཨིན།\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1549
#, fuzzy, no-c-format
msgid ""
"@FUNCTION=OPT_SIMPLE_CHOOSER\n"
"@SYNTAX=OPT_SIMPLE_CHOOSER(call_put_flag,spot,strike,time1,time2,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_SIMPLE_CHOOSER models the theoretical price of simple "
"chooser options.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time1 is the time in years until the holder chooses a put or a call "
"option.\n"
"@time2 is the time in years until the chosen option expires.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_SIMPLE_CHOOSER\n"
"@SYNTAX=OPT_SIMPLE_CHOOSER(call_put_flag,spot,strike,time1,time2,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_SIMPLE_CHOOSER དེ་གིས་  འཇམ་སམ་གདམ་ཁ་ཚུ་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་"
"སྟོནམ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་པའི་  གོོང་ཚད་བརྐྱབ་ནི་འདི་ཨིན།\n"
"@time1 འདི་  བཤེད་མི་དེ་གིས་བཙུགས་ཡང་ན་ཀོལ་གདམ་ཁ་འདི་གདམ་ཁ་མ་བརྐྱབ་ཚུན་ཚོད་ཀྱི་  ལོའི་དུས་ཡུན་"
"འདི་ཨིན།\n"
"@time2 འདི་  གདམ་ཁ་བརྐྱབ་སྟེ་ཡོད་མི་གདམ་ཁ་འདི་ཡལ་མ་འགྱོ་ཚུན་ཚོད་ཀྱི་  ལོའི་དུས་ཡུན་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་  འདི་བགོ་བཤའི་ཐོན་འབྲས་ཨིན།\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1612
#, no-c-format
msgid ""
"@FUNCTION=OPT_COMPLEX_CHOOSER\n"
"@SYNTAX=OPT_COMPLEX_CHOOSER(call_put_flag,spot,strike_call,strike_put,time,"
"time_call,time_put,rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_COMPLEX_CHOOSER models the theoretical price of complex "
"chooser options.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike_call is the strike price at which the option is struck, applicable "
"if exercised as a call option.\n"
"@strike_put is the strike price at which the option is struck, applicable if "
"exercised as a put option.\n"
"@time is the time in years until the holder chooses a put or a call "
"option. \n"
"@time_call is the time in years to maturity of the call option if chosen.\n"
"@time_put is the time in years  to maturity of the put option if chosen.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_COMPLEX_CHOOSER\n"
"@SYNTAX=OPT_COMPLEX_CHOOSER(call_put_flag,spot,strike_call,strike_put,time,"
"time_call,time_put,rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_COMPLEX_CHOOSER དེ་གིས་  གོ་དཀའ་བ་གདམ་ནིའི་གདམ་ཁ་ཚུ་གི་  གྲུབ་མཐའི་གོང་"
"ཚད་འདི་དཔེ་སྟོནམ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike_call འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་པའི་གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིནམ་དང་  ཀོལ་གདམ་ཁ་སྦེ་བསྟར་"
"སྤྱོད་འབད་དེ་ཡོད་པ་ཅིན་འཇུག་སྤྱོད་འབད་ཚུགས།\n"
"@strike_put འདི་  གདམ་ཁ་འདི་སིཊཀ་འབད་དེ་ཡོད་པའི་གོང་ཚད་བརྐྱབ་ནི་འདི་ཨིནམ་དང་  བཙུགས་གདམ་ཁ་"
"སྦེ་བསྟར་སྤྱོད་འབད་དེ་ཡོད་པ་ཅིན་  འཇུག་སྤྱོད་འབད་ཚུགས།\n"
"@time འདི་  བཤེད་མི་དེ་གིས་བཙུགས་ཡང་ན་ཀོལ་གདམ་ཁ་འདི་མ་གདམ་ཚུན་ཚོད་ཀྱི་  ལོའི་དུས་ཡུན་འདི་ཨིན།\n"
"@time_call འདི་  གདམ་ཁ་བརྐྱབ་སྟེ་ཡོད་པ་ཅིན་  ཀོལ་གྱི་དུས་ཡུན་ཚང་བའི་ལོ་གྲངས་ཀྱི་ཆུ་ཚོད་འདི་ཨིན།\n"
"@time_put འདི་  བཙུགས་གདམ་ཁ་འདི་གདམ་ཁ་བརྐྱབ་སྟེ་ཡོད་པ་ཅིན་ལོ་གྲངས་ནང་གི་ཆུ་ཚོད་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་མི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་  འདི་བགོ་བཤའི་ཐོན་འབྲས་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1729
#, no-c-format
msgid ""
"@FUNCTION=OPT_ON_OPTIONS\n"
"@SYNTAX=OPT_ON_OPTIONS(type_flag,spot,strike1,strike2,time1,time2,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_ON_OPTIONS models the theoretical price of options on "
"options.\n"
"@type_flag is 'cc' for calls on calls, 'cp' for calls on puts, and so on for "
"'pc', and 'pp'.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike1 is the strike price at which the option being valued is struck.\n"
"@strike2 is the strike price at which the underlying option is struck.\n"
"@time1 is the time in years to maturity of the option.\n"
"@time2 is the time in years to the maturity of the underlying option.\n"
"(@time2 >= @time1).\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset of the "
"underlying option.for common stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset of "
"the underlying option.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_ON_OPTIONS\n"
"@SYNTAX=OPT_ON_OPTIONS(type_flag,spot,strike1,strike2,time1,time2,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_ON_OPTIONS དེ་གིས་  གདམ་ཁ་གུ་གདམ་ཁ་ཚུ་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་"
"ཨིན།\n"
"@type_flag འདི་ 'cc' ཀོལསི་གུ་ཀོལསི་གི་དོན་ལུ་ཨིན་, 'cp' འདི་བཙུགས་ནི་གུ་ཀོལསི་འདི་ཨིནམ་དང་   "
"དེ་ལས་ 'pc', དང་'pp'གི་དོན་ལུ་ཡང་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་བདོཀ་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike1 འདི་ གནས་གོང་བཀོད་དེ་ཡོད་པའི་གདམ་ཁ་འདི་ཐོགས་དེ་ཡོད་མི་ལུ་  གོང་ཚད་སིཊའིཀ་ཨིན།\n"
"@strike2 འདི་  འོག་ལུ་ཡོད་མི་གདམ་ཁ་འདི་ཐོགས་མི་ལུ་  གོང་ཚད་སིཊའིཀ་འདི་ཨིན།\n"
"@time1 འདི་  གདམ་ཁའི་དུས་ཡུན་ཚང་ནི་ལུ་  ལོ་་གྲངས་འདི་ཨིན།\n"
"@time2 འདི་  འོག་ལུ་ཡོད་པའི་གདམ་ཁ་གི་དུས་ཡུན་ཚང་ནི་ལུ་  ལོ་གྲངས་འདི་ཨིན།\n"
"(@time2 >= @time1).\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  འོག་ལུ་ཡོད་མི་གདམ་ཁའི་འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་པ་འདི་"
"ཨིན།  མཐུན་མོང་ཅ་མཛོད་ཀྱི་དོན་ལུ་  འདི་བགོ་བཤའི་ཐོན་འབྲས་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་པའི་གདམ་ཁའི་འོག་ལུ་ཡོད་མི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་"
"བའི་རང་བཞིན་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1817
#, no-c-format
msgid ""
"@FUNCTION=OPT_EXTENDIBLE_WRITER\n"
"@SYNTAX=OPT_EXTENDIBLE_WRITER(call_put_flag,spot,strike1,strike2,time1,time2,"
"rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_EXTENDIBLE_WRITER models the theoretical price of "
"extendible writer options. These are options that can be exercised at an "
"initial period, @time1, or their maturity extended to @time2 if the option "
"is out of the money at @time1.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike1 is the strike price at which the option is struck.\n"
"@strike2 is the strike price at which the option is re-struck if out of the "
"money at @time1.\n"
"@time1 is the initial maturity of the option in years.\n"
"@time2 is the is the extended maturity in years if chosen.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_EXTENDIBLE_WRITER\n"
"@SYNTAX=OPT_EXTENDIBLE_WRITER(call_put_flag,spot,strike1,strike2,time1,time2,"
"rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_EXTENDIBLE_WRITER དེ་གིས་  རྒྱ་བསྐྱེད་གཏང་ཚུགས་པའི་རྩོམ་འབྲི་པའི་གདམ་ཁ་ཚུ་"
"གི་  གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།   དེ་ཚུ་འགོ་ཐོག་དུས་ཡུན་, @time1ལུ་བསྟར་སྤྱོད་འབད་བཏུབ་པའི་"
"གདམ་ཁ་, ཡང་ན་  དེ་ཚུའི་དུས་ཡུན་ཚང་བ་འདི་@time2ལུ་རྒྱ་བསྐྱེད་གཏང་སྟེ་ཡོདཔ་  དེ་ཡང་  གདམ་ཁ་འདི་ "
"@time1ལུ་  དངུལ་མེད་པ་ཅིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike1 འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་མི་ལུ་  གོང་ཚད་སིཊའིཀ་འདི་ཨིན།\n"
"@strike2 འདི་  གདམ་ཁ་འདི་ལོག་ཐོགས་ཡོད་མི་ལུ་གོང་ཚད་སིཊའིཀ་ཨིན་  དེ་ཡང་ i@time1ལུ་དངུལ་མེད་པ་"
"ཅིན།\n"
"@time1 འདི་  ལོའི་ནང་  གདམ་ཁ་གི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@time2 འདི་  གདམ་ཁ་བརྐྱབ་སྟེ་ཡོད་པ་ཅིན་  ལོའི་ནང་རྒྱ་བསྐྱེད་གཏང་ཡོད་པའི་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལེ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་  འདི་བགོ་བཤའི་ཐོན་འབྲས་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1881
#, no-c-format
msgid ""
"@FUNCTION=OPT_2_ASSET_CORRELATION\n"
"@SYNTAX=OPT_2_ASSET_CORRELATION(call_put_flag,spot1,spot2,strike1,strike2,"
"time,cost_of_carry1,cost_of_carry2,rate,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_2_ASSET_CORRELATION models the theoretical price of  "
"options on 2 assets with correlation @rho.\n"
"The payoff for a call is max(@spot2 - @strike2,0) if @spot1 > @strike1 or 0 "
"otherwise.\n"
"The payoff for a put is max (@strike2 - @spot2, 0) if @spot1 < @strike1 or 0 "
"otherwise.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot1 & @spot2 are the spot prices of the underlying assets.\n"
"@strike1 & @strike2 are the strike prices at which the option is struck.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the underlying "
"assets, for common stocks, this would be the dividend yield.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying assets.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_2_ASSET_CORRELATION\n"
"@SYNTAX=OPT_2_ASSET_CORRELATION(call_put_flag,spot1,spot2,strike1,strike2,"
"time,cost_of_carry1,cost_of_carry2,rate,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_2_ASSET_CORRELATION དེ་གིས་  ཕན་ཚུན་འབྲེལ་བ་@rhoདང་ཅགི་ཁར་ བདོག་"
"གཏད་ ༢་ གུ་གདམ་ཁ་ཚུ་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།ཀོལ་གྱི་དོན་ལུ་སྤྱོད་ནི་འདི་ མཐོ་ཤོས་རང་"
"(@spot2 - @strike2,0) ག་དེམ་ཅིག་སྦེ་ @spot1 > @strike1 ཡང་ན་ 0 ཨིན་པ་ཅིན་  དེ་མེན་པ་"
"ཅིན།\n"
"བཙུགས་ཀྱི་དོན་ལུ་སྤྲོད་ནི་འདི་མཐོ་ཤོས་རང་ (@strike2 - @spot2, 0) ག་དེམ་ཅིག་སྦེ་@spot1 < "
"@strike1 ཡང་ན་ 0 ཨིན་པ་ཅིན་དེ་མེན་པ་ཅིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot1 & @spot2 ཚུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཚུ་གི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike1 & @strike2 ཚུ་  གདམ་ཁ་འདི་ཐོགས་ཡོད་མི་ལུ་  གོང་ཚད་སིཊའིཀ་འདི་ཨིན།\n"
"@time འདི་  ལོའི་ནང་གདམ་ཁའི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry1 & @cost_of_carry2 ཚུ་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་འོག་ལུ་ཡོད་པའི་བདོག་"
"གཏད་ཀྱི་གནས་གོང་ཚད་ཉམས་པ་འདི་ཨིནམ་དང་  འདི་བགོ་བཤའི་ཐོན་འབྲས་འདི་ཨིན།\n"
"@volatility1 & @volatility2 ཚུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཚུ་གི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་"
"བའི་རང་བཞིན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1938
#, no-c-format
msgid ""
"@FUNCTION=OPT_EURO_EXCHANGE\n"
"@SYNTAX=OPT_EURO_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
"cost_of_carry2,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_EURO_EXCHANGE models the theoretical price of a European "
"option to exchange one asset with quantity @qty2 and spot price @spot2 for "
"another, with quantity @qty1 and spot price @spot1.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the underlying "
"assets, for common stocks, this would be the dividend yield.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying assets.\n"
"@rho is the correlation between the two assets.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_AMER_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, "
"OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_EURO_EXCHANGE\n"
"@SYNTAX=OPT_EURO_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
"cost_of_carry2,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_EURO_EXCHANGE དེ་གིས་  གཞན་མི་གི་དོན་ལུ་  སྦུང་ཚན་@qty2 དང་ས་ཁོངས་གོང་"
"ཚད་@spot2 དང་ཅིག་ཁར་བདོག་གཏད་གཅིག་སོར་འགྱུར་འབད་ནིལུ་  སྦུང་ཚན་@qty1 དང་ ས་ཁོངས་གོང་ཚད་ "
"@spot1དང་ཅིག་ཁར་  ཡུ་རོ་པིན་གདམ་ཁ་ཅིག་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།   \n"
"@time འདི་  ལོའི་ནང་གདམ་ཁའི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry1 & @cost_of_carry2 ཚུ་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་གནས་"
"གོང་ཉམས་པ་འདི་ཨིནམ་དང་  འདི་བགོ་བཤའི་ཐོན་འབྲས་འདི་ཨིན།\n"
"@volatility1 & @volatility2 ཚུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཚུ་གི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་"
"བའི་རང་བཞིན་ཨིན།\n"
"@rho འདི་  བདོག་གཏད་གཉིས་ཀྱི་བར་ནའི་ཕན་ཚུན་མཐུན་འབྲེལ་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_AMER_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, "
"OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:1985
#, no-c-format
msgid ""
"@FUNCTION=OPT_AMER_EXCHANGE\n"
"@SYNTAX=OPT_AMER_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
"cost_of_carry2,volatility1, volatility2, rho)\n"
"@DESCRIPTION=OPT_AMER_EXCHANGE models the theoretical price of an American "
"option to exchange one asset with quantity @qty2 and spot price @spot2 for "
"another, with quantity @qty1 and spot price @spot1.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry1 & @cost_of_carry2 are the leakage in value of the underlying "
"assets, for common stocks, this would be the dividend yield.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying assets.\n"
"@rho is the correlation between the two assets.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_EURO_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, "
"OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_AMER_EXCHANGE\n"
"@SYNTAX=OPT_AMER_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,"
"cost_of_carry2,volatility1, volatility2, rho)\n"
"@DESCRIPTION=OPT_AMER_EXCHANGE དེ་གིས་  གཞན་མི་གི་དོན་ལུ་ སྦུང་ཚད་ @qty2 དང་ ས་ཁོངས་"
"གོང་ཚད་@spot2 དང་ཅིག་ཁར་བདོག་གཏད་གཅིག་སོར་འགྱུར་འབད་ནི་ལུ་, སྦུང་ཚད་ @qty1 དང་ ས་ཁོངས་གོང་"
"ཚད་ @spot1དང་ཅིག་ཁར་  ཨ་མི་རི་ཀཱན་གདམ་ཁ་ཅིག་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།\n"
"@time འདི་  ལོའི་ནང་གདམ་ཁའི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry1 & @cost_of_carry2 ཚུ་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་"
"གཏད་ཚུ་གི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་དང་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོ་ནའབྲས་ཨིན།\n"
"@volatility1 & @volatility2 ཚུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཚུ་གི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་"
"བའི་རང་བཞིན་འདི་ཨིན།\n"
"@rho འདི་  བདོག་གཏད་གཉིས་ཀྱི་བར་ནའི་ཕན་ཚུན་འབྲེལབ་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_EURO_EXCHANGE, OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, "
"OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2030
#, no-c-format
msgid ""
"@FUNCTION=OPT_SPREAD_APPROX\n"
"@SYNTAX=OPT_SPREAD_APPROX(call_put_flag,fut_price1,fut_price2,strike,time, "
"rate,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_SPREAD_APPROX models the theoretical price of a European "
"option on the spread between two futures contracts.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@fut_price1 & @fut_price2 are the prices of the two futures contracts.\n"
"@strike is the strike price at which the option is struck \n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility1 & @volatility2 are the annualized volatility in price of the "
"underlying futures contracts.\n"
"@rho is the correlation between the two futures contracts.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_SPREAD_APPROX\n"
"@SYNTAX=OPT_SPREAD_APPROX(call_put_flag,fut_price1,fut_price2,strike,time, "
"rate,volatility1,volatility2,rho)\n"
"@DESCRIPTION=OPT_SPREAD_APPROX དེ་གིས་  ཡུ་རོ་པིན་གདམ་ཁའི་གྲུབ་མཐའི་གོང་ཚད་འདི་  མ་འོངས་"
"པའི་ཁག་འབག་གཉིས་ཀྱི་བར་ནའི་དར་ཁྱབ་འདི་དཔེ་སྟོནམ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@fut_price1 & @fut_price2 ཚུ་  མ་འོངས་པའི་ཁག་འབག་གཉིས་ཀྱི་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་འདི་ཐོགས་ཡོད་མི་ལུ་  སིཊའིཀ་གོང་ཚད་འདི་ཨིན། \n"
"@time འདི་ལོའི་ནང་གདམ་ཁའི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@volatility1 & @volatility2 ཚུ་ འོག་ལུ་ཡོད་པའི་མ་འོངས་པའི་ཁག་འབག་ཚུ་གི་གོང་ཚད་ནང་  ལོ་"
"བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"@rho འདི་  མ་འོངས་པའི་ཁག་འབག་གཉིས་ཀྱི་བར་ནའི་ཕན་ཚུན་འབྲེལ་བ་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2092
#, no-c-format
msgid ""
"@FUNCTION=OPT_FLOAT_STRK_LKBK\n"
"@SYNTAX=OPT_FLOAT_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,time,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_FLOAT_STRK_LKBK models the theoretical price of an option "
"where the holder of the option may exercise on expiry at the most favourable "
"price observed during the options life of the underlying asset.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@spot_min is the minimum spot price of the underlying asset so far "
"observed.\n"
"@spot_max is the maximum spot price of the underlying asset so far "
"observed.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_FLOAT_STRK_LKBK\n"
"@SYNTAX=OPT_FLOAT_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,time,rate,"
"cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_FLOAT_STRK_LKBK དེ་གིས་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གདམ་ཁ་ཚུ་ལྟ་རྟོགས་"
"འབད་བའི་བསྒང་  གོང་ཚད་མཐུན་མི་ལུ་སྦེ་  གདམ་ཁ་བཤེད་མི་དེ་གིས་ཡལ་མི་གུ་བསྟར་སྤྱོད་འབད་མི་གདམ་ཁ་ཅིག་"
"གིས་  གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@spot_min འདི་  ད་ལྟོ་ཚུན་ཚོད་བལྟ་སྟེ་ཡོད་པའི་འོག་གི་བདོག་གཏད་ཀྱི་ས་ཁོངས་ཉུང་མཐའ་འདི་ཨིན།\n"
"@spot_max འདི་  ད་ལཏོ་ཚུན་ཚོད་བལྟ་སྟེ་ཡོད་མི་འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་མཐོ་ཤོས་འདི་ཨིན།\n"
"@time འདི་  ལོའི་ནང་གདམ་ཁའི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་གནས་གོང་ཉམས་པ་"
"འདི་ཨིནམ་དང་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2162
#, no-c-format
msgid ""
"@FUNCTION=OPT_FIXED_STRK_LKBK\n"
"@SYNTAX=OPT_FIXED_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,strike,time,"
"rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_FIXED_STRK_LKBK models the theoretical price of an option "
"where the holder of the option may exercise on expiry at the most favourable "
"price observed during the options life of the underlying asset.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@spot is the spot price of the underlying asset.\n"
"@spot_min is the minimum spot price of the underlying asset so far "
"observed.\n"
"@spot_max is the maximum spot price of the underlying asset so far "
"observed.\n"
"@strike is the strike prices at which the option is struck.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@cost_of_carry is the leakage in value of the underlying asset, for common "
"stocks, this would be the dividend yield.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_FIXED_STRK_LKBK\n"
"@SYNTAX=OPT_FIXED_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,strike,time,"
"rate,cost_of_carry,volatility)\n"
"@DESCRIPTION=OPT_FIXED_STRK_LKBK དེ་ཡང་  གདམ་ཁའི་བཤེད་མི་དེ་གིས་  འོག་ལུ་ཡོད་པའི་བདོག་"
"གཏད་ཚུ་གི་གདམ་ཁ་བརྐྱབ་པའི་བསྒང་མཐུན་པའི་གོང་ཚད་བལྟ་སྟེ་ཡོད་མི་ལུ་  ཡལ་མི་གུ་བསྟར་སྤྱོད་འབད་ནི་ཨིན་"
"པའི་  གདམ་ཁ་ཅིག་གི་གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་  དེ་ཡང་  གདམ་ཁ་དེ་གིས་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་"
"ན་བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@spot འདི་འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@spot_min འདི་  ད་ལྟོ་ཚུན་ཚོད་ལྟ་སྟེ་ཡོད་མི་ལས་  ས་ཁོངས་གོང་ཚད་ཉུང་ཤོས་འདི་ཨིན།\n"
"@spot_max འདི་  ད་ལྟོ་ཚུན་ཚོད་ལྟ་སྟེ་ཡོད་མི་ལས་ ས་ཁོངས་གོང་ཚད་མཐོ་ཤོས་འདི་ཨིན།\n"
"@strike འདི་གདམ་ཁ་འདི་ཐོགས་ཡོད་མི་ལུ་  གོང་ཚད་སིཊའིཀ་འདི་ཨིན།\n"
"@time འདི་  ལོའི་ནང་གདམ་ཁའི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་  སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@cost_of_carry འདི་  མཐུན་མོང་ཅ་མཛོད་ཚུ་གི་དོན་ལུ་  འོག་ལུ་ཡོད་པའི་གནས་གོང་ཉམས་པ་འདི་ཨིནམ་"
"དང་  འདི་བགོ་བཤའ་བརྐྱབ་པའི་ཐོན་འབྲས་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་  ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/derivatives/options.c:2252
#, no-c-format
msgid ""
"@FUNCTION=OPT_BINOMIAL\n"
"@SYNTAX=OPT_BINOMIAL(amer_euro_flag,call_put_flag,num_time_steps, spot, "
"strike, time, rate, volatility, cost_of_carry)\n"
"@DESCRIPTION=OPT_ models the theoretical price of either an American or "
"European style option using a binomial tree.\n"
"@amer_euro_flag is either 'a' or 'e' to indicate whether the option being "
"valued is an American or European style option respectively.\n"
"@call_put_flag is 'c' or 'p' to indicate whether the option is a call or a "
"put.\n"
"@num_time_steps is the number of time steps used in the valuation, a greater "
"number of time steps yields greater accuracy however is slower to "
"calculate.\n"
"@spot is the spot price of the underlying asset.\n"
"@strike is the strike price at which the option is struck.\n"
"@time is the initial maturity of the option in years.\n"
"@rate is the annualized risk-free rate of interest.\n"
"@volatility is the annualized volatility in price of the underlying asset.\n"
"@cost_of_carry is the leakage in value of the underlying asset.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"
msgstr ""
"@FUNCTION=OPT_BINOMIAL\n"
"@SYNTAX=OPT_BINOMIAL(amer_euro_flag,call_put_flag,num_time_steps, spot, "
"strike, time, rate, volatility, cost_of_carry)\n"
"@DESCRIPTION=OPT_ དེ་གིས་  རྩ་འབྲེལ་ཐ་སྙད་གཉིས་འབད་མི་ཅིག་ལག་ལེན་འཐབ་སྟེ་  ཨ་མི་རི་ཀཱན་ཡང་ན་"
"ཡུ་རོ་པིན་བཟོ་རྣམ་གདམ་ཁའི་  གྲུབ་མཐའི་གོང་ཚད་འདི་དཔེ་སྟོནམ་ཨིན།\n"
"@amer_euro_flag འདི་ 'a' ཡང་ན་ 'e' ལས་གང་རུང་ཅིག་ཨིན་མི་འདི་  གནས་གོང་བཀོད་པའི་གདམ་ཁ་"
"འདི་ཨ་མི་རི་ཀཱན་ཡང་ན་ཡུ་རོ་པིན་བཟོ་རྣམ་གདམ་ཁ་ཨིན་ན་མེན་ན་བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@call_put_flag འདི་ 'c' ཡང་ན་ 'p' ཨིན་མི་འདི་   གདམ་ཁ་འདི་ཀོལ་ཡང་ན་བཙུགས་ཨིན་ན་མེན་ན་"
"བརྡ་སྟོན་ནི་ལུ་ཨིན།\n"
"@num_time_steps འདི་  གནས་གོང་ནང་ལག་ལེན་འཐབ་པའི་  ཆུ་ཚོད་ཀྱི་རིམ་པའི་གྲངས་ཨིན་,  ཆུ་ཚོད་རིམ་"
"པའི་གྲངས་སྦོམ་མི་འདི་  འཁྲུལ་མེད་སྦོམ་སྦེ་ཐོནམ་ཨིནམ་དང་  རྩིས་སྟོན་ནི་ལུ་ལྷོད་ཆ་ཡོདཔ་ཨིན།\n"
"@spot འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་ས་ཁོངས་གོང་ཚད་འདི་ཨིན།\n"
"@strike འདི་  གདམ་ཁ་ཐོགས་ཡོད་པའི་གོང་ཚད་སིཊའིཀ་འདི་ཨིན།\n"
"@time འདི་  ལོའི་ནང་གདམ་ཁའི་འགོ་ཐོག་དུས་ཡུན་ཚང་བ་འདི་ཨིན།\n"
"@rate འདི་སྐྱེད་ཀྱི་ལོ་བསྟར་ཉེན་ཁ་མེད་པའི་ཚད་འདི་ཨིན།\n"
"@volatility འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གོང་ཚད་ནང་ལོ་བསྟར་ཡལ་བའི་རང་བཞིན་འདི་ཨིན།\n"
"@cost_of_carry འདི་  འོག་ལུ་ཡོད་པའི་བདོག་གཏད་ཀྱི་གནས་གོང་ཉམས་པ་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=OPT_BS, OPT_BS_DELTA, OPT_BS_RHO, OPT_BS_THETA, OPT_BS_GAMMA"

#: ../plugins/fn-complex/functions.c:80
msgid ""
"@FUNCTION=COMPLEX\n"
"@SYNTAX=COMPLEX(real,im[,suffix])\n"
"@DESCRIPTION=COMPLEX returns a complex number of the form x + yi.\n"
"\n"
"@real is the real and @im is the imaginary part of the complex number.  "
"@suffix is the suffix for the imaginary part.  If it is omitted, COMPLEX "
"uses 'i' by default.\n"
"\n"
"* If @suffix is neither 'i' nor 'j', COMPLEX returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COMPLEX(1,-1) equals 1-i.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COMPLEX\n"
"@SYNTAX=COMPLEX(real,im[,suffix])\n"
"@DESCRIPTION=COMPLEX དེ་གིས་  གཞི་སྒྲུབ་ x + yiགི་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@real འདི་ངོ་མ་དང་ @im འདི་  གོ་དཀའ་བའི་ཨང་གྲངས་ཀྱི་འཆར་སྣང་ཆ་ཤས་ཨིན།  @suffix འདི་  "
"འཆར་སྣང་ཆ་ཤས་ཀྱི་དོན་ལུ་རྗེས་ཚིག་འདི་ཨིན།  འདི་སྐྱུར་བཞག་པ་ཅིན་  COMPLEX དེ་གིས་ སྔོན་སྒྲིག་གིས་སྦེ་ "
"'i' འདི་ལག་ལེན་འཐབ་ཨིན། \n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @suffix འདི་ 'i' ཡང་་མེན་ 'j'མེན་པ་ཅིན་, COMPLEX དེ་གིས་#VALUE! འཛོལ་བ་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COMPLEX(1,-1) དེ་གིས་ 1-iལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-complex/functions.c:122
msgid ""
"@FUNCTION=IMAGINARY\n"
"@SYNTAX=IMAGINARY(inumber)\n"
"@DESCRIPTION=IMAGINARY returns the imaginary part of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMAGINARY returns #VALUE! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMAGINARY(\"132-j\") equals -1.\n"
"\n"
"@SEEALSO=IMREAL"
msgstr ""
"@FUNCTION=IMAGINARY\n"
"@SYNTAX=IMAGINARY(inumber)\n"
"@DESCRIPTION=IMAGINARY དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཀྱི་འཆར་སྣང་ཆ་ཤས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་ IMAGINARY དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMAGINARY(\"132-j\")  -1མཉམ་པ་ཨིན།\n"
"\n"
"@SEEALSO=IMREAL"

#: ../plugins/fn-complex/functions.c:158
msgid ""
"@FUNCTION=IMABS\n"
"@SYNTAX=IMABS(inumber)\n"
"@DESCRIPTION=IMABS returns the absolute value of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMABS returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMABS(\"2-j\") equals 2.23606798.\n"
"\n"
"@SEEALSO=IMAGINARY,IMREAL"
msgstr ""
"@FUNCTION=IMABS\n"
"@SYNTAX=IMABS(inumber)\n"
"@DESCRIPTION=IMABS དེ་གིས་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་གནས་གོང་ཡང་དག་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"*ག་དེམ་ཅིག་སྦེ་@inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་ IMABS དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMABS(\"2-j\") equals 2.23606798.\n"
"\n"
"@SEEALSO=IMAGINARY,IMREAL"

#: ../plugins/fn-complex/functions.c:191
msgid ""
"@FUNCTION=IMREAL\n"
"@SYNTAX=IMREAL(inumber)\n"
"@DESCRIPTION=IMREAL returns the real part of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMREAL returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"imreal(\"132-j\") equals 132.\n"
"\n"
"@SEEALSO=IMAGINARY"
msgstr ""
"@FUNCTION=IMREAL\n"
"@SYNTAX=IMREAL(inumber)\n"
"@DESCRIPTION=IMREAL དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་ཡན་ལག་ངོ་མ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་ , IMREAL དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"imreal(\"132-j\") 132ལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO=IMAGINARY"

#: ../plugins/fn-complex/functions.c:227
msgid ""
"@FUNCTION=IMCONJUGATE\n"
"@SYNTAX=IMCONJUGATE(inumber)\n"
"@DESCRIPTION=IMCONJUGATE returns the complex conjugate of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMCONJUGATE returns #VALUE! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMCONJUGATE(\"1-j\") equals 1+j.\n"
"\n"
"@SEEALSO=IMAGINARY,IMREAL"
msgstr ""
"@FUNCTION=IMCONJUGATE\n"
"@SYNTAX=IMCONJUGATE(inumber)\n"
"@DESCRIPTION=IMCONJUGATE དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་གོ་དཀའ་བའི་གཅིག་ཞུ་འདྲེས་པ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMCONJUGATE དེ་གིས་"
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMCONJUGATE(\"1-j\")  1+jམཉམ་པ་ཨིན།\n"
"\n"
"@SEEALSO=IMAGINARY,IMREAL"

#: ../plugins/fn-complex/functions.c:261
#, fuzzy
msgid ""
"@FUNCTION=IMINV\n"
"@SYNTAX=IMINV(inumber)\n"
"@DESCRIPTION=IMINV returns the inverse, or reciprocal, of the complex number "
"z (@inumber), where\n"
"\n"
"\t1/z = (x - i y)/(x^2 + y^2).\n"
"\n"
"* If @inumber is not a valid complex number, IMINV returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMINV(\"1-j\") equals 0.5+0.5j.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=IMINV\n"
"@SYNTAX=IMINV(inumber)\n"
"@DESCRIPTION=IMINV དེ་གིས་གོ་དཀའ་བའི་ཨང་གྲངས་ z (@inumber)གི་  ལུགས་ལྡོགས་ ཡང་ན་  ཕན་"
"ཚུན་གཉིས་ཕན་སླར་ལོག་འབདཝ་ཨིན་དེ་ཡང་\n"
"\n"
"\t1/z = (x - i y)/(x^2 + y^2).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMINV དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMINV(\"1-j\") དེ་གིས་ 0.5+0.5jམཉམ་པ་ཨིན།\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-complex/functions.c:295
msgid ""
"@FUNCTION=IMNEG\n"
"@SYNTAX=IMNEG(inumber)\n"
"@DESCRIPTION=IMNEG returns the negative of the complex number z (@inumber), "
"where\n"
"\n"
"\t-z = (-x) + i(-y).\n"
"\n"
"* If @inumber is not a valid complex number, IMNEG returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMNEG(\"1-j\") equals -1+j.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=IMNEG\n"
"@SYNTAX=IMNEG(inumber)\n"
"@DESCRIPTION=IMNEG དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ z (@inumber)གི་ མེད་ཆ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན་, དེ་ཡང་\n"
"\n"
"\t-z = (-x) + i(-y).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འད་ནུས་ཅན་དགོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMNEG དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན\n"
"\n"
"@EXAMPLES=\n"
"IMNEG(\"1-j\") མཉམ་པ་ཨིན་ -1+j.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-complex/functions.c:329
msgid ""
"@FUNCTION=IMCOS\n"
"@SYNTAX=IMCOS(inumber)\n"
"@DESCRIPTION=IMCOS returns the cosine of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMCOS returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMCOS(\"1+j\") equals 0.833730-0.988898j.\n"
"\n"
"@SEEALSO=IMSIN,IMTAN"
msgstr ""
"@FUNCTION=IMCOS\n"
"@SYNTAX=IMCOS(inumber)\n"
"@DESCRIPTION=IMCOS དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་ཀོ་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMCOS དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMCOS(\"1+j\") མཉམ་པ་ཨིན་ 0.833730-0.988898j.\n"
"\n"
"@SEEALSO=IMSIN,IMTAN"

#: ../plugins/fn-complex/functions.c:363
msgid ""
"@FUNCTION=IMTAN\n"
"@SYNTAX=IMTAN(inumber)\n"
"@DESCRIPTION=IMTAN returns the tangent of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMTAN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMTAN(\"2-j\") equals -0.2434582-1.1667363j.\n"
"\n"
"@SEEALSO=IMSIN,IMCOS"
msgstr ""
"@FUNCTION=IMTAN\n"
"@SYNTAX=IMTAN(inumber)\n"
"@DESCRIPTION=IMTAN དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཀྱི་ཊེན་ཇེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་མེན་པ་ཅིན་, IMTAN དེ་གིས་ #VALUE! "
"འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMTAN(\"2-j\") མཉམ་པ་ཨིན་ -0.2434582-1.1667363j.\n"
"\n"
"@SEEALSO=IMSIN,IMCOS"

#: ../plugins/fn-complex/functions.c:397
msgid ""
"@FUNCTION=IMSEC\n"
"@SYNTAX=IMSEC(inumber)\n"
"@DESCRIPTION=IMSEC returns the complex secant of the complex number z "
"(@inumber), where\n"
"\n"
"\tsec(z) = 1/cos(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMSEC returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMSEC(\"2-j\") equals -0.413149-0.687527j.\n"
"\n"
"@SEEALSO=IMCSC,IMCOT"
msgstr ""
"@FUNCTION=IMSEC\n"
"@SYNTAX=IMSEC(inumber)\n"
"@DESCRIPTION=IMSEC དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་  གོ་དཀའ་བའི་གཉིས་བགོ་སླར་"
"ལོག་འབདཝ་ཨིན་,དེ་ཡང་\n"
"\n"
"\tsec(z) = 1/cos(z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMSEC དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMSEC(\"2-j\") མཉམ་པ་ཨིན་ -0.413149-0.687527j.\n"
"\n"
"@SEEALSO=IMCSC,IMCOT"

#: ../plugins/fn-complex/functions.c:433
msgid ""
"@FUNCTION=IMCSC\n"
"@SYNTAX=IMCSC(inumber)\n"
"@DESCRIPTION=IMCSC returns the complex cosecant of the complex number z "
"(@inumber), where\n"
"\n"
"\tcsc(z) = 1/sin(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCSC returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCSC(\"2-j\") equals 0.635494-0.221501j.\n"
"\n"
"@SEEALSO=IMSEC,IMCOT"
msgstr ""
"@FUNCTION=IMCSC\n"
"@SYNTAX=IMCSC(inumber)\n"
"@DESCRIPTION=IMCSC དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ z (@inumber)གི་  གོ་དཀའ་བའི་ཀོ་སི་ཀེནཊི་"
"འདི་སླར་ལོག་འབདཝ་ཨིན་,དེ་ཡང་\n"
"\n"
"\tcsc(z) = 1/sin(z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMCSC དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན\n"
"\n"
"@EXAMPLES=\n"
"IMCSC(\"2-j\") མཉམ་པ་ཨིན་0.635494-0.221501j.\n"
"\n"
"@SEEALSO=IMSEC,IMCOT"

#: ../plugins/fn-complex/functions.c:469
msgid ""
"@FUNCTION=IMCOT\n"
"@SYNTAX=IMCOT(inumber)\n"
"@DESCRIPTION=IMCOT returns the complex cotangent of the complex number z "
"(@inumber), where\n"
"\n"
"\tcot(z) = 1/tan(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCOT returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCOT(\"2-j\") equals -0.171384+0.821330j.\n"
"\n"
"@SEEALSO=IMSEC,IMCSC"
msgstr ""
"@FUNCTION=IMCOT\n"
"@SYNTAX=IMCOT(inumber)\n"
"@DESCRIPTION=IMCOT དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ z (@inumber)གི་གོ་དཀའ་བའི་ཀོ་ཊེན་ཇེནཊི་"
"འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tcot(z) = 1/tan(z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMCOT དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMCOT(\"2-j\") མཉམ་པ་ཨིན་ -0.171384+0.821330j.\n"
"\n"
"@SEEALSO=IMSEC,IMCSC"

#: ../plugins/fn-complex/functions.c:505
msgid ""
"@FUNCTION=IMEXP\n"
"@SYNTAX=IMEXP(inumber)\n"
"@DESCRIPTION=IMEXP returns the exponential of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMEXP returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMEXP(\"2-j\") equals 3.992324-6.217676j.\n"
"\n"
"@SEEALSO=IMLN"
msgstr ""
"@FUNCTION=IMEXP\n"
"@SYNTAX=IMEXP(inumber)\n"
"@DESCRIPTION=IMEXP དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་བསྒྱུར་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMEXP དེ་གིས "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMEXP(\"2-j\") མཉམ་པ་ཨིན་ 3.992324-6.217676j.\n"
"\n"
"@SEEALSO=IMLN"

#: ../plugins/fn-complex/functions.c:539
msgid ""
"@FUNCTION=IMARGUMENT\n"
"@SYNTAX=IMARGUMENT(inumber)\n"
"@DESCRIPTION=IMARGUMENT returns the argument theta of a complex number, i.e. "
"the angle in radians from the real axis to the representation of the number "
"in polar coordinates.\n"
"\n"
"* If @inumber is not a valid complex number, IMARGUMENT returns #VALUE! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMARGUMENT(\"2-j\") equals -0.463647609.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=IMARGUMENT\n"
"@SYNTAX=IMARGUMENT(inumber)\n"
"@DESCRIPTION=IMARGUMENT དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་  སྒྲུབ་རྟགས་ཐེ་ཊ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན་, i.e. ཚད་ཐིག་ངོ་མ་ལས་རེ་ཌི་ཡཱནསི་ནང་གི་གྲུ་ཟུར་ལས་  པོ་ལར་ཆ་སྙོམས་ནང་གི་ཨང་གྲངས་"
"ལུ།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་མེན་པ་ཅིན་, IMARGUMENT དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARGUMENT(\"2-j\") མཉམ་པ་ཨིན་ -0.463647609.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-complex/functions.c:574
msgid ""
"@FUNCTION=IMLN\n"
"@SYNTAX=IMLN(inumber)\n"
"@DESCRIPTION=IMLN returns the natural logarithm of a complex number.\n"
"\n"
"The result will have an imaginary part between -pi and +pi.  The natural "
"logarithm is not uniquely defined on complex numbers. You may need to add or "
"subtract an even multiple of pi to the imaginary part.\n"
"\n"
"* If @inumber is not a valid complex number, IMLN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMLN(\"3-j\") equals 1.15129-0.32175j.\n"
"\n"
"@SEEALSO=IMEXP,IMLOG2,IMLOG10"
msgstr ""
"@FUNCTION=IMLN\n"
"@SYNTAX=IMLN(inumber)\n"
"@DESCRIPTION=IMLN དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཀྱི་རང་བཞིན་མཉམ་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"གྲུབ་འབྲས་དེ་ལུ་ -pi དང་ +piགི་བར་ན་འཆར་སྣང་ཆ་ཤས་འདི་བྱུངམ་ཨིན།  རང་བཞིན་མཉམ་གྲངས་འདི་  གོ་"
"དཀའ་བའི་ཨང་གྲངས་གུ་མཐུན་མོང་མ་ཡིན་པ་སྦེ་ངོས་འཛིན་མ་འབད་བས།  ཁྱོད་ཀྱིས་ པི་ཨའི་གི་ཆ་ཅན་སྙོམས་གྲངས་"
"འདི་  འཆར་སྣང་ཆ་ཤས་ལུ་ཁ་སྐོང་བརྐྱབ་ནི་དང་ཕབ་དགོཔ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMLN དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMLN(\"3-j\") མཉམ་པ་ཨིན་ 1.15129-0.32175j.\n"
"\n"
"@SEEALSO=IMEXP,IMLOG2,IMLOG10"

#: ../plugins/fn-complex/functions.c:613
msgid ""
"@FUNCTION=IMLOG2\n"
"@SYNTAX=IMLOG2(inumber)\n"
"@DESCRIPTION=IMLOG2 returns the logarithm of a complex number in base 2.\n"
"\n"
"* If @inumber is not a valid complex number, IMLOG2 returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMLOG2(\"3-j\") equals 1.66096-0.46419j.\n"
"\n"
"@SEEALSO=IMLN,IMLOG10"
msgstr ""
"@FUNCTION=IMLOG2\n"
"@SYNTAX=IMLOG2(inumber)\n"
"@DESCRIPTION=IMLOG2 དེ་གིས་  གཞི་རྟེན་ ༢༌ནང་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་མཉམ་གྲངས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་མེན་པ་ཅིན་, IMLOG2 དེ་གིས #VALUE! "
"འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMLOG2(\"3-j\") མཉམ་པ་ཨིན་1.66096-0.46419j.\n"
"\n"
"@SEEALSO=IMLN,IMLOG10"

#: ../plugins/fn-complex/functions.c:648
msgid ""
"@FUNCTION=IMLOG10\n"
"@SYNTAX=IMLOG10(inumber)\n"
"@DESCRIPTION=IMLOG10 returns the logarithm of a complex number in base 10.\n"
"\n"
"* If @inumber is not a valid complex number, IMLOG10 returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMLOG10(\"3-j\") equals 0.5-0.13973j.\n"
"\n"
"@SEEALSO=IMLN,IMLOG2"
msgstr ""
"@FUNCTION=IMLOG10\n"
"@SYNTAX=IMLOG10(inumber)\n"
"@DESCRIPTION=IMLOG10 དེ་གིས་  གཞི་རྟེན་ ༡༠་པའི་ནང་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གིས་  མཉམ་གྲངས་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེནཔ་ཅིན་, IMLOG10 དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMLOG10(\"3-j\") མཉམ་པ་ཨིན་ 0.5-0.13973j.\n"
"\n"
"@SEEALSO=IMLN,IMLOG2"

#: ../plugins/fn-complex/functions.c:683
msgid ""
"@FUNCTION=IMPOWER\n"
"@SYNTAX=IMPOWER(inumber1,inumber2)\n"
"@DESCRIPTION=IMPOWER returns a complex number raised to a power.  @inumber1 "
"is the complex number to be raised to a power and @inumber2 is the power to "
"which you want to raise it.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMPOWER returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMPOWER(\"4-j\",2) equals 15-8j.\n"
"\n"
"@SEEALSO=IMSQRT"
msgstr ""
"@FUNCTION=IMPOWER\n"
"@SYNTAX=IMPOWER(inumber1,inumber2)\n"
"@DESCRIPTION=IMPOWER དེ་གིས་  ནུས་ཤུགས་ལུ་བསྡུ་ལེན་འབད་དེ་ཡོད་མི་  གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་"
"སླར་ལོག་འབདཝ་ཨིན།  @inumber1 འདི་  ནུས་ཤུགས་ལུ་བསྡུ་ལེན་འབད་ནི་ཨིན་པའི་གོ་དཀའ་བའི་ཨང་གྲངས་འདི་"
"ཨིནམ་དང་ @inumber2 འདི་  ཁྱོད་ཀྱིས་བསྡུ་ལེན་འབད་དགོ་པའི་ནུས་ཤུགས་འདི་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber1ཡང་ན་ @inumber2 ཚུ་ ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་མེན་པ་ཅིན་, "
"IMPOWER དེ་གིས་ #VALUE!འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMPOWER(\"4-j\",2) མཉམ་པ་ཨིན་ 15-8j.\n"
"\n"
"@SEEALSO=IMSQRT"

#: ../plugins/fn-complex/functions.c:725
msgid ""
"@FUNCTION=IMDIV\n"
"@SYNTAX=IMDIV(inumber1,inumber2)\n"
"@DESCRIPTION=IMDIV returns the quotient of two complex numbers.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMDIV returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMDIV(\"2-j\",\"2+j\") equals 0.6-0.8j.\n"
"\n"
"@SEEALSO=IMPRODUCT"
msgstr ""
"@FUNCTION=IMDIV\n"
"@SYNTAX=IMDIV(inumber1,inumber2)\n"
"@DESCRIPTION=IMDIV དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་གཉིས་ཀྱི་ཐོབ་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"*ག་དེམ་ཅིག་སྦེ་@inumber1 ཡང་ན་ @inumber2 ཚུ་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་མེན་པ་ཅིན་, "
"IMDIV དེ་གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMDIV(\"2-j\",\"2+j\") མཉམ་པ་ཨིན་ 0.6-0.8j.\n"
"\n"
"@SEEALSO=IMPRODUCT"

#: ../plugins/fn-complex/functions.c:765
msgid ""
"@FUNCTION=IMSIN\n"
"@SYNTAX=IMSIN(inumber)\n"
"@DESCRIPTION=IMSIN returns the sine of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMSIN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSIN(\"1+j\") equals 1.29846+0.63496j.\n"
"\n"
"@SEEALSO=IMCOS,IMTAN"
msgstr ""
"@FUNCTION=IMSIN\n"
"@SYNTAX=IMSIN(inumber)\n"
"@DESCRIPTION=IMSIN དེ་གིས་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་གི་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMSIN དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMSIN(\"1+j\") མཉམ་པ་ཨིན་ 1.29846+0.63496j.\n"
"\n"
"@SEEALSO=IMCOS,IMTAN"

#: ../plugins/fn-complex/functions.c:798
msgid ""
"@FUNCTION=IMSINH\n"
"@SYNTAX=IMSINH(inumber)\n"
"@DESCRIPTION=IMSINH returns the complex hyperbolic sine of the complex "
"number z (@inumber), where\n"
"\n"
"\tsinh(z) = (exp(z) - exp(-z))/2.\n"
"\n"
"* If @inumber is not a valid complex number, IMSINH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMSINH(\"1+j\") equals 0.63496+1.29846j.\n"
"\n"
"@SEEALSO=IMCOSH,IMTANH"
msgstr ""
"@FUNCTION=IMSINH\n"
"@SYNTAX=IMSINH(inumber)\n"
"@DESCRIPTION=IMSINH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་  གོ་དཀའ་བའི་རབ་བཏགས་"
"ཀྱི་རྒྱན་ཅན་གྱི་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tsinh(z) = (exp(z) - exp(-z))/2.\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMSINH དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMSINH(\"1+j\") མཉམ་པ་ཨིན་ 0.63496+1.29846j.\n"
"\n"
"@SEEALSO=IMCOSH,IMTANH"

#: ../plugins/fn-complex/functions.c:833
msgid ""
"@FUNCTION=IMCOSH\n"
"@SYNTAX=IMCOSH(inumber)\n"
"@DESCRIPTION=IMCOSH returns the complex hyperbolic cosine of the complex "
"number z (@inumber), where\n"
"\n"
"\tcosh(z) = (exp(z) + exp(-z))/2.\n"
"\n"
"* If @inumber is not a valid complex number, IMCOSH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCOSH(\"1+j\") equals 0.83373+0.988898j.\n"
"\n"
"@SEEALSO=IMSINH,IMTANH"
msgstr ""
"@FUNCTION=IMCOSH\n"
"@SYNTAX=IMCOSH(inumber)\n"
"@DESCRIPTION=IMCOSH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་གོ་དཀའ་བའི་རབ་བཏགས་ཀྱི་"
"རྒྱན་ཅན་ཀོ་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན།, དེ་ཡང་\n"
"\n"
"\tcosh(z) = (exp(z) + exp(-z))/2.\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMCOSH དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMCOSH(\"1+j\") མཉམ་པ་ཨིན་ 0.83373+0.988898j.\n"
"\n"
"@SEEALSO=IMSINH,IMTANH"

#: ../plugins/fn-complex/functions.c:867
msgid ""
"@FUNCTION=IMTANH\n"
"@SYNTAX=IMTANH(inumber)\n"
"@DESCRIPTION=IMTANH returns the complex hyperbolic tangent of the complex "
"number z (@inumber), where\n"
"\n"
"\ttanh(z) = sinh(z)/cosh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMTANH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMTANH(\"1+j\") equals 1.083923+0.2717526j.\n"
"\n"
"@SEEALSO=IMSINH,IMCOSH"
msgstr ""
"@FUNCTION=IMTANH\n"
"@SYNTAX=IMTANH(inumber)\n"
"@DESCRIPTION=IMTANH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་ གོ་དཀའ་བའི་རབ་བཏགས་ཀྱི་"
"རྒྱན་ཅན་ཊེན་ཇེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\ttanh(z) = sinh(z)/cosh(z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་ཨིན་པ་ཅིན་, IMTANH དེ་གིས་ "
"#VALUE! འཛོལ་བ་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMTANH(\"1+j\") མཉམ་པ་ཨིན་ 1.083923+0.2717526j.\n"
"\n"
"@SEEALSO=IMSINH,IMCOSH"

#: ../plugins/fn-complex/functions.c:901
msgid ""
"@FUNCTION=IMSECH\n"
"@SYNTAX=IMSECH(inumber)\n"
"@DESCRIPTION=IMSECH returns the complex hyperbolic secant of the complex "
"number z (@inumber), where\n"
"\n"
"\tsech(z) = 1/cosh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMSECH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMSECH(\"1+j\") equals 0.498337-0.5910838j.\n"
"\n"
"@SEEALSO=IMCSCH,IMCOTH"
msgstr ""
"@FUNCTION=IMSECH\n"
"@SYNTAX=IMSECH(inumber)\n"
"@DESCRIPTION=IMSECH དེ་གིས་གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་  གོ་དཀའ་བའི་རབ་བཏགས་ཀྱི་"
"རྒྱན་ཅན་སི་ཀེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tsech(z) = 1/cosh(z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMSECH དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMSECH(\"1+j\") མཉམ་པ་ཨིན་ 0.498337-0.5910838j.\n"
"\n"
"@SEEALSO=IMCSCH,IMCOTH"

#: ../plugins/fn-complex/functions.c:935
msgid ""
"@FUNCTION=IMCSCH\n"
"@SYNTAX=IMCSCH(inumber)\n"
"@DESCRIPTION=IMCSCH returns the complex hyperbolic cosecant of the complex "
"number z (@inumber), where\n"
"\n"
"\tcsch(z) = 1/sinh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCSCH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCSCH(\"1+j\") equals 0.303931-0.621518j.\n"
"\n"
"@SEEALSO=IMSECH,IMCOTH"
msgstr ""
"@FUNCTION=IMCSCH\n"
"@SYNTAX=IMCSCH(inumber)\n"
"@DESCRIPTION=IMCSCH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་  གོ་དཀའ་བའི་རབ་བཏགས་"
"ཀྱི་རྒྱན་ཅན་ཀོ་སི་ཀེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན, དེ་ཡང་\n"
"\n"
"\tcsch(z) = 1/sinh(z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMCSCH དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMCSCH(\"1+j\") མཉམ་པ་ཨིན་ 0.303931-0.621518j.\n"
"\n"
"@SEEALSO=IMSECH,IMCOTH"

#: ../plugins/fn-complex/functions.c:969
msgid ""
"@FUNCTION=IMCOTH\n"
"@SYNTAX=IMCOTH(inumber)\n"
"@DESCRIPTION=IMCOTH returns the complex hyperbolic cotangent of the complex "
"number z (@inumber) where,\n"
"\n"
"\tcoth(z) = 1/tanh(z).\n"
"\n"
"* If @inumber is not a valid complex number, IMCOTH returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"IMCOTH(\"1+j\") equals 0.868014-0.217622j.\n"
"\n"
"@SEEALSO=IMSECH,IMCSCH"
msgstr ""
"@FUNCTION=IMCOTH\n"
"@SYNTAX=IMCOTH(inumber)\n"
"@DESCRIPTION=IMCOTH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་  གོ་དཀའ་བའི་རབ་བཏགས་"
"ཀྱི་རྒྱན་ཅན་ཀོ་ཊེན་ཇེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་,\n"
"\n"
"\tcoth(z) = 1/tanh(z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཨིན་, IMCOTH དེ་གིས་ "
"#VALUE! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན\n"
"\n"
"@EXAMPLES=\n"
"IMCOTH(\"1+j\") མཉམ་པ་ཨིན་ 0.868014-0.217622j.\n"
"\n"
"@SEEALSO=IMSECH,IMCSCH"

#: ../plugins/fn-complex/functions.c:1003
msgid ""
"@FUNCTION=IMARCSIN\n"
"@SYNTAX=IMARCSIN(inumber)\n"
"@DESCRIPTION=IMARCSIN returns the complex arcsine of the complex number "
"@inumber. The branch cuts are on the real axis, less than -1 and greater "
"than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSIN returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSIN(\"1+j\") equals 0.6662394+1.061275j.\n"
"\n"
"@SEEALSO=IMARCCOS,IMARCTAN"
msgstr ""
"@FUNCTION=IMARCSIN\n"
"@SYNTAX=IMARCSIN(inumber)\n"
"@DESCRIPTION=IMARCSIN དེ་གིས་གོ་དཀའ་བའི་ཨང་གྲངས་@inumberགི་  གོ་དཀའ་བའི་ཨརཀ་སིན་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།  ཚད་ཐིག་ངོམ་གུ་བཏོག་ཡོད་པའི་ཡན་ལག་ཚུ་,  -1 ལས་ཉུངམ་དང་1ལས་མངམ་ཡོདཔ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCSIN དེ་གིས་ "
"#VALUE! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCSIN(\"1+j\") མཉམ་པ་ཨིན་ 0.6662394+1.061275j.\n"
"\n"
"@SEEALSO=IMARCCOS,IMARCTAN"

#: ../plugins/fn-complex/functions.c:1038
msgid ""
"@FUNCTION=IMARCCOS\n"
"@SYNTAX=IMARCCOS(inumber)\n"
"@DESCRIPTION=IMARCCOS returns the complex arccosine of the complex number "
"@inumber. The branch cuts are on the real axis, less than -1 and greater "
"than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOS returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOS(\"1+j\") equals 0.9045569-1.061275j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCTAN"
msgstr ""
"@FUNCTION=IMARCCOS\n"
"@SYNTAX=IMARCCOS(inumber)\n"
"@DESCRIPTION=IMARCCOS དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ @inumber གི་གོ་དཀའ་བའི་ཨརཀ་ཀོ་སིན་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།  བཏོག་ཡོད་པའི་ཡན་ལག་ཚུ་  ཚད་ཐིག་ངོ་མ་གུ་,  -1 ཉུངམ་དང་ 1མངམ་སྦེ་ཡོདཔ་"
"ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCCOS དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOS(\"1+j\") མཉམ་པ་ཨིན་ 0.9045569-1.061275j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCTAN"

#: ../plugins/fn-complex/functions.c:1073
msgid ""
"@FUNCTION=IMARCTAN\n"
"@SYNTAX=IMARCTAN(inumber)\n"
"@DESCRIPTION=IMARCTAN returns the complex arctangent of the complex number "
"@inumber. The branch cuts are on the imaginary axis, below -i and above i.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCTAN returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCTAN(\"1+j\") equals 1.0172220+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCCOS"
msgstr ""
"@FUNCTION=IMARCTAN\n"
"@SYNTAX=IMARCTAN(inumber)\n"
"@DESCRIPTION=IMARCTAN དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ @inumber གི་  གོ་དཀའ་བའི་ཨརཀ་ཊེན་"
"ཇེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན།  བཏོག་ཡོད་པའི་ཡན་ལག་ཚུ་འཆར་སྣང་ཚད་ཐིག་གུ་, -i འོག་ལུ་དང་i གི་ལྟག་"
"ལུ་སྦེ་ཡོདཔ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCTAN དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCTAN(\"1+j\") མཉམ་པ་ཨིན་ 1.0172220+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSIN,IMARCCOS"

#: ../plugins/fn-complex/functions.c:1108
msgid ""
"@FUNCTION=IMARCSEC\n"
"@SYNTAX=IMARCSEC(inumber)\n"
"@DESCRIPTION=IMARCSEC returns the complex arcsecant of the complex number z "
"(@inumber), where\n"
"\n"
"\tarcsec(z) = arccos(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSEC returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSEC(\"1+j\") equals 1.1185179+0.5306375j.\n"
"\n"
"@SEEALSO=IMARCCSC,IMARCCOT"
msgstr ""
"@FUNCTION=IMARCSEC\n"
"@SYNTAX=IMARCSEC(inumber)\n"
"@DESCRIPTION=IMARCSEC དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ z (@inumber)གི་  གོ་དཀའ་བའི་ཨརཀ་སི་"
"ཀེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tarcsec(z) = arccos(1/z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCSEC དེ་གིས་ "
"#VALUE! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCSEC(\"1+j\") མཉམ་པ་ཨིན་ 1.1185179+0.5306375j.\n"
"\n"
"@SEEALSO=IMARCCSC,IMARCCOT"

#: ../plugins/fn-complex/functions.c:1142
msgid ""
"@FUNCTION=IMARCCSC\n"
"@SYNTAX=IMARCCSC(inumber)\n"
"@DESCRIPTION=IMARCCSC returns the complex arccosecant of the complex number "
"z (@inumber), where\n"
"\n"
"\tarccsc(z) = arcsin(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCSC returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCSC(\"1+j\") equals 0.45227845-0.5306375j.\n"
"\n"
"@SEEALSO=IMARCSEC,IMARCCOT"
msgstr ""
"@FUNCTION=IMARCCSC\n"
"@SYNTAX=IMARCCSC(inumber)\n"
"@DESCRIPTION=IMARCCSC དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ z (@inumber)གི་  གོ་དཀའ་བའི་ཨརཀ་ཀོ་"
"སི་ཀེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tarccsc(z) = arcsin(1/z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེནཔ་ཅིན་, IMARCCSC དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCCSC(\"1+j\") མཉམ་པ་ཨིན་ 0.45227845-0.5306375j.\n"
"\n"
"@SEEALSO=IMARCSEC,IMARCCOT"

#: ../plugins/fn-complex/functions.c:1176
msgid ""
"@FUNCTION=IMARCCOT\n"
"@SYNTAX=IMARCCOT(inumber)\n"
"@DESCRIPTION=IMARCCOT returns the complex arccotangent of the complex number "
"z (@inumber), where\n"
"\n"
"\tarccot(z) = arctan(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOT returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOT(\"1+j\") equals 0.553574+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSEC,IMARCCSC"
msgstr ""
"@FUNCTION=IMARCCOT\n"
"@SYNTAX=IMARCCOT(inumber)\n"
"@DESCRIPTION=IMARCCOT དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་  གོ་དཀའ་བའི་ཨརཀ་ཀོ་"
"ཊེན་ཇེནཏི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tarccot(z) = arctan(1/z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་ ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCCOT དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOT(\"1+j\") མཉམ་པ་ཨིན་ 0.553574+0.4023595j.\n"
"\n"
"@SEEALSO=IMARCSEC,IMARCCSC"

#: ../plugins/fn-complex/functions.c:1210
msgid ""
"@FUNCTION=IMARCSINH\n"
"@SYNTAX=IMARCSINH(inumber)\n"
"@DESCRIPTION=IMARCSINH returns the complex hyperbolic arcsine of the complex "
"number @inumber. The branch cuts are on the imaginary axis, below -i and "
"above i.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSINH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSINH(\"1+j\") equals 1.061275+0.6662394j.\n"
"\n"
"@SEEALSO=IMARCCOSH,IMARCTANH"
msgstr ""
"@FUNCTION=IMARCSINH\n"
"@SYNTAX=IMARCSINH(inumber)\n"
"@DESCRIPTION=IMARCSINH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་@inumber གི་གོ་དཀའ་བའི་རབ་བཏགས་ཀྱི་"
"རྒྱན་ཅན་ཨརཀ་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན།   བཏོགས་ཡོད་པའི་ཡན་ལག་ཚུ་  འཆར་སྣང་ཚད་ཐིག་གུ་, -i གི་"
"འོག་ལུ་དང་iགི་ལྟག་ལུ་ཡོདཔ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCSINH དེ་"
"གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCSINH(\"1+j\") མཉམ་པ་ཨིན་ 1.061275+0.6662394j.\n"
"\n"
"@SEEALSO=IMARCCOSH,IMARCTANH"

#: ../plugins/fn-complex/functions.c:1245
msgid ""
"@FUNCTION=IMARCCOSH\n"
"@SYNTAX=IMARCCOSH(inumber)\n"
"@DESCRIPTION=IMARCCOSH returns the complex hyperbolic arccosine of the "
"complex number @inumber. The branch cut is on the real axis, less than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOSH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOSH(\"1+j\") equals 1.06127506+0.904557j.\n"
"\n"
"@SEEALSO=IMARCSINH,IMARCTANH"
msgstr ""
"@FUNCTION=IMARCCOSH\n"
"@SYNTAX=IMARCCOSH(inumber)\n"
"@DESCRIPTION=IMARCCOSH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་@inumber གི་ གོ་དཀའ་བའི་རབ་བཏགས་ཀྱི་"
"རྒྱན་ཅན་ཨརཀ་ཀོ་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན།  བཏོག་པའི་ཡན་ལག་འདི་ ཚད་ཐིག་ངོ་མའི་གུ་, 1ལས་ཉུངམ་སྦེ་"
"ཡོདཔ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་མེན་པ་ཅིན་, IMARCCOSH དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOSH(\"1+j\") མཉམ་པ་ཨིན་ 1.06127506+0.904557j.\n"
"\n"
"@SEEALSO=IMARCSINH,IMARCTANH"

#: ../plugins/fn-complex/functions.c:1280
msgid ""
"@FUNCTION=IMARCTANH\n"
"@SYNTAX=IMARCTANH(inumber)\n"
"@DESCRIPTION=IMARCTANH returns the complex hyperbolic arctangent of the "
"complex number @inumber. The branch cuts are on the real axis, less than -1 "
"and greater than 1.\n"
"\n"
"* If @inumber is not a valid complex number, IMARCTANH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCTANH(\"1+j\") equals 0.4023595+1.0172220j.\n"
"\n"
"@SEEALSO=IMARCSINH,IMARCCOSH"
msgstr ""
"@FUNCTION=IMARCTANH\n"
"@SYNTAX=IMARCTANH(inumber)\n"
"@DESCRIPTION=IMARCTANH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་@inumberགི་  གོ་དཀའ་བའི་རབ་བཏགས་ཀྱི་"
"རྒྱན་ཅན་ཨརཀ་ཊེན་ཇེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན།  བཏོགས་ཡོད་པའི་ཡན་ལག་ཚུ་  ཚད་ཐིག་ངོ་མའི་གུ་,  -"
"1ལས་ཉུགམ་དང་1ལས་མངམ་སྦེ་ཡོདཔ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCTANH དེ་"
"གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCTANH(\"1+j\") མཉམ་པ་ཨིན་ 0.4023595+1.0172220j.\n"
"\n"
"@SEEALSO=IMARCSINH,IMARCCOSH"

#: ../plugins/fn-complex/functions.c:1315
msgid ""
"@FUNCTION=IMARCSECH\n"
"@SYNTAX=IMARCSECH(inumber)\n"
"@DESCRIPTION=IMARCSECH returns the complex hyperbolic arcsecant of the "
"complex number z (@inumber), where\n"
"\n"
"\tarcsech(z) = arccosh(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCSECH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCSECH(\"1+j\") equals 0.5306375-1.118518j.\n"
"\n"
"@SEEALSO=IMARCCSCH,IMARCCOTH"
msgstr ""
"@FUNCTION=IMARCSECH\n"
"@SYNTAX=IMARCSECH(inumber)\n"
"@DESCRIPTION=IMARCSECH དེ་གིས་ གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)ནི་གི་  གོ་དཀའ་བའི་རབ་"
"བཏགས་ཀྱི་རྒྱན་ཅན་ཨརཀ་སི་ཀེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tarcsech(z) = arccosh(1/z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCSECH དེ་"
"གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCSECH(\"1+j\") མཉམ་པ་ཨིན་ 0.5306375-1.118518j.\n"
"\n"
"@SEEALSO=IMARCCSCH,IMARCCOTH"

#: ../plugins/fn-complex/functions.c:1350
msgid ""
"@FUNCTION=IMARCCSCH\n"
"@SYNTAX=IMARCCSCH(inumber)\n"
"@DESCRIPTION=IMARCCSCH returns the complex hyperbolic arccosecant of the "
"complex number z (@inumber), where\n"
"\n"
"\tarccsch(z) = arcsinh(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCSCH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCSCH(\"1+j\") equals 0.5306375-0.452278j.\n"
"\n"
"@SEEALSO=IMARCSECH,IMARCCOTH"
msgstr ""
"@FUNCTION=IMARCCSCH\n"
"@SYNTAX=IMARCCSCH(inumber)\n"
"@DESCRIPTION=IMARCCSCH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་z (@inumber)གི་  གོ་དཀའ་བའི་རབ་"
"བཏགས་ཀྱི་རྒྱན་ཅན་ཨརཀ་ཀོ་སི་ཀེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tarccsch(z) = arcsinh(1/z).\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCCSCH དེ་"
"གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCCSCH(\"1+j\") མཉམ་པ་ཨིན་ 0.5306375-0.452278j.\n"
"\n"
"@SEEALSO=IMARCSECH,IMARCCOTH"

#: ../plugins/fn-complex/functions.c:1384
msgid ""
"@FUNCTION=IMARCCOTH\n"
"@SYNTAX=IMARCCOTH(inumber)\n"
"@DESCRIPTION=IMARCCOTH returns the complex hyperbolic arccotangent of the "
"complex number z (@inumber), where\n"
"\n"
"\tarccoth(z) = arctanh(1/z).\n"
"\n"
"* If @inumber is not a valid complex number, IMARCCOTH returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOTH(\"1+j\") equals 0.40235948-0.5535744j.\n"
"\n"
"@SEEALSO=IMARCSECH,IMARCCSCH"
msgstr ""
"@FUNCTION=IMARCCOTH\n"
"@SYNTAX=IMARCCOTH(inumber)\n"
"@DESCRIPTION=IMARCCOTH དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ z (@inumber)གི་  གོ་དཀའ་བའི་རབ་"
"བཏགས་ཀྱི་རྒྱན་ཅན་ཨརཀ་ཀོ་ཊེན་ཇེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་\n"
"\n"
"\tarccoth(z) = arctanh(1/z).\n"
"\n"
"ག་དེམ་ཅིག་སྦེ་@inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMARCCOTH དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMARCCOTH(\"1+j\") མཉམ་པ་ཨིན་ 0.40235948-0.5535744j.\n"
"\n"
"@SEEALSO=IMARCSECH,IMARCCSCH"

#: ../plugins/fn-complex/functions.c:1419
msgid ""
"@FUNCTION=IMSQRT\n"
"@SYNTAX=IMSQRT(inumber)\n"
"@DESCRIPTION=IMSQRT returns the square root of a complex number.\n"
"\n"
"* If @inumber is not a valid complex number, IMSQRT returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSQRT(\"1+j\") equals 1.09868+0.4550899j.\n"
"\n"
"@SEEALSO=IMPOWER"
msgstr ""
"@FUNCTION=IMSQRT\n"
"@SYNTAX=IMSQRT(inumber)\n"
"@DESCRIPTION=IMSQRT དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་ཀྱི་རང་བསྒྱུར་རྩ་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@inumber འདི་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, IMSQRT དེ་གིས་ "
"#VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMSQRT(\"1+j\") མཉམ་པ་ཨིན་ 1.09868+0.4550899j.\n"
"\n"
"@SEEALSO=IMPOWER"

#: ../plugins/fn-complex/functions.c:1453
msgid ""
"@FUNCTION=IMSUB\n"
"@SYNTAX=IMSUB(inumber1,inumber2)\n"
"@DESCRIPTION=IMSUB returns the difference of two complex numbers.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMSUB returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSUB(\"3-j\",\"2+j\") equals 1-2j.\n"
"\n"
"@SEEALSO=IMSUM"
msgstr ""
"@FUNCTION=IMSUB\n"
"@SYNTAX=IMSUB(inumber1,inumber2)\n"
"@DESCRIPTION=IMSUB དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་གཉིས་ཀྱི་ཁྱད་པར་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumber1 ཡང་ན་ @inumber2 ཚུ་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཚུ་མེན་པ་ཅིན་, "
"IMSUB དེ་གིས་ #VALUE!འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMSUB(\"3-j\",\"2+j\") མཉམ་པ་ཨིན་1-2j.\n"
"\n"
"@SEEALSO=IMSUM"

#: ../plugins/fn-complex/functions.c:1490
msgid ""
"@FUNCTION=IMPRODUCT\n"
"@SYNTAX=IMPRODUCT(inumber1[,inumber2,...])\n"
"@DESCRIPTION=IMPRODUCT returns the product of given complex numbers.\n"
"\n"
"* If any of the @inumbers are not valid complex numbers, IMPRODUCT returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMPRODUCT(\"2-j\",\"4-2j\") equals 6-8j.\n"
"\n"
"@SEEALSO=IMDIV"
msgstr ""
"@FUNCTION=IMPRODUCT\n"
"@SYNTAX=IMPRODUCT(inumber1[,inumber2,...])\n"
"@DESCRIPTION=IMPRODUCT དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་གོ་དཀའ་བའི་ཨང་གྲངས་ཀྱི་ཐོན་བསྐྱེད་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @inumbers ཚུ་གང་རུང་ཅིག་  ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཚུ་མེན་པ་ཅིན་, "
"IMPRODUCT དེ་གིས་ #VALUE! འཛོལ་བ་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMPRODUCT(\"2-j\",\"4-2j\") མཉམ་པ་ཨིན་ 6-8j.\n"
"\n"
"@SEEALSO=IMDIV"

#: ../plugins/fn-complex/functions.c:1567
msgid ""
"@FUNCTION=IMSUM\n"
"@SYNTAX=IMSUM(inumber1,inumber2)\n"
"@DESCRIPTION=IMSUM returns the sum of two complex numbers.\n"
"\n"
"* If @inumber1 or @inumber2 are not valid complex numbers, IMSUM returns "
"#VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IMSUM(\"2-4j\",\"9-j\") equals 11-5j.\n"
"\n"
"@SEEALSO=IMSUB"
msgstr ""
"@FUNCTION=IMSUM\n"
"@SYNTAX=IMSUM(inumber1,inumber2)\n"
"@DESCRIPTION=IMSUM དེ་གིས་  གོ་དཀའ་བའི་ཨང་གྲངས་གཉིས་ཀྱི་བསྡོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"*ག་དེམ་ཅིག་སྦེ་ @inumber1 ཡང་ན་ @inumber2 ཚུ་ ནུས་ཅན་གོ་དཀའ་བའི་ཨང་གྲངས་ཚུ་མེན་པ་ཅིན་, "
"IMSUM དེ་གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IMSUM(\"2-4j\",\"9-j\") མཉམ་པ་ཨིན་ 11-5j.\n"
"\n"
"@SEEALSO=IMSUB"

#: ../plugins/fn-database/functions.c:269
msgid ""
"@FUNCTION=DAVERAGE\n"
"@SYNTAX=DAVERAGE(database,field,criteria)\n"
"@DESCRIPTION=DAVERAGE function returns the average of the values in a list "
"or database that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DAVERAGE(A1:C7, \"Salary\", A9:A11) equals 42296.3333.\n"
"DAVERAGE(A1:C7, \"Age\", A9:A11) equals 39.\n"
"DAVERAGE(A1:C7, \"Salary\", A9:B11) equals 40782.5.\n"
"DAVERAGE(A1:C7, \"Age\", A9:B11) equals 36.\n"
"\n"
"@SEEALSO=DCOUNT"
msgstr ""
"@FUNCTION=DAVERAGE\n"
"@SYNTAX=DAVERAGE(གནས་སྡུད་གཞི་རྟེན་,ས་སྒོ་,ཁྱད་ཚད་)\n"
"@DESCRIPTION=DAVERAGE ལཱ་འགན་དེ་གིས་  གནས་གོང་ཚུ་གི་ཆ་སྙོམས་འདི་  གནས་སྟངས་གསལ་བཀོད་འབད་"
"དེ་ཡོད་མི་ལུ་མཐུན་མི་   ཐོ་ཡིག་ཅིག་ནང་ཡང་ན་གནས་སྡུད་གཞི་རྟེན་ནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@database འདི་  བརྡ་དོན་གྱི་གྲལ་ཐིག་ཚུ་དྲན་ཐོ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་ཚུ་ཨིན་པའི་  ནང་"
"ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན།  གནས་སྡུད་གཞི་རྟེན་ཅིག་གི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་ལུ་ཁ་ཡིག་གནས་ཏེ་"
"ཡོདཔ་ཨིན།  \n"
"\n"
"@field དེ་གིས  ལཱ་འགན་ནང་ལག་ལེན་འཐབ་སྟེ་ཡོད་མི་ཀེར་ཐིག་འདི་གསལ་བཀོད་འབདཝ་ཨིན། @field འདི་"
"ཧྲིལ་གྲངས་ཅིག་ཨིན་པ་ཅིན་, དཔེ་ ༢་པ, ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན།   ས་སྒོ་འདི་ཀེར་"
"ཐིག་ཅིག་གི་ཁ་ཡིག་སྦེ་ཚུགས།  དེར་ན་, ``ལོ'' དེ་གིས་  ཁ་ཡིག་ ``ལོ་'' དང་ཅིག་ཁར་ཡོད་པའི་ཀེར་ཐིག་ལུ་"
"གཞི་བསྟུན་འབདཝ་ཨིན་  དེ་ཡང་ @database rangeནང་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་དེ་ཡོད་མི་གནས་སྟངས་ཚུ་གནས་པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན།    གྲལ་"
"ཐིག་དང་པ་@criteria དེ་ལུ་  ཁྱད་ཚད་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་  ས་སྒོའི་ཁ་ཡིག་ཚུ་གནས་དགོཔ་ཨིན།  ཁ་"
"ཡིག་གི་འོག་ལུ་ཡོད་མི་ནང་ཐིག་ཚུ་གིས་  གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན།, དཔེར་ན་, ``>3'' ཡང་ན་ "
"``<9''.  མཉམ་པའི་གནས་སྟངས་འདི་གནས་གོང་ཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་ཚུགས་, e.g. ``3'' "
"ཡང་ན་ ``John''. \n"
"གྲལ་ཐིག་རེ་རེ་@criteria དེ་གིས་  གནས་སྟངས་སོ་སོ་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན།   གྲལ་ཐིག་ "
"@database དེ་གིས་ @criteria ནང་གི་གྲལ་ཐིག་དང་མཐུན་པ་ཅིན་, གྲལ་ཐིག་འདི་གྱངས་ཁ་བརྐྱབ་ནི་ཨིན།  "
"ཐབས་ཤས་ཀྱི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོད་འདི་ @criteriaབར་ནའི་གྲལ་ཐིག་ཚུ་ཨིན།\n"
"ག་དེམ་ཅིག་སྦེ་ @criteria དེ་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་,  དེ་འབད་བ་ཅིན་"
"གསལ་བཀོད་འབད་དེ་ཡོད་པའི་ཀེར་ཐིག་གི་གནས་སྟངས་རེ་རེ་ མཐུན་ནིའི་དོན་ལུ་ @database ནང་གི་གྲལ་ཐིག་"
"བདེན་པ་ཅིག་དགོ།   ཐབས་ཤེས་ཀྱི་ཐོག་ལས་སླབ་པ་ཨིན་, འདི་བུ་ལིན་དང་བཀོལ་སྤྱོད་ཨིན་མི་འདི་@criteriaགི་"
"བར་ན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་བསམ་གེ་  ཁྱབ་ཚད་ A1:C7 དེ་ལུ་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་ཨིན:\n"
"མིང་    ལོ་     དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁསྐོང་སྦེ་, ནང་ཐིག་ A9:B11 དེ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོད:\n"
"ལོ་     དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DAVERAGE(A1:C7, \"Salary\", A9:A11) equals 42296.3333.\n"
"DAVERAGE(A1:C7, \"Age\", A9:A11) equals 39.\n"
"DAVERAGE(A1:C7, \"Salary\", A9:B11) equals 40782.5.\n"
"DAVERAGE(A1:C7, \"Age\", A9:B11) equals 36.\n"
"\n"
"@SEEALSO=DCOUNT"

#: ../plugins/fn-database/functions.c:346
msgid ""
"@FUNCTION=DCOUNT\n"
"@SYNTAX=DCOUNT(database,field,criteria)\n"
"@DESCRIPTION=DCOUNT function counts the cells that contain numbers in a "
"database that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DCOUNT(A1:C7, \"Salary\", A9:A11) equals 3.\n"
"DCOUNT(A1:C7, \"Salary\", A9:B11) equals 2.\n"
"DCOUNT(A1:C7, \"Name\", A9:B11) equals 0.\n"
"\n"
"@SEEALSO=DAVERAGE"
msgstr ""
"@FUNCTION=DCOUNT\n"
"@SYNTAX=DCOUNT(database,field,criteria)\n"
"@DESCRIPTION=DCOUNT function counts the cells that contain numbers in a "
"database that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DCOUNT(A1:C7, \"Salary\", A9:A11) equals 3.\n"
"DCOUNT(A1:C7, \"Salary\", A9:B11) equals 2.\n"
"DCOUNT(A1:C7, \"Name\", A9:B11) equals 0.\n"
"\n"
"@SEEALSO=DAVERAGE"

#: ../plugins/fn-database/functions.c:422
msgid ""
"@FUNCTION=DCOUNTA\n"
"@SYNTAX=DCOUNTA(database,field,criteria)\n"
"@DESCRIPTION=DCOUNTA function counts the cells that contain data in a "
"database that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DCOUNTA(A1:C7, \"Salary\", A9:A11) equals 3.\n"
"DCOUNTA(A1:C7, \"Salary\", A9:B11) equals 2.\n"
"DCOUNTA(A1:C7, \"Name\", A9:B11) equals 2.\n"
"\n"
"@SEEALSO=DCOUNT"
msgstr ""
"@FUNCTION=DCOUNTA\n"
"@SYNTAX=DCOUNTA(གནས་སྡུད་གཞི་རྟེན་,ས་སྒོ་,ཁྱད་ཚད་)\n"
"@DESCRIPTION=DCOUNTA ལཱ་འགན་འདི་གིས་   གསལ་བཀོད་འབ་དེ་ཡོད་པའི་གནས་སྟངས་ཚུ་མཐུན་མི་གནས་"
"སྡུད་གཞི་རྟེན་ཅིག་ནང་  གི་གནས་སྡུད་ཡོད་མི་ནང་ཐིག་འདི་གྱངས་ཁ་བརྐྱབ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བ་ཡོད་པའི་བརྡ་དོན་གྱི་གྲལ་ཐིག་ཚུ་དྲན་ཐོ་དང་  གནས་སྡུད་ཚུ་གི་ཀེར་ཐིག་ཚུ་ས་སྒོ་"
"ཨིན་པའི་ནང་ཐིག་ཁྱབ་ཚད་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་ཀེར་ཐིག་དངཔ་དེ་གིས་  ཀེར་ཐིག་རེ་རེའི་དོན་ལུ་ཁ་ཡིག་"
"གནས་ཡོདཔ་ཨིན། \n"
"\n"
"@field དེ་གིས་  ལཱ་འགན་ནང་ལག་ལེན་ཐབ་སྟེ་ཡོད་པའི་ཀེར་ཐིག་འདི་གསལ་བཀོད་འབདཝ་ཨིན། ག་དེམ་ཅིག་སྦེ་ "
"@field འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་, དཔེ་ ༢་, ཀེར་ཐིག་གཉིས་པའདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན།  ས་སྒོ་འདི་"
"ཀེར་ཐིག་ཅིག་གི་ཁ་ཡིག་ཡོད་བཏུབ་ཨིན།   དཔེར་ན་, ``ལོ་'' དེ་གིས་ ཀེར་ཐིག་ ཁ་ཡིག་ ``ལོ་'' ཡོད་མི་ "
"@database rangeནང་གི་འདི་གཞི་བསྟུན་འབདཝ་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་དེ་ཡོད་པའི་གནས་སྟངས་ཡོད་མི་ནང་ཐིག་གི་ཁྱབ་ཚད་ཨིན།  གྲལ་ཐིག་དང་"
"པ་ @criteria འདི་ལུ་   ཁྱད་ཚད་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་འདི་གིདོན་ལུ་  ཁ་ཡིག་གནས་དགོཔ་ཨིན།  ཁ་ཡིག་"
"གི་འོག་ལུ་ཡོད་མི་ནང་ཐིག་ཚུ་གིས་གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་, དཔེར་ན་, ``>3'' ཡང་ན་ "
"``<9''.  མཉམ་པའི་གནས་སྟངས་འདི་  གནས་གོང་ཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་ཚུགས་, e.g. ``3'' "
"ཡང་ན་ ``John''. \n"
"གྲལ་ཐིག་རེ་རེ་ @criteria དེ་གིས་  གནས་སྟངས་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན།   གྲ་ཐིག་@database ནང་"
"ཡོད་མི་དེགིས་  གྲལ་ཐིག་@criteriaནང་ཡོད་མི་འདི་མཐུན་པ་ཅིན་, དེ་ལས་  གྲལ་ཐིག་འདི་གྱངས་ཁ་བརྐྱབ་ནི་"
"ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོད་དེ་ཡང་ @criteria གི་བར་ནའི་གྲལ་"
"ཐིག་ཨིན།\n"
"ག་དེམ་ཅིག་སྦེ་@criteria དེ་གིས་ཀེར་ཐིག་གཅིག་ལསལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་, དེ་ལས་ གསལ་བཀོད་"
"འབད་དེ་ཡོད་པའི་ཀེར་ཐིག་ནང་གི་གནས་སྟངས་ཚུ་ མཐུན་སྒྲིག་འབད་ནི་ལུ་ @database ནང་གྲལ་ཐིག་བདེན་པ་"
"དགོཔ་ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་བུ་ལིན་དང་བཀོལ་སྤྱོད་དེ་ཡང་@criteriaནང་གི་ཀེར་ཐིག་"
"ཚུ་གི་བར་ན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གི་བསམ་གེ་  ཁྱབ་ཚད་ A1:C7 དེ་ལུ་འོག་གི་གནས་གོང་ཚུ་ཡོད་:\n"
"  མིང་      ལོ་             དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 ཚུ་གིས་ འོག་གི་གནས་གོང་ཚུ་ཡོད་:\n"
"ལོ་    དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DCOUNTA(A1:C7, \"Salary\", A9:A11) equals 3.\n"
"DCOUNTA(A1:C7, \"Salary\", A9:B11) equals 2.\n"
"DCOUNTA(A1:C7, \"Name\", A9:B11) equals 2.\n"
"\n"
"@SEEALSO=DCOUNT"

#: ../plugins/fn-database/functions.c:496
msgid ""
"@FUNCTION=DGET\n"
"@SYNTAX=DGET(database,field,criteria)\n"
"@DESCRIPTION=DGET function returns a single value from a column that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"* If none of the items match the conditions, DGET returns #VALUE! error.\n"
"* If more than one items match the conditions, DGET returns #NUM! error.\n"
"\n"
"DGET(A1:C7, \"Salary\", A9:A10) equals 34323.\n"
"DGET(A1:C7, \"Name\", A9:A10) equals \"Clark\".\n"
"\n"
"@SEEALSO=DCOUNT"
msgstr ""
"@FUNCTION=DGET\n"
"@SYNTAX=DGET(གནས་སྡུད་གཞི་རྟེན་,ས་སྒོ་,ཁྱད་ཚད་)\n"
"@DESCRIPTION=DGET ལས་འགན་འདི་གིས་ གནས་སྟངས་གསལ་བཀོད་འབད་ཡོད་མི་ལུ་མཐུན་མི་  གནས་གོང་རྐྱང་"
"པ་ཅིད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་གྱི་གྲལ་ཐིག་ཚུ་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་ཨིན་"
"པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་ཁ་"
"ཡིག་ཚུ་གནས་ཏེ་ཡོདཔ་ཨིན། \n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་ཡོདཔ་ཨིན་ན་འདི་གསལ་བཀོད་འབདཝ་ཨིན། "
"@field འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་  དཔེ་ ༢་པ་, ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་ཨིན།  ས་སྒོ་འདི་ཀེར་"
"ཐིག་གི་ཁ་ཡིག་ཡང་བཏུབ་ཨིན།  དཔེར་ན་, ``ལོ '' དེ་གིས་ ཀེར་ཐིག་ ཁ་ཡིག་ ``Age'' དང་ཅགི་ཁར་ "
"@databaseཁྱབ་ཚད་ནང་ཡོད་མི་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་དེ་ཡོད་པའི་གནས་སྟངས་ཚུ་གནས་མི་  ནང་ཐིག་གི་ཁྱབ་ཚད་འདིཨིན།  "
"@criteria གི་གྲལ་ཐིག་དང་པ་འདི་གིས་  ཁྱད་ཚད་འདི་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་  ས་སྒོ་ཚུ་གི་ཁ་ཡིག་འདི་"
"གནས་དགོཔ་ཨིན།  ཁ་ཡིག་གི་འོག་ལུ་ཡོད་མི་ནང་ཐིག་དེ་གིས་ གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་, དཔེར་ན, "
"``>3'' ཡང་ན་ ``<9''.  འདྲ མཉམ་གནས་སྟངས་འདི་  གནས་གོང་ཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་"
"ཚུགས་, e.g. ``3'' ཡང་ན་ ``John''. \n"
"གྲལ་ཐིག་@criteriaནང་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན།   @database ནང་གི་"
"གྲལ་ཐིག་དེ་གིས་@criteria ནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་, དེ་ལས་  གྲ་ཐིག་འདི་གྱངས་ཁ་བརྐྱབ་ཨིན།  "
"ཐབས་རིག་གི་ཐོག་ལསསླབ་པ་ཅིན་,  འདི་@criteria ནང་གི་གྲལ་ཐིག་བར་ནིའི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོད་ཨིན།\n"
"If @criteria འདི་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་, དེ་ལས་  གསལ་བཀོད་འབད་"
"དེ་ཡོད་པའི་ཀེར་ཐིག་ཚུ་ནང་གི་གནས་སྟངས་འདི་  མཐུན་ནི་ལུ་ @database ནང་གི་གྲལ་ཐིག་འདི་བདེན་དགོཔ་"
"ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་@criteria ནང་གི་ཀེར་ཐིག་ཚུ་གི་བར་ནའི་བུ་ལིན་ཡང་ན་"
"བཀོལ་སྤྱོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7 དེ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོད་ཟེར་བཞག་གེ:\n"
"མིང་         ལོ་              དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 ཚུ་གིས་ འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་ཨིན:\n"
"    ལོ་           དངུལ་ཕོགས\n"
"<30\n"
">40     >46000\n"
"\n"
"* རྣམ་གྲངས་ཅི་གིས་ཡང་གནས་སྟངས་ཚུ་མ་མཐུན་པ་ཅིན་, DGET དེ་གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* རྣམ་གྲངས་གཅིག་ལས་ལྷག་སྟེ་  གནས་སྟངས་འདི་མཐུན་པ་ཅིན་, DGET དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"DGET(A1:C7, \"Salary\", A9:A10) equals 34323.\n"
"DGET(A1:C7, \"Name\", A9:A10) equals \"Clark\".\n"
"\n"
"@SEEALSO=DCOUNT"

#: ../plugins/fn-database/functions.c:582
msgid ""
"@FUNCTION=DMAX\n"
"@SYNTAX=DMAX(database,field,criteria)\n"
"@DESCRIPTION=DMAX function returns the largest number in a column that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DMAX(A1:C7, \"Salary\", A9:A11) equals 47242.\n"
"DMAX(A1:C7, \"Age\", A9:A11) equals 45.\n"
"DMAX(A1:C7, \"Age\", A9:B11) equals 43.\n"
"\n"
"@SEEALSO=DMIN"
msgstr ""
"@FUNCTION=DMAX\n"
"@SYNTAX=DMAX(database,field,criteria)\n"
"@DESCRIPTION=DMAX ལས་འགན་འདི་གིས་  གནས་སྟངས་གསལ་བཀོད་འབད་ཡོད་མི་ལུ་མཐུན་མི་ཀེར་ཐིག་གཅིག་"
"ནང་  ཨང་གྲངས་སྦོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་གི་གྲལ་ཐིག་འདི་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་ཨིན་"
"པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཅིག་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་"
"ཁ་ཡིག་ཚུ་གནས་ཏེ་ཡོདཔ་ཨིན།\n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ལུ་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་ཨིན་ན་གསལ་བཀོད་འབདཝ་ཨིན། @field "
"འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་  དཔེ་༢་པ་  ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་ཨིན།   ས་སྒོ་འདི་ཀེར་ཐིག་གི་ཁ་"
"ཡིག་ཡང་འབད་བཏུབ་ཨིན།   དཔེར་ན་ ``Age'' དེ་གིས་  ཁ་ཡིག་``Age'' @database ཁྱབ་ཚད་ནང་ཡོད་"
"མི་དང་ཅིག་ཁར་གྱི་ཀེར་ཐིག་འདི་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན།\n"
"\n"
"@criteria འདི་  གནས་སྟངས་གསལ་བཀོད་འབད་ཡོད་མི་ནང་ཐིག་གི་ཁྱབ་ཚད་ཨིན།  @criteria གི་གྲལ་ཐིག་"
"དང་པ་དེ་གིས་  ཁྱད་ཚད་འདི་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་འདི་ས་སྒོའི་ཁ་ཡིག་ཡོདཔ་ཨིན།  ཁ་ཡིག་གི་འོག་ལུ་ཡོད་མི་"
"ནང་ཐིག་ཚུ་གིས་གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་  དཔེ་ན་, ``>3'' ཡང་ན་ ``<9''. འདྲ་མཉམ་"
"གནས་སྟངས་འདི་  གནས་གོང་ཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་ཚུགས་, e.g. ``3'' ཡང་ན་ "
"``John''. \n"
"@criteria ནང་གི་གྲལ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན། @database ནང་གི་"
"གྲལ་ཐིག་གིས་@criteria ནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་,དེ་ལས་  གྲལ་ཐིག་འདི་གྱངས་ཁ་བརྩིཝ་ཨིན།  ཐབས་"
"རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་@criteriaནང་གི་གྲལ་ཐིག་གི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་འདི་ཨིན།\n"
"If @criteria དེ་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་, གསལ་བཀོད་འབད་ཡོད་པའི་"
"ཀེར་ཐིག་ཚུ་གི་གནས་སྟངས་རེ་རེ་སྦེ་  མཐུན་ནིའི་དོན་ལུ་@database ནང་གི་གྲལ་ཐིག་ལུ་བདེན་པ་འོང་དགོཔ་"
"ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་,  འདི་@criteria ནང་གི་ཀེར་ཐིག་ཚུ་གི་བར་ནའི་བུ་ལིན་ཡང་ན་"
"བཀོལ་སྤྱོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་A1:C7 དེ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་སྦེ་བཞག་གེ:\n"
"མིང་          ལོ་           དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་ , ནང་ཐིག་ A9:B11 འདི་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་ཨིན:\n"
"ལོ་      དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DMAX(A1:C7, \"Salary\", A9:A11) equals 47242.\n"
"DMAX(A1:C7, \"Age\", A9:A11) equals 45.\n"
"DMAX(A1:C7, \"Age\", A9:B11) equals 43.\n"
"\n"
"@SEEALSO=DMIN"

#: ../plugins/fn-database/functions.c:660
msgid ""
"@FUNCTION=DMIN\n"
"@SYNTAX=DMIN(database,field,criteria)\n"
"@DESCRIPTION=DMIN function returns the smallest number in a column that "
"match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DMIN(A1:C7, \"Salary\", A9:B11) equals 34323.\n"
"DMIN(A1:C7, \"Age\", A9:B11) equals 29.\n"
"\n"
"@SEEALSO=DMAX"
msgstr ""
"@FUNCTION=DMIN\n"
"@SYNTAX=DMIN(database,field,criteria)\n"
"@DESCRIPTION=DMIN ལས་འགན་འདི་གིས་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ལུ་མཐུན་མི་  ཀེར་ཐིག་"
"ནང་གི་ཨང་གྲངས་ཆུང་ཀུ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་གྱི་གྲལ་ཐིག་ཚུ་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་ཨིན་"
"པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཅིག་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དངཔ་དེ་གིས་ ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་ཁ་"
"ཡིག་ཚུ་ཡོདཔ་ཨིན། \n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ལུ་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན་ན་གསལ་བཀོད་འབདཝ་ཨིན། "
"@field འདི་ཧྲིལ་གྲངས་ཨིན་  དཔེ་༢་པ་,ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན།  ས་སྒོ་འདི་ཀེར་"
"ཐིག་གི་ཁ་ཡིག་ཡང་བཏུབ་ཨིན།   དཔེར་ན་ ``Age'' དེ་གིས་ ཁ་ཡིག་ ``Age'' འདི་database ཁྱབ་ཚད་"
"ནང་ཅིག་ཁར་ཡོད་པའི་ཀེར་ཐིག་ལུ་གཞི་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཚུ་ཡོད་མི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་འདི་ཨིན།  "
"@criteria གི་གྲལ་ཐིག་དང་པ་འདི་གིས་  ཁྱད་ཚད་ཚུ་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་གི་  ས་སྒོའི་ཁ་ཡིག་འདི་གནས་"
"དགོཔ་ཨིན།   ཁ་ཡིག་ཚུ་གི་འོག་ལུ་ཡོད་མི་ནང་ཐིག་ཚུ་གིས་  གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་  དཔེར་"
"ན་, ``>3'' ཡང་ན་ ``<9''.  འདྲ་མཉམ་པའི་གནས་སྟངས་དེ་གིས་  གནས་གོང་གཅིག་གསལ་བཀོད་འབད་ཐོག་"
"ལས་བྱིན་ཚུགས་ e.g. ``3'' ཡང་ན་``John''. \n"
"@criteria ནང་ཐིག་གྲ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་གསལ་བཀོད་འབདཝ་ཨིན།  @database ནང་གི་"
"གྲལ་ཐིག་དེ་གིས་@criteria ནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་, དེ་ལས་  གྲལ་ཐིག་འདི་བརྩིཝ་ཨིན།  ཐབས་རིག་"
"གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་@criteriaནང་གི་གྲལ་ཐིག་ཚུ་གི་བར་ནའི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་འདི་ཨིན།\n"
"If @criteria དེ་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་, དེ་ལས་  གསལ་བཀོད་འབད་"
"ཡོད་པའི་ཀེར་ཐིག་ནང་གི་གནས་སྟངས་རེ་རེ་སྦེ་མཐུན་ནི་ལུ་ @databaseནང་གི་གྲལ་ཐིག་དོན་ལུ་བདེན་པ་དགོཔ་"
"ཨིན།   ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་  འདི་ @criteria ནང་གི་ཀེར་ཐིག་ཚུ་གི་བར་ནའི་བུ་ལིན་ཡང་ན་"
"བཀོལ་སྤྱོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7 དེ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་ཨིན:\n"
"མིང་         ལོ་           དངུལ་ཕོག་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11ཚུ་ནང་འོག་གི་གནས་གོང་ཚུ་ཡོགཔ་ཨིན:\n"
"  ལོ་          དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DMIN(A1:C7, \"Salary\", A9:B11) equals 34323.\n"
"DMIN(A1:C7, \"Age\", A9:B11) equals 29.\n"
"\n"
"@SEEALSO=DMAX"

#: ../plugins/fn-database/functions.c:735
msgid ""
"@FUNCTION=DPRODUCT\n"
"@SYNTAX=DPRODUCT(database,field,criteria)\n"
"@DESCRIPTION=DPRODUCT function returns the product of numbers in a column "
"that match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DPRODUCT(A1:C7, \"Age\", A9:B11) equals 1247.\n"
"\n"
"@SEEALSO=DSUM"
msgstr ""
"@FUNCTION=DPRODUCT\n"
"@SYNTAX=DPRODUCT(database,field,criteria)\n"
"@DESCRIPTION=DPRODUCT ལས་འགན་འདི་གིས་ གསལ་བཀོད་འབད་དེ་ཡོད་པའི་གནས་སྟངས་ལུ་མཐུན་མི་ཀེར་"
"ཐིག་ནང་གི་  ཨང་གྲངས་ཚུ་གི་ཐོན་འབྲས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@database འདི་འབྲེལ་བའི་བརྡ་དོན་གྱི་གྲལ་ཐིག་ཚུ་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་ཨིན་པའི་"
"ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་འདི་ཨིན།   གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་ཁ་"
"ཡིག་ཚུ་ཡོདཔ་ཨིན།\n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ལུ་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་ཡོདཔ་ཨིན་ན་འདི་གསལ་བཀོད་འབདཝ་ཨིན། "
"@field འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་དཔེ་༢་པ་, ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་ཨིན།  ས་སྒོ་འདི་ཀེར་ཐིག་"
"གི་ཁ་ཡིག་ཡང་བཏུབ་ཨིན།  དཔེར་ན་, ``Age'' དེ་གིས་  ཁ་ཡིག་ ``Age'' དང་ཅིག་ཁར་  @database "
"ཁྱབ་ཚད་ནང་གི་ཀེར་ཐིག་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན།\n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཚུ་ཡོད་པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན། "
"@criteria གི་གྲལ་ཐིག་དང་པ་དེ་གིས་ ཁྱད་ཚན་ཚུ་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་གི་ས་སྒོའི་ཁ་ཡིག་འདི་གནས་དགོཔ་"
"ཨིན།  ཁ་ཡིག་གི་འོག་ལུ་ཡོད་མི་ནང་ཐིག་ཚུ་གིས་གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་, དཔེར་ན, ``>3'' "
"ཡང་ན་ ``<9''.  འདྲ་མཉམ་པའི་གནས་སྟངས་དེ་གིས་  གནས་གོང་གཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་ཚུགས་"
"e.g. ``3'' ཡང་ན་ ``John''. \n"
"@criteria ནང་གི་གྲལ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན། @database ནང་གི་"
"གྲལ་ཐིག་དེེ་གིས་@criteriaནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་, དེ་ལས་  གྲལ་ཐིག་འདི་བརྩིཝ་ཨིན།  ཐབས་རིག་"
"གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་ @criteriaནང་གི་གྲལ་ཐིག་གི་བར་ནའི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་ཨིན།\n"
"If @criteria དེ་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབདཝ་ཨིན་, དེ་ལས་  གསལ་བཀོད་འབད་"
"ཡོད་པའི་ཀེར་ཐིག་ནང་གི་གནས་སྟངས་ཚུ་མཐུན་ནི་ལུ་@database ནང་གི་གྲལ་ཐིག་གི་དོན་ལུ་བདེན་པ་འོང་དགོཔ་"
"ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་ @criteria ནང་གི་ཀེར་ཐིག་ཚུ་གི་བར་ནའི་བུ་ལིན་དང་བཀོལ་"
"སྤྱོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7ཚུ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་སྦེ་བཞག་གེ:\n"
"མིང་         ལོ་            དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 དེ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་ཨིན:\n"
"ལོ་            དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DPRODUCT(A1:C7, \"Age\", A9:B11) equals 1247.\n"
"\n"
"@SEEALSO=DSUM"

#: ../plugins/fn-database/functions.c:810
msgid ""
"@FUNCTION=DSTDEV\n"
"@SYNTAX=DSTDEV(database,field,criteria)\n"
"@DESCRIPTION=DSTDEV function returns the estimate of the standard deviation "
"of a population based on a sample. The population consists of numbers that "
"match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DSTDEV(A1:C7, \"Age\", A9:B11) equals 9.89949.\n"
"DSTDEV(A1:C7, \"Salary\", A9:B11) equals 9135.112506.\n"
"\n"
"@SEEALSO=DSTDEVP"
msgstr ""
"@FUNCTION=DSTDEV\n"
"@SYNTAX=DSTDEV(database,field,criteria)\n"
"@DESCRIPTION=DSTDEV དེ་གིས་  དཔེ་གཞི་ལུ་གཞི་བཞག་སྟེ་མི་རློབས་ཅིག་གི་ཚད་ལྡན་ཁ་སྒྱུར་བའི་  ཕོག་ཚད་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།   མི་རློབས་འདི་གིས་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཚུ་གི་ཨང་གྲངས་འདི་"
"ཡོདཔ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་ཚུ་གི་གྲལ་ཐིག་འདི་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་"
"ཨིན་པའི་ནང་ཐིག་གི་ཁྱབབ་ཚད་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་"
"ཁ་ཡིག་ཚུ་ཡོདཔ་ཨིན།\n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ལུ་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་ཡོད་ག་གསལ་བཀོད་འབདཝ་ཨིན།  @field "
"འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་, དཔེ་༢་པ་, ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན།  ས་སྒོ་འདི་ཀེར་"
"ཐིག་ཅིག་གི་ཁ་ཡིག་ཡང་བཏུབ་ཨིན།  དཔེར་ན་, ``Age'' འདི་གིས་  ཁ་ཡིག་ ``Age'' དང་ཅིག་ཁར་"
"@database ཁྱབ་ཚད་ནང་ཡོད་མི་ཀེར་ཐིག་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་དེ་ཡོད་པའི་གནས་སྟངས་ཡོད་མི་ནང་ཐིག་གི་ཁྱབ་ཚད་ཨིན། @criteria "
"གི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཁྱད་ཚད་འདི་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་གི་ས་སྒོའི་ཁ་ཡིག་འདི་གནས་དགོཔ་ཨིན།  ཁ་"
"ཡིག་གི་འོག་ལུ་ཡོད་མི་ནང་ཐིག་དེ་གིས་གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན།  དཔེར་ན, ``>3'' ཡང་ན་ "
"``<9''.  འདྲ་མཉམ་གནས་སྟངས་དེ་གིས་  གནས་གོང་ཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་ཚུགས་, e.g. "
"``3'' ཡང་ན་ ``John''. \n"
"@criteria ནང་གི་གྲལ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན།  @database ནང་"
"གི་གྲལ་ཐིག་དེ་གིས་ @criteriaནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་,དེ་ལས་  གྲལ་ཐིག་འདི་བརྩིཝ་ཨིན།  ཐབས་"
"རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་,  འདི་ @criteria ནང་གི་གྲལ་ཐིག་ཚུ་གི་བར་ནའི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་"
"འདི་ཨིན།\n"
"If @criteria འདི་གིས་ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་, དེ་ལས་  གསལ་བཀོད་འབད་དེ་"
"ཡོད་པའི་ཀེར་ཐིག་ནང་གི་གནས་སྟངས་འདི་མཐུན་ནི་ལུ་@database ནང་གི་གྲལ་ཐིག་གི་དོན་ལུ་བདེན་པ་འོང་དགོཔ་"
"ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་ @criteria ནང་གི་ཀེར་ཐིག་ཚུ་གི་བར་ནའི་བུ་ལིན་དང་བཀོལ་"
"སྤྱོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7ཚུ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་སྦེ་བཞག་གེ:\n"
"མིང་         ལོ་           དངུལ་ཕོགས\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 ཚུ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོད:\n"
"ལོ་               དངུལ་ཕོགས\n"
"<30\n"
">40     >46000\n"
"\n"
"DSTDEV(A1:C7, \"Age\", A9:B11) equals 9.89949.\n"
"DSTDEV(A1:C7, \"Salary\", A9:B11) equals 9135.112506.\n"
"\n"
"@SEEALSO=DSTDEVP"

#: ../plugins/fn-database/functions.c:886
msgid ""
"@FUNCTION=DSTDEVP\n"
"@SYNTAX=DSTDEVP(database,field,criteria)\n"
"@DESCRIPTION=DSTDEVP function returns the standard deviation of a population "
"based on the entire population. The population consists of numbers that "
"match conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DSTDEVP(A1:C7, \"Age\", A9:B11) equals 7.\n"
"DSTDEVP(A1:C7, \"Salary\", A9:B11) equals 6459.5.\n"
"\n"
"@SEEALSO=DSTDEV"
msgstr ""
"@FUNCTION=DSTDEVP\n"
"@SYNTAX=DSTDEVP(གནས་སྡུད་གཞི་རྟེན་,ས་སྒོ་,ཁྱད་ཚད་)\n"
"@DESCRIPTION=DSTDEVP ལས་འགན་འདི་གིས་  མི་རློབས་ཧྲིལ་བུ་གུ་གཞི་བཞག་སྟེ་མི་རློབས་ཅིག་གི་ཚད་ལྡན་ཁ་"
"སྒྱུར་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།  མི་རློབས་དེ་གིས་གསལ་བཀོད་འབད་དེ་ཡོད་པའི་གནས་སྟངས་ཚུ་ལུ་མཐུན་མི་ཨང་"
"གྲངས་ཚུ་ཡོདཔ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་གྱི་གྲལ་ཐིག་ཚུ་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་ཨིན་"
"པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་ཁ་"
"ཡིག་ཚུ་ཡོདཔ་ཨིན།\n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ལུ་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན་ན་འདི་གསལ་བཀོད་འབདཝ་"
"ཨིན། @field དི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་  དཔེ་༢་པ་, ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་ཨིན།   ས་སྒོ་འདི་"
"ཀེར་ཐིག་གི་ཁ་ཡིག་ཡང་བཏུབ་ཨིན།   དཔེར་ན་, ``Age'' དེ་གིས་  ཁ་ཡིག་ ``Age'' དང་ཅིག་ཁར་"
"@database ཁྱབ་ཚད་ནང་ཡོད་པའི་ཀེར་ཐིག་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཚུ་ཡོད་མི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན།  "
"@criteria གི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཁྱད་ཚན་ཚུ་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་  ས་སྒོའི་ཁ་ཡིག་ཚུ་གནས་དགོཔ་"
"ཨིན།  ཁ་ཡིག་གི་འོག་ལུ་ཡོད་པའི་ནང་གི་ཚུ་གིས་  གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་, དཔེར་ན, ``>3'' "
"ཡང་ན་ ``<9''.  འདྲ་མཉམ་པའི་གནས་སྟངས་དེ་གིས་  གནས་གོང་གཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་"
"ཚུགས་, e.g. ``3'' ཡང་ན་ ``John''. \n"
"@criteria ནང་གི་གྲལ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན། @database ནང་གི་"
"གྲལ་ཐིག་དེ་གིས་@criteria ནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་, དེ་ལས་ གྲལ་ཐིག་འདི་བརྩིཝ་ཨིན།  ཐབས་རིག་"
"གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་@criteria ནང་གི་གྲལ་ཐིག་གི་བར་ནའི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་ཨིན།\n"
"If @criteria དེ་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་   གསལ་བཀོད་འབད་ཡོད་པའི་"
"ཀེར་ཐིག་ནང་གི་གནས་སྟངས་རེ་རེ་སྦེ་མཐུན་ནི་ལུ་@database ནང་གི་གྲལ་ཐིག་ལུ་བདེན་པ་འོང་དགོཔ་ཨིན  ཐབས་"
"རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་@criteriaནང་གི་ཀེར་ཐིག་གི་བར་ནའི་བུ་ལིན་དང་བཀོལ་སྤྱོད་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7ཚུ་གིས་ འོག་གི་གནས་གོང་ཚུ་ཡོད་ཟེར་བཞག་གེ:\n"
"མིང་         ལོ་           དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 ཚུ་གིས་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་ཨིན:\n"
"   ལོ་           དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DSTDEVP(A1:C7, \"Age\", A9:B11) equals 7.\n"
"DSTDEVP(A1:C7, \"Salary\", A9:B11) equals 6459.5.\n"
"\n"
"@SEEALSO=DSTDEV"

#: ../plugins/fn-database/functions.c:962
msgid ""
"@FUNCTION=DSUM\n"
"@SYNTAX=DSUM(database,field,criteria)\n"
"@DESCRIPTION=DSUM function returns the sum of numbers in a column that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DSUM(A1:C7, \"Age\", A9:B11) equals 72.\n"
"DSUM(A1:C7, \"Salary\", A9:B11) equals 81565.\n"
"\n"
"@SEEALSO=DPRODUCT"
msgstr ""
"@FUNCTION=DSUM\n"
"@SYNTAX=DSUM(database,field,criteria)\n"
"@DESCRIPTION=DSUM ལས་འགན་འདི་གིས་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ལུ་མཐུན་པའི་ཀེར་ཐིག་ནང་"
"གི་ཨང་གྲངས་ཚུ་གི་བསྡོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་གྱི་གྲལ་ཐིག་ཚུ་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་ཚུ་ས་སྒོ་ཨིན་"
"པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་འདི་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་"
"ཁ་ཡིག་ཚུ་གནས་ཡོདཔ་ཨིན།\n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ལུ་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན་ན་འདི་གསལ་བཀོད་འབདཝ་"
"ཨིན། @field འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་, དཔེ་༢་པ་,ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་ཨིན།  ས་སྒོ་འདི་"
"ཀེར་ཐིག་གི་གནས་གོང་ཡང་བཏུབ་ཨིན།  དཔེར་ན་, ``Age'' དེ་གིས་ ཁ་ཡིག་ ``Age'' དང་ཅིག་ཁར་"
"@database ཁྱབ་ཚད་ནང་ཡོད་པའི་ཀེར་ཐིག་ལུ་གཞུ་བསྟུན་འབདཝ་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཚུ་ཡོད་མི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་འདི་ཨིན། "
"@criteria གི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཁྱད་ཚད་འདི་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་  ས་སྒོའི་ཁ་ཡིག་འདི་གནས་"
"དགོཔ་ཨིན།  ཁ་ཡིག་གི་འོག་ལུ་ཡོད་མི་ནང་ཐིག་དེ་གིས་གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་  དཔེར་ན་, "
"``>3'' ཡང་ན་ ``<9''. འདྲ་མཉམ་པའི་གནས་སྟངས་འདི་  གནས་གོང་གཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་"
"ཚུགས་, e.g. ``3'' ཡང་ན་``John''. \n"
"@criteria ནང་གི་གྲལ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་ཅིག་གསལ་བཀོད་འབདཝ་ཨིན། @database ནང་གི་"
"གྲལ་ཐིག་གིས་ @criteria ནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་, དེ་ལས་གྲལ་ཐིག་འདི་བརྩིཝ་ཨིན།  ཐབས་རིག་གི་"
"ཐོག་ལས་སླབ་པ་ཅིན་, འདི་ @criteriaནང་གི་གྲལ་ཐིག་གི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་འདི་ཨིན།\n"
"If @criteria འདི་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་   དེ་ལས་  གསལ་བཀོད་"
"འབད་ཡོད་པའི་ཀེར་ཐིག་ནང་གི་གནས་སྟངས་རེ་རེ་སྦེ་  མཐུན་ནི་ལུ་ @database ནང་གི་གྲལ་ཐིག་གི་དོན་ལུ་"
"བདེན་པ་འོང་དགོཔ་ཨིན།   ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་ @criteriaནང་གི་ཀེར་ཐིག་གི་བར་ནའི་"
"བུ་ལིན་དང་བཀོལ་སྤྱོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7 ཚུ་ལུ་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་སྦེ་བཞག་གེ:\n"
"མིང་         ལོ་            དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 ཚུ་ལུ་འོག་གི་གནས་གོང་ཚུ་ཡོད :\n"
"ལོ་               དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DSUM(A1:C7, \"Age\", A9:B11) equals 72.\n"
"DSUM(A1:C7, \"Salary\", A9:B11) equals 81565.\n"
"\n"
"@SEEALSO=DPRODUCT"

#: ../plugins/fn-database/functions.c:1038
msgid ""
"@FUNCTION=DVAR\n"
"@SYNTAX=DVAR(database,field,criteria)\n"
"@DESCRIPTION=DVAR function returns the estimate of variance of a population "
"based on a sample. The population consists of numbers that match conditions "
"specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DVAR(A1:C7, \"Age\", A9:B11) equals 98.\n"
"DVAR(A1:C7, \"Salary\", A9:B11) equals 83450280.5.\n"
"\n"
"@SEEALSO=DVARP"
msgstr ""
"@FUNCTION=DVAR\n"
"@SYNTAX=DVAR(གནས་སྡུད་གཞི་རྟེན་,ས་སྒོ་,ཁྱད་ཚད་)\n"
"@DESCRIPTION=DVAR དེ་གིས་  དཔེ་གཞི་གུ་གཞི་བཞག་སྟེ་  མི་རློབས་ཀྱི་མི་མཐུན་པའི་ཕོག་ཚད་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།  མི་རློབས་དེ་གིས་གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཀྱི་ཨང་གྲངས་འདི་ཡོདཔ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་ཚུ་གི་གྲལ་ཐིག་འདི་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཚུ་གི་ཀེར་ཐིག་ཚུ་ས་"
"སྒོ་ཨིན་པའི་ནང་ཐིག་ཁྱབ་ཚད་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་དོན་ལུ་ཁ་"
"ཡིག་ཚུ་ཡོདཔ་ཨིན། \n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ལུ་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན་ན་འདི་གསལ་བཀོད་འབདཝ་"
"ཨིན། @field འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་, དཔེ་༢་པ,ཀེར་ཐིག་གཉིས་པ་འདི་ལགལེན་འཐབ་ཨིན།  ས་སྒོ་འདི་ཀེར་"
"ཐིག་གི་ཁ་ཡིག་ཡང་བཏུབ་ཨིན།  དཔེར་ན་, ``Age'' དེ་གིས་  ཁ་ཡིག་ ``Age'' དང་ཅིག་ཁར་"
"@database ཁྱབ་ཚད་ནང་གི་ཀེར་ཐིག་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན། \n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཡོད་པའི་ནང་ཐིག་གི་ཁྱབ་ཚད་ཨིན། @criteria གི་"
"གྲལ་ཐིག་དང་པ་དེ་གིས་  ཁྱད་ཚད་འདི་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་གི་  ས་སྒོའི་ཁ་ཡིག་ཚུ་གནས་དགོཔ་ཨིན།  ཁ་ཡིག་"
"གི་འོག་ལུ་ཡོད་པའི་ནང་ཐིག་ཚུ་གིས་གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན་, དཔེར་ན, ``>3'' ཡང་ན "
"``<9''.  འདྲ་མཉམ་པའི་གནས་སྟངས་འདི་  གནས་གོང་གཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་ཚུགས་, e.g. "
"``3'' ཡང་ན་ ``John''. \n"
"@criteria ནང་གི་གྲལ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་གཅིག་གསལ་བཀོད་འབདཝ་ཨིན། @database ནང་"
"གི་གྲལ་ཐིག་དེ་གིས་ @criteria ནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་, དེ་ལས་ གྲལ་ཐིག་འདི་བརྩིཝ་ཨིན།  ཐབས་"
"རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་ @criteria ནང་གི་གྲལ་ཐིག་གི་བར་ནའི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་ཨིན།\n"
"If @criteria འདི་གིས་ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་, དེ་ལས་ གསལ་བཀོད་འབད་ཡོད་"
"པའི་ཀེར་ཐིག་ནང་གི་གནས་སྟངས་རེ་རེ་སྦེ་  མཐུན་ནི་ལུ་ @database ནང་གི་གྲལ་ཐིག་གི་དོན་ལུ་བདེན་དགོཔ་"
"ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་ འདི་ @criteriaནང་གི་ཀེར་ཐིག་གི་བར་ནའི་བུ་ལིན་དང་བཀོལ་སྤྱོད་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7འདི་ཚུ་གིས་ འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་སྦེ་བཞག་གེ:\n"
"མིང་         ལོ་           དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 ཚུ་གིས་ འོག་གི་གནས་གོང་ཚུ་ཡོད:\n"
"ལོ་     དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DVAR(A1:C7, \"Age\", A9:B11) equals 98.\n"
"DVAR(A1:C7, \"Salary\", A9:B11) equals 83450280.5.\n"
"\n"
"@SEEALSO=DVARP"

#: ../plugins/fn-database/functions.c:1114
msgid ""
"@FUNCTION=DVARP\n"
"@SYNTAX=DVARP(database,field,criteria)\n"
"@DESCRIPTION=DVARP function returns the variance of a population based on "
"the entire population. The population consists of numbers that match "
"conditions specified.\n"
"\n"
"@database is a range of cells in which rows of related information are "
"records and columns of data are fields. The first row of a database contains "
"labels for each column. \n"
"\n"
"@field specifies which column is used in the function.  If @field is an "
"integer, for example 2, the second column is used. Field can also be the "
"label of a column.  For example, ``Age'' refers to the column with the label "
"``Age'' in @database range. \n"
"\n"
"@criteria is the range of cells which contains the specified conditions.  "
"The first row of a @criteria should contain the labels of the fields for "
"which the criteria are for.  Cells below the labels specify conditions, for "
"example, ``>3'' or ``<9''.  Equality condition can be given simply by "
"specifying a value, e.g. ``3'' or ``John''. \n"
"Each row in @criteria specifies a separate condition. If a row in @database "
"matches a row in @criteria, then that row is counted. Technically speaking, "
"this a boolean OR operation between the rows in @criteria.\n"
"If @criteria specifies more than one column, then each of the conditions in "
"the specified columns must be true for the row in @database to match. "
"Technically speaking, this is a boolean AND operation between the columns in "
"@criteria.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the range A1:C7 contain the following values:\n"
"Name    Age     Salary\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"In addition, the cells A9:B11 contain the following values:\n"
"Age     Salary\n"
"<30\n"
">40     >46000\n"
"\n"
"DVARP(A1:C7, \"Age\", A9:B11) equals 49.\n"
"DVARP(A1:C7, \"Salary\", A9:B11) equals 41725140.25.\n"
"\n"
"@SEEALSO=DVAR"
msgstr ""
"@FUNCTION=DVARP\n"
"@SYNTAX=DVARP(database,field,criteria)\n"
"@DESCRIPTION=DVARP ལས་འགན་འདི་གིས་ མི་རློབས་ཧྲིལ་བུ་གཞི་བཞག་སྟེ་  མི་རློབས་ཅིག་གི་མི་མཐུན་པ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།  མི་རློབས་དེ་གིས་ གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཀྱི་ཨང་གྲངས་འདི་ཡོདཔ་ཨིན།\n"
"\n"
"@database འདི་  འབྲེལ་བའི་བརྡ་དོན་གྱི་གྲལ་ཐིག་འདི་དྲན་ཐོ་ཨིནམ་དང་  གནས་སྡུད་ཀྱི་ཀེར་ཐིག་འདི་ས་སྒོ་"
"ཨིན་པའི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་འདི་ཨིན།  གནས་སྡུད་གཞི་རྟེན་གྱི་གྲལ་ཐིག་དང་པ་དེ་གིས་  ཀེར་ཐིག་རེ་རེ་གི་"
"དོན་ལུ་ཁ་ཡིག་ཚུ་ཡོདཔ་ཨིན། \n"
"\n"
"@field དེ་གིས་  ལས་འགན་ནང་ཀེར་ཐིག་ག་འདི་ལག་ལེན་འཐབ་སྟེ་ཡོདཔ་ཨིན་ན་འདི་གསལ་བཀོད་འབདཝ་ཨིན། "
"@field འདི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་དཔེ་༢་པ་,ཀེར་ཐིག་གཉིས་པ་འདི་ལག་ལེན་འཐབ་ཨིན།   ས་སྒོ་འདི་ཀེར་ཐིག་"
"གི་ཁ་ཡིག་ཡང་བཏུབ་ཨིན།  དཔེར་ན་, ``Age'' དེ་གིས་  ཁ་ཡིག་ ``Age'' དང་ཅགི་ཁར་@database "
"ཁྱབ་ཚད་ནང་གི་ཀེར་ཐིག་ལུ་གཞི་བསྟུན་འབདཝ་ཨིན།\n"
"\n"
"@criteria འདི་  གསལ་བཀོད་འབད་ཡོད་པའི་གནས་སྟངས་ཚུ་ཡོད་མི་ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན། "
"@criteria གི་གྲལ་ཐིག་དང་པ་འདི་གིས་  ཁྱད་ཚད་འདི་ག་ཅི་གི་དོན་ལུ་ཨིན་ན་གི་  ས་སྒོའི་ཁ་ཡིག་ཚུ་གནས་"
"དགོཔ་ཨིན།   ཁ་ཡིག་ཚུ་གི་འོག་ལུ་ཡོད་མི་ནང་གི་དེ་གིས་  གནས་སྟངས་ཚུ་གསལ་བཀོད་འབདཝ་ཨིན།  དཔེར་ན་ "
"``>3'' ཡང་ན་ ``<9''. འདྲ མཉམ་པའི་གནས་སྟངས་འདི་  གནས་གོང་གཅིག་གསལ་བཀོད་འབད་ཐོག་ལས་བྱིན་"
"ཚུགས།, e.g. ``3'' ཡང་ན་ ``John''. \n"
"@criteria ནང་གི་གྲལ་ཐིག་རེ་རེ་གིས་  གནས་སྟངས་སོ་སོ་གཅིག་གསལ་བཀོད་འབདཝ་ཨིན།  @database ནང་"
"གི་གྲལ་ཐིག་གིས་@criteria ནང་གི་གྲལ་ཐིག་ལུ་མཐུན་པ་ཅིན་, དེ་ལས་  གྲལ་ཐིག་འདི་བརྩིཝ་ཨིན།  ཐབས་རིག་"
"གི་ཐོག་ལས་སླབ་པ་ཅིན་, འདི་ @criteria ནང་གི་གྲལ་ཐིག་གི་བར་ནའི་བུ་ལིན་ཡང་ན་བཀོལ་སྤྱོདཔ་ཨིན།\n"
"If @criteria དེ་གིས་  ཀེར་ཐིག་གཅིག་ལས་ལྷག་སྟེ་གསལ་བཀོད་འབད་བ་ཅིན་, དེ་ལས་  གསལ་བཀོད་འབད་"
"ཡོད་པའི་ཀེར་ཐིག་ནང་གི་གནས་སྟངས་འདི་  མཐུན་ནི་ལུ་@database ནང་གི་གྲལ་ཐིག་གི་དོན་ལུ་བདེན་དགོཔ་"
"ཨིན།  ཐབས་རིག་གི་ཐོག་ལས་སླབ་པ་ཅིན་   འདི་ @criteriaནང་གི་ཀེར་ཐིག་གི་བར་ནའི་བུ་ལིན་དང་བཀོལ་"
"སྤྱོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ཁྱབ་ཚད་ A1:C7 ཚུ་ལུ་འོག་གི་གནས་གོང་ཚུ་ཡོདཔ་སྦེ་བཞག་གེ:\n"
"མིང་         ལོ་           དངུལ་ཕོགས་\n"
"John    34      54342\n"
"Bill    35      22343\n"
"Clark   29      34323\n"
"Bob     43      47242\n"
"Susan   37      42932\n"
"Jill    45      45324\n"
"\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ A9:B11 ཚུ་ལུ་འོག་གི་གནས་གོང་ཚུ་ཡོད་:\n"
"ལོ་          དངུལ་ཕོགས་\n"
"<30\n"
">40     >46000\n"
"\n"
"DVARP(A1:C7, \"Age\", A9:B11) equals 49.\n"
"DVARP(A1:C7, \"Salary\", A9:B11) equals 41725140.25.\n"
"\n"
"@SEEALSO=DVAR"

#: ../plugins/fn-database/functions.c:1190
msgid ""
"@FUNCTION=GETPIVOTDATA\n"
"@SYNTAX=GETPIVOTDATA(pivot_table,field_name)\n"
"@DESCRIPTION=GETPIVOTDATA function fetches summary data from a pivot table. "
"@pivot_table is a cell range containing the pivot table. @field_name is the "
"name of the field of which you want the summary data.\n"
"\n"
"* If the summary data is unavailable, GETPIVOTDATA returns #REF! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=GETPIVOTDATA\n"
"@SYNTAX=GETPIVOTDATA(pivot_table,field_name)\n"
"@DESCRIPTION=GETPIVOTDATA ལཱ་འགན་དེགིས་ལྟེ་ཤིང་ཐིག་ཁྲམ་ཅིག་ལས་  བཅུད་དོན་གནས་སྡུད་ལེནམ་"
"ཨིན།@pivot_table འདི་  ལྟེ་ཤིང་ཐིག་ཁྲམ་ཡོད་མི་ནང་ཐིག་ཁྱབ་ཚད་ཨིན། @field_name འདི་  ཁྱོད་ཀྱིས་"
"བཅུད་དོན་གནས་སྡུད་དགོ་པའི་ས་སྒོ་གི་མིང་ཨིན།\n"
"\n"
"* བཅུད་དོན་གནས་སྡུད་འདི་ཐོབ་ཚུགས་མེད་པ་ཅིན་, GETPIVOTDATA དེ་གིས་ #REF! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-date/functions.c:99
msgid ""
"@FUNCTION=DATE\n"
"@SYNTAX=DATE (year,month,day)\n"
"@DESCRIPTION=DATE returns the number of days since the 1st of January of 1900"
"(the date serial number) for the given year, month and day.\n"
"\n"
"* If @month < 1 or @month > 12, the year will be corrected.  A similar "
"correction takes place for days.\n"
"* The @years should be at least 1900.  If @years < 1900, it is assumed to be "
"1900 + @years.\n"
"* If the given date is not valid, DATE returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DATE(2001, 3, 30) returns 'Mar 30, 2001'.\n"
" \n"
"@SEEALSO=TODAY, NOW"
msgstr ""
"@FUNCTION=DATE\n"
"@SYNTAX=DATE (year,month,day)\n"
"@DESCRIPTION=DATE དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་ལོ་ ཟླཝ་དང་ཉིནམ་གྱི་དོན་ལུ་ ༡༩༠༠་(ཚེས་གྲངས་ཨང་རིམ་"
"གྲངས་) གི་ སྤྱི་ཟླ་དང་པའི་༡་པ་གི་ཉིནམ་གྲངས་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"*  @month < 1 ཡང་ན་ @month > 12ཨིན་པ་ཅིན་, ལོ་འདི་ནོར་བཅོས་འབདཝ་ཨིན།  ཉིནམ་གྱི་དོན་ལུ་ཨང་"
"ནོར་བཅོས་འབདཝ་ཨིན།\n"
"* @years འདི་  ༡༩༠༠ འོང་དགོཔ་ཨིན།  @years < 1900ཨིན་པ་ཅིན་, འདི་༡༩༠༠+ @yearsསྦེ་བསམ་ནི་"
"ཨིན།\n"
"* བྱིན་ཡོད་པའི་ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, DATE དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DATE(2001, 3, 30) དེ་གིས་ 'Mar 30, 2001'སླར་ལོག་འབདཝ་ཨིན།\n"
" \n"
"@SEEALSO=TODAY, NOW"

#: ../plugins/fn-date/functions.c:179
msgid ""
"@FUNCTION=UNIX2DATE\n"
"@SYNTAX=UNIX2DATE(unixtime)\n"
"@DESCRIPTION=UNIX2DATE converts a unix time into a spreadsheet date and "
"time.\n"
"\n"
"A unix time is the number of seconds since midnight January 1, 1970.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NOW, DATE, DATE2UNIX"
msgstr ""
"@FUNCTION=UNIX2DATE\n"
"@SYNTAX=UNIX2DATE(unixtime)\n"
"@DESCRIPTION=UNIX2DATE དེ་གིས་ཡུ་ནིགསི་ཆུ་ཚོད་འདི་  ཤོག་ཁྲམ་ཚེས་གྲངས་དང་ཆུ་ཚོད་ནང་ལུ་གཞི་བསྒྱུར་"
"འབདཝ་ཨིན།\n"
"\n"
"ཡུ་ནིགསི་ཆུ་ཚོད་འདི་  སྤྱི་ཟླ་ ༡་པ་ ༡༩༧༠་གི་མཚན་དགུང་ལས་ཚུར་གྱི་  སྐར་ཆའི་གྲངས་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NOW, DATE, DATE2UNIX"

#: ../plugins/fn-date/functions.c:213
msgid ""
"@FUNCTION=DATE2UNIX\n"
"@SYNTAX=DATE2UNIX(serial)\n"
"@DESCRIPTION=DATE2UNIX converts a spreadsheet date and time serial number "
"into a unix time.\n"
"\n"
"A unix time is the number of seconds since midnight January 1, 1970.\n"
"\n"
"@EXAMPLES=\n"
"DATE2UNIX(\"01/01/2000\") equals 946656000.\n"
"\n"
"@SEEALSO=NOW, DATE, UNIX2DATE"
msgstr ""
"@FUNCTION=DATE2UNIX\n"
"@SYNTAX=DATE2UNIX(serial)\n"
"@DESCRIPTION=DATE2UNIX དེ་གིས་  ཡུ་ནིགསི་ཆུ་ཚོད་ནང་ལུ་  ཤོག་ཁྲམ་ཚེས་གྲངས་དང་ཆུ་ཚོད་ཨང་རིམ་"
"ཨང་འདི་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"ཡུ་ནིགསི་ཆུ་ཚོད་འདི་  སྤྱི་ཟླ་ ༡་པ་ ༡༩༧༠་ལས་ཚུར་སྐར་ཆའི་ཨང་གྲངས་འདི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DATE2UNIX(\"01/01/2000\") མཉམ་པ་ཨིན་ 946656000.\n"
"\n"
"@SEEALSO=NOW, DATE, UNIX2DATE"

#: ../plugins/fn-date/functions.c:250
msgid ""
"@FUNCTION=DATEVALUE\n"
"@SYNTAX=DATEVALUE(date_str)\n"
"@DESCRIPTION=DATEVALUE returns the serial number of the date.  @date_str is "
"the string that contains the date. The value depends on the date "
"convention.  The MS Excel 1900 convention dates things from Jan 1 1900 while "
"the 1904 convention uses Jan 1 1904.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DATEVALUE(\"1/1/1999\") equals 36161 (in the 1900 convention).\n"
"@SEEALSO=DATE"
msgstr ""
"@FUNCTION=DATEVALUE\n"
"@SYNTAX=DATEVALUE(date_str)\n"
"@DESCRIPTION=DATEVALUE དེ་གིས་  ཚེས་གྲངས་ཀྱི་ཨང་རིམ་སླར་ལོག་འབདཝ་ཨིན།  @date_str འདི་  "
"ཚེས་གྲངས་ཡོད་མི་ཡིག་རྒྱུན་འདི་ཨིན།  གནས་གོང་འདི་ཚེས་གྲངས་གྲོས་འཛོམས་ལུ་རག་ལསཔ་ཨིན། ཨེམ་ཨེསི་ཨེགསི་"
"སེལ་ ༡༩༠༠་ གྲོས་འཛོམས་དེ་གིས་  སྤྱི་ཟླ་ ༡་པ་ ༡༩༠༠་ལས་ཅ་ལཱ་ ཚུ་གི་ཚེས་གྲངས་བཞགཔ་ཨིནམ་དང་  "
"༡༩༠༤་གྲོས་འཛོམས་འདི་གིས་  སྤྱི་ཟླ་ ༡་པ་ ༡༩༠༤་ལག་ལེན་འཐབ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DATEVALUE(\"1/1/1999\") མཉམ་པ་ཨིན་ 36161 (༡༩༠༠་གྲོས་འཛོམས་ནང་ལུ་).\n"
"@SEEALSO=DATE"

#: ../plugins/fn-date/functions.c:278
msgid ""
"@FUNCTION=DATEDIF\n"
"@SYNTAX=DATEDIF(date1,date2,interval)\n"
"@DESCRIPTION=DATEDIF returns the difference between two dates.  @interval is "
"one of six possible values:  \"y\", \"m\", \"d\", \"ym\", \"md\", and \"yd"
"\".\n"
"\n"
"The first three options will return the number of complete years, months, or "
"days, respectively, between the two dates specified.\n"
"\n"
"  \"ym\" will return the number of full months between the two dates, not "
"including the difference in years.\n"
"  \"md\" will return the number of full days between the two dates, not "
"including the difference in months.\n"
"  \"yd\" will return the number of full days between the two dates, not "
"including the difference in years.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"d\") equals 1191.\n"
"DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"y\") equals 3.\n"
"\n"
"@SEEALSO=DATE"
msgstr ""
"@FUNCTION=DATEDIF\n"
"@SYNTAX=DATEDIF(date1,date2,interval)\n"
"@DESCRIPTION=DATEDIF དེ་གིས་  ཚེས་གྲངས་གཉིས་ཀྱི་བར་ནའི་ཁྱད་པར་འདི་སླར་ལོག་འབདཝ་ཨིན།  "
"@interval འདི་སྲིད་པའི་གནས་གོང་དྲུག་ལས་གཅིག་ཨིན།:  \"y\", \"m\", \"d\", \"ym\", \"md"
"\", དང་ \"yd\".\n"
"\n"
"མགོའི་གདམ་ཁ་གསུམ་དེ་གིས་  གསལ་བཀོད་འབད་དེ་ཡོད་པའི་ཚེས་གྲངས་གཉིས་ཀྱི་བར་ན་  ལོ་གྲངས་ཆ་ཚང་  "
"ཟླཝ་ ཡང་ན་ཉིནམ་ཚུ་གི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"  \"ym\" དེ་གིས་  ཚེས་གྲངས་གཉིས་ཀྱི་བར་ན་  ཟླཝ་ཆ་ཚང་གི་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན་ དེ་འབདཝ་"
"ད་  ལོ་གྲངས་ནང་ཁྱད་པར་མ་བརྩི་བར་ཨིན།\n"
"  \"md\" དེ་གིས་  ཟླཝ་གི་ནང་ལུ་ཁྱད་པར་མ་བརྩི་བར་  ཚེས་གྲངས་གཉིས་ཀྱི་བར་ནའི་ཉིནམ་ཆ་ཚང་གི་གྲངས་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"  \"yd\" དེ་གིས་  ལོ་གྲངས་ནང་ཁྱད་པར་མ་བརྩི་བར་  ཚེས་གྲངས་གཉིས་ཀྱི་བར་ནའི་ཉིནམ་ཆ་ཚང་གི་གྲངས་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"d\") equals 1191.\n"
"DATEDIF(DATE(2000,4,30),DATE(2003,8,4),\"y\") equals 3.\n"
"\n"
"@SEEALSO=DATE"

#: ../plugins/fn-date/functions.c:430
msgid ""
"@FUNCTION=EDATE\n"
"@SYNTAX=EDATE(date,months)\n"
"@DESCRIPTION=EDATE returns the serial number of the date that is the "
"specified number of months before or after a given date.  @date is the "
"serial number of the initial date and @months is the number of months before "
"(negative number) or after (positive number) the initial date.\n"
"\n"
"* If @months is not an integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EDATE(DATE(2001,12,30),2) returns 'Feb 28, 2002'.\n"
"\n"
"@SEEALSO=DATE"
msgstr ""
"@FUNCTION=EDATE\n"
"@SYNTAX=EDATE(date,months)\n"
"@DESCRIPTION=EDATE དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་ཚེས་གྲངས་ཅིག་གི་ཤུལ་ལས་  ཡང་ན་ཧེ་མའི་ཟླཝ་གི་གནས་"
"བཀོད་འབད་དེ་ཡོད་པའི་ཨང་གྲངས་ཀྱི་ཚེས་གྲངས་དེ་གི་ཨང་རིམ་ཨང་འདི་སླར་ལོག་འབདཝ་ཨིན  @date འདི་  འགོ་"
"ཐོག་ཚེས་གྲངས་ཀྱི་ཨང་རིམ་ཨང་གྲངས་ཨིནམ་དང་ @months འདི་  འགོ་ཐོག་ཚེས་གྲངས་ཀྱི་ཧེ་མ་ (མེད་ཆའི་ཨང་"
"གྲངས་) ཡང་ན་ཤུལ་ལས་ (ཡོད་ཆའི་ཨང་གྲངས་) འདི་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @months འདི་ཧྲིལ་གྲངས་མེན་པ་ཅིན་, འདི་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"EDATE(DATE(2001,12,30),2)དེ་གིས་ 'Feb 28, 2002'སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=DATE"

#: ../plugins/fn-date/functions.c:485
msgid ""
"@FUNCTION=TODAY\n"
"@SYNTAX=TODAY()\n"
"@DESCRIPTION=TODAY returns the serial number for today (the number of days "
"elapsed since the 1st of January of 1900).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TODAY() returns 'Nov 6, 2001' on that particular day.\n"
" \n"
"@SEEALSO=NOW"
msgstr ""
"@FUNCTION=TODAY\n"
"@SYNTAX=TODAY()\n"
"@DESCRIPTION=TODAY དེ་གིས་  ད་རེས་ཀྱི་ཨང་རིམ་(༡༩༠༠་གི་སྤྱི་ཟླ་ ༡་པ་ལས་  སོང་བའི་ཉིནམ་གྲངས་)"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TODAY() དེ་གིས་   ཉིནམ་དེ་ཁར་'སྤྱི་ཟླ་བཅུ་གཅིག་པ་ ༦་ ༢༠༠༡'  སླར་ལོག་འབདཝ་ཨིན།\n"
" \n"
"@SEEALSO=NOW"

#: ../plugins/fn-date/functions.c:511
msgid ""
"@FUNCTION=NOW\n"
"@SYNTAX=NOW ()\n"
"@DESCRIPTION=NOW returns the serial number for the date and time at the time "
"it is evaluated.\n"
"\n"
"Serial Numbers in Gnumeric are represented as follows: The integral part is "
"the number of days since the 1st of January of 1900.  The decimal part "
"represent the fraction of the day and is mapped into hour, minutes and "
"seconds.\n"
"\n"
"For example: .0 represents the beginning of the day, and 0.5 represents "
"noon.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NOW().\n"
"\n"
"@SEEALSO=TODAY"
msgstr ""
"@FUNCTION=NOW\n"
"@SYNTAX=NOW ()\n"
"@DESCRIPTION=NOW དེ་གིས་  བརྟག་ཞིབ་འབད་དེ་ཡོད་པའི་སྐབས་ཀྱི་   ཚེས་གྲངས་དང་དུས་ཚོད་ཀྱི་དོན་ལུ་"
"ཨང་རིམ་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན། \n"
"\n"
"ཇི་ནུ་མི་རིག་ནང་གི་ཨང་རིམ་ཨང་གྲངས་ཚུ་འོག་ལུ་བཀོད་དེ་ཡོདཔ་བཟུབ་ཁྱད་ཚབ་འབ་དདེཡོད་: ཧྲིལ་གྲངས་ཆ་ཤས་"
"འདི་  ༡༩༠༠ ་གི་སྤྱི་ཟླ་དང་པའི་ ཚེས་༡་འདི་ཨིན།  བཅུག་ཚག་ཆ་ཤས་དེ་གིས་  ཉིནམ་གྱི་བགོ་གྲངས་ཁྱད་ཚབ་"
"འབད་ནི་དང་  འདི་ཆུ་ཚོད་  སྐར་མ་དང་སྐར་ཆ་ནང་བོག་བཤའ་བརྐྱབ་སྟེ་ཡོདཔ་ཨིན།\n"
"\n"
"Fདཔེར་ན་: .0 དེ་གིས་ཉིནམ་འགོ་བཙུགས་མིའི་ཁྱད་ཚབ་འབད་ནི་དང་0.5 གིས་ཉིན་དགུང་ཁྱད་ཚབ་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NOW().\n"
"\n"
"@SEEALSO=TODAY"

#: ../plugins/fn-date/functions.c:545
msgid ""
"@FUNCTION=TIME\n"
"@SYNTAX=TIME (hours,minutes,seconds)\n"
"@DESCRIPTION=TIME returns a fraction representing the time of day.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TIME(3, 5, 23) equals 3:05AM.\n"
"\n"
"@SEEALSO=HOUR"
msgstr ""
"@FUNCTION=TIME\n"
"@SYNTAX=TIME (ཆུ་ཚོད་,སྐར་མ་,སྐར་ཆ་)\n"
"@DESCRIPTION=TIME དེ་གིས་  ཉིནམ་གྱི་ཆུ་ཚོད་ཁྱད་ཚབ་འབད་དེ་བགོ་གྲངས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TIME(3, 5, 23) equals 3:05AM.\n"
"\n"
"@SEEALSO=HOUR"

#: ../plugins/fn-date/functions.c:577
msgid ""
"@FUNCTION=TIMEVALUE\n"
"@SYNTAX=TIMEVALUE (timetext)\n"
"@DESCRIPTION=TIMEVALUE returns a fraction representing the time of day, a "
"number between 0 and 1.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TIMEVALUE(\"3:05\") equals 0.128472.\n"
"TIMEVALUE(\"2:24:53 PM\") equals 0.600613.\n"
"\n"
"@SEEALSO=HOUR,MINUTE"
msgstr ""
"@FUNCTION=TIMEVALUE\n"
"@SYNTAX=TIMEVALUE (timetext)\n"
"@DESCRIPTION=TIMEVALUE དེ་གིས་  ཉིནམ་གྱི་ཆུ་ཚོད་ཁྱད་ཚབ་སྦེ་  བགོ་གྲངས་ཅིག་དང་  ༠་དང་ ༡་གི་"
"བར་ནའི་ཨང་གྲངས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་  ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TIMEVALUE(\"3:05\") མཉམ་པ 0.128472.\n"
"TIMEVALUE(\"2:24:53 PM\") མཉམ་པ་ 0.600613.\n"
"\n"
"@SEEALSO=HOUR,MINUTE"

#: ../plugins/fn-date/functions.c:605
msgid ""
"@FUNCTION=HOUR\n"
"@SYNTAX=HOUR (date)\n"
"@DESCRIPTION=HOUR converts a serial number to an hour.  The hour is returned "
"as an integer in the range 0 (12:00 A.M.) to 23 (11:00 P.M.).\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HOUR(0.128472) equals 3.\n"
"\n"
"@SEEALSO=MINUTE, NOW, TIME, SECOND"
msgstr ""
"@FUNCTION=HOUR\n"
"@SYNTAX=HOUR (date)\n"
"@DESCRIPTION=HOUR དེ་གིས་  ཨང་རིམ་ཨང་གྲངས་འདི་ཆུ་ཚོད་ནང་གཞི་བསྒྱུར་འབདཝ་ཨིན།   ཆུ་ཚོད་འདི་"
"ཧྲིལ་གྲངས་སྦེ་ (12:00 A.M.)ཁྱབ་ཚད་ཀླད་ ༠་ལས་ to ༢༣་ (11:00 P.M.)ནང་སླར་ལོག་འབད་དེ་ཡོདཔ་"
"ཨིན།\n"
"\n"
"* ཇི་ནུ་མི་རིག་དེ་གིས་  ཁྱོད་ཀྱི་དོན་ལུ་ཨང་རིམ་ཨང་གྲངས་གཞི་བསྒྱར་ལུ་  དུས་རྒྱུན་ཡིག་རྒྱུན་ལཱ་འགན་འགྲུབ་ཨིན་"
"ཟེར་དྲན་འཛིན་འབད་  དེ་འབད་བ་ཅིན་  ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་ཅིག་སྦེ་ཐོ་བཀོད་འབད།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"HOUR(0.128472) equals 3.\n"
"\n"
"@SEEALSO=MINUTE, NOW, TIME, SECOND"

#: ../plugins/fn-date/functions.c:642
msgid ""
"@FUNCTION=MINUTE\n"
"@SYNTAX=MINUTE (date)\n"
"@DESCRIPTION=MINUTE converts a serial number to a minute.  The minute is "
"returned as an integer in the range 0 to 59.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MINUTE(0.128472) equals 5.\n"
"\n"
"@SEEALSO=HOUR, NOW, TIME, SECOND"
msgstr ""
"@FUNCTION=MINUTE\n"
"@SYNTAX=MINUTE (date)\n"
"@DESCRIPTION=MINUTE དེ་གིས་  ཨང་རིམ་ཨང་གྲངས་འདི་སྐར་ཆའི་ནང་གཞི་བསྒྱུར་འབདཝ་ཨིན།  སྐར་ཆ་འདི་"
"ཧྲིལ་གྲངས་ཅིག་སྦེ་ ཁྱབ་ཚད་0 ལས་ 59ལུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཇི་ནུ་མི་རིག་དེ་གིས་ཁྱོད་ཀྱི་དོན་ལུ་  ཨང་རིམ་ཨང་གྲངས་གཞི་བསྒྱུར་ལུ་  དུས་རྒྱུན་ཡིག་རྒྱུན་ལཱ་འགན་འགྲུབ་ཨིན་"
"ཟེར་དྲན་འཛིན་འབད་  དེ་འབད་བ་ཅིན་ ཁྱོད་ཀྱིས་ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་སྦེ་ཐོ་བཀོད་འབད་ཚུགས།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"MINUTE(0.128472) equals 5.\n"
"\n"
"@SEEALSO=HOUR, NOW, TIME, SECOND"

#: ../plugins/fn-date/functions.c:679
msgid ""
"@FUNCTION=SECOND\n"
"@SYNTAX=SECOND (date)\n"
"@DESCRIPTION=SECOND converts a serial number to a second.  The second is "
"returned as an integer in the range 0 to 59.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SECOND(0.600613) equals 53.\n"
"\n"
"@SEEALSO=HOUR, MINUTE, NOW, TIME"
msgstr ""
"@FUNCTION=SECOND\n"
"@SYNTAX=SECOND (date)\n"
"@DESCRIPTION=SECOND དེ་གིས་  ཨང་རིམ་འདི་སྐར་ཆའི་ནང་གཞི་བསྒྱུར་འབདཝ་ཨིན།  སྐར་ཆ་འདི་ཧྲིལ་གྲངས་"
"ནང་  ཁྱབ་ཚད་ ༠་ལས་༥༩་ནང་ལུ་སླར་ལོག་འབད་དེཡོདཔ་ཨིན།\n"
"\n"
"* ཇི་ནུ་མི་རིཀ་དེ་གིས་  ཁྱོད་ཀྱི་དོན་ལུ་དུས་རྒྱུན་ཨང་རིམ་གྲངས་གཞི་བསྒྱུར་ལཱ་འགན་འགྲུབ་ཨིན་ཟེར་དྲན་འཛིན་"
"འབད་  དེ་འབད་བ་ཅིན་  ཁྱོད་ཀྱིས་ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་སྦེ་ཐོ་བཀོད་འབད་ཚུགས།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SECOND(0.600613) མཉམ་པ་53.\n"
"\n"
"@SEEALSO=HOUR, MINUTE, NOW, TIME"

#: ../plugins/fn-date/functions.c:716
msgid ""
"@FUNCTION=YEAR\n"
"@SYNTAX=YEAR (date)\n"
"@DESCRIPTION=YEAR converts a serial number to a year.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"YEAR(DATE(2003, 4, 30)) equals 2003.\n"
"\n"
"@SEEALSO=DAY, MONTH, TIME, NOW"
msgstr ""
"@FUNCTION=YEAR\n"
"@SYNTAX=YEAR (date)\n"
"@DESCRIPTION=YEAR དེ་གིས་ཨང་རིམ་ཨང་འདི་ ལོ་ཅིག་ནང་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"* ཇི་ནུ་མི་རིཀ་དེ་གིས་  ཁྱོད་ཀྱི་དོན་ལུ་  དུས་རྒྱུན་ཡིག་རྒྱུན་འདི་ཨང་རིམ་ཨང་ནང་ལུ་གཞི་བསྒྱུར་འབད་ནི་ལཱ་"
"འགན་འགྲུབ་ཨིན་  དེ་འབད་བ་ཅིན་  ཁྱོད་ཀྱིས་ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་སྦེ་ཐོ་བཀོད་འབད་ཚུགས།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"YEAR(DATE(2003, 4, 30)) མཉམ་པ་ཨིན་2003.\n"
"\n"
"@SEEALSO=DAY, MONTH, TIME, NOW"

#: ../plugins/fn-date/functions.c:750
msgid ""
"@FUNCTION=MONTH\n"
"@SYNTAX=MONTH (date)\n"
"@DESCRIPTION=MONTH converts a serial number to a month.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MONTH(DATE(2003, 4, 30)) equals 4.\n"
"\n"
"@SEEALSO=DAY, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=MONTH\n"
"@SYNTAX=MONTH (date)\n"
"@DESCRIPTION=MONTH དེ་གིས་  ཨང་རིམ་ཨང༌འདི་ཟླཝ་ནང་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"* ཇི་ནུ་མི་རིཀ་དེ་གིས་  ཁྱོད་ཀྱི་དོན་ལུ་དིས་རྒྱུན་ཡིག་རྒྱུན་འདི་  ཨང་རིམ་ཨང་ནང་ལུ་གཞི་བསྒྱུར་འབད་ནི་ལུ་ལཱ་"
"འགྲུབ་ཨིན་ཟེར་དྲན་འཛིན་འབད་  དེའབད་བ་ཅིན་  ཁྱོད་ཀྱིས་ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་ཅིག་སྦེ་ཐོ་བཀོད་འབད་"
"ཚུགས།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"MONTH(DATE(2003, 4, 30)) མཉམ་པ་4.\n"
"\n"
"@SEEALSO=DAY, TIME, NOW, YEAR"

#: ../plugins/fn-date/functions.c:784
msgid ""
"@FUNCTION=DAY\n"
"@SYNTAX=DAY (date)\n"
"@DESCRIPTION=DAY converts a serial number to a day of month.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DAY(\"10/24/1968\") equals 24.\n"
"\n"
"@SEEALSO=MONTH, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=DAY\n"
"@SYNTAX=DAY (date)\n"
"@DESCRIPTION=DAY དེ་གིས་  ཨང་རིམ་ཨང་འདི་ཟླཝ་གི་ཉིནམ་ལུ་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"* ཇི་ནུ་མི་རིཀ་དེ་གིས་  ཁྱོད་ཀྱི་དོན་ལུ་དུས་རྒྱུན་ཡིག་རྒྱུན་འདི་ཨང་རིམ་ཨང་ལུ་གཞི་བསྒྱུར་འབད་ནི་ལུ་ལཱ་འགན་"
"འགྲུབ་ཨིན་ཟེར་དྲན་འཛིན་འབད་  དེ་འབད་བ་ཅིན་ཁྱོད་ཀྱིས་ ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་སྦེ་ཐོ་བཀོད་འབད་ཚུགས།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DAY(\"10/24/1968\") མཉམ་པ24.\n"
"\n"
"@SEEALSO=MONTH, TIME, NOW, YEAR"

#: ../plugins/fn-date/functions.c:818
msgid ""
"@FUNCTION=WEEKDAY\n"
"@SYNTAX=WEEKDAY (date[, method])\n"
"@DESCRIPTION=WEEKDAY converts a serial number to a weekday.\n"
"\n"
"This function returns an integer indicating the day of week.\n"
"@METHOD indicates the numbering system.  It defaults to 1.\n"
"\n"
"  For @METHOD=1: Sunday is 1, Monday is 2, etc.\n"
"  For @METHOD=2: Monday is 1, Tuesday is 2, etc.\n"
"  For @METHOD=3: Monday is 0, Tuesday is 1, etc.\n"
"\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"WEEKDAY(\"10/24/1968\") equals 5 (Thursday).\n"
"\n"
"@SEEALSO=DAY, MONTH, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=WEEKDAY\n"
"@SYNTAX=WEEKDAY (date[, method])\n"
"@DESCRIPTION=WEEKDAY དེ་གིས་  ཨང་རིམ་ཨང་འདི་ བདུན་རིམ་ཅིག་ལུ་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"ལཱ་འགན་འདི་གིས་  བདུན་རིམ་གྱི་ཉིནམ་བརྡ་སྟོན་མི་ཧྲིལ་གྲངས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"@METHOD དེ་གིས་  ཨང་བཏགས་ནིའི་རིམ་ལུགས་འདི་བརྡ་སྟོནམ་ཨིན།  དེ་གིས་ ༡་ ལུ་སྔོན་སྒྲིག་འབདཝ་ཨིན།\n"
"\n"
"  For @METHOD=1: དོན་ལུ་ཟླ་བ་འདི་ ༡་, མིག་དམར་འདི་ ༢་, ལ་སོགས་པ་\n"
"  For @METHOD=2: དོན་ལུ་ མིག་དམར་འདི་ ༡་, ལྷག་པ་འདི་ ༢་, ལ་སོགས་པ་\n"
"  For @METHOD=3: དོན་ལུ་ མིག་དམར་འདི་ ༠་, ལྷག་པ་འདི་ ༡་, ལ་སོགས་པ་\n"
"\n"
"* ཇི་ནུ་མི་རིཀ་དེ་གིས་ཁྱོད་ཀྱི་དོན་ལུ་  དུས་རྒྱུན་ཡིག་རྒྱུན་འདི་ཨང་རིམ་ཨང་ལུ་གཞི་བསྒྱུར་འབད་ནི་ལུ་ལཱ་འགན་"
"འགྲུབ་ཨིན་ཟེར་དྲན་འཛིན་འབད་  དེ་འབད་བ་ཅིན་  ཁྱོད་ཀྱིས་ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་ཅིག་སྦེ་ཐོ་བཀོད་འབད་"
"ཚུགས།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"WEEKDAY(\"10/24/1968\") མཉམ་པ་5 (པ་སངས་).\n"
"\n"
"@SEEALSO=DAY, MONTH, TIME, NOW, YEAR"

#: ../plugins/fn-date/functions.c:872
msgid ""
"@FUNCTION=DAYS360 \n"
"@SYNTAX=DAYS360 (date1,date2,method)\n"
"@DESCRIPTION=DAYS360 returns the number of days from @date1 to @date2 "
"following a 360-day calendar in which all months are assumed to have 30 "
"days.\n"
"\n"
"* If @method is 1, the European method will be used.  In this case, if the "
"day of the month is 31 it will be considered as 30.\n"
"* If @method is 0 or omitted, the MS Excel (tm) US method will be used.  "
"This is a somewhat complicated industry standard method where the last day "
"of February is considered to be the 30th day of the month, but only for the "
"first date.\n"
"* If @method is 2, a saner version of the US method is used in which both "
"dates get the same February treatment.\n"
"* Note that Gnumeric will perform regular string to serial number conversion "
"for you, so you can enter a date as a string.\n"
"* This function is mostly Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DAYS360(DATE(2003, 2, 3), DATE(2007, 4, 2)) equals 1499.\n"
"\n"
"@SEEALSO=MONTH, TIME, NOW, YEAR"
msgstr ""
"@FUNCTION=DAYS360 \n"
"@SYNTAX=DAYS360 (ཚེས་གྲངས་1,ཚེས་གྲངས་2,ཐབས་ལམ་)\n"
"@DESCRIPTION=DAYS360 དེ་གིས་  @date1ལས་ @date2ལུ་ ཉིནམ་གྱི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན་  དེ་ཡང་  ཟླཝ་ཆ་མཉམ་ལུ་ཉིནམ་ ༣༠་ ཡོདཔ་སྦེ་བརྩི་མིའི་  ཉིནམ་༣༦༠་ཟླ་ཐོ་ཨིན།\n"
"\n"
"* If @method འདི་1ཨིན་པ་ཅིན་, ཡུ་རོ་པིན་ཐབས་ལམ་འདི་ལག་ལེན་འཐབ་ཨིན།  གནད་དོན་འདི་ནང་, ཟླཝ་"
"གི་ཉིནམ་འདི་ ༣༡་ ཨིན་པ་ཅིན་  འདི་༣༠་སྦེ་ཆ་འཆོག་འབདཝ་ཨིན།\n"
"* If @method འདི་ 0 ཡང་ན་སྐྱུར་བཞག་པ་ཅིན་, ཨེམ་ཨེསི་ཨེགསི་སེལ་ (tm) ཡུ་ཨེསི་ཐབས་ལམ་འདི་ལག་"
"ལེན་འཐབ་ཨིན  འདི་གོ་དཀའ་བའི་བཟོ་འཕྲུལ་ཁང་ཚད་ལྡན་ཐབས་ལམ་ཨིན་  དེ་ཡང་  སྤྱི་ཟླ་གཉིས་པའི་ཉིནམ་མཇུག་"
"འདི་  ཟླཝ་གི་ ཉིནམ་ ༣༠་སྦེ་བརྩི་ཡོདཔ་ཨིན་  དེ་འབདཝ་ད་ཚེས་གྲངས་དང་པའི་དོན་ལུ་རྐྱངམ་ཅིག་ཨིན།\n"
"* If @method འདི་2ཨིན་པ་ཅིན་,  ཚེས་གྲངས་གཉིས་ཆ་རང་  སྤྱི་ཟླ་གཉིས་པའི་ཐབས་ཤེས་ཐོབ་པའི་  ཡུ་ཨེསི་"
"ཐབས་ལམ་གྱི་སེ་ནར་ཐོན་རིམ་འདི་ལག་ལེན་འཐབ་ཨིན།\n"
"* ཇི་ནུ་མི་རིག་དེ་གིས་  ཁྱོད་ཀྱི་དོན་ལུ་དུས་རྒྱུན་ཡིག་རྒྱུན་འདི་ཨང་རིམ་ཨང་གྲངས་ལུ་གཞི་བསྒྱུར་འབདཝ་ཨིན་ཟེར་"
"དྲན་འཛིན་འབད་, དེ་འབད་བ་ཅིན་  ཁྱོད་ཀྱིས་ཚེས་གྲངས་འདི་ཡིག་རྒྱུན་སྦེ་ཐོ་བཀོད་འབད།\n"
"* ལས་འགན་འདི་མང་ཆེ་ཤོས་རང་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DAYS360(DATE(2003, 2, 3), DATE(2007, 4, 2)) equals 1499.\n"
"\n"
"@SEEALSO=MONTH, TIME, NOW, YEAR"

#: ../plugins/fn-date/functions.c:929
msgid ""
"@FUNCTION=EOMONTH\n"
"@SYNTAX=EOMONTH (start_date,months)\n"
"@DESCRIPTION=EOMONTH returns the last day of the month which is @months from "
"the @start_date.\n"
"\n"
"* EOMONTH returns #NUM! if @start_date or @months are invalid.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then EOMONTH(A1,0)=12/31/00, EOMONTH(A1,5)=5/31/01, "
"and EOMONTH(A1,2)=2/28/01\n"
"\n"
"@SEEALSO=MONTH"
msgstr ""
"@FUNCTION=EOMONTH\n"
"@SYNTAX=EOMONTH (start_date,months)\n"
"@DESCRIPTION=EOMONTH དེ་གིས་  ཟླཝ་དེ་གི་མཇུག་གི་ཉིནམ་@months  འདི་  @start_dateལས་ཨིན་"
"མི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* EOMONTH དེ་གིས་ #NUM!སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ @start_date ཡང་ན་ @months ཚུ་"
"ནུས་ཅན་མེད་པ་ཅིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then EOMONTH(A1,0)=12/31/00, EOMONTH(A1,5)=5/31/01, "
"and EOMONTH(A1,2)=2/28/01\n"
"\n"
"@SEEALSO=MONTH"

#: ../plugins/fn-date/functions.c:983
msgid ""
"@FUNCTION=WORKDAY\n"
"@SYNTAX=WORKDAY (start_date,days[,holidays])\n"
"@DESCRIPTION=WORKDAY returns the date which is @days working days from the "
"@start_date.  Weekends and holidays optionally supplied in @holidays are "
"respected.\n"
"\n"
"* WORKDAY returns #NUM! if @start_date or @days are invalid.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DAY(WORKDAY(DATE(2001,1,5),30)) equals 16 and\n"
"MONTH(WORKDAY(DATE(2001,1,5),30)) equals 2.\n"
"\n"
"@SEEALSO=NETWORKDAYS"
msgstr ""
"@FUNCTION=WORKDAY\n"
"@SYNTAX=WORKDAY (start_date,days[,holidays])\n"
"@DESCRIPTION=WORKDAY དེ་གིས་  ཚེས་གྲངས་ @days ལཱ་འབད་བའི་ཉིནམ་ @start_dateལས་ཨིན་མི་"
"སླར་ལོག་འབདཝ་ཨིན།  གཟའ་ཉིནམ་དང་ཟླ་བ་དང་ངལ་གསོ་ཚུ་གདམ་ཁ་ཅན་སྦེ་ @holidays ཚུ་ནང་བཀྲམ་སྤེལ་"
"འབད་དེཡོདཔ་ཨིན།\n"
"\n"
"* WORKDAY དེ་གིས་ #NUM!སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ @start_date ཡང་ན་ @days ཚུ་ནུས་"
"ཅན་མེད་པ་ཅིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DAY(WORKDAY(DATE(2001,1,5),30)) equals 16 and\n"
"MONTH(WORKDAY(DATE(2001,1,5),30)) equals 2.\n"
"\n"
"@SEEALSO=NETWORKDAYS"

#: ../plugins/fn-date/functions.c:1156
msgid ""
"@FUNCTION=NETWORKDAYS\n"
"@SYNTAX=NETWORKDAYS (start_date,end_date[,holidays])\n"
"@DESCRIPTION=NETWORKDAYS returns the number of non-weekend non-holidays "
"between @start_date and @end_date including these dates. Holidays are "
"optionally supplied in @holidays.\n"
"\n"
"* NETWORKDAYS returns #NUM! if @start_date or @end_date are invalid.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NETWORKDAYS(DATE(2001,1,2),DATE(2001,2,15)) equals 33.\n"
"\n"
"@SEEALSO=WORKDAY"
msgstr ""
"@FUNCTION=NETWORKDAYS\n"
"@SYNTAX=NETWORKDAYS (start_date,end_date[,holidays])\n"
"@DESCRIPTION=NETWORKDAYS དེ་གིས་  ཚེས་གྲངས་ཚུ་རྩིས་ཏེ་ @start_date དང་ @end_date བར་"
"ན་གཟའ་ཟླ་བ་དང་ཉི་མ་མེན་མི་དང་  ངལ་གསོ་མེན་མི་གི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།  ངལ་གསོ་ཚུ་"
"གདམ་ཁ་ཅན་སྦེ་ @holidaysཚུ་ནང་བཀྲམ་སྤེལ་འབད་དེ་ཡོདཔ་ཨིན།\n"
"\n"
"* NETWORKDAYS དེ་གིས་ #NUM! སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་@start_date ཡང་ན་ "
"@end_date ཚུ་ནུས་ཅན་མེད་པ་ཅིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NETWORKDAYS(DATE(2001,1,2),DATE(2001,2,15)) equals 33.\n"
"\n"
"@SEEALSO=WORKDAY"

#: ../plugins/fn-date/functions.c:1279
msgid ""
"@FUNCTION=ISOWEEKNUM\n"
"@SYNTAX=ISOWEEKNUM (date)\n"
"@DESCRIPTION=ISOWEEKNUM returns the ISO 8601 week number of @date.\n"
"\n"
"An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
"including days from two different years is assigned to the year which "
"includes the most days. This means that Dec 31 could be in week 1 of the "
"following year, and Jan 1 could be in week 52 or 53 of the previous year. "
"ISOWEEKNUM returns the week number.\n"
"\n"
"* ISOWEEKNUM returns #NUM! if date is invalid.\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then ISOWEEKNUM(A1)=51\n"
"@SEEALSO=WEEKNUM, ISOYEAR"
msgstr ""
"@FUNCTION=ISOWEEKNUM\n"
"@SYNTAX=ISOWEEKNUM (date)\n"
"@DESCRIPTION=ISOWEEKNUM དེ་གིས་ ISO 8601 བདུན་རིམ་ཨང་གྲངས་  དེ་ཡང་ @dateའདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"ISO 8601 བདུན་རིམ་འདི་མིག་དམར་གུ་འགོ་བཙུགསཔ་ཨིན།  བདུན་རིམ་ཚུ་1 ལས་ཨང་བཏགས་ཏེཡོདཔ་ཨིན།  ལོ་"
"མ་འདྲཝ་གཉིས་ལས་ཉིནམ་ཚུ་བརྩི་སྟེ་ཡོད་མི་འདི  ཉིནམ་མང་ཤོས་རང་གྲངས་སུ་བརྩི་མིའི་ལོ་ལུ་འགན་སྤྲོད་འབད་དེ་"
"ཡོདཔ་ཨིན། དོན་ངོ་མ་འདི་  སྤྱི་ཟླ་བཅུ་གཉིས་པའི་ཚེས་ ༣༡་ འདི་ ལོའི་བདུན་རིམ་གཅིག་ནང་ཨིནམ་འོང་ཟེར་མི་"
"དང་སྤི་ཟླ་དང་པའི་ཚེས་ ༡་ འདི་ཧེ་མའི་ལོ་གི་  བདུན་རིམ་ ༥༢་ཡང་ན་༥༣་ཨིན། ISOWEEKNUM དེ་གིས་  "
"བདུན་རིམ་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ISOWEEKNUM དེ་གིས་#NUM!སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན།\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then ISOWEEKNUM(A1)=51\n"
"@SEEALSO=WEEKNUM, ISOYEAR"

#: ../plugins/fn-date/functions.c:1316
msgid ""
"@FUNCTION=ISOYEAR\n"
"@SYNTAX=ISOYEAR (date)\n"
"@DESCRIPTION=ISOYEAR returns the year of the ISO 8601 week number of @date.\n"
"\n"
"An ISO 8601 week starts on Monday. Weeks are numbered from 1. A week "
"including days from two different years is assigned to the year which "
"includes the most days. This means that Dec 31 could be in week 1 of the "
"following year, and Jan 1 could be in week 52 or 53 of the previous year. "
"ISOYEAR returns the year the week is assigned to.\n"
"\n"
"* ISOYEAR returns #NUM! if date is invalid.\n"
"@EXAMPLES=\n"
"If A1 contains 12/31/2001 then ISOYEAR(A1)=2002\n"
"@SEEALSO=ISOWEEKNUM"
msgstr ""
"@FUNCTION=ISOYEAR\n"
"@SYNTAX=ISOYEAR (date)\n"
"@DESCRIPTION=ISOYEAR དེ་གིས་ ISO 8601 གི་ལོ་འདི་ @dateགི་བདུན་རིམ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"ISO 8601 བདུན་རིམ་འདི་  མིག་དམར་ལུ་འགོ་བཙུགསཔ་ཨིན།  བདུན་རིམ་ཚུ་ ༡་ ལས་ཨང་རིམ་བཏངས་ཡོདཔ་"
"ཨིན།  ལོ་སོ་སོ་གཉིས་ལས་ཉིནམ་བརྩི་སྟེ་བདུན་རིམ་འདི་  ཉིནམ་ལེ་ཤ་བརྩི་མི་ལོ་དེ་ལུ་འགན་སྤྲོད་འབདཝ་ཨིན།  སྤྱི་"
"ཟླ་བཅུ་གཉིས་པའི་ཚེས་ ༣༡་ འདི་  ལོ་དེའི་བདུན་རིམ་ ༡ ཨིནམ་དང་, སྤྱི་ཟླ་དང་པའི་ཚེས་ ༡་འདི་ ལོ་ཧེ་མའི་"
"བདུ་རིམ་ ༥༢་ ཡང་ན་ ༥༣་ཨིན།  ISOYEAR དེ་གིས་  བདུན་རིམ་འགན་སྤྲོད་འབད་ཡོད་པའི་ལོ་འི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ISOYEAR དེ་གིས་ #NUM!སླར་ལོག་འབདཝ་ཨིན་ ག་དེམ་ཅིག་སྦེ་ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན།\n"
"@EXAMPLES=\n"
"If A1 དེ་གིས་12/31/2001 ཡོད་པ་ཅིན་  དེ་ལས ISOYEAR(A1)=2002\n"
"@SEEALSO=ISOWEEKNUM"

#: ../plugins/fn-date/functions.c:1366
msgid ""
"@FUNCTION=WEEKNUM\n"
"@SYNTAX=WEEKNUM (date[,method])\n"
"@DESCRIPTION=WEEKNUM returns the week number of @date according to the given "
"@method.\n"
"\n"
"@method defaults to 1.\n"
"\n"
"  For @method=1, week starts on Sunday, and days before first Sunday are in "
"week 0.\n"
"  For @method=2, week starts on Monday, and days before first Monday are in "
"week 0.\n"
"  For @method=150, the ISO 8601 week number is returned.\n"
"\n"
"* WEEKNUM returns #NUM! if @date or @method is invalid.\n"
"* This function is Excel compatible, except that Excel does not support ISO "
"8601 week numbers.\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then WEEKNUM(A1,2)=51\n"
"@SEEALSO=ISOWEEKNUM"
msgstr ""
"@FUNCTION=WEEKNUM\n"
"@SYNTAX=WEEKNUM (date[,method])\n"
"@DESCRIPTION=WEEKNUM དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་@method དང་འཁྲིལ་ཏེ་ @date གི་བདུན་རིམ་ཨང་"
"གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན། \n"
"\n"
"@method dདེ་གིས་ ༡་ལུ་སྔོན་སྒྲིག་འབདཝ་ཨིན།\n"
"\n"
"  For @method=1གི་དོན་ལུ་, བདུན་རིམ་གཟའ་ཟླ་བ་ལས་འགོ་བཙུགསཔ་ཨིནམ་དང་, གཟའ་ཟླ་བ་གི་ཧེ་མའི་"
"ཉིནམ་ཚུ་བདུན་རིམ་ ༠་ ནང་ཨིན།\n"
"  For @method=2དོན་ལུ་, བདུན་རིམ་མིག་དམར་ལུ་འགོ་བཙུགསཔ་ཨིནམ་དང་, མིག་དམར་དང་པའི་ཧེ་མ་གི་"
"ཉིནམ་ཚུ་ བདུན་རིམ་ ༠་ཨིན།\n"
"  For @method=150དོན་ལུ་,  ISO 8601 བདུན་རིམ་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* WEEKNUM དེ་གིས་ #NUM! སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ @date ཡང་ན་ @method འདི་ནུས་"
"ཅན་མེད་པ་ཅིན་\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན་, ཨེགསི་སེལ་དེ་གིས་ ISO 8601 བདུན་རིམ་ཨང་གྲངས་ཚུ་རྒྱབ་སྐྱོར་མ་"
"འབདཝ་རྐྱམ་ཅིག་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"If A1 contains 12/21/00 then WEEKNUM(A1,2)=51\n"
"@SEEALSO=ISOWEEKNUM"

#: ../plugins/fn-date/functions.c:1414
msgid ""
"@FUNCTION=YEARFRAC\n"
"@SYNTAX=YEARFRAC (start_date, end_date [,basis])\n"
"@DESCRIPTION=YEARFRAC returns the number of full days between @start_date "
"and @end_date according to the @basis.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DATEDIF"
msgstr ""
"@FUNCTION=YEARFRAC\n"
"@SYNTAX=YEARFRAC (start_date, end_date [,basis])\n"
"@DESCRIPTION=YEARFRAC དེ་གིས་  @start_date དང་ @end_date གི་བར་ན་ཉིནམ་ཆ་ཚང་གི་ཨང་"
"གྲངས་བྱིནམ་ཨིན་@basisདང་འཁྲིལ་བ་ཅིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DATEDIF"

#: ../plugins/fn-eng/functions.c:205
msgid ""
"@FUNCTION=BASE\n"
"@SYNTAX=BASE(number,base[,length])\n"
"@DESCRIPTION=BASE function converts a number to a string representing that "
"number in base @base.\n"
"\n"
"* @base must be an integer between 2 and 36.\n"
"* This function is OpenOffice.Org compatible.\n"
"* Optional argument @length specifies the minimum result length.  Leading  "
"zeroes will be added to reach this length.\n"
"\n"
"@EXAMPLES=\n"
"BASE(255,16,4) equals \"00FF\".\n"
"\n"
"@SEEALSO=DECIMAL"
msgstr ""
"@FUNCTION=BASE\n"
"@SYNTAX=BASE(number,base[,length])\n"
"@DESCRIPTION=BASE ལཱ་འགན་དེ་གིས་ཡིག་རྒྱུན་ལུ་ཨང་གྲངས་ཅིག་གཞི་བསྒྱུར་འབདཝ་ཨིན་  དེ་ཡང་  གཞི་"
"རྟེན་ @base ནང་ཁྱད་ཚབ་འབ་དམི།\n"
"\n"
"* @base འདི་  ༢་ དང་ ༣༦་ གི་བར་ནའི་ཧྲིལ་གྲངས་ཅིག་ཨིན།\n"
"* ལཱ་འགན་འདི་  OpenOffice.Org མཐུན་འགྱུར་ཅན་ཨིན།\n"
"* གདམ་ཁ་ཅན་གྱི་སྒྲུབ་རྟགས་འདི་@length དེ་གིས་  འགྲུབ་འབྲས་རིང་ཚད་ཉུང་ཤོས་འདི་གསལ་བཀོད་འབདཝ་"
"ཨིན།  སྔོན་བསྐྱོད་འབད་མི་ཀླད་ཀོར་འདི་  རིང་ཚད་འདི་ལུ་ལྷོད་ནི་ལུ་ཁ་སྐོང་བརྐྱབ་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BASE(255,16,4) མཉམ་པ་ \"00FF\".\n"
"\n"
"@SEEALSO=DECIMAL"

#: ../plugins/fn-eng/functions.c:243
msgid ""
"@FUNCTION=BIN2DEC\n"
"@SYNTAX=BIN2DEC(x)\n"
"@DESCRIPTION=BIN2DEC function converts a binary number in string or number "
"to its decimal equivalent.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BIN2DEC(101) equals 5.\n"
"\n"
"@SEEALSO=DEC2BIN, BIN2OCT, BIN2HEX"
msgstr ""
"@FUNCTION=BIN2DEC\n"
"@SYNTAX=BIN2DEC(x)\n"
"@DESCRIPTION=BIN2DEC ལཱ འགན་དེ་གིས་  ཡིག་རྒྱུན་ནང་གི་བཟུང་ལྡན་ཨང་ཅིག་གཞི་བསྒྱུར་འབདཝ་ཨིན་ ཡང་"
"ན་ དེའི་བཅུ་ཚག་འདྲ་མཉམ་ལུ། \n"
"\n"
"* ལཱ་འགན་འདི་ ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BIN2DEC(101) equals 5.\n"
"\n"
"@SEEALSO=DEC2BIN, BIN2OCT, BIN2HEX"

#: ../plugins/fn-eng/functions.c:272
msgid ""
"@FUNCTION=BIN2OCT\n"
"@SYNTAX=BIN2OCT(number[,places])\n"
"@DESCRIPTION=BIN2OCT function converts a binary number to an octal number. "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BIN2OCT(110111) equals 67.\n"
"\n"
"@SEEALSO=OCT2BIN, BIN2DEC, BIN2HEX"
msgstr ""
"@FUNCTION=BIN2OCT\n"
"@SYNTAX=BIN2OCT(number[,places])\n"
"@DESCRIPTION=BIN2OCT ལཱ་འགན་དེ་གིས་  བཟུང་ལྡན་ཨང་འདི་  ཨོཀ་ཊཱལ་ཨང་གྲངས་ཅིག་ལུ་གཞི་བསྒྱུར་"
"འབདཝ་ཨིན། @places འདི་  གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, བར་སྟོང་གི་ཨང་ལུ་  ཀླད་ཀོར་གདན་ལུ་གསལ་བཀོད་"
"འབད་དེ་ཡོད།\n"
"\n"
"* @places འདི་  གནམ་མེད་ས་མེད་ཆུང་ཀུ་  ཡང་ན་ མེད་ཆ་ཨིན་པ་ཅིན་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BIN2OCT(110111) equals 67.\n"
"\n"
"@SEEALSO=OCT2BIN, BIN2DEC, BIN2HEX"

#: ../plugins/fn-eng/functions.c:304
msgid ""
"@FUNCTION=BIN2HEX\n"
"@SYNTAX=BIN2HEX(number[,places])\n"
"@DESCRIPTION=BIN2HEX function converts a binary number to a hexadecimal "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BIN2HEX(100111) equals 27.\n"
"\n"
"@SEEALSO=HEX2BIN, BIN2OCT, BIN2DEC"
msgstr ""
"@FUNCTION=BIN2HEX\n"
"@SYNTAX=BIN2HEX(number[,places])\n"
"@DESCRIPTION=BIN2HEX ལཱ་འགན་དེ་གིས་ ཟུང་ལྡན་ཨང་གྲངས་འདི་ཧེག་ཟ་ཌེ་སི་མཱལ་ཨང་ཅིག་ལུ་གཞི་བསྒྱུར་"
"འབདཝ་ཨིན། @places འདི་གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, བར་སྟོང་གི་ཨང་གྲངས་ལུ་ ཀླད་ཀོར་པེཌི་ལུ་གསལ་བཀོད་"
"འབད་ཐོག་ལས།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@places འདི་ གནམ་མེད་ས་མེད་ཆུང་ཀུ་ཡང་ན་ མེད་ཆ་ཨིན་པ་ཅིན་ #NUM! འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BIN2HEX(100111) equals 27.\n"
"\n"
"@SEEALSO=HEX2BIN, BIN2OCT, BIN2DEC"

#: ../plugins/fn-eng/functions.c:336
msgid ""
"@FUNCTION=DEC2BIN\n"
"@SYNTAX=DEC2BIN(number[,places])\n"
"@DESCRIPTION=DEC2BIN function converts a decimal number to a binary number. "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEC2BIN(42) equals 101010.\n"
"\n"
"@SEEALSO=BIN2DEC, DEC2OCT, DEC2HEX"
msgstr ""
"@FUNCTION=DEC2BIN\n"
"@SYNTAX=DEC2BIN(number[,places])\n"
"@DESCRIPTION=DEC2BIN ལཱ་འགན་འདི་གིས་   བཅུ་ཚག་ཨང་གྲངས་འདི་ཟུང་ལྡན་ཨང་ལུ་ གཞི་བསྒྱུར་འབདཝ་"
"ཨིན།  @places འདི་གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, དེ་ཡང་བར་སྟོང་ཨང་གྲངས་ལུ་ཀླད་ཀོར་པེཌི་ལུ་གསལ་བཀོད་"
"འབད་ཐོག་ལས།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@places འདི་གནམ་མེད་ས་མེད་ཆུག་ཀུ་ཡང་ན་མེད་ཆ་ཨིན་པ་ཅིན་ #NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DEC2BIN(42) equals 101010.\n"
"\n"
"@SEEALSO=BIN2DEC, DEC2OCT, DEC2HEX"

#: ../plugins/fn-eng/functions.c:368
msgid ""
"@FUNCTION=DEC2OCT\n"
"@SYNTAX=DEC2OCT(number[,places])\n"
"@DESCRIPTION=DEC2OCT function converts a decimal number to an octal number. "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEC2OCT(42) equals 52.\n"
"\n"
"@SEEALSO=OCT2DEC, DEC2BIN, DEC2HEX"
msgstr ""
"@FUNCTION=DEC2OCT\n"
"@SYNTAX=DEC2OCT(number[,places])\n"
"@DESCRIPTION=DEC2OCT ལཱ་འགན་འདི་གིས་  བཅུག་ཚག་ཨང་གྲངས་འདི་ཨོཀ་ཊཱལ་ཨང་གྲངས་ལུ་གཞི་བསྒྱུར་"
"འབདཝ་ཨིན། @places འདི་གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, དེ་ཡང་  ཨང་གྲངས་བར་སྟོང་ལུ་ཀླད་ཀོར་པེཌི་ལུ་གསལ་"
"བཀོད་འབད་ཐོག་ལས།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @places འདི་གནམ་མེད་ས་མེད་ཆུང་ཀུ་ ཡང་ན་མེད་ཆ་ཨིན་པ་ཅིན་ #NUM! འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DEC2OCT(42) equals 52.\n"
"\n"
"@SEEALSO=OCT2DEC, DEC2BIN, DEC2HEX"

#: ../plugins/fn-eng/functions.c:400
msgid ""
"@FUNCTION=DEC2HEX\n"
"@SYNTAX=DEC2HEX(number[,places])\n"
"@DESCRIPTION=DEC2HEX function converts a decimal number to a hexadecimal "
"number. @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEC2HEX(42) equals 2A.\n"
"\n"
"@SEEALSO=HEX2DEC, DEC2BIN, DEC2OCT"
msgstr ""
"@FUNCTION=DEC2HEX\n"
"@SYNTAX=DEC2HEX(number[,places])\n"
"@DESCRIPTION=DEC2HEX ལཱ་འགན་དེ་གིས་  བཅུ་ཚག་ཨང་གྲངས་འདི་ཧེག་ཟ་ཌེ་སི་མཱལ་ཨང་གྲངས་ཅིག་ལུ་གཞི་"
"བསྒྱུར་འབདཝ་ཨིན། @places འདི་གདམ་ཁ་ཅན་གྱི་ས་སགོ་ཨིན་, དེ་ཡང་  ཨང་གྲངས་དེ་གི་བར་སྟོང་ལུ་ཀླད་ཀོར་"
"པེཌི་ལུ་གསལ་བཀོད་འབད་ཐོག་ལུ།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @places འདི་གནམ་མེད་ས་མེད་ཆུང་ཀུ་ཡང་ན་མེད་ཆ་ #NUM! ཨིན་པ་ཅིན་  འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DEC2HEX(42) equals 2A.\n"
"\n"
"@SEEALSO=HEX2DEC, DEC2BIN, DEC2OCT"

#: ../plugins/fn-eng/functions.c:432
msgid ""
"@FUNCTION=DECIMAL\n"
"@SYNTAX=DECIMAL(text,base)\n"
"@DESCRIPTION=DECIMAL function converts a number in base @base to decimal.\n"
"\n"
"* @base must be an integer between 2 and 36.\n"
"* This function is OpenOffice.Org compatible.\n"
"\n"
"@EXAMPLES=\n"
"DECIMAL(\"A1\",16) equals 161.\n"
"\n"
"@SEEALSO=BASE"
msgstr ""
"@FUNCTION=DECIMAL\n"
"@SYNTAX=DECIMAL(text,base)\n"
"@DESCRIPTION=DECIMAL ལཱ་འགན་དེ་གིས་  ཨང་གྲངས་འདི་གཞི་རྟེན་ @base འདི་བཅུག་ཚག་ལུ་གཞི་བསྒྱུར་"
"འབདཝ་ཨིན།\n"
"\n"
"* @base འདི་   ༢་དང་༣༦་གི་བར་ན་ཧྲིལ་གྲངས་ཅིག་སྦེ་དགོཔ་ཨིན།\n"
"* ལཱ་འགན་འདི་ OpenOffice.Orgམཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DECIMAL(\"A1\",16) equals 161.\n"
"\n"
"@SEEALSO=BASE"

#: ../plugins/fn-eng/functions.c:464
msgid ""
"@FUNCTION=OCT2DEC\n"
"@SYNTAX=OCT2DEC(x)\n"
"@DESCRIPTION=OCT2DEC function converts an octal number in a string or number "
"to its decimal equivalent.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OCT2DEC(\"124\") equals 84.\n"
"\n"
"@SEEALSO=DEC2OCT, OCT2BIN, OCT2HEX"
msgstr ""
"@FUNCTION=OCT2DEC\n"
"@SYNTAX=OCT2DEC(x)\n"
"@DESCRIPTION=OCT2DEC ལཱ་འགན་དེ་གིས་  ཨོཀ་ཊཱལ་ཨང་གྲངས་འདི་ཡིག་རྒྱུན་ཅིག་ནང་གཞི་བསྒྱུར་འབདཝ་"
"ཨིན་  ཡང་ན་  དེའི་བཅུག་ཚག་འདྲ་མཉམ་ལུ།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"OCT2DEC(\"124\") equals 84.\n"
"\n"
"@SEEALSO=DEC2OCT, OCT2BIN, OCT2HEX"

#: ../plugins/fn-eng/functions.c:493
msgid ""
"@FUNCTION=OCT2BIN\n"
"@SYNTAX=OCT2BIN(number[,places])\n"
"@DESCRIPTION=OCT2BIN function converts an octal number to a binary number.  "
"@places is an optional field, specifying to zero pad to that number of "
"spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OCT2BIN(\"213\") equals 10001011.\n"
"\n"
"@SEEALSO=BIN2OCT, OCT2DEC, OCT2HEX"
msgstr ""
"@FUNCTION=OCT2BIN\n"
"@SYNTAX=OCT2BIN(number[,places])\n"
"@DESCRIPTION=OCT2BIN ལཱ་འགན་འདི་  ཨོཀ་ཊཱལ་ཨང་གྲངས་འདི་ཟུང་ལྡན་ཨང་གྲངས་ལུ་གཞི་བསྒྱུར་འབདཝ་"
"ཨིན།  @places འདི་གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, དེ་ཡང་  ཨང་གྲངས་དེ་གི་བར་སྟོང་ལུ་ཀླད་ཀོར་པེཌི་གསལ་"
"བཀོད་འབད་ཐོག་ལས།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @places འདི་གནམ་མེད་ས་མེད་ཆུང་ཀུ་ཡང་ན་མེད་ཆ་#NUM! ཨིན་པ་ཅིན་ འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"OCT2BIN(\"213\") equals 10001011.\n"
"\n"
"@SEEALSO=BIN2OCT, OCT2DEC, OCT2HEX"

#: ../plugins/fn-eng/functions.c:525
msgid ""
"@FUNCTION=OCT2HEX\n"
"@SYNTAX=OCT2HEX(number[,places])\n"
"@DESCRIPTION=OCT2HEX function converts an octal number to a hexadecimal "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OCT2HEX(132) equals 5A.\n"
"\n"
"@SEEALSO=HEX2OCT, OCT2BIN, OCT2DEC"
msgstr ""
"@FUNCTION=OCT2HEX\n"
"@SYNTAX=OCT2HEX(number[,places])\n"
"@DESCRIPTION=OCT2HEX ལཱ་འགན་འདི་གིས་  ཨོཀ་ཊཱལ་ཨང་གྲངས་འདི་ཧེག་ཟ་ཌེ་སི་མཱལ་ཨང་གྲངས་ལུ་གཞི་"
"བསྒྱུར་འབདཝ་ཨིན།  @places འདི་  གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, དེ་ཡང་  ཨང་གྲངས་འདི་གི་བར་སྟོང་འདི་"
"ཀླད་ཀོར་ལུ་གསལ་བཀོད་འབད་ཐོག་ལུ།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @places འདི་གནམ་མེད་ས་མེད་ཆུང་ཀུ་ཡང་ན་མེད་ཆ་ #NUM! ཨིན་པ་ཅིན་  འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"OCT2HEX(132) equals 5A.\n"
"\n"
"@SEEALSO=HEX2OCT, OCT2BIN, OCT2DEC"

#: ../plugins/fn-eng/functions.c:557
msgid ""
"@FUNCTION=HEX2BIN\n"
"@SYNTAX=HEX2BIN(number[,places])\n"
"@DESCRIPTION=HEX2BIN function converts a hexadecimal number to a binary "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HEX2BIN(\"2A\") equals 101010.\n"
"\n"
"@SEEALSO=BIN2HEX, HEX2OCT, HEX2DEC"
msgstr ""
"@FUNCTION=HEX2BIN\n"
"@SYNTAX=HEX2BIN(number[,places])\n"
"@DESCRIPTION=HEX2BIN ལཱ་འགན་དེ་གིས་  ཧེག་ཟ་ཌེ་སི་མཱལ་ཨང་གྲངས་འདི་  ཟུང་ལྡན་ཨང་གྲངས་ཅིག་ལུ་"
"གཞི་བསྒྱུར་འབདཝ་ཨིན།@places འདི་གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, དེ་ཡང་  ཨང་གྲངས་དེ་གི་བར་སྟོང་འདི་ཀླད་"
"ཀོར་པེཌི་ལུ་གསལ་བཀོད་འབད་ཐོག་ལས།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @places འདི་གནམ་མེད་ས་མེད་ཆུང་ཀུ་ཡང་ན་མེད་ཆ་ #NUM! ཨིན་པ་ཅིན་འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"HEX2BIN(\"2A\") equals 101010.\n"
"\n"
"@SEEALSO=BIN2HEX, HEX2OCT, HEX2DEC"

#: ../plugins/fn-eng/functions.c:589
msgid ""
"@FUNCTION=HEX2OCT\n"
"@SYNTAX=HEX2OCT(number[,places])\n"
"@DESCRIPTION=HEX2OCT function converts a hexadecimal number to an octal "
"number.  @places is an optional field, specifying to zero pad to that number "
"of spaces.\n"
"\n"
"* If @places is too small or negative #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HEX2OCT(\"2A\") equals 52.\n"
"\n"
"@SEEALSO=OCT2HEX, HEX2BIN, HEX2DEC"
msgstr ""
"@FUNCTION=HEX2OCT\n"
"@SYNTAX=HEX2OCT(number[,places])\n"
"@DESCRIPTION=HEX2OCT ལཱ་འགན་འདི་གིས་  ཧེག་ཟ་ཌེ་སི་མཱལ་ཨང་གྲངས་འདི་ཨོཀ་ཊཱལ་ཨང་གྲངས་ཅིག་ལུ་"
"གཞི་བསྒྱུར་འབདཝ་ཨིན།  @places འདི་གདམ་ཁ་ཅན་གྱི་ས་སྒོ་ཨིན་, དེ་ཡང་  ཨང་གྲངས་དེ་གི་བར་སྟོང་འདི་"
"ཀླད་ཀོར་པེཌི་ལུ་གསལ་བཀོད་འབད་ཐོག་ལས།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@places འདི་གནམ་མེད་ས་མེད་ཆུང་ཀུ་  ཡང་ན་མེད་ཆ་#NUM! ཨིན་པ་ཅིན་འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"HEX2OCT(\"2A\") equals 52.\n"
"\n"
"@SEEALSO=OCT2HEX, HEX2BIN, HEX2DEC"

#: ../plugins/fn-eng/functions.c:621
msgid ""
"@FUNCTION=HEX2DEC\n"
"@SYNTAX=HEX2DEC(x)\n"
"@DESCRIPTION=HEX2DEC function converts a hexadecimal number to its decimal "
"equivalent.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HEX2DEC(\"2A\") equals 42.\n"
"\n"
"@SEEALSO=DEC2HEX, HEX2BIN, HEX2OCT"
msgstr ""
"@FUNCTION=HEX2DEC\n"
"@SYNTAX=HEX2DEC(x)\n"
"@DESCRIPTION=HEX2DEC ལཱ་འགན་དེ་གིས་  ཧེག་ས་ཌེ་སི་མཱལ་ཨང་གྲངས་འདི་  དེའི་བཅུག་ཚག་འདྲ་མཉམ་"
"ཅིག་ལུ་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"HEX2DEC(\"2A\") equals 42.\n"
"\n"
"@SEEALSO=DEC2HEX, HEX2BIN, HEX2OCT"

#: ../plugins/fn-eng/functions.c:650
msgid ""
"@FUNCTION=BESSELI\n"
"@SYNTAX=BESSELI(x,y)\n"
"@DESCRIPTION=BESSELI function returns the Neumann, Weber or Bessel "
"function.\n"
"\n"
"@x is where the function is evaluated. @y is the order of the Bessel "
"function, if non-integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELI(0.7,3) equals 0.007367374.\n"
"\n"
"@SEEALSO=BESSELJ,BESSELK,BESSELY"
msgstr ""
"@FUNCTION=BESSELI\n"
"@SYNTAX=BESSELI(x,y)\n"
"@DESCRIPTION=BESSELI ལཱ་འགན་འདི་གིས་  ནིའུ་མན་  ཝི་བར་ཡང་ན་བེ་སེལ་ལཱ་འགན་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@x འདི་  ལཱ་འགན་འདི་བརྟག་ཞིབ་འབད་ས་ཨིན།@y འདི་བེ་སེལ་ལཱ་འགན་གྱི་རིམ་པ་ཨིན་,  ག་དེམ་ཅིག་སྦེ་ཧྲིལ་"
"གྲངས་མེན་མི་འདི་ཆུང་ཀུ་བཟོ་ཡོད་པ་ཅིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@x ཡང་ན་ @y ཚུ་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་འདི་སླར་ོག་འབདཝ་ཨིན།\n"
"*  @y < 0 a #NUM! ཨིན་པ་ཅིན་འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BESSELI(0.7,3) equals 0.007367374.\n"
"\n"
"@SEEALSO=BESSELJ,BESSELK,BESSELY"

#: ../plugins/fn-eng/functions.c:693
msgid ""
"@FUNCTION=BESSELK\n"
"@SYNTAX=BESSELK(x,y)\n"
"@DESCRIPTION=BESSELK function returns the Neumann, Weber or Bessel function. "
"@x is where the function is evaluated. @y is the order of the Bessel "
"function, if non-integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELK(3,9) equals 397.95880.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELY"
msgstr ""
"@FUNCTION=BESSELK\n"
"@SYNTAX=BESSELK(x,y)\n"
"@DESCRIPTION=BESSELK ལཱ་འགན་འདི་གིས་  ནིའུ་མན་ ཝེ་བར་ཡང་ན་བེ་སེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་"
"ཨིན། @x འདི་ལཱ་འགན་བརྟགས་ཞིབ་འབད་ས་ཨིན། @y འདི་བེ་སེལ་ལཱ་འགན་གྱི་རིམ་པ་ཨིན་, ག་དེམ་ཅིག་སྦེ་ཧྲིལ་"
"གྲངས་མེན་པ་འདི་ཆུང་ཀུ་བཟོ་ཡོད་པ་ཅིན།\n"
"\n"
"* @x ཡང་ན་ @y ཚུ་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"*  @y < 0 a #NUM! ཨིན་པ་ཅིན་འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BESSELK(3,9) equals 397.95880.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELY"

#: ../plugins/fn-eng/functions.c:731
msgid ""
"@FUNCTION=BESSELJ\n"
"@SYNTAX=BESSELJ(x,y)\n"
"@DESCRIPTION=BESSELJ function returns the Bessel function with @x is where "
"the function is evaluated. @y is the order of the Bessel function, if non-"
"integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELJ(0.89,3) equals 0.013974004.\n"
"\n"
"@SEEALSO=BESSELI,BESSELK,BESSELY"
msgstr ""
"@FUNCTION=BESSELJ\n"
"@SYNTAX=BESSELJ(x,y)\n"
"@DESCRIPTION=BESSELJ ལཱ་འགན་གེ་གིས་  བེ་སེལ་ལཱ་འགན་འདི་@x དང་ཅིག་ཁར་  ལཱ་འགན་འདི་བརྟག་"
"ཞིབ་འབད་ཡོད་སར་སླར་ལོག་འབདཝ་ཨིན། @y འདི་བེ་སེལ་ལཱ་འགན་གྱི་རིམ་པ་ཨིན་, ག་དེམ་ཅིག་སྦེ་ཧྲིལ་གྲངས་མེན་"
"མི་འདི་ཆུང་ཀུ་བཟོ་ཡོད་པ་ཅིན།\n"
"\n"
"ཡང་ན་ @y ཚུ་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* @y < 0 a #NUM!ཨིནཔ་ཅིན་འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BESSELJ(0.89,3) equals 0.013974004.\n"
"\n"
"@SEEALSO=BESSELI,BESSELK,BESSELY"

#: ../plugins/fn-eng/functions.c:769
msgid ""
"@FUNCTION=BESSELY\n"
"@SYNTAX=BESSELY(x,y)\n"
"@DESCRIPTION=BESSELY function returns the Neumann, Weber or Bessel "
"function.\n"
"\n"
"@x is where the function is evaluated. @y is the order of the Bessel "
"function, if non-integer it is truncated.\n"
"\n"
"* If @x or @y are not numeric a #VALUE! error is returned.\n"
"* If @y < 0 a #NUM! error is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BESSELY(4,2) equals 0.215903595.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELK"
msgstr ""
"@FUNCTION=BESSELY\n"
"@SYNTAX=BESSELY(x,y)\n"
"@DESCRIPTION=BESSELY ལཱ་འགན་དེ་གིས་ ནིའུ་མན་  ཝེ་བར་ཡང་ན་བེ་སེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@x འདི་  ལཱ་འགན་འདི་བརྟག་ཞིབ་འབད་ཡོད་ས། @y འདི་  བེ་སེལ་ལཱ་འགན་གྱི་རིམ་པ་, ག་དེམ་ཅིག་སྦེ་ཧྲིལ་"
"གྲངས་མེན་མི་འདི་ཆུང་ཀུ་བཟོ་ཡོད་པ་ཅིན།\n"
"\n"
"* @x ཡང་ན་ @y ཚུ་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @y < 0 a #NUM! ཨིན་པ་ཅིན་  འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BESSELY(4,2) equals 0.215903595.\n"
"\n"
"@SEEALSO=BESSELI,BESSELJ,BESSELK"

#: ../plugins/fn-eng/functions.c:811
msgid ""
"@FUNCTION=CONVERT\n"
"@SYNTAX=CONVERT(number,from_unit,to_unit)\n"
"@DESCRIPTION=CONVERT returns a conversion from one measurement system to "
"another.  For example, you can convert a weight in pounds to a weight in "
"grams.  @number is the value you want to convert, @from_unit specifies the "
"unit of the @number, and @to_unit is the unit for the result.\n"
"\n"
"@from_unit and @to_unit can be any of the following:\n"
"\n"
"Weight and mass:\n"
"\t'g'  \t\tGram\n"
"\t'sg' \t\tSlug\n"
"\t'lbm'\t\tPound\n"
"\t'u'  \t\tU (atomic mass)\n"
"\t'ozm'\t\tOunce\n"
"\n"
"Distance:\n"
"\t'm'   \t\tMeter\n"
"\t'mi'  \t\tStatute mile\n"
"\t'Nmi' \t\tNautical mile\n"
"\t'in'  \t\tInch\n"
"\t'ft'  \t\tFoot\n"
"\t'yd'  \t\tYard\n"
"\t'ang' \t\tAngstrom\n"
"\t'Pica'\t\tPica\n"
"\n"
"Time:\n"
"\t'yr'  \t\tYear\n"
"\t'day' \t\tDay\n"
"\t'hr'  \t\tHour\n"
"\t'mn'  \t\tMinute\n"
"\t'sec' \t\tSecond\n"
"\n"
"Pressure:\n"
"\t'Pa'  \t\tPascal\n"
"\t'atm' \t\tAtmosphere\n"
"\t'mmHg'\tmm of Mercury\n"
"\n"
"Force:\n"
"\t'N'   \t\tNewton\n"
"\t'dyn' \t\tDyne\n"
"\t'lbf' \t\tPound force\n"
"\n"
"Energy:\n"
"\t'J'    \t\tJoule\n"
"\t'e'    \t\tErg\n"
"\t'c'    \t\tThermodynamic calorie\n"
"\t'cal'  \t\tIT calorie\n"
"\t'eV'   \tElectron volt\n"
"\t'HPh'  \tHorsepower-hour\n"
"\t'Wh'   \tWatt-hour\n"
"\t'flb'  \t\tFoot-pound\n"
"\t'BTU'  \tBTU\n"
"\n"
"Power:\n"
"\t'HP'   \tHorsepower\n"
"\t'W'    \tWatt\n"
"\n"
"Magnetism:\n"
"\t'T'    \t\tTesla\n"
"\t'ga'   \tGauss\n"
"\n"
"Temperature:\n"
"\t'C'    \t\tDegree Celsius\n"
"\t'F'    \t\tDegree Fahrenheit\n"
"\t'K'    \t\tDegree Kelvin\n"
"\n"
"Liquid measure:\n"
"\t'tsp'  \t\tTeaspoon\n"
"\t'tbs'  \t\tTablespoon\n"
"\t'oz'   \t\tFluid ounce\n"
"\t'cup'  \tCup\n"
"\t'pt'   \t\tPint\n"
"\t'qt'   \t\tQuart\n"
"\t'gal'  \t\tGallon\n"
"\t'l'    \t\tLiter\n"
"\n"
"For metric units any of the following prefixes can be used:\n"
"\t'Y'  \tyotta \t1E+24\n"
"\t'Z'  \tzetta \t1E+21\n"
"\t'E'  \texa   \t1E+18\n"
"\t'P'  \tpeta  \t1E+15\n"
"\t'T'  \ttera  \t\t1E+12\n"
"\t'G'  \tgiga  \t1E+09\n"
"\t'M'  \tmega  \t1E+06\n"
"\t'k'  \tkilo  \t\t1E+03\n"
"\t'h'  \thecto \t1E+02\n"
"\t'e'  \tdeka  \t1E+01\n"
"\t'd'  \tdeci  \t1E-01\n"
"\t'c'  \tcenti \t\t1E-02\n"
"\t'm'  \tmilli \t\t1E-03\n"
"\t'u'  \tmicro \t1E-06\n"
"\t'n'  \tnano  \t1E-09\n"
"\t'p'  \tpico  \t1E-12\n"
"\t'f'  \tfemto \t1E-15\n"
"\t'a'  \tatto  \t\t1E-18\n"
"\t'z'  \tzepto \t\t1E-21\n"
"\t'y'  \tyocto \t\t1E-24\n"
"\n"
"* If @from_unit and @to_unit are different types, CONVERT returns #N/A "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CONVERT(3,\"lbm\",\"g\") equals 1360.7769.\n"
"CONVERT(5.8,\"m\",\"in\") equals 228.3465.\n"
"CONVERT(7.9,\"cal\",\"J\") equals 33.07567.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=CONVERT\n"
"@SYNTAX=CONVERT(ཨང་གྲངས་,from_unit,to_unit)\n"
"@DESCRIPTION=CONVERT དེ་གིས་  ཚད་འཇལ་རིམ་ལུགས་གཅིག་ལས་གཞན་མི་ལུ་གཞི་བསྒྱུར་ཅིག་སླར་ལོག་"
"འབདཝ་ཨིན། དཔེར་ན་  པ་འུནཌ་ནང་གི་ལྗིད་ཚད་འདི་ག་རཱམསི་ནང་གི་ལྗིད་ཚད་ལུ་ཁྱོད་ཀྱིས་གཞི་བསྒྱུར་འབད་"
"ཚུགས།@number འདི་ ཁྱོད་ཀྱིས་གཞི་བསྒྱུར་འབད་དགོ་པའི་གནས་གོང་ཨིན་་, @from_unit དེ་གིས་  "
"@numberགི་ཆ་ཕྲན་འདི་གསལ་བཀོད་འབད་ནི་དང་, @to_unit འདི་གྲུབ་འབྲས་ཀྱི་ཆ་ཕྲན་ཨིན།\n"
"\n"
"@from_unit དང་ @to_unit འདི་འགོ་གི་གང་རུང་ཅིག་བཏུབ:\n"
"\n"
"ལྗིད་ཚད་དང་མསི་:\n"
"\t'g'  \t\tGram\n"
"\t'sg' \t\tSlug\n"
"\t'lbm'\t\tPound\n"
"\t'u'  \t\tU (atomic mass)\n"
"\t'ozm'\t\tOunce\n"
"\n"
"གྱང་ཚད:\n"
"\t'm'   \t\tMeter\n"
"\t'mi'  \t\tStatute mile\n"
"\t'Nmi' \t\tNautical mile\n"
"\t'in'  \t\tInch\n"
"\t'ft'  \t\tFoot\n"
"\t'yd'  \t\tYard\n"
"\t'ang' \t\tAngstrom\n"
"\t'Pica'\t\tPica\n"
"\n"
"ཆུ་ཚོད་:\n"
"\t'yr'  \t\tYear\n"
"\t'day' \t\tDay\n"
"\t'hr'  \t\tHour\n"
"\t'mn'  \t\tMinute\n"
"\t'sec' \t\tSecond\n"
"\n"
"ཨེབ་ཤུགས:\n"
"\t'Pa'  \t\tPascal\n"
"\t'atm' \t\tAtmosphere\n"
"\t'mmHg'\tmm of Mercury\n"
"\n"
"ཤུགས་ཚད:\n"
"\t'N'   \t\tNewton\n"
"\t'dyn' \t\tDyne\n"
"\t'lbf' \t\tPound force\n"
"\n"
"ནུས་ཤུགས:\n"
"\t'J'    \t\tJoule\n"
"\t'e'    \t\tErg\n"
"\t'c'    \t\tThermodynamic calorie\n"
"\t'cal'  \t\tIT calorie\n"
"\t'eV'   \tElectron volt\n"
"\t'HPh'  \tHorsepower-hour\n"
"\t'Wh'   \tWatt-hour\n"
"\t'flb'  \t\tFoot-pound\n"
"\t'BTU'  \tBTU\n"
"\n"
"ནུས་ཤུགས:\n"
"\t'HP'   \tHorsepower\n"
"\t'W'    \tWatt\n"
"\n"
"རྡེ་ཁབ་ལེན་གྱི་རང་བཞིན:\n"
"\t'T'    \t\tTesla\n"
"\t'ga'   \tGauss\n"
"\n"
"ཚ་དྲོད:\n"
"\t'C'    \t\tDegree Celsius\n"
"\t'F'    \t\tDegree Fahrenheit\n"
"\t'K'    \t\tDegree Kelvin\n"
"\n"
"གཤེར་ཁུའི་ཚད་འཇལ:\n"
"\t'tsp'  \t\tTeaspoon\n"
"\t'tbs'  \t\tTablespoon\n"
"\t'oz'   \t\tFluid ounce\n"
"\t'cup'  \tCup\n"
"\t'pt'   \t\tPint\n"
"\t'qt'   \t\tQuart\n"
"\t'gal'  \t\tGallon\n"
"\t'l'    \t\tLiter\n"
"\n"
"མེ་ཊིཀ་ཆ་ཕྲན་ཚུ་གི་དོན་ལུ་འོག་ལུ་ཡོད་མི་སྔོན་ཚིག་གང་རུང་ལག་ལེན་འཐབ་བཏུབ:\n"
"\t'Y'  \tyotta \t1E+24\n"
"\t'Z'  \tzetta \t1E+21\n"
"\t'E'  \texa   \t1E+18\n"
"\t'P'  \tpeta  \t1E+15\n"
"\t'T'  \ttera  \t\t1E+12\n"
"\t'G'  \tgiga  \t1E+09\n"
"\t'M'  \tmega  \t1E+06\n"
"\t'k'  \tkilo  \t\t1E+03\n"
"\t'h'  \thecto \t1E+02\n"
"\t'e'  \tdeka  \t1E+01\n"
"\t'd'  \tdeci  \t1E-01\n"
"\t'c'  \tcenti \t\t1E-02\n"
"\t'm'  \tmilli \t\t1E-03\n"
"\t'u'  \tmicro \t1E-06\n"
"\t'n'  \tnano  \t1E-09\n"
"\t'p'  \tpico  \t1E-12\n"
"\t'f'  \tfemto \t1E-15\n"
"\t'a'  \tatto  \t\t1E-18\n"
"\t'z'  \tzepto \t\t1E-21\n"
"\t'y'  \tyocto \t\t1E-24\n"
"\n"
"*  @from_unit དང་ @to_unit ཚུ་དབྱེ་བ་སོ་སོ་ཨིན་པ་ཅིན་, CONVERT དེ་གིས་ #N/A འཛོལ་བ་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CONVERT(3,\"lbm\",\"g\") equals 1360.7769.\n"
"CONVERT(5.8,\"m\",\"in\") equals 228.3465.\n"
"CONVERT(7.9,\"cal\",\"J\") equals 33.07567.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-eng/functions.c:1228
msgid ""
"@FUNCTION=ERF\n"
"@SYNTAX=ERF([lower limit,]upper_limit)\n"
"@DESCRIPTION=ERF returns the error function.  With a single argument ERF "
"returns the error function, defined as\n"
"\n"
"\terf(x) = 2/sqrt(pi)* integral from 0 to x of exp(-t*t) dt.\n"
"\n"
"If two arguments are supplied, they are the lower and upper limits of the "
"integral.\n"
"\n"
"* If either @lower_limit or @upper_limit is not numeric a #VALUE! error is "
"returned.\n"
"* This function is upward-compatible with that in Excel. (If two arguments "
"are supplied, Excel will not allow either to be negative.)\n"
"\n"
"@EXAMPLES=\n"
"ERF(0.4) equals 0.428392355.\n"
"ERF(1.6448536269515/SQRT(2)) equals 0.90.\n"
"\n"
"The second example shows that a random variable with a normal distribution "
"has a 90 percent chance of falling within approximately 1.645 standard "
"deviations of the mean.\n"
"@SEEALSO=ERFC"
msgstr ""
"@FUNCTION=ERF\n"
"@SYNTAX=ERF([lower limit,]upper_limit)\n"
"@DESCRIPTION=ERF དེ་གིས་  འཛོལ་བའི་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།  སྒྲུབ་རྟགས་གཅིག་གིས་ ཨི་ཨར་"
"ཨེཕ་དེ་གིས་ འཛོལ་བའི་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་, ངོས་འཛིན་འབད་ཡོདཔ་བཟུམ་\n"
"\n"
"\terf(x) = 2/sqrt(pi)* ཧྲིལ་གྲངས་ 0 to x གི་exp(-t*t) dtལས།\n"
"\n"
"སྒྲུབ་རྟགས་གཉིས་བཀྲམ་སྤེལ་འབད་དེ་ཡོད་པ་ཅིན་  དེ་ཚུ་འོག་གི་དང་ལྟག་གི་ཧྲིལ་གྲངས་ཀྱི་ཚད་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @lower_limit or @upper_limit འདི་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་ནང་བཟུམསྦེ་ ཡར་ཕྱོགས་མཐུན་འགྱུར་ཅན་ཨིན།  (སྒྲུབ་རྟགས་གཉིས་བཀྲམ་སྤེལ་འབད་དེ་"
"ཡོད་པ་ཅིན་, མེད་ཆ་འབད་ནི་ལུ་ཡང་ ཨེགསི་སེལ་དེ་གིས་འབད་མི་བཅུག།)\n"
"\n"
"@EXAMPLES=\n"
"ERF(0.4) equals 0.428392355.\n"
"ERF(1.6448536269515/SQRT(2)) equals 0.90.\n"
"\n"
"དཔེ་གཉིས་པ་དེ་གིས་  སྤྱིར་གཏང་བཀྲམ་སྤེལ་ཅིག་དང་ཅིག་ཁར་ཡོད་པའི་གང་བྱུང་འགྱུར་ཅན་འདི་ལུ་   བར་མའི་ཆ་"
"གྲངས་ཀྱི་ཚད་ལྡན་འགྱུར་བ་ 1.645 གི་ནང་འཁོད་འབུད་ནིའི་གོ་སྐབས་  བརྒྱ་ཆ་ ༩༠་ཡོད།\n"
"@SEEALSO=ERFC"

#: ../plugins/fn-eng/functions.c:1279
msgid ""
"@FUNCTION=ERFC\n"
"@SYNTAX=ERFC(x)\n"
"@DESCRIPTION=ERFC function returns the complementary error function, defined "
"as\n"
"\n"
"\t1 - erf(x).\n"
"\n"
"erfc(x) is calculated more accurately than 1 - erf(x) for arguments larger "
"than about 0.5.\n"
"\n"
"* If @x is not numeric a #VALUE! error is returned.  \n"
"@EXAMPLES=\n"
"ERFC(6) equals 2.15197367e-17.\n"
"\n"
"@SEEALSO=ERF"
msgstr ""
"@FUNCTION=ERFC\n"
"@SYNTAX=ERFC(x)\n"
"@DESCRIPTION=ERFC ལཱ་འགན་དེ་གིས་  ལྷན་ཐབས་འཛོལ་བའི་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་"
"འོག་ལུ་ངོས་འཛིན་འབད་ཡོདཔ་བཟུམ་\n"
"\n"
"\t1 - erf(x).\n"
"\n"
"erfc(x) འདི་ 1 ལས་ལྷག་སྟེ་ཀྲིཀ་ཀྲི་སྦེ་རྩིས་སྟོན་ཏེཡོད་- erf(x) འདི་0.5.ལས་སྒྲུབ་རྟགས་སྦོམ།\n"
"\n"
"* If @x འདི་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན།  \n"
"@EXAMPLES=\n"
"ERFC(6) equals 2.15197367e-17.\n"
"\n"
"@SEEALSO=ERF"

#: ../plugins/fn-eng/functions.c:1310
msgid ""
"@FUNCTION=DELTA\n"
"@SYNTAX=DELTA(x[,y])\n"
"@DESCRIPTION=DELTA function tests for numerical equivalence of two "
"arguments, returning 1 in case of equality.\n"
"\n"
"* @y is optional, and defaults to 0.\n"
"* If either argument is non-numeric returns a #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DELTA(42.99,43) equals 0.\n"
"\n"
"@SEEALSO=EXACT,GESTEP"
msgstr ""
"@FUNCTION=DELTA\n"
"@SYNTAX=DELTA(x[,y])\n"
"@DESCRIPTION=DELTA ལཱ་འགན་དེ་གིས་ སྒྲུབ་རྟགས་གཉིས་ཀྱི་ཨང་གྲངས་འདྲ་མཉམ་གྱི་དོན་ལུ་བརྟག་ཞིབ་འབདཝ་"
"ཨིན་, དེ་ཡང་འདྲ་མཉམ་གྱི་ཐད་ཁར་འབད་བ་ཅིན་ ༡་ སླར་ལོག་འབད་ཐོག་ལས་ཨིན།\n"
"\n"
"* @y འདི་གདམ་ཁ་ཅན་ཨིནམ་, དང་སྔོན་སྒྲིག་འདི་ ༠་ལུ་ཨིན།\n"
"* སྒྲུབ་རྟགས་གཉིས་ཆ་རང་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱའགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DELTA(42.99,43) equals 0.\n"
"\n"
"@SEEALSO=EXACT,GESTEP"

#: ../plugins/fn-eng/functions.c:1342
msgid ""
"@FUNCTION=GESTEP\n"
"@SYNTAX=GESTEP(x[,y])\n"
"@DESCRIPTION=GESTEP function tests if @x is >= @y, returning 1 if it is so, "
"and 0 otherwise. @y is optional, and defaults to 0.\n"
"\n"
"* If either argument is non-numeric returns a #VALUE! error.\n"
"* This function is Excel compatible.\n"
"@EXAMPLES=\n"
"GESTEP(5,4) equals 1.\n"
"\n"
"@SEEALSO=DELTA"
msgstr ""
"@FUNCTION=GESTEP\n"
"@SYNTAX=GESTEP(x[,y])\n"
"@DESCRIPTION=GESTEP ལཱ་འགན་གེ་གིས་ @x འདི་ >= @yཨིན་པ་ཅིན་བརྟག་ཞིབ་འབདཝ་ཨིན་, འདི་ཨིན་པ་"
"ཅིན་ ༡་ སླར་ལོག་འབདཝ་ཨིནམ་, དང་  དེ་མེན་པ་ཅིན་ ༠། @y འདི་གདམ་ཁ་ཅན་ཨིནམ་, དང་ ༠་ ལུ་སྔོན་"
"སྒྲིག་འབདཝ་ཨིན།\n"
"\n"
"* སྒྲུབ་རྟགས་གཉིས་ཆ་རང་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"@EXAMPLES=\n"
"GESTEP(5,4) equals 1.\n"
"\n"
"@SEEALSO=DELTA"

#: ../plugins/fn-eng/functions.c:1373
msgid ""
"@FUNCTION=INVSUMINV\n"
"@SYNTAX=INVSUMINV(x1,x2,...)\n"
"@DESCRIPTION=INVSUMINV sum calculates the inverse of the sum of inverses.\n"
"\n"
"The primary use of this is for calculating equivalent resistance for "
"parallel resistors or equivalent capacitance of a series of capacitors.\n"
"\n"
"* All arguments must be non-negative, or else a #VALUE! result is returned.\n"
"* If any argument is zero, the result is zero.\n"
"\n"
"@EXAMPLES=\n"
"INVSUMINV(2000,2000) equals 1000.\n"
"\n"
"@SEEALSO=HARMEAN"
msgstr ""
"@FUNCTION=INVSUMINV\n"
"@SYNTAX=INVSUMINV(x1,x2,...)\n"
"@DESCRIPTION=INVSUMINV བསྡོམ་དེ་གིས་  ལུགས་ལྡོག་ཚུ་གི་བསྡོམ་གྱི་ལུགས་ལྡོག་འདི་རྩིས་སྟོནམ་ཨིན།\n"
"\n"
"འདི་གི་ལག་ལེན་གཙོ་བོ་འདི་  མཉམ་སྤྱོད་བཀག་ཆས་ཀྱི་དོན་ལུ་འདྲ་མཉམ་ནུས་ཤུགས་རྩིས་སྟོན་ནི་  ཡང་ན་  ནུས་"
"ཚད་ཚུ་གི་རིམ་པའི་འདྲ་མཉམ་ཤོང་ཚད་རྩིས་སྟོན་ནི་འདི་ཨིན།\n"
"\n"
"* སྒྲུབ་རྟགས་ཆ་མཉམ་མེད་ཆ་མེན་པ་དགོཔ་ཨིན་, ཡང་ན་  #VALUE! གྲུབ་འབྲས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* སྒྲུབ་རྟགས་གང་རུང་ཅིག་ཀླད་ཀོར་ཨིན་པ་ཅིན་, གྲུབ་འབྲས་འདི་ཀླད་ཀོར་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"INVSUMINV(2000,2000) equals 1000.\n"
"\n"
"@SEEALSO=HARMEAN"

#: ../plugins/fn-erlang/functions.c:107
msgid ""
"@FUNCTION=PROBBLOCK\n"
"@SYNTAX=PROBBLOCK(traffic,circuits)\n"
"@DESCRIPTION=PROBBLOCK returns probability of blocking when a number of "
"@traffic loads into a number of @circuits (servers).\n"
"\n"
"* @traffic cannot exceed @circuits\n"
"\n"
"@EXAMPLES=\n"
"PROBBLOCK(24,30) returns 0.4012.\n"
"\n"
"@SEEALSO=OFFTRAF, DIMCIRC, OFFCAP"
msgstr ""
"@FUNCTION=PROBBLOCK\n"
"@SYNTAX=PROBBLOCK(traffic,circuits)\n"
"@DESCRIPTION=PROBBLOCK དེ་གིས་ བཀག་ཆ་འབྱུང་སྲིད་པ་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ @traffic གི་"
"ཨང་གྲངས་དེ་གིས་ @circuits (སར་རབ་)གི་ཨང་གྲངས་ནང་མངོན་གསལ་འབད་བ་ཅིན།\n"
"\n"
"* @traffic དེ་གིས་@circuitsལྷག་མི་ཚུགས།\n"
"\n"
"@EXAMPLES=\n"
"PROBBLOCK(24,30) དེ་གིས་0.4012.སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=OFFTRAF, DIMCIRC, OFFCAP"

#: ../plugins/fn-erlang/functions.c:139
msgid ""
"@FUNCTION=OFFTRAF\n"
"@SYNTAX=OFFTRAF(traffic,circuits)\n"
"@DESCRIPTION=OFFTRAF returns a predicted number of offered traffic from a "
"number of carried @traffic (taken from measurements) on a number of "
"@circuits.\n"
"\n"
"* @traffic cannot exceed @circuits\n"
"\n"
"@EXAMPLES=\n"
"OFFTRAF(24,30) returns 25.527.\n"
"\n"
"@SEEALSO=PROBBLOCK, DIMCIRC, OFFCAP"
msgstr ""
"@FUNCTION=OFFTRAF\n"
"@SYNTAX=OFFTRAF(traffic,circuits)\n"
"@DESCRIPTION=OFFTRAF དེ་གིས་ བྱིན་ཡོད་པའི་འགྲུལ་ལམ་གྱི་ སྔོན་བཤད་ཨང་གྲངས་འདི་  འབག་ཡོད་པའི་"
"@traffic (ཚད་འཇལ་ལས་ལེན་ཡོདཔ་)ཨང་གྲངས་ལས་ @circuitsགི་ཨང་གྲངས་གུ་ སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* @traffic དེ་གིས་ @circuits ལྷག་མི་ཚུགས།\n"
"\n"
"@EXAMPLES=\n"
"OFFTRAF(24,30) དེ་གིས་ 25.527.སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=PROBBLOCK, DIMCIRC, OFFCAP"

#: ../plugins/fn-erlang/functions.c:208
msgid ""
"@FUNCTION=DIMCIRC\n"
"@SYNTAX=DIMCIRC(traffic,gos)\n"
"@DESCRIPTION=DIMCIRC returns a number of circuits required from a number of "
"@traffic loads with @gos grade of service.\n"
"\n"
"@EXAMPLES=\n"
"DIMCIRC(24,1%) returns 35.\n"
"\n"
"@SEEALSO=OFFCAP, OFFTRAF, PROBBLOCK"
msgstr ""
"@FUNCTION=DIMCIRC\n"
"@SYNTAX=DIMCIRC(traffic,gos)\n"
"@DESCRIPTION=DIMCIRC དེ་གིས་  དགོས་མཁོ་ཡོད་པའི་གློག་ལམ་གྱི་ཨང་གྲངས་ཅིག་ @traffic གི་ཨང་"
"གྲངས་ལས་   @gos ཞབས་ཏོག་སྤྱོད་མི་གི་སྡེ་རིམ་དང་ཅིག་ཁར་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DIMCIRC(24,1%) དེ་གིས་ 35.སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=OFFCAP, OFFTRAF, PROBBLOCK"

#: ../plugins/fn-erlang/functions.c:253
msgid ""
"@FUNCTION=OFFCAP\n"
"@SYNTAX=OFFCAP(circuits,gos)\n"
"@DESCRIPTION=OFFCAP returns a number of traffic capacity given by a number "
"of @circuits with @gos grade of service.\n"
"\n"
"@EXAMPLES=\n"
"OFFCAP(30,1%) returns 20.337.\n"
"\n"
"@SEEALSO=DIMCIRC, OFFTRAF, PROBBLOCK"
msgstr ""
"@FUNCTION=OFFCAP\n"
"@SYNTAX=OFFCAP(circuits,gos)\n"
"@DESCRIPTION=OFFCAP དེ་གིས་   @circuits གི་ཨང་གྲངས་ @gos ཞབས་ཏོག་གི་སྡེ་རིམ་དང་ཅིག་ཁར་"
"ཡོད་པའི་ཨང་གྲངས་ཀྱིས་  བྱིན་ཡོད་པའི་འགྲུལ་ལམ་ཤོང་ཚད་ཀྱི་ཨང་གྲངས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"OFFCAP(30,1%) སླར་ལོག་འབདཝ་ཨིན་ 20.337.\n"
"\n"
"@SEEALSO=DIMCIRC, OFFTRAF, PROBBLOCK"

#: ../plugins/fn-financial/functions.c:346
msgid ""
"@FUNCTION=ACCRINT\n"
"@SYNTAX=ACCRINT(issue,first_interest,settlement,rate,par,frequency[,basis])\n"
"@DESCRIPTION=ACCRINT calculates the accrued interest for a security that "
"pays periodic interest.\n"
"\n"
"@issue is the issue date of the security.  @first_interest is the first "
"interest date of the security.  @settlement is the settlement date of the "
"security.  The settlement date is always after the issue date (the date when "
"the security is bought). @rate is the annual rate of the security and @par "
"is the par value of the security. @frequency is the number of coupon "
"payments per year.\n"
"\n"
"Allowed frequencies are:\n"
"  1 = annual,\n"
"  2 = semi,\n"
"  4 = quarterly.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @issue date, @first_interest date, or @settlement date is not valid, "
"ACCRINT returns #NUM! error.\n"
"* The dates must be @issue < @first_interest < @settlement, or ACCRINT "
"returns #NUM! error.\n"
"* If @rate <= 0 or @par <= 0 , ACCRINT returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, ACCRINT returns #NUM! error.\n"
"* If @issue date is after @settlement date or they are the same, ACCRINT "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ACCRINTM"
msgstr ""
"@FUNCTION=ACCRINT\n"
"@SYNTAX=ACCRINT(issue,first_interest,settlement,rate,par,frequency[,basis])\n"
"@DESCRIPTION=ACCRINT དེ་གིས་  དུས་ཡུན་སྐྱེད་སྤྲོད་མི་སྲུང་སྐྱོབ་ཅིག་གི་དོན་ལུ་  དགོ་པའི་སྐྱེད་འདི་རྩིས་"
"བརྐྱབ་ཨིན།\n"
"\n"
"@issue འདི་  སྲུང་སྐྱོབ་ཀྱི་སྤྲོད་ནིའི་ཚེས་གྲངས་འདི་ཨིན།  @first_interest འདི་  སྲུང་སྐྱོབ་ཀྱི་སྐྱེད་དང་"
"པའི་ཚེས་གྲངས་ཨིན། @settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།  གཞི་བཙུགས་ཚེས་གྲངས་འདི་ཨ་"
"རྟག་རང་  སྤྲོད་ནིའི་ཚེས་གྲངས་ (སྲུང་སྐྱོབ་འདི་འབག་འོང་པའི་ཚེས་གྲངས་)ཀྱི་ཤུལ་ལས་ཨིན། @rate འདི་  སྲུང་"
"སྐྱོབ་ཀྱི་ལོ་བསྟར་ཚད་དང་ @par འདི་སྲུང་སྐྱོབ་ཀྱི་གནས་གོང་རེ་རེ་ཨིན། @frequency འདི་ལོ་རེ་ནང་གི་འཛིན་"
"ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།\n"
"\n"
"ཆོག་པའི་འབྱུང་ཐེངས་ཚུ:\n"
"  1 = ལོ་བསྟར་,\n"
"  2 = ཕྱེད་,\n"
"  4 = དཔྱ་བཞི་\n"
"\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་  ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཨིན:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ/360\n"
"  3  ཉིནམ་ངོ་མ/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @issue ཚེས་གྲངས་ཨིན་པ་ཅིན་, @first_interest ཚེས་གྲངས་, ཡང་ན་ @settlement ཚེས་"
"གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, ACCRINT དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ཚེས་གྲངས་ཚུ་ @issue < @first_interest < @settlementདགོཔ་ཨིན་, ཡང་ན་ ACCRINTདེ་"
"གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @rate <= 0 ཨིན་པ་ཅིན་  ཡང་ན་ @par <= 0 , ACCRINT དེ་གིས་#NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis < 0 ཡང་ན་ @basis > 4ཨིན་པ་ཅིན་, ACCRINT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན\n"
"* If @issue ཚེས་གྲངས་འདི་ @settlement ཚེས་གྲངས་ཀྱི་ཤུལ་ལས་ཨིན་པ་ཅིན་  ཡང་ན་ དེ་ཚུ་ཆ་མཉམ་"
"གཅིག་པ་འབ་དབ་ཅིན་, ACCRINT དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ACCRINTM"

#: ../plugins/fn-financial/functions.c:435
msgid ""
"@FUNCTION=ACCRINTM\n"
"@SYNTAX=ACCRINTM(issue,maturity,rate[,par,basis])\n"
"@DESCRIPTION=ACCRINTM calculates and returns the accrued interest for a "
"security from @issue to @maturity date.\n"
"\n"
"@issue is the issue date of the security.  @maturity is the maturity date of "
"the security.  @rate is the annual rate of the security and @par is the par "
"value of the security. If you omit @par, ACCRINTM applies $1,000 instead.  "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @issue date or @maturity date is not valid, ACCRINTM returns #NUM! "
"error.\n"
"* If @rate <= 0 or @par <= 0, ACCRINTM returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, ACCRINTM returns #NUM! error.\n"
"* If @issue date is after @maturity date or they are the same, ACCRINTM "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ACCRINT"
msgstr ""
"@FUNCTION=ACCRINTM\n"
"@SYNTAX=ACCRINTM(issue,maturity,rate[,par,basis])\n"
"@DESCRIPTION=ACCRINTM དེ་གིས་  སྲུང་སྐྱོབ་ཀྱི་དོན་ལུ་@issue ལས་ @maturity ཚེས་གྲངས་ལུ་  སྐྱེད་"
"འཛེགས་ནི་འདི་རྩིས་བཏོན་ནི་དང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@issue འདི་  སྲུང་སྐྱོབ་སྤྲོད་པའི་ཚེས་གྲངས་འདི་ཨིན།  @maturity སྲུང་སྐྱོབ་ཀྱི་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་"
"ཨིན།  @rate འདི་ སྲུང་སྐྱོབ་ཀྱི་ལོ་བསྟར་ཚད་འདི་ཨིནམ་དང་ @par འདི་  སྲུང་སྐྱོབ་ཀྱི་གནས་གོང་རེ་རེ་ཨིན།  "
"ཁྱོད་ཀྱིས་@parསྐྱུར་བཞག་པ་ཅིན་, ACCRINTM དེ་གིས་ $1,000 གི་ཚབ་ལུ་འཇུག་སྤྱོད་འབདཝ་ཨིན།  @basis "
"འདི་ ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱི་ཨང་གྲངས་བརྩི་བའི་རིམ་ལུགས་ཨིན:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ\n"
"  2  ཉིནམ་ངོ་མ/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @issue ཚེས་གྲངས་ཡང་ན་ @maturity ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, ACCRINTM དེ་གིས་ "
"#NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།* If @rate <= 0 ཡང་ན་ @par <= 0ཨིན་པ་ཅིན་, "
"ACCRINTM དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis < 0 ཡང་ན་ @basis > 4ཨིན་པ་ཅིན་, ACCRINTM དེ་གིས་#NUM! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @issue ཚེས་གྲངས་འདི་ @maturity ཚེས་གྲངས་ཀྱི་ཤུལ་ལས་  ཡང་ན་  གཅིག་པ་ཨིན་པ་ཅིན་, "
"ACCRINTM དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=ACCRINT"

#: ../plugins/fn-financial/functions.c:493
msgid ""
"@FUNCTION=INTRATE\n"
"@SYNTAX=INTRATE(settlement,maturity,investment,redemption[,basis])\n"
"@DESCRIPTION=INTRATE calculates and returns the interest rate of a fully "
"vested security.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security. @investment is the price of the security paid "
"at @settlement date and @redemption is the amount to be received at "
"@maturity date.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, INTRATE returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, INTRATE returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, INTRATE "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"If you had a bond with a settlement date of April 15, 2000, maturity date "
"September 30, 2000, investment of $100,000, redemption value $103,525, using "
"the actual/actual basis, the bond discount rate is:\n"
"=INTRATE(36631, 36799, 100000, 103525, 1) which equals 0.0648 or 6.48%\n"
"@SEEALSO=RECEIVED, DATE"
msgstr ""
"@FUNCTION=INTRATE\n"
"@SYNTAX=INTRATE(settlement,maturity,investment,redemption[,basis])\n"
"@DESCRIPTION=INTRATE དེ་གིས་  སྲུང་སྐྱོབ་ཆ་ཚང་སྤྲོད་པའི་སྐྱེད་འདི་རྩིས་བཏོན་ནི་དང་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཚེས་གྲངས་ཨིན།  @maturity འདི་ སྲུང་སྐྱོབ་ཀྱི་དུས་ལས་ཡལ་བའི་"
"ཚེས་གྲངས་ཨིན།@investment འདི་  @settlement ཚེས་གྲངས་ལུ་སྤྲོད་པའི་སྲུང་སྐྱོབ་དང་ @redemption "
"འདི་ @maturity ཚེས་གྲངས་ལུ་ཐོབ་ནིའི་དངུལ་བསྡོམ་ཨིན།\n"
"\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁ་བརྐྱབ་པའི་རིམ་ལུགས་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @settlement ཚེས་གྲངས་ཡང་ན་ @maturity ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, INTRATE དེ་"
"གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis < 0 ཡང་ན་ @basis > 4ཨིན་པ་ཅིན་, INTRATE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @settlement ཚེས་གྲངས་འདི་ @maturity ཚེས་གྲངས་ཀྱི་ཤུལ་ལས་ཡང་ན་གཅིག་པ་ཨིན་པ་ཅིན་, "
"INTRATE དེ་གིས་#NUM!འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"གཞི་བཙུགས་ཚེས་གྲངས་སྤྱི་ཟླ་བཞི་པའི་ཚེས་ ༡༥་ ༢༠༠༠་དང་  དུས་ལས་ཡལ་བའི་ཚེས་གྲངས་  སྤྱི་ཟླ་དགུ་པའི་"
"ཚེས་ ༣༠་ ༢༠༠༠དང་ཅིག་ཁར་  ཁྱོད་འབྲེལ་བ་ཡོད་པ་ཅིན་  $100,000 གི་ཟད་གྲོ་, བུན་ཚབ་གནས་གོང་ "
"$103,525, ངོ་མ་/ངོ་མའི་གཞི་རྩ་ལག་ལེན་འཐབ་སྟེ་,བཱོནཌི་ཕབ་ཆའི་ཚད་འདི:\n"
"=INTRATE(36631, 36799, 100000, 103525, 1) འདི་གིས་ 0.0648 ཡང་ན་ 6.48%ལུ་མཉམ་མི་"
"འདི་ཨིན།\n"
"@SEEALSO=RECEIVED, DATE"

#: ../plugins/fn-financial/functions.c:558
msgid ""
"@FUNCTION=RECEIVED\n"
"@SYNTAX=RECEIVED(settlement,maturity,investment,rate[,basis])\n"
"@DESCRIPTION=RECEIVED calculates and returns the amount to be received at "
"maturity date for a security bond.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security.  The amount of investment is specified in "
"@investment.  @rate is the security's discount rate.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, RECEIVED returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, RECEIVED returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, RECEIVED "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=INTRATE"
msgstr ""
"@FUNCTION=RECEIVED\n"
"@SYNTAX=RECEIVED(settlement,maturity,investment,rate[,basis])\n"
"@DESCRIPTION=RECEIVED དེ་གིས་  སྲུང་སྐྱོབ་བཱོནཌི་གི་དོན་ལུ་ དུས་ལས་ཡལ་བའི་ཚེས་གྲངས་ལུ་ཐོབ་ནི་གི་"
"དངུལ་བསྡོམ་འདི་རྩིས་བཏོན་ནི་དང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།  @maturity འདི་སྲུང་སྐྱོབ་ཀྱི་དུས་ལས་ཡལ་"
"བའི་ཚེས་གྲངས་ཨིན།  ཟད་གྲོ་གི་བསྡོམ་འདི་@investment ནང་གསལ་བཀོད་འབད་དེ་ཡོདཔ་ཨིན།  @rate འདི་"
"སྲུང་སྐྱོབ་ཕབ་ཆའི་ཚད་ཨིན།\n"
"\n"
"@basis འདི་ཁྱོད་ཀཡིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་འདི་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོམ\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་30/360\n"
"\n"
"* If @settlement ཚེས་གྲངས་ཡང་ན་ @maturity ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, RECEIVED དེ་"
"གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis < 0 ཡང་ན་@basis > 4ཨིན་པ་ཅིན་, RECEIVED དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @settlement ཚེས་གྲངས་འདི་ @maturity ཚེས་གྲངས་ཀྱི་ཤུལ་ལས་ཨིན་པ་ཅིན་ཡང་ན་གཅིག་པ་ཅིན་, "
"RECEIVED དེ་གིས་#NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=INTRATE"

#: ../plugins/fn-financial/functions.c:620
msgid ""
"@FUNCTION=PRICEDISC\n"
"@SYNTAX=PRICEDISC(settlement,maturity,discount,redemption[,basis])\n"
"@DESCRIPTION=PRICEDISC calculates and returns the price per $100 face value "
"of a security bond.  The security does not pay interest at maturity.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security.  @discount is the rate for which the security "
"is discounted.  @redemption is the amount to be received on @maturity date.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, PRICEDISC returns "
"#NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, PRICEDISC returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, "
"PRICEDISC returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PRICEMAT"
msgstr ""
"@FUNCTION=PRICEDISC\n"
"@SYNTAX=PRICEDISC(settlement,maturity,discount,redemption[,basis])\n"
"@DESCRIPTION=PRICEDISC དེ་གིས་  སྲུང་སྐྱོབ་བཱོནཌི་ཅིག་གི་མ་གོང་ $100 རེ་རེ་གི་གོང་ཚད་འདི་རྩིས་"
"བཏོན་ནི་དང་སླར་ལོག་འབདཝ་ཨིན།  སྲུང་སྐྱོབ་དེ་གིས་སྐྱེད་འདི་དུས་ལས་ཡལ་བ་ལུ་མི་སྤྲོད།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས། @maturity འདི་སྲུང་སྐྱོབ་དུས་ལས་ཡལ་བའི་ཚེས་"
"གྲངས། @discount འདི་སྲུང་སྐྱོབ་འདི་ཕབ་ཆ་འབད་ཡོད་མིའི་དོན་ལུ་ཚད་ཨིན།  @redemption འདི་  "
"@maturity ཚེས་གྲངས་གུ་ལེན་ནིའི་དངུལ་བསྡོམ་ཨིན།\n"
"\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་འདི་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2 ཉིནམ་ངོ་མ/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @settlement ཚེས་གྲངས་ཡང་ན་ @maturity ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, PRICEDISC "
"དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis < 0 ཡང་ན་ @basis > 4ཨིན་པ་ཅིན་, PRICEDISC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @settlement ཚེས་གྲངས་འདི་ @maturity ཚེས་གྲངས་ཀྱི་ཤུལ་ལས་ཨིན་པ་ཅིན་ཡངན་གཅིག་པ་ཨིན་པ་"
"ཅིན་  PRICEDISC དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PRICEMAT"

#: ../plugins/fn-financial/functions.c:677
msgid ""
"@FUNCTION=PRICEMAT\n"
"@SYNTAX=PRICEMAT(settlement,maturity,issue,rate,yield[,basis])\n"
"@DESCRIPTION=PRICEMAT calculates and returns the price per $100 face value "
"of a security.  The security pays interest at maturity.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security.  @issue is the issue date of the security.  "
"@rate is the discount rate of the security. @yield is the annual yield of "
"the security. @basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, PRICEMAT returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, PRICEMAT returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, PRICEMAT "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PRICEDISC"
msgstr ""
"@FUNCTION=PRICEMAT\n"
"@SYNTAX=PRICEMAT(settlement,maturity,issue,rate,yield[,basis])\n"
"@DESCRIPTION=PRICEMAT དེ་གིས་  སྲུང་སྐྱོབ་གཅིག་གི་མ་གོང་ $100 རེ་རེ་གི་གོང་ཚད་འདི་རྩིས་བཏོན་ནི་"
"དང་སླར་ལོག་འབདཝ་ཨིན།  སྲུང་སྐྱོབ་འདི་གིས་སྐྱེད་འདི་དུས་ལས་ཡལ་མི་ལུ་སྤྲོདཔ་ཨིན།\n"
"\n"
"@settlement འདི་ སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།  @maturity འདི་  སྲུང་སྐྱོབ་དུས་ལས་ཡལ་བའི་"
"ཚེས་གྲངས་ཨིན།  @issue འདི་ སྲུང་སྐྱོབ་སྤྲོད་པའི་ཚེས་གྲངས་ཨིན།  @rate འདི་སྲུང་སྐྱོབ་ཕབ་ཆའི་ཚེས་གྲངས་"
"ཨིན། @yield འདི་  སྲུང་སྐྱོབ་ཀྱི་ལོ་བསྟར་ཐོན་འབྲས་ཨིན།@basis འདི་  ཁྱོད་ཀཡིས་ལག་ལེན་འཐབ་དགོ་པའི་  "
"ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་འདི་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @settlement ཚེས་གྲངས་ཡང་ན་ @maturity ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, PRICEMAT དེ་"
"གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis < 0 ཡང་ན་ @basis > 4ཨིན་པ་ཅིན་, PRICEMAT དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* If @settlement ཚེས་གྲངས་འདི་ @maturity ཚེས་གྲངས་ཀྱི་ཤུལ་ལས་ཨིན་པ་ཅིན་  ཡང་ན་ དེ་ཚུ་གཅིག་"
"པ་ཨིན་པ་ཅིན་ PRICEMATདེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PRICEDISC"

#: ../plugins/fn-financial/functions.c:741
msgid ""
"@FUNCTION=DISC\n"
"@SYNTAX=DISC(settlement,maturity,par,redemption[,basis])\n"
"@DESCRIPTION=DISC calculates and returns the discount rate for a security. "
"@settlement is the settlement date of the security.\n"
"\n"
"@maturity is the maturity date of the security.  @par is the price per $100 "
"face value of the security.  @redemption is the redemption value per $100 "
"face value of the security.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @settlement date or @maturity date is not valid, DISC returns #NUM! "
"error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis < 0 or @basis > 4, DISC returns #NUM! error.\n"
"* If @settlement date is after @maturity date or they are the same, DISC "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=DISC\n"
"@SYNTAX=DISC(settlement,maturity,par,redemption[,basis])\n"
"@DESCRIPTION=DISC དེ་གིས་  སྲུང་སྐྱོབ་ཀྱི་ཕབ་ཆའི་ཚད་འདི་རྩིས་བཏོན་ནི་དང་སླར་ལོག་འབདཝ་"
"ཨིན།@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།\n"
"\n"
"@maturity འདི་ སྲུང་སྐྱོབ་དུས་ལས་ཡལ་བའི་ཚེས་གྲངས་ཨིན།  @par འདི་ སྲུང་སྐྱོབ་གནས་གོང་གི་མ་གོང་ "
"$100 རེ་རེ་གི་གོང་ཚད་འདི་ཨིན།@redemption འདི་  སྲུང་སྐྱོབ་ཀྱི་ མ་གོང་$100 རེ་རེ་གི་བུན་ཚབ་གནས་"
"གོང་འདི་ཨིན།\n"
"\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་འདི་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་30/360\n"
"\n"
"* If @settlement ཚེས་གྲངས་ཡང་ན་ @maturity ཚེས་གྲངས་འདི་ནུས་ཅན་མེད་པ་ཅིན་, DISC དེ་གིས་ "
"#NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis < 0 ཡང་ན་ @basis > 4ཨིན་པ་ཅི་ན, DISC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @settlement ཚེས་གྲངས་འདི་ @maturity ཚེས་གྲངས་ཀྱི་ཤུལ་ལས་ཨིན་པ་ཅིན་ཡང་ན་གཅིག་པ་ཨིན་པ་"
"ཅིན་, DISC དེ་གིས་ #NUM!འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:797
msgid ""
"@FUNCTION=EFFECT\n"
"@SYNTAX=EFFECT(r,nper)\n"
"@DESCRIPTION=EFFECT calculates the effective interest rate from a given "
"nominal rate.\n"
"\n"
"Effective interest rate is calculated using this formula:\n"
"\n"
"    (1 + @r / @nper) ^ @nper - 1\n"
"\n"
"where:\n"
"\n"
"@r = nominal interest rate (stated in yearly terms)\n"
"@nper = number of periods used for compounding\n"
"\n"
"* If @rate < 0, EFFECT returns #NUM! error.\n"
"* If @nper <= 0, EFFECT returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"For example credit cards will list an APR (annual percentage rate) which is "
"a nominal interest rate.\n"
"For example if you wanted to find out how much you are actually paying "
"interest on your credit card that states an APR of 19% that is compounded "
"monthly you would type in:\n"
"=EFFECT(.19,12) and you would get .2075 or 20.75%. That is the effective "
"percentage you will pay on your loan.\n"
"@SEEALSO=NOMINAL"
msgstr ""
"@FUNCTION=EFFECT\n"
"@SYNTAX=EFFECT(r,nper)\n"
"@DESCRIPTION=EFFECT དེ་གིས་  ཚད་ཆུང་བ་ལས་ནུས་ཅན་གྱི་སྐྱེད་ཚད་འདི་རྩིས་བཏོན་ནི་དང་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"ནུས་ཅན་གྱི་སྐྱེད་ཚད་འདི་མན་ངག་འདི་ལག་ལེན་འཐབ་སྟེ་རྩིས་བཏོནམ་ཨིན།:\n"
"\n"
"    (1 + @r / @nper) ^ @nper - 1\n"
"\n"
"དེ་ཡང་:\n"
"\n"
"@r = སྐྱེད་ཚད་ཆུང་བ་འདི་ (ལོ་གྲངས་གནས་ལུགས་)\n"
"@nper = སྐྱེད་ཅུང་གི་དོན་ལུ་ལག་ལེན་འཐབ་པའི་དུས་ཡུན་གྱི་ཨང་གྲངས་\n"
"\n"
"* If @rate < 0, EFFECT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @nper <= 0, EFFECT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"དཔེར་ན་  དངུལ་ཚབ་ཤོག་བྱང་དེ་གིས་ སྐྱེད་ཚད་ཆུང་བ་ཨིན་པའི་  ཨེ་པི་ཨར་ (ལོ་བསྟར་བརྒྱ་ཆའི་ཚད་) འདི་ཐོ་"
"ཡིག་བརྐྱབ་ཨིན།\n"
"དཔེར་ན་  ཁྱོད་ཀྱིས་ཁྱོད་རའི་དངུལ་ཚབ་ཤོག་བྱང་གུ་  ཁྱོད་ཀྱིས་ག་དེམ་ཅིག་སྤྲོད་དོ་ག་ལྟ་དགོ་མི་དེ་གིས་ 19% གི་"
"ཨེ་པི་ཨར་འདི་སྟོནམ་ཨིནམ་དང་  དེ་ཡང་ཁྱོད་ཀྱིས་ཟླཝ་གྲངས་འདུས་གྲུབ་འབད་ཡོདཔ་འདི་ཨིན།:\n"
"=EFFECT(.19,12) དང་  ཁྱོད་ཀྱིས་ .2075 or 20.75% ཐོབ་ཨིན།  འདི་ ཁྱོད་རའི་སྐྱུན་འགྲུལ་གུ་སྤྲོད་ནིའི་"
"ནུས་ཅན་གྱི་བརྒྱ་ཆ་ཨིན།\n"
"@SEEALSO=NOMINAL"

#: ../plugins/fn-financial/functions.c:847
msgid ""
"@FUNCTION=NOMINAL\n"
"@SYNTAX=NOMINAL(r,nper)\n"
"@DESCRIPTION=NOMINAL calculates the nominal interest rate from a given "
"effective rate.\n"
"\n"
"Nominal interest rate is given by a formula:\n"
"\n"
"@nper * (( 1 + @r ) ^ (1 / @nper) - 1 )\n"
"where:\n"
"\n"
"@r = effective interest rate\n"
"@nper = number of periods used for compounding\n"
"\n"
"* If @rate < 0, NOMINAL returns #NUM! error.\n"
"* If @nper <= 0, NOMINAL returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=EFFECT"
msgstr ""
"@FUNCTION=NOMINAL\n"
"@SYNTAX=NOMINAL(r,nper)\n"
"@DESCRIPTION=NOMINAL དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་ནུས་ཚད་ལས་ ཆུང་བའི་སྐྱེད་འདི་རྩིས་བརྐྱབ་ཨིན།\n"
"\n"
"ཆུང་བའི་སྐྱེད་ཚད་འདི་མན་ངག་གིས་སྦེ་བྱིན་ཡོད།:\n"
"\n"
"@nper * (( 1 + @r ) ^ (1 / @nper) - 1 )\n"
"དེ་ཡང་:\n"
"\n"
"@r = ནུས་ཅན་སྐྱེད་ཚད་\n"
"@nper = སྐྱེད་ཅུང་བཏག་ནིའི་དོན་ལུ་ལག་ལེན་འཐབ་པའི་དུས་ཡུན་གྱི་ཨང་གྲངས་ཚུ།\n"
"\n"
"* If @rate < 0, NOMINAL དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @nper <= 0, NOMINAL དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=EFFECT"

#: ../plugins/fn-financial/functions.c:888
msgid ""
"@FUNCTION=ISPMT\n"
"@SYNTAX=ISPMT(rate,per,nper,pv)\n"
"@DESCRIPTION=ISPMT function returns the interest paid on a given period.\n"
"\n"
"* If @per < 1 or @per > @nper, ISPMT returns #NUM! error. \n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV"
msgstr ""
"@FUNCTION=ISPMT\n"
"@SYNTAX=ISPMT(rate,per,nper,pv)\n"
"@DESCRIPTION=ISPMT ལཱ་འགན་དེ་གིས་  དུས་ཡུན་བྱིན་ཡོད་མི་གུ་སྤྲོད་པའི་སྐྱེད་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @per < 1 ཡང་ན་ @per > @nperཨིན་པ་ཅིན་, ISPMT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན། \n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV"

#: ../plugins/fn-financial/functions.c:928
msgid ""
"@FUNCTION=DB\n"
"@SYNTAX=DB(cost,salvage,life,period[,month])\n"
"@DESCRIPTION=DB calculates the depreciation of an asset for a given period "
"using the fixed-declining balance method.  @cost is the initial value of the "
"asset.  @salvage is the value after the depreciation.\n"
"\n"
"@life is the number of periods overall.  @period is the period for which you "
"want the depreciation to be calculated.  @month is the number of months in "
"the first year of depreciation.\n"
"\n"
"* If @month is omitted, it is assumed to be 12.\n"
"* If @cost = 0, DB returns #NUM! error.\n"
"* If @life <= 0, DB returns #NUM! error.\n"
"* If @salvage / @cost < 0, DB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DDB,SLN,SYD"
msgstr ""
"@FUNCTION=DB\n"
"@SYNTAX=DB(cost,salvage,life,period[,month])\n"
"@DESCRIPTION=DB དེ་གིས་ གཏན་བཟོས་སྦེ་ཕབ་ཆའི་ཚད་སྙོམས་ཐབས་ལམ་འདི་ལག་ལེན་འཐབ་སྟེ་  བྱིན་ཡོད་"
"པའི་དུས་ཡུན་གྱི་དོན་ལུ་ བདོག་གཏད་ཀྱི་གནས་གོང་འབབ་མི་འདི་རྩིས་བཏོནམ་ཨིན།  @cost འདི་བདོག་གཏད་ཀྱི་"
"འགོ་ཐོག་གནས་གོང་ཨིན།  @salvage འདི་གནས་གོང་འབབ་པའི་ཤུལ་ལས་ཀྱི་གནས་གོང་ཨིན།\n"
"\n"
"@life འདི་  དུས་ཡུན་ཡོངས་ཀྱི་ཨང་གྲངས་ཨིན།  @period འདི་  ཁྱོད་ཀྱིས་གནས་གོང་འབབ་ཡོད་མི་འདི་རྩིས་"
"བཏོན་དགོཔ་འདི་ཨིན།  @month འདི་ ལོ་དང་པའི་གནས་གོང་འབབ་པའི་ཟླཝ་གི་ཨང་གྲངས་ཨིན།\n"
"\n"
"* If @month འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ ༡༢་སྦེ་བཞགཔ་ཨིན།\n"
"* If @cost = 0ཨིན་པ་ཅིན་, DB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @life <= 0ཨིན་པ་ཅིན་, DB དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @salvage / @cost < 0ཨིན་པ་ཅིན་, DB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DDB,SLN,SYD"

#: ../plugins/fn-financial/functions.c:992
msgid ""
"@FUNCTION=DDB\n"
"@SYNTAX=DDB(cost,salvage,life,period[,factor])\n"
"@DESCRIPTION=DDB returns the depreciation of an asset for a given period "
"using the double-declining balance method or some other similar method you "
"specify.\n"
"\n"
"@cost is the initial value of the asset, @salvage is the value after the "
"last period, @life is the number of periods, @period is the period for which "
"you want the depreciation to be calculated, and @factor is the factor at "
"which the balance declines.\n"
"\n"
"* If @factor is omitted, it is assumed to be two (double-declining balance "
"method).\n"
"* If @life <= 0, DDB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=SLN,SYD"
msgstr ""
"@FUNCTION=DDB\n"
"@SYNTAX=DDB(cost,salvage,life,period[,factor])\n"
"@DESCRIPTION=DDB དེ་གིས་ ཕབ་ཆའི་ཚད་སྙོམས་ཐབས་ལམ་ཡང་ན་ཁྱོད་ཀྱིས་གསལ་བཀོད་འབད་ཡོད་པའི་ཐབས་"
"ལམ་གཅིག་པ་འདི་ལག་ལནེ་འཐབ་ཐོག་ལས་ བྱིན་ཡོད་པའི་དུས་ཡུན་ཅིག་གི་དོན་ལུ་  བདོག་གཏད་ཅིག་གི་གོང་འབབ་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@cost འདི་  བདོག་གཏད་ཀྱི་འགོ་ཐོག་གནས་གོང་འདི་ཨིན་, @salvage འདི་  དུས་ཡུན་མཇུག་གི་ཤུལ་ལས་"
"གནས་གོང་འདི་ཨིན་, @life འདི་  དུས་ཡུན་གྱི་ཨང་གྲངས་ཨིན་, @period འདི་  ཁྱོད་ཀྱིས་རྩིས་དགོ་པའི་གོང་"
"འབབ་ཀྱི་དོན་ལུ་དུས་ཡུན་འདི་ཨིནམ་དང་@factor འདི་  ཚད་སྙོམས་ཕབ་ཆ་འབད་མིའི་བགོ་གྲངས་ཨིན།\n"
"\n"
"* If @factor སྐྱུར་བཞག་པ་ཅིན་, གཉིས་སྦེ་བཞགཔ་ཨིན་ (ཕབ་ཆ་གཉིས་ལྡན་ཚད་སྙོམས་ཐབས་ལམ་).\n"
"* If @life <= 0, DDB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=SLN,SYD"

#: ../plugins/fn-financial/functions.c:1048
msgid ""
"@FUNCTION=SLN\n"
"@SYNTAX=SLN(cost,salvage_value,life)\n"
"@DESCRIPTION=SLN function will determine the straight line depreciation of "
"an asset for a single period.\n"
"\n"
"The formula is:\n"
"\n"
"Depreciation expense = ( @cost - @salvage_value ) / @life\n"
"\n"
"@cost is the cost of an asset when acquired (market value).\n"
"@salvage_value is the amount you get when asset is sold at the end of the "
"asset's useful life.\n"
"@life is the anticipated life of an asset.\n"
"\n"
"* If @life <= 0, SLN returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"For example, lets suppose your company purchases a new machine for $10,000, "
"which has a salvage value of $700 and will have a useful life of 10 years. "
"The SLN yearly depreciation is computed as follows:\n"
"=SLN(10000, 700, 10)\n"
"This will return the yearly depreciation figure of $930.\n"
"@SEEALSO=SYD"
msgstr ""
"@FUNCTION=SLN\n"
"@SYNTAX=SLN(cost,salvage_value,life)\n"
"@DESCRIPTION=SLN ལཱ་འགན་དེ་གིས་  དུས་ཡུན་རྐྱང་པ་ཅགི་གི་དོན་ལུ་   བདོག་གཏད་ཅིག་གི་གྲལ་ཐིག་ཕྲང་"
"པའི་གོང་ཐང་ཆག་པ་འདི་གཞན་འབེབས་བཟོཝ་ཨིན།\n"
"\n"
"མན་ངག་འདི:\n"
"\n"
"གོང་ཐང་ཆག་པའི་ཟད་གྲོ་ = ( @cost - @salvage_value ) / @life\n"
"\n"
"@cost འདི་  (ཚོང་འབྲེལ་གནས་གོང་)འཐོབ་ད་བདོག་གཏད་ཅིག་གི་རིན་ཨིན།\n"
"@salvage_value འདི་  བདོག་གཏད་འདི་  བདོག་གཏད་ཀྱི་ཁག་ཆེ་བའི་ཚེ་མཇུག་ལུ་བཙོངམ་ད་ ཁྱོད་ཀྱིས་ཐོབ་"
"པའི་དངུལ་བསྡོམ་འདི་ཨིན།\n"
"@life འདི་  བདོག་གཏད་ཀྱི་ཚེ་ཡུན།\n"
"\n"
"* If @life <= 0, SLN དེ་གིས་ #NUM! འཛོལ་བ་འིདསླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"དཔེར་ན་,  ཁྱོད་རའི་ཚོང་སྡེ་དེ་གིས་$10,000 སྦེ་འཕྲུལ་ཆས་གསརཔ་གཅིག་ཉོ་ཡོདཔ་སྦེ་ཆ་བཞག་གེ་, དེ་ལུ་ཉེན་"
"སྐྱོབ་གནས་གོང་ $700 ཡོདཔ་དང་ དེ་ལུ་ཁག་ཆེ་བའི་ཚེ་ཡུན་ ལོ་༡༠་ཡོདཔ།  ཨེསི་ཨེལ་ཨེན་ལོ་བསྟར་གོང་ཐང་ཆག་"
"པ་འདི་ འོག་ལུ་བཀོད་དོ་བཟུམ་གློག་རིག་བཀོད་ཡོདཔ:\n"
"=SLN(10000, 700, 10)\n"
"འདི་གིས་ལོ་བསྟར་ཨང་ཡིག་ $930 འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"@SEEALSO=SYD"

#: ../plugins/fn-financial/functions.c:1101
msgid ""
"@FUNCTION=SYD\n"
"@SYNTAX=SYD(cost,salvage_value,life,period)\n"
"@DESCRIPTION=SYD function calculates the sum-of-years digits depreciation "
"for an asset based on its cost, salvage value, anticipated life and a "
"particular period. This method accelerates the rate of the depreciation, so "
"that more depreciation expense occurs in earlier periods than in later ones. "
"The depreciable cost is the actual cost minus the salvage value. The useful "
"life is the number of periods (typically years) over which the asset is "
"depreciated.\n"
"\n"
"The Formula used for sum-of-years digits depreciation is:\n"
"\n"
"Depreciation expense =\n"
"\n"
"\t ( @cost - @salvage_value ) * (@life - @period + 1) * 2 / @life * (@life + "
"1).\n"
"\n"
"@cost is the cost of an asset when acquired (market value).\n"
"@salvage_value is the amount you get when asset sold at the end of its "
"useful life.\n"
"@life is the anticipated life of an asset.\n"
"@period is the period for which we need the expense.\n"
"\n"
"* If @life <= 0, SYD returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"For example say a company purchases a new computer for $5000 which has a "
"salvage value of $200, and a useful life of five years. We would use the "
"following to calculate the second year's depreciation using the SYD method:\n"
"=SYD(5000, 200, 5, 2) which returns 1,280.00.\n"
"@SEEALSO=SLN"
msgstr ""
"@FUNCTION=SYD\n"
"@SYNTAX=SYD(cost,salvage_value,life,period)\n"
"@DESCRIPTION=SYD ལས་འགན་འདི་གིས་བདོག་གཏད་གཞི་བཞག་གི་དོན་ལུ་ དེའི་རིན་  ཉེན་སྐྱོབ་  ཚེ་ཡུན་དང་"
"དུས་ཡུན་བྱེ་བྲག་གུ་གཞི་བཞག་སྟེ་  ལོ་བསྡོམ་ཨང་ཡིག་གོང་འབབ་འདི་རྩིས་བཏོནམ་ཨིན།   ཐབས་ལམ་འདི་གིས་གོང་"
"འབབ་ཀྱི་ཚད་འདི་ཡར་སེང་འབདཝ་ཨིན་, དེ་འབད་བ་ཅིན་  གོང་འབབ་ཟད་འགྲོ་  ཤུལ་མའི་དུས་ཡུན་ལས་ཧེ་མམ་"
"འདི་ནང་བྱུངམ་ཨིན།  གོང་འབབ་བཏུབ་པའི་རིན་འདི་  ཉེན་སྐྱོབ་གནས་གོང་འདི་ཕབ་སྟེ་རིན་ངོ་མ་འདི་ཨིན།  ཚེ་"
"ཁག་ཆེ་མི་འདི་  བདོག་གཏད་གོང་འབབ་འབད་ཡོད་པའི་  དུས་ཡུན་ (འཁྲིལ་བ་མེད་པའི་ལོ་) ཚུ་གི་ཨང་གྲངས་འདི་"
"ཨིན།\n"
"\n"
"ལོའི་བསྡོམ་གྱི་ཨང་ཡིག་གོང་འབབ་ཀྱི་དོན་ལུ་ལག་ལེན་འཐབ་ཡོད་པའི་མན་ངག་འདི་:\n"
"\n"
"གོང་འབབ་ཀྱི་ཟད་འགྲོ་ =\n"
"\n"
"\t ( @cost - @salvage_value ) * (@life - @period + 1) * 2 / @life * (@life + "
"1).\n"
"\n"
"@cost འདི་  འཐོབ་ཡོད་པའི་ (ཁྲོམ་གྱི་གནས་གོང་) བདོག་གཏད་ཅིག་གི་རིན་ཨིན།\n"
"@salvage_value འདི་  བདོག་གཏད་འདི་དེའི་ཁག་ཆེ་བའི་ཚེ་གི་མཇུག་ལུ་འཐོབ་ད་གི་དངུལ་བསྡོམ་འདི་ཨིན།\n"
"@life འདི་  བདོག་གཏད་ཀྱི་ཚེ་ཡུན་འདི་ཨིན།\n"
"@period འདི་  ང་བཅས་ལུ་དགོ་པའི་ཟད་འགྲོ་གི་དོན་ལུ་དུས་ཡུན་འདི་ཨིན།\n"
"\n"
"* If @life <= 0, SYD དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"དཔེར་ན་  ཚོང་སྡེ་དེ་གིས་གློག་རིག་གསརཔ་གི་དོན་ལུ་ $5000 ཉོ་ཚོང་འཐབ་ནུག་  དེ་ཡང་  $200 གི་ཉེན་སྐྱོབ་"
"གནས་གོང་ཡོད་མི་དང་, ལོ་ལྔའི་གལ་ཅན་གྱི་ཚེ།  ང་བཅས་ཚུ་གིས་འོག་གི་འདི་  ཨེསི་ཝའི་ཌི་ཐབས་ལམ་ལག་ལེན་"
"འཐབ་སྟེ་  ལོ་གཉིས་པའི་གོང་འབབ་འདི་རྩིས་བཏོན་ནི་ལུ་ལག་ལེན་འཐབ་ནི་ཨིན།:\n"
"=SYD(5000, 200, 5, 2) དེ་ཡང་ 1,280.00 སླར་ལོག་འབདཝ་ཨིན།\n"
"@SEEALSO=SLN"

#: ../plugins/fn-financial/functions.c:1162
msgid ""
"@FUNCTION=DOLLARDE\n"
"@SYNTAX=DOLLARDE(fractional_dollar,fraction)\n"
"@DESCRIPTION=DOLLARDE converts a dollar price expressed as a fraction into a "
"dollar price expressed as a decimal number.\n"
"\n"
"@fractional_dollar is the fractional number to be converted. @fraction is "
"the denominator of the fraction.\n"
"\n"
"* If @fraction is non-integer it is truncated.\n"
"* If @fraction <= 0, DOLLARDE returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARFR"
msgstr ""
"@FUNCTION=DOLLARDE\n"
"@SYNTAX=DOLLARDE(fractional_dollar,fraction)\n"
"@DESCRIPTION=DOLLARDE དེ་གིས་  བགོ་གྲངས་སྦེ་གསལ་སྟོན་འབད་དེ་ཡོད་མི་  ཌོ་ལར་གོང་ཚད་འདི་  བཅུ་"
"ཚག་ཨང་གྲངས་ཅིག་སྦེ་གསལ་སྟོན་འབད་མིའི་ཌོ་ལར་གོང་ཚད་ནང་ལུ་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"@fractional_dollar འདི་  གཞི་བསྒྱུར་འབད་ནི་ཨིན་པའི་བགོ་གྲངས་ཨང་གྲངས་ཨིན། @fraction འདི་ "
"བགོ་གྲངས་ཀྱི་གཞི་གྲངས་ཨིན།\n"
"\n"
"* If @fraction འདི་ ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་འདི་ ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* If @fraction <= 0ཨིན་པ་ཅིན་, DOLLARDE དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARFR"

#: ../plugins/fn-financial/functions.c:1221
msgid ""
"@FUNCTION=DOLLARFR\n"
"@SYNTAX=DOLLARFR(decimal_dollar,fraction)\n"
"@DESCRIPTION=DOLLARFR converts a decimal dollar price into a dollar price "
"expressed as a fraction.\n"
"\n"
"* If @fraction is non-integer it is truncated.\n"
"* If @fraction <= 0, DOLLARFR returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARDE"
msgstr ""
"@FUNCTION=DOLLARFR\n"
"@SYNTAX=DOLLARFR(decimal_dollar,fraction)\n"
"@DESCRIPTION=DOLLARFR དེ་གིས་  བཅུ་ཚག་ཌོ་ལར་གོང་ཚད་འདི་  བགོ་གྲངས་སྦེ་གསལ་སྟོན་འབད་དེ་ཡོད་"
"མི་ཌོ་ལར་གོང་ཚད་ནང་ལུ་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"* If @fraction འདི་ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་ འདི་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* If @fraction <= 0ཨིན་པ་ཅིན་, DOLLARFR དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DOLLARDE"

#: ../plugins/fn-financial/functions.c:1275
msgid ""
"@FUNCTION=MIRR\n"
"@SYNTAX=MIRR(values,finance_rate,reinvest_rate)\n"
"@DESCRIPTION=MIRR function returns the modified internal rate of return for "
"a given periodic cash flow. \n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NPV"
msgstr ""
"@FUNCTION=MIRR\n"
"@SYNTAX=MIRR(values,finance_rate,reinvest_rate)\n"
"@DESCRIPTION=MIRR ལཱ་འགན་དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་དུས་ཡུན་དངུལ་གྱི་འབབ་རྒྱུན་གྱི་དོན་ལུ་  སླར་ལོག་"
"གི་ལེགས་བཅོས་འབད་བའི་ནང་འཁོད་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན། \n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NPV"

#: ../plugins/fn-financial/functions.c:1338
msgid ""
"@FUNCTION=TBILLEQ\n"
"@SYNTAX=TBILLEQ(settlement,maturity,discount)\n"
"@DESCRIPTION=TBILLEQ function returns the bond-yield equivalent (BEY) for a "
"treasury bill.  TBILLEQ is equivalent to\n"
"\n"
"\t(365 * @discount) / (360 - @discount * DSM),\n"
"\n"
"where DSM is the days between @settlement and @maturity.\n"
"\n"
"* If @settlement is after @maturity or the @maturity is set to over one year "
"later than the @settlement, TBILLEQ returns #NUM! error.\n"
"* If @discount is negative, TBILLEQ returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLPRICE,TBILLYIELD"
msgstr ""
"@FUNCTION=TBILLEQ\n"
"@SYNTAX=TBILLEQ(གཞི་བཙུགས་,དུས་ཡུན་ཚང་བ་,ཕབ་ཆ)\n"
"@DESCRIPTION=TBILLEQ ལཱ་འགན་དེ་གིས་  གཞུང་གི་དངུལ་འཛིན་ཅིག་གི་དོན་ལུ་  བཱོནཌི་ཐོན་འབྲས་འདྲ་"
"མཉམ་(BEY)འདི་སླར་ལོག་འབདཝ་ཨིན།  TBILLEQ འདི་འདྲ་མཉམ་\n"
"\n"
"\t(365 * @discount) / (360 - @discount * DSM),\n"
"\n"
"ཌི་ཨེམ་ཨེསི་འདི་@settlement དང་ @maturityབར་ནའི་ཉིནམ་ཨིན།\n"
"\n"
"* If @settlement འདི་ @maturity ཡང་ན་ @maturity འདི་ལོ་གཅིག་གི་ཤུལ་ལས་@settlement "
"ལས་མཇུག་བསྡུ་ནི་ཨིན་པ་ཅིན་, TBILLEQ དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @discount འདི་མེད་ཆ་ཨིན་པ་ཅིན་, TBILLEQ དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLPRICE,TBILLYIELD"

#: ../plugins/fn-financial/functions.c:1389
msgid ""
"@FUNCTION=TBILLPRICE\n"
"@SYNTAX=TBILLPRICE(settlement,maturity,discount)\n"
"@DESCRIPTION=TBILLPRICE function returns the price per $100 value for a "
"treasury bill where @settlement is the settlement date and @maturity is the "
"maturity date of the bill.  @discount is the treasury bill's discount rate.\n"
"\n"
"* If @settlement is after @maturity or the @maturity is set to over one year "
"later than the @settlement, TBILLPRICE returns #NUM! error.\n"
"* If @discount is negative, TBILLPRICE returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLEQ,TBILLYIELD"
msgstr ""
"@FUNCTION=TBILLPRICE\n"
"@SYNTAX=TBILLPRICE(གཞི་བཙུགས་,དུས་ཡུན་ཚང་བ,ཕབ་ཆ)\n"
"@DESCRIPTION=TBILLPRICE ལཱ་འགན་དེག་གིས་  གཞུང་གི་དངུལ་འཛིན་ཅིག་གི་དོན་ལུ་  $100 གནས་གོང་"
"རེ་ལུ་གོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ @settlement འདི་   གཞི་བཙུགས་ཚེས་གྲངས་དང་ "
"@maturity འདི་ གཞུང་གི་དངུལ་འཛིན་གྱི་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས། @discount འདི་གཞུང་གི་དངུལ་འཛིན་"
"གྱི་ཕབ་ཆའི་ཚད་ཨིན།\n"
"\n"
"* If @settlement འདི་ @maturity ཤུལ་ལས་  ཡང་ན་ @maturity འདི་ @settlement ལས་ལོ་"
"གཅིག་ཤུལ་མ་གཞི་སྒྲིག་འབད་དེ་ཡོད་པ་ཅིན་, TBILLPRICE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @discount འདི་མེད་ཆ་ཨིན་པ་ཅིན་, TBILLPRICE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLEQ,TBILLYIELD"

#: ../plugins/fn-financial/functions.c:1435
msgid ""
"@FUNCTION=TBILLYIELD\n"
"@SYNTAX=TBILLYIELD(settlement,maturity,pr)\n"
"@DESCRIPTION=TBILLYIELD function returns the yield for a treasury bill. "
"@settlement is the settlement date and @maturity is the maturity date of the "
"bill.  @discount is the treasury bill's discount rate.\n"
"\n"
"* If @settlement is after @maturity or the @maturity is set to over one year "
"later than the @settlement, TBILLYIELD returns #NUM! error.\n"
"* If @pr is negative, TBILLYIELD returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLEQ,TBILLPRICE"
msgstr ""
"@FUNCTION=TBILLYIELD\n"
"@SYNTAX=TBILLYIELD(གཞི་བཙུགས་,དུས་ཡུན་ཚང་བ་,pr)\n"
"@DESCRIPTION=TBILLYIELD ལཱ་འགན་འདི་གིས་  གཞིང་གི་དངུལ་འཛིན་ཅིག་གི་དོན་ལུ་ཐོན་འབྲས་སླར་ལོག་"
"འབདཝ་ཨིན། @settlement འདི་  གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིནམ་དང་ @maturity འདི་གཞུང་གི་དངུལ་"
"འཛིན་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་ཨིན།  @discount འདི་གཞུང་གི་དངུལ་འཛིན་ཕབ་ཆའི་ཚད\n"
"\n"
"* If @settlement འདི་ @maturity ཤུལ་ལས་ཡང་ན་ @maturity འདི་   @settlement གི་ཤུལ་"
"ལས་གཞི་སྒྲིག་འབད་བ་ཅིན་, TBILLYIELD དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @pr འདི་མེད་ཆ་ཨིན་པ་ཅིན་, TBILLYIELD དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TBILLEQ,TBILLPRICE"

#: ../plugins/fn-financial/functions.c:1481
msgid ""
"@FUNCTION=RATE\n"
"@SYNTAX=RATE(nper,pmt,pv[,fv,type,guess])\n"
"@DESCRIPTION=RATE calculates the rate of an investment.\n"
"\n"
"* If @pmt is ommitted it defaults to 0\n"
"* If @nper <= 0, RATE returns #NUM! error.\n"
"* If @type != 0 and @type != 1, RATE returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV,FV"
msgstr ""
"@FUNCTION=RATE\n"
"@SYNTAX=RATE(nper,pmt,pv[,fv,type,guess])\n"
"@DESCRIPTION=RATE དེ་གིས་  མ་རྩ་བཙུགས་པའི་ཚད་རྩིས་བརྐྱབ་ཨིན།\n"
"\n"
"* If @pmt འདི་སྐྱུར་བཞག་པ་ཨིན་ དེ་གིས་ ༠་ ལུ་སྔོན་སྒྲིག་འབདཝ་ཨིན།\n"
"* If @nper <= 0 ཨིན་པ་ཅིན་, RATE དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @type != 0 དང་ @type != 1 ཨིན་པ་ཅིན་, RATE དེ་གིས་#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV,FV"

#: ../plugins/fn-financial/functions.c:1597
msgid ""
"@FUNCTION=IRR\n"
"@SYNTAX=IRR(values[,guess])\n"
"@DESCRIPTION=IRR calculates and returns the internal rate of return of an "
"investment.  This function is closely related to the net present value "
"function (NPV).  The IRR is the interest rate for a series of cash flows "
"where the net preset value is zero.\n"
"\n"
"@values contains the series of cash flows generated by the investment.  The "
"payments should occur at regular intervals.  The optional @guess is the "
"initial value used in calculating the IRR.  You do not have to use that, it "
"is only provided for the Excel compatibility.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1:A8 contain the numbers -32432, 5324, 7432, "
"9332, 12324, 4334, 1235, -3422.  Then\n"
"IRR(A1:A8) returns 0.04375. \n"
"@SEEALSO=FV,NPV,PV"
msgstr ""
"@FUNCTION=IRR\n"
"@SYNTAX=IRR(values[,guess])\n"
"@DESCRIPTION=IRR དེ་གིས་ཟད་གྲོ་ཅིག་གི་སླར་ལོག་གི་ནང་འཁོད་ཚད་སླར་ལོག་འབད་ནི་དང་རྩིས་བརྐྱབ་ཨིན།  "
"ལཱ་འགན་འདི་ངོ་མའི་གནས་གོང་ལཱ་འགན་ (NPV)ལུ་ འབྲེལ་བ་ཡོདཔ་ཨིན།  ཨའི་ཨར་ཨར་འདི་  ངོ་མའི་གནས་གོང་"
"འདི་ཀླད་ཀོར་ཨིན་པའི་ དངུལ་རྒྱུན་གྱི་རྒྱུན་རིམ་དོན་ལུ་སྐྱེད་ཚད་འདི་ཨིན།\n"
"\n"
"@values དེ་གིས་  ཟད་གྲོ་གིས་བཟོ་བཏོན་འབད་ཡོད་པའི་དངུལ་རྒྱུན་གྱི་རྒྱུན་རིམ་འདི་ཡོདཔ་ཨིན།  གླ་དངུལ་འདི་"
"དུས་རྒྱུན་བར་མཚམས་ལུ་བྱུང་དགོཔ་ཨིན།  གདམ་ཁ་ཅན་@guess འདི་  ཨའི་ཨར་ཨར་རྩིས་བཏོན་ནི་ལུ་ལག་ལེན་"
"འཐབ་མི་འགོ་ཐོག་གནས་གོང་ཨིན།  ཁྱོད་ཀྱིས་འདི་ལག་ལེན་འཐབ་མི་དགོ་, འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་གྱི་དོན་"
"ལུ་བྱིན་ཡོདཔ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་  ནང་ཐིག་ A1:A8 དེ་གིས་ཨང་གྲངས་ -32432, 5324, 7432, 9332, 12324, "
"4334, 1235, -3422 ཡོདཔ་ཨིན་ཟེར་བཞག་གེ། དེ་ལས་\n"
"IRR(A1:A8) དེ་གིས་ 0.04375 སླར་ལོག་འབདཝ་ཨིན། \n"
"@SEEALSO=FV,NPV,PV"

#: ../plugins/fn-financial/functions.c:1731
msgid ""
"@FUNCTION=PV\n"
"@SYNTAX=PV(rate,nper,pmt[,fv,type])\n"
"@DESCRIPTION=PV calculates the present value of an investment. @rate is the "
"periodic interest rate, @nper is the number of periods used for compounding. "
"@pmt is the payment made each period, @fv is the future value and @type is "
"when the payment is made.\n"
"\n"
"* If @type = 1 then the payment is made at the beginning of the period.\n"
"* If @type = 0 (or omitted) it is made at the end of each period.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=FV"
msgstr ""
"@FUNCTION=PV\n"
"@SYNTAX=PV(rate,nper,pmt[,fv,type])\n"
"@DESCRIPTION=PV དེ་གིས་  ཟད་གྲོ་གི་ད་ལྟོའི་གནས་གོང་འདི་རྩིས་སྟོནམ་ཨིན། @rate འདི་  དུས་ཡུན་སྐྱེད་"
"ཚད་ཨིན, @nper འདི་ སྐྱེད་ཅུང་འབད་ནིའི་དོན་ལུ་ལག་ལེན་འཐབ་པའི་དུས་ཡུན་ཚུ་གི་ཨང་གྲངས་ཨིན། @pmt "
"འདི་  དུས་ཡུན་རེ་རེ་བཟོ་ཡོད་པའི་གླ་དངུལ་ཨིན, @fv འདི་མ་འོངས་པའི་གནས་གོང་དང་ @type འདི་གླ་དངུལ་"
"འདི་བཟོ་ཡོདཔ་ད་ཨིན།\n"
"\n"
"* If @type = 1 ཨིན་པ་ཅིན་  གླ་དངུལ་འདི་དུས་ཡུན་འགོ་བཙུགསཔ་ད་བཟོཝ་ཨིན།\n"
"* If @type = 0 (སྐྱུར་བཞག་པ་)པ་ཅིན་  དེ་དུས་ཡུན་རེ་གི་མཇུག་ལུ་བཟོ་ཡོདཔ་ཨིན།\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=FV"

#: ../plugins/fn-financial/functions.c:1779
msgid ""
"@FUNCTION=NPV\n"
"@SYNTAX=NPV(rate,v1,v2,...)\n"
"@DESCRIPTION=NPV calculates the net present value of an investment "
"generating periodic payments.  @rate is the periodic interest rate and @v1, "
"@v2, ... are the periodic payments.  If the schedule of the cash flows are "
"not periodic use the XNPV function. \n"
"@EXAMPLES=\n"
"NPV(0.17,-10000,3340,2941,2493,3233,1732,2932) equals 186.30673.\n"
"\n"
"@SEEALSO=PV,XNPV"
msgstr ""
"@FUNCTION=NPV\n"
"@SYNTAX=NPV(rate,v1,v2,...)\n"
"@DESCRIPTION=NPV དེ་གིས་  ཟད་གྲོ་བཟོ་བཏོན་དུས་མཚམས་གླ་དངུལ་ཚུ་གི་ད་ལྟོའི་གནས་གོང་ངེས་ཏིག་འདི་"
"རྩིས་སྟོནམ་ཨིན།   @rate འདི་ དུས་མཚམས་སྐྱེད་ཚད་དང་ @v1, @v2, ... ཚུ་  དུས་མཚམས་གླ་དངུལ་ཚུ་"
"ཨིན།  དངུལ་འབབ་རྒྱུན་ཚུ་དུས་མཚམས་ཁག་ཆེཝ་མེད་པ་ཅིན་  ཨེགསི་ཨེལ་པི་ཝི་ལཱ་འགན།I \n"
"@EXAMPLES=\n"
"NPV(0.17,-10000,3340,2941,2493,3233,1732,2932) equals 186.30673.\n"
"\n"
"@SEEALSO=PV,XNPV"

#: ../plugins/fn-financial/functions.c:1830
msgid ""
"@FUNCTION=XNPV\n"
"@SYNTAX=XNPV(rate,values,dates)\n"
"@DESCRIPTION=XNPV calculates the net present value of an investment.  The "
"schedule of the cash flows is given in @dates array.  The first date "
"indicates the beginning of the payment schedule.  @rate is the interest rate "
"and @values are the payments.\n"
"\n"
"* If @values and @dates contain unequal number of values, XNPV returns the "
"#NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NPV,PV"
msgstr ""
"@FUNCTION=XNPV\n"
"@SYNTAX=XNPV(rate,values,dates)\n"
"@DESCRIPTION=XNPV དེ་གིས་  ཟད་གྲོ་གི་ངེ་ཏིག་ད་ལྟོའི་གནས་གོང་འདི་རྩིས་སྟོནམ་ཨིན།་དངུལ་འབབ་རྒྱུན་གྱི་"
"འཆར་རིམ་འདི་ @dates ཨེ་རེ་ནང་བྱིན་ཡོད།  ཚེས་གྲངས་དང་པ་དེ་གིས་  གླ་དངུལ་འཆར་རིམ་གྱི་འགོ་འདི་བརྡ་"
"སྟོནམ་ཨིན།  @rate འདི་  སྐྱེད་ཚད་དང་@values ཚུ་ གླ་དངུལ་ཨིན།\n"
"\n"
"* If @values དང་@dates དེ་གིས་  གནས་གོང་གི་ཨང་གྲངས་མི་མཉམ་པ་ཡོད་པ་ཅིན་ , XNPV དེ་གིས་ "
"#NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=NPV,PV"

#: ../plugins/fn-financial/functions.c:1892
msgid ""
"@FUNCTION=XIRR\n"
"@SYNTAX=XIRR(values,dates[,guess])\n"
"@DESCRIPTION=XIRR calculates and returns the internal rate of return of an "
"investment that has not necessarily periodic payments.  This function is "
"closely related to the net present value function (NPV and XNPV).  The XIRR "
"is the interest rate for a series of cash flows where the XNPV is zero.\n"
"\n"
"@values contains the series of cash flows generated by the investment.  "
"@dates contains the dates of the payments.  The first date describes the "
"payment day of the initial payment and thus all the other dates should be "
"after this date. The optional @guess is the initial value used in "
"calculating the XIRR.  You do not have to use that, it is only provided for "
"the Excel compatibility.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1:A5 contain the numbers -6000, 2134, 1422, "
"1933, and 1422, and the cells B1:B5 contain the dates \"1999-01-15\", \"1999-"
"04-04\", \"1999-05-09\", \"2000-03-12\", and \"2000-05-1\". Then\n"
"XIRR(A1:A5,B1:B5) returns 0.224838. \n"
"@SEEALSO=IRR,XNPV"
msgstr ""
"@FUNCTION=XIRR\n"
"@SYNTAX=XIRR(values,dates[,guess])\n"
"@DESCRIPTION=XIRR དེ་གིས་  དུས་མཚམས་ཀྱི་གླ་དངུལ་གལ་ཅན་མེད་པའི་  ཟད་འགྲོའི་སླར་ལོག་གི་ནང་འཁོད་"
"ཚད་འདི་རྩིས་བཏོན་ནི་དང་སླར་ལོག་འབདཝ་ཨིན།  ལས་འགན་འདི་ངོ་མའི་གནས་གོང་ལས་འགན་ (NPV དང་ "
"XNPV) ལུ་འབྲེལ་བ་ཡོད་མི་ཨིན།  XIRR འདི་  XNPV འདི་ཀླད་ཀོར་ཨིན་པའི་ དངུལ་འབབ་རྒྱུན་གྱི་ཨང་རིམ་ཅིག་"
"གི་དོན་ལུ་  སྐྱེད་ཚད་ཨིན།\n"
"\n"
"@values དེ་གིས་  ཟད་འགྲོ་གིས་གཏན་འབབ་བཟོ་ཡོད་པའི་དངུལ་གྱི་འབབ་རྒྱུན་ཨང་རིམ་འདི་་ཡོདཔ་ཨིན། "
"@dates དེ་གིས་ གླ་དངུལ་ཚུ་གི་ཚེས་གྲངས་འདི་ཡོདཔ་ཨིན།   ཚེས་གྲངས་དང་པ་དེ་གིས་  འགོ་ཐོག་གླ་དངུལ་གྱི་"
"གླ་དངུལ་ཉིནམ་འདི་འགྲེལ་བཤད་འབདཝ་ཨིནམ་དང་   ཚེས་གྲངས་ཆ་མཉམ་ཚེས་གྲངས་དེའི་ཤུལ་ལུ་འོང་དགོཔ་ཨིན། "
"གདམ་ཁ་ཅན་ @guess འདི་  XIRR རྩིས་བཏོན་མིའི་ནང་ལག་ལེན་འཐབ་པའི་འགོ་ཐོག་གནས་གོང་ཨིན།  ཁྱོད་ཀྱིས་"
"འདི་ལག་ལནེ་འཐབ་མི་དགོ་  འདི་ཨེགསི་སེལ་མཐུན་འགཡུར་ཅན་གྱི་དོན་ལུ་རྐྱངམ་ཅིག་བྱིན་ཏེ་ཡོདཔ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1:A5ཚུ་ལུ་  ཨང་གྲངས་ -6000, 2134, 1422, 1933, དང་ 1422, དང་ནང་ཐིག་ B1:"
"B5ཚུ་གིས་ ཚེས་གྲངས་ \"1999-01-15\", \"1999-04-04\", \"1999-05-09\", \"2000-03-12"
"\", དང་ \"2000-05-1\"ཡོདཔ་སྦེ་བཞག་གེ།  དེ་ལས་\n"
"XIRR(A1:A5,B1:B5) returns 0.224838. \n"
"@SEEALSO=IRR,XNPV"

#: ../plugins/fn-financial/functions.c:2012
msgid ""
"@FUNCTION=FV\n"
"@SYNTAX=FV(rate,nper,pmt[,pv,type])\n"
"@DESCRIPTION=FV computes the future value of an investment. This is based on "
"periodic, constant payments and a constant interest rate. The interest rate "
"per period is @rate, @nper is the number of periods in an annuity, @pmt is "
"the payment made each period, @pv is the present value and @type is when the "
"payment is made.\n"
"\n"
"* If @type = 1 then the payment is made at the beginning of the period.\n"
"* If @type = 0 it is made at the end of each period.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV,PMT,PPMT"
msgstr ""
"@FUNCTION=FV\n"
"@SYNTAX=FV(rate,nper,pmt[,pv,type])\n"
"@DESCRIPTION=FV དེ་གིས་ ཟད་གྲོ་གི་མ་འོངས་པའི་གནས་གོང་འདི་རྩིས་བཏོནམ་ཨིན།  འདི་དུས་མཚམས་, ཆེད་"
"མེད་གླ་དངུལ་ཚུ་དང་ཆེད་མེད་སྐྱེད་ཚད་ཅིག་གུ་གཞི་བཞག་སྟེ་ཨིན།  དུས་ཡུན་རེ་གི་སྐྱེད་ཚད་འདི་ @rate, "
"@nper འདི་ལོ་བསྟར་ནང་དུས་ཡུན་གྱི་ཨང་གྲངས་ཨིན་, @pmt འདི་  དུས་ཡུན་རེ་རེ་ལུ་བཟོ་ཡོད་པའི་གླ་དངུལ་"
"ཨིན་, @pv འདི་  ད་ལྟོའི་གནས་གོང་ཨིནམ་དང་ @type འདི་གླ་དངུལ་འདི་བཟོ་ཡོདཔ་ད་ཨིན།\n"
"\n"
"* If @type = 1ཨིན་པ་ཅིན་  དེ་ལས་  གླ་དངུལ་འདི་དུས་ཡུན་གྱི་འགོ་ལུ་བཟོ་ཡོད།\n"
"* If @type = 0ཨིན་པ་ཨིན་  དུས་ཡུན་རེ་རེའི་མཇུག་ལུ་བཟོ་ཡོད།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PV,PMT,PPMT"

#: ../plugins/fn-financial/functions.c:2056
msgid ""
"@FUNCTION=PMT\n"
"@SYNTAX=PMT(rate,nper,pv[,fv,type])\n"
"@DESCRIPTION=PMT returns the amount of payment for a loan based on a "
"constant interest rate and constant payments (each payment is equal "
"amount).\n"
"\n"
"@rate is the constant interest rate.\n"
"@nper is the overall number of payments.\n"
"@pv is the present value.\n"
"@fv is the future value.\n"
"@type is the type of the payment: 0 means at the end of the period and 1 "
"means at the beginning of the period.\n"
"\n"
"* If @fv is omitted, Gnumeric assumes it to be zero.\n"
"* If @type is omitted, Gnumeric assumes it to be zero.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV"
msgstr ""
"@FUNCTION=PMT\n"
"@SYNTAX=PMT(rate,nper,pv[,fv,type])\n"
"@DESCRIPTION=PMT དེ་གིས་  ཆད་མེད་སྐྱེད་ཚད་དང་ཆད་མེད་གླ་དངུལ་(གླ་དངུལ་རེ་རེ་འདི་མཉམ་བསྡོམ་ཨིན)"
"ལུ་གཞི་བཞག་སྟེ་སྐྱིན་འགྲུལ་ཅིག་གི་དོན་ལུ་གླ་དངུལ་གྱི་དངུལ་བསྡོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@rate འདི་ཆད་མེད་སྐྱེད་ཚད་ཨིན།\n"
"@nper འདི་གླ་དངུལ་གྱི་ཨང་གྲངས་ཆ་ཚང་ཨིན།\n"
"@pv འདི་ད་ལྟོའི་གནས་གོང་ཨིན།\n"
"@fv འདི་  མ་འོངས་པའི་གནས་གོང་ཨིན།\n"
"@type འདི་གླ་དངུལ་གྱྀ་དབྱེ་བ་ཨིན: 0 ཟེར་མི་འདི་  དུས་ཡུན་གྱི་མཇུག་ལུ་དང་1 ཟེར་མི་འདི་  དུས་ཡུན་གྱི་"
"འགོ་ལུ་ཨིན།\n"
"\n"
"* If @fv འདི་སྐྱུར་བཞག་པ་ཨིན་, ཇི་ནུ་མི་རིག་དེ་གིས་  དེ་ཀླད་ཀོར་སྦེ་བཞགཔ་ཨིན།\n"
"* If @type འདི་སྐྱུར་བཞག་པ་ཅིན་, ཇི་ནུ་མི་རིག་དེ་གིས་ དེ་ཀླད་ཀོར་སྦེ་བཞགཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV"

#: ../plugins/fn-financial/functions.c:2099
msgid ""
"@FUNCTION=IPMT\n"
"@SYNTAX=IPMT(rate,per,nper,pv[,fv,type])\n"
"@DESCRIPTION=IPMT calculates the amount of a payment of an annuity going "
"towards interest.\n"
"\n"
"Formula for IPMT is:\n"
"\n"
"IPMT(PER) = -PRINCIPAL(PER-1) * INTEREST_RATE\n"
"\n"
"where:\n"
"\n"
"PRINCIPAL(PER-1) = amount of the remaining principal from last period\n"
"\n"
"* If @fv is omitted, it is assumed to be 0.\n"
"* If @type is omitted, it is assumed to be 0.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV"
msgstr ""
"@FUNCTION=IPMT\n"
"@SYNTAX=IPMT(rate,per,nper,pv[,fv,type])\n"
"@DESCRIPTION=IPMT དེ་གིས་  སྐྱེད་ཁ་ཐུག་ལུ་འགྱོ་མི་ལོ་རེ་བཞིན་དུའི་གླ་དངུལ་ཅིག་གི་དངུལ་བསྡོམ་འདི་རྩིས་"
"བརྐྱབ་ཨིན།\n"
"\n"
"ཨའི་པི་ཨེམ་ཊི་གི་དོན་ལུ་མན་ངག་འདི:\n"
"\n"
"IPMT(PER) = -PRINCIPAL(PER-1) * INTEREST_RATE\n"
"\n"
"དེ་ཡང་:\n"
"\n"
"PRINCIPAL(PER-1) = ཤུལ་མའི་དུས་ཡུན་ལས་མ་རྩ་ལྷག་ལུད་ཀྱི་དངུལ་བསྡོམ་\n"
"\n"
"* If @fv འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ ༠་ སྦེ་བསམ་ནི་ཨིན།\n"
"* If @type འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ ༠་ སྦེ་བསམ་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV"

#: ../plugins/fn-financial/functions.c:2151
msgid ""
"@FUNCTION=PPMT\n"
"@SYNTAX=PPMT(rate,per,nper,pv[,fv,type])\n"
"@DESCRIPTION=PPMT calculates the amount of a payment of an annuity going "
"towards principal.\n"
"\n"
"Formula for it is:\n"
"PPMT(per) = PMT - IPMT(per)\n"
"where:\n"
"\n"
"PMT = Payment received on annuity\n"
"IPMT(per) = amount of interest for period @per\n"
"\n"
"* If @fv is omitted, it is assumed to be 0.\n"
"* If @type is omitted, it is assumed to be 0.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=IPMT,PV,FV"
msgstr ""
"@FUNCTION=PPMT\n"
"@SYNTAX=PPMT(rate,per,nper,pv[,fv,type])\n"
"@DESCRIPTION=PPMT དེ་གིས་  མ་རྩ་ལུ་འགྱོ་མི་ལོ་རེ་བཞིན་དུའི་གླ་དངུལ་ཅིག་གི་དངུལ་བསྡོམ་འདི་རྩིས་སྟོནམ་"
"ཨིན།\n"
"\n"
"དེའི་མན་ངག་འདི:\n"
"PPMT(per) = PMT - IPMT(per)\n"
"དེ་ཡང་:\n"
"\n"
"PMT = ལོ་རེ་བཞིན་དུ་ཐོབ་པའི་གླ་དངུལ་\n"
"IPMT(per) = དུས་ཡུན་ @per གི་དོན་ལུ་སྐྱེད་ཀྱི་དངུལ་བསྡོམ་\n"
"\n"
"* If @fv འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ ༠་སྦེ་བསམ་ནི་ཨིན།\n"
"* If @type འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ ༠་ སྦེ་བསམ་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=IPMT,PV,FV"

#: ../plugins/fn-financial/functions.c:2207
msgid ""
"@FUNCTION=NPER\n"
"@SYNTAX=NPER(rate,pmt,pv[,fv,type])\n"
"@DESCRIPTION=NPER calculates number of periods of an investment based on "
"periodic constant payments and a constant interest rate.\n"
"\n"
"The interest rate per period is @rate, @pmt is the payment made each period, "
"@pv is the present value, @fv is the future value and @type is when the "
"payments are due. If @type = 1, payments are due at the beginning of the "
"period, if @type = 0, payments are due at the end of the period.\n"
"\n"
"* If @rate <= 0, NPER returns #DIV0 error.\n"
"\n"
"@EXAMPLES=\n"
"For example, if you deposit $10,000 in a savings account that earns an "
"interest rate of 6%. To calculate how many years it will take to double your "
"investment use NPER as follows:\n"
"=NPER(0.06, 0, -10000, 20000,0)returns 11.895661046 which indicates that you "
"can double your money just before the end of the 12th year.\n"
"@SEEALSO=PPMT,PV,FV"
msgstr ""
"@FUNCTION=NPER\n"
"@SYNTAX=NPER(rate,pmt,pv[,fv,type])\n"
"@DESCRIPTION=NPER དུས་མཚམས་ཀྱི་ཆད་མེད་དང་ཆད་མེད་སྐྱེད་ཚད་གུ་གཞི་བཞག་པའི་  ཟད་འགྲོ་ཅིག་གི་དུས་"
"ཡུན་ཚུ་གི་གྲངས་རྩིས་བཏོནམ་ཨིན།\n"
"\n"
"དུས་ཡུན་རེ་རེ་གི་སྐྱེད་ཚད་འདི་ @rate, @pmt འདི་  དུས་ཡུན་རེ་རེ་ནང་བཟོ་ཡོད་པའི་གླ་དངུལ་ཨིན་, @pv "
"འདི་  ད་ལྟོའི་གནས་གོང་ཨིན, @fv འདི་  མ་འོངས་པའི་གནས་གོང་ཨིནམ་དང་ @type འདི་ གླ་དངུལ་གྱི་རན་པ་"
"ལུདཔ་ད་ཨིན་ @type = 1, གླ་དངུལ་ཚུ་  དུས་ཡུན་གྱི་མགོ་ལུ་རན་པ་འདི་ཨིན་ @type = 0, གླ་དངུལ་འདི་"
"དུས་ཡུན་གྱི་མཇུག་ལུ་རན་པ་ཨིན།\n"
"\n"
"* If @rate <= 0ཨིནཔ་ཅིན་, NPER དེ་གིས་ #DIV0 འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"དཔེར་ན་, ཁྱོད་ཀྱིས་ $10,000 སྲུང་བཞག་རྩིས་ཐོ་ནང་བཙུགས་བཞག་པ་ཅིན་  དེ་གིས་ 6% གི་སྐྱེད་ཚད་འདི་"
"འཐོབ་ཨིན།  ལོ་གྲངས་ག་དེམ་ཅིག་ཨིན་ན་རྩིས་བརྐྱབ་ནི་ལུ་  དེ་གིས་ཁྱོད་རའི་ཟད་འགྲོ་ལག་ལེན་NPER ལོག་བལྟབ་"
"བརྐྱབ་ནི་ལུ་  འོག་ལུ་ཡོད་དོ་བཟུམ་:\n"
"=NPER(0.06, 0, -10000, 20000,0)returns 11.895661046 ཁྱོད་ཀྱིས་ཁྱོད་རའི་དངུལ་འདི་  ལོ་"
"༡༢་མཇུག་མ་བསྡུ་བའི་ཧེ་མ་ལོག་བལྟབ་བརྐྱབ་བཏུབ་ཟེར་བརྡ་སྟོནམ་ཨིན།\n"
"@SEEALSO=PPMT,PV,FV"

#: ../plugins/fn-financial/functions.c:2267
msgid ""
"@FUNCTION=DURATION\n"
"@SYNTAX=DURATION(settlement,maturity,coup,yield,frequency[,basis])\n"
"@DESCRIPTION=DURATION calculates the duration of a security.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@coup The annual coupon rate as a percentage.\n"
"@yield The annualized yield of the security as a percentage.\n"
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, DURATION returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=G_DURATION,MDURATION"
msgstr ""
"@FUNCTION=DURATION\n"
"@SYNTAX=DURATION(བུ་ལོན་སྤྲོད་འཇལ་,དུས་ཡུན་ཚང་བ་,ཀོཔ་,ཐོན་འབྲས་,འབྱུང་གྲངས་[,basis])\n"
"@DESCRIPTION=DURATION དེ་གིས་  སྲུང་སྐྱོབ་ཀྱི་དུས་ཡུན་འདི་རྩིས་སྟོནམ་ཨིན།\n"
"\n"
"@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས།\n"
"@maturity འདི་སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས།\n"
"@coup ལོ་བསྟར་འཛིན་ཤོག་ཚད་འདི་བརྒྱ་ཆ་སྦེ།\n"
"@yield འདི་  སྲུང་སྐྱོབ་ཀྱི་ལོ་བསྟར་ཐོན་འབྲས་འདི་བརྒྱ་ཆ་སྦེ།\n"
"@frequency འདི་  ལོ་རེའི་ནང་གི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས།  ཆོག་པའི་འབྱུང་གྲངས་ཚུ: 1 = ལོ་"
"བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་ @basis འདི་ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་  ཉིནམ་གྱངས་ཁའི་རིམ་"
"ལུགས་ཨིན:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ/ཉིནམ་ངོ་མ\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @frequency འདི་  ༡, ༢,ཡང་ན་ ༤ ལས་རྒས་པ་ཅིན་, DURATION དེ་གིས་ #NUM! འཛོལ་བ་"
"འདིསླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ ༠་དང་ ༤ གི་བར་ན་མེད་པ་ཅིན་, #NUM! དེ་གིས་འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=G_DURATION,MDURATION"

#: ../plugins/fn-financial/functions.c:2329
msgid ""
"@FUNCTION=G_DURATION\n"
"@SYNTAX=G_DURATION(rate,pv,fv)\n"
"@DESCRIPTION=G_DURATION calculates number of periods needed for an "
"investment to attain a desired value. This function is similar to FV and PV "
"with a difference that we do not need give the direction of cash flows e.g. -"
"100 for a cash outflow and +100 for a cash inflow.\n"
"\n"
"* If @rate <= 0, G_DURATION returns #DIV0 error.\n"
"* If @fv = 0 or @pv = 0, G_DURATION returns #DIV0 error.\n"
"* If @fv / @pv < 0, G_DURATION returns #VALUE error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV,DURATION,MDURATION"
msgstr ""
"@FUNCTION=G_DURATION\n"
"@SYNTAX=G_DURATION(rate,pv,fv)\n"
"@DESCRIPTION=G_DURATION དེ་གིས་  རེ་འདོད་ཡོད་པའི་གནས་གོང་ཐོབ་ནི་ལུ་  ཟད་གྲོའི་དོན་ལུ་དགོ་པའི་"
"དུས་ཡུན་གྱི་ཨང་གྲངས་འདི་རྩིས་ྶྟོནམ་ཨིན།  ལཱའགན་འདི་ FV དང་ PV དང་གཅིག་པ་ཡོདཔ་དང་  ང་བཅས་ཚུ་གིས་"
"དངུལ་འབབ་རྒྱུན་ཚུ་གི་ཕྱོགས་བྱིན་མ་དགོཔ་e.g. -100 དངུལ་ཕྱིར་འབབ་གྱི་དོན་ལུ་དང་+100 དངུལ་ནང་འབབ་ཀྱི་"
"དོན་ལུ།\n"
"\n"
"* If @rate <= 0, G_DURATION དེ་གིས་ #DIV0 འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @fv = 0 or @pv = 0, G_DURATION དེ་གིས་ #DIV0 འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @fv / @pv < 0, G_DURATION དེ་གིས་ #VALUE འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=PPMT,PV,FV,DURATION,MDURATION"

#: ../plugins/fn-financial/functions.c:2373
msgid ""
"@FUNCTION=FVSCHEDULE\n"
"@SYNTAX=FVSCHEDULE(principal,schedule)\n"
"@DESCRIPTION=FVSCHEDULE returns the future value of given initial value "
"after applying a series of compound periodic interest rates. The argument "
"@principal is the present value; @schedule is an array of interest rates to "
"apply. The @schedule argument must be a range of cells.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain interest rates 0.11, "
"0.13, 0.09, 0.17, and 0.03.  Then\n"
"FVSCHEDULE(3000,A1:A5) equals 4942.7911611.\n"
"@SEEALSO=PV,FV"
msgstr ""
"@FUNCTION=FVSCHEDULE\n"
"@SYNTAX=FVSCHEDULE(principal,schedule)\n"
"@DESCRIPTION=FVSCHEDULE དེགིས་  སྐྱེད་ཅུང་དུས་མཚམས་སྐྱེད་ཚད་ཀྱི་ཨང་རིམ་འཇུག་སྤྱོད་འབད་བའི་ཤུལ་"
"ལུ་  བྱིན་ཡོད་པའི་མ་འོངས་པའི་འགོ་ཐོག་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན།  སྒྲུབ་རྟགས་ @principal འདི་"
"ད་ལྟོའི་གནས་གོང་ཨིན་; @schedule འདི་  འཇུག་སྤྱོད་འབད་ནི་ལུ་སྐྱེད་ཀྱི་ཨེ་རེ་ཨིན། @schedule སྒྲུབ་རྟགས་"
"འདི་  ནང་ཐིག་ཚུ་གི་ཁྱབ་ཚད་ཨིན་དགོཔ།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་བསམ་གེ་ ནང་ཐིག་ A1, A2, ..., A5 དེ་གིས་  སྐྱེད་ཚད་ 0.11, 0.13, 0.09, "
"0.17, and 0.03ཡོདཔ་ཨིན།  དེ་ལས\n"
"FVSCHEDULE(3000,A1:A5) མཉམ་པ་ 4942.7911611.\n"
"@SEEALSO=PV,FV"

#: ../plugins/fn-financial/functions.c:2420
msgid ""
"@FUNCTION=EURO\n"
"@SYNTAX=EURO(currency)\n"
"@DESCRIPTION=EURO converts one Euro to a given national currency in the "
"European monetary union.\n"
"\n"
"@currency is one of the following:\n"
"\n"
"    ATS\t(Austria)\n"
"    BEF\t(Belgium)\n"
"    DEM\t(Germany)\n"
"    ESP\t(Spain)\n"
"    EUR\t(Euro)\n"
"    FIM\t(Finland)\n"
"    FRF\t(France)\n"
"    GRD\t(Greek)\n"
"    IEP\t(Ireland)\n"
"    ITL\t(Italy)\n"
"    LUF\t(Luxembourg)\n"
"    NLG\t(Netherlands)\n"
"    PTE\t(Portugal)\n"
"\n"
"* If the given @currency is other than one of the above, EURO returns #NUM! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"EURO(\"DEM\") returns 1.95583.\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=EURO\n"
"@SYNTAX=EURO(currency)\n"
"@DESCRIPTION=EURO དེ་གིས་  ཡུ་རོ་པིན་དངུལ་འབྲེལ་ཚོགས་སྡེ་ནང་  བྱིན་ཡོད་པའི་རྒྱལ་ཡོངས་དངུལ་འདི་ལུ་"
"ཡུ་རོ་གཅིག་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"@currency འདི་འོག་ལུ་ཡོད་མི་ལས་གཅིག་ཨིན:\n"
"\n"
"    ATS\t(ཨཱསི་ཊི་ཡ།)\n"
"    BEF\t(བེལ་ཇི་ཡམ།)\n"
"    DEM\t(ཇར་མ་ནི་)\n"
"    ESP\t(སི་པེན)\n"
"    EUR\t(ཡུ་རོ)\n"
"    FIM\t(ཕིན་ལེནཌི)\n"
"    FRF\t(ཕརཱནསི)\n"
"    GRD\t(གིརིཀ)\n"
"    IEP\t(ཨའི་རི་ལེནཌི།)\n"
"    ITL\t(ཨི་ཊ་ལི)\n"
"    LUF\t(ལག་ཟེམ་བཱརག།)\n"
"    NLG\t(ནི་དར་ལེནཌི)\n"
"    PTE\t(པོར་ཊུ་གཱལ།)\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @currency འདི་  ལྟག་ལུ་ཡོད་མི་ལས་གཅིག་ཨིན་པ་ཅིན་, EURO དེ་གིས་ #NUM! འཛོལ་"
"བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"EURO(\"DEM\") returns 1.95583.\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2530
msgid ""
"@FUNCTION=EUROCONVERT\n"
"@SYNTAX=EUROCONVERT(n,source,target)\n"
"@DESCRIPTION=EUROCONVERT converts the currency value @n of @source currency "
"to a target currency @target. Both currencies are given as three-letter "
"strings using the ISO code system names.  The following currencies are "
"available:\n"
"\n"
"    ATS\t(Austria)\n"
"    BEF\t(Belgium)\n"
"    DEM\t(Germany)\n"
"    ESP\t(Spain)\n"
"    EUR\t(Euro)\n"
"    FIM\t(Finland)\n"
"    FRF\t(France)\n"
"    GRD\t(Greek)\n"
"    IEP\t(Ireland)\n"
"    ITL\t(Italy)\n"
"    LUF\t(Luxembourg)\n"
"    NLG\t(Netherlands)\n"
"    PTE\t(Portugal)\n"
"\n"
"* If the given @source or @target is other than one of the above, "
"EUROCONVERT returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"EUROCONVERT(2.1,\"DEM\",\"EUR\") returns 1.07.\n"
"@SEEALSO=EURO"
msgstr ""
"@FUNCTION=EUROCONVERT\n"
"@SYNTAX=EUROCONVERT(n,source,target)\n"
"@DESCRIPTION=EUROCONVERT དེ་གིས་དངུལ་གྱི་གནས་གོང་ @source གི་@n དངུལ་འདི་ དམིག་གཏད་དངུལ་"
"@targetལུ་གཞི་བསྒྱུར་འབདཝ་ཨིན།  དངུལ་གཉིས་ཆ་རང་ཡི་གུ་གསུམ་པའི་ཡིག་རྒྱུན་ཚུ་སྦེ་ ISO ཨང་རིམ་ལུགས་"
"མིང་ཚུ་ལག་ལེན་འཐབ་ཐོག་ལས།  འོག་གི་དངུལ་ཚུ་ཐོབ་ཚུགས་ཡོད།:\n"
"\n"
"    ATS\t(ཨཱསི་ཊི་ཡ།)\n"
"    BEF\t(བེལ་ཇི་ཡམ།)\n"
"    DEM\t(ཇར་མ་ནི།)\n"
"    ESP\t(སིཔེན།)\n"
"    EUR\t(ཡུ་རོ།)\n"
"    FIM\t(ཕིན་ལེནཌི།)\n"
"    FRF\t(ཕརཱནསི།)\n"
"    GRD\t(གིརིཀ།)\n"
"    IEP\t(ཨའི་རི་ལེནཌི།)\n"
"    ITL\t(ཨི་ཊ་ལི།)\n"
"    LUF\t(ལག་ཟེམ་བཱརག།)\n"
"    NLG\t(ནེ་དར་ལེནཌིསི།)\n"
"    PTE\t(པོར་ཊུ་གཱལ།)\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་བྱིན་ཡོད་པའི་@source ཡང་ན་ @target འདི་  ལྟག་ལུ་ཡོད་མི་ལས་གཅིག་ཨིན་པ་ཅིན་, "
"EUROCONVERT དེ་གིས་#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"EUROCONVERT(2.1,\"DEM\",\"EUR\") returns 1.07.\n"
"@SEEALSO=EURO"

#: ../plugins/fn-financial/functions.c:2580
msgid ""
"@FUNCTION=PRICE\n"
"@SYNTAX=PRICE(settle,mat,rate,yield,redemption_price,[frequency,basis])\n"
"@DESCRIPTION=PRICE returns price per $100 face value of a security. This "
"method can only be used if the security pays periodic interest.\n"
"\n"
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, PRICE returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=PRICE\n"
"@SYNTAX=PRICE(settle,mat,rate,yield,redemption_price,[frequency,basis])\n"
"@DESCRIPTION=PRICE དེ་གིས་  སྲུང་སྐྱོབ་ཅིག་གི་$100 རེ་རེའི་གནས་གོང་གོང་ཚད་འདི་སླར་ལོག་འབཝ་"
"ཨིན།  ཐབས་ཤེས་འདི་  སྲུང་སྐྱོབ་དེ་གིས་དུས་མཚམས་སྐྱེད་སྤྲོད་པ་ཅིན་རྐྱངམ་ཅིག་ ལག་ལེན་འཐབ་བཏུབ་ཨིན།\n"
"\n"
"@frequency འདི་  ལོ་རེའི་ནང་གི་ཤོག་འཛིན་གླ་དངུལ་གྱི་གྲངས་ཨིན།  ཆོག་པའི་འབྱུང་གྲངས་ཚུ: 1 = ལོ་"
"བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་ @basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་"
"ལུགས་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"*  @frequency འདི་  ༡,༢,ཡང་ན་༤་ ལས་གཞན་ཨིན་པ་ཅིན་, PRICE དེ་གིས་ #NUM! འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"*  @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"*  @basis འདི་ ༠་དང་ ༤་གི་བར་ན་མེད་པ་ཅིན་, #NUM! དེ་གིས་འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2647
msgid ""
"@FUNCTION=YIELD\n"
"@SYNTAX=YIELD(settlement,maturity,rate,price,redemption_price,frequency[,"
"basis])\n"
"@DESCRIPTION=YIELD returns the yield on a security that pays periodic "
"interest.\n"
"\n"
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, YIELD returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=YIELD\n"
"@SYNTAX=YIELD(གཞི་བཙུགས་,དུས་ཡུན་ཚང་བ་,ཚད་,གོང་ཚད་,redemption_price,frequency[,"
"basis])\n"
"@DESCRIPTION=YIELD དེ་གིས་  དུས་མཚམས་སྐྱེད་སྤྲོད་མི་སྲུང་སྐྱོབ་ཅིག་གུ་ཐོན་འབྲས་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@frequency འདི་  ལོ་རེའི་ནང་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།  ཆོག་ཡིག་འབྱུང་གྲངས་ཚུ: 1 = ལོ་"
"བསྟར་, 2 = ཕྱེད, 4 = དཔྱ་བཞི་ @basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་"
"འདི་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @frequency འདི་ ༡,༢,ཡང་ན་༤་ ལས་གཞན་མི་ཨིན་པ་ཅིན་, YIELD དེ་གིས་ #NUM! འཛོལ་བ་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབད་ཡོདཔ།\n"
"* If @basis འདི་  ༠་དང་ ༤་ གི་བར་ན་མེད་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2770
msgid ""
"@FUNCTION=YIELDDISC\n"
"@SYNTAX=YIELDDISC(settlement,maturity,pr,redemption[,basis])\n"
"@DESCRIPTION=YIELDDISC calculates the annual yield of a security that is "
"discounted.\n"
"\n"
"@settlement is the settlement date of the security.  @maturity is the "
"maturity date of the security. @pr is the price per $100 face value of the "
"security. @redemption is the redemption value per $100 face value. @basis is "
"the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, YIELDDISC returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=YIELDDISC\n"
"@SYNTAX=YIELDDISC(settlement,maturity,pr,redemption[,basis])\n"
"@DESCRIPTION=YIELDDISC དེ་གིས་  ཕབ་ཆ་འབད་དེ་ཡོད་པའི་སྲུང་སྐྱོབ་ཅིག་གི་ལོ་བསྟར་ཐོན་འབྲས་འདི་རྩིས་"
"སྟོནམ་ཨིན།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས།  @maturity འདི་  སྲུང་སྐྱོབ་ཀྱི་དུས་ཡུན་ཚེས་"
"གྲངས། @pr འདི་ སྲུང་སྐྱོབ་ཀྱི་མ་གོང་$100 རེ་རེའི་གོང་ཚད། @redemption འདི་  མ་གོང་$100 རེ་རེའི་"
"བུན་ཚབ་གནས་གོང་འདི་ཨིན། @basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཁྱངས་ཁ་རིམ་ལུགས་ཀྱི་ཉིནམ་གྱི་"
"དབྱེ་བ་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན 30/360\n"
"\n"
"* If @frequency འདི་  ༡,༢,ཡང་ན་༤་ ལས་གཞན་ཨིནཔ་ཅིན་, YIELDDISC དེ་གིས་ #NUM! འཛོལ་བ་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་  ༠་དང་༤་གི་བར་ན་མེན་པ་ཅིན་, #NUM! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2834
msgid ""
"@FUNCTION=YIELDMAT\n"
"@SYNTAX=YIELDMAT(settlement,maturity,issue,rate,pr[,basis])\n"
"@DESCRIPTION=YIELDMAT calculates the annual yield of a security for which "
"the interest is paid at maturity date.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @issue is the issue date of the security. "
"@rate is the interest rate set to the security. @pr is the price per $100 "
"face value of the security. @basis is the type of day counting system you "
"want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=YIELDMAT\n"
"@SYNTAX=YIELDMAT(settlement,maturity,issue,rate,pr[,basis])\n"
"@DESCRIPTION=YIELDMAT དེ་གིས་  སྐྱེད་འདི་དུས་ཡུན་ཚང་བ་ལུ་སྤྲོད་ཡོད་པའི་  སྲུང་སྐྱོང་ཅིག་གི་ལོ་བསྟར་"
"ཐོན་འབྲས་འདི་རྩིས་སྟོནམ་ཨིན།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས། @maturity འདི་སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་ཚེས་"
"གྲངས། @issue འདི་  སྲུང་སྐྱོབ་སྤྲོད་པའི་ཚེས་གྲངས། @rate འདི་  སྲུང་སྐྱོབ་ལུ་གཞི་སྒྲིག་འབད་ཡོད་པའི་སྐྱེད་"
"ཚད། @pr འདི་  སྲུང་སྐྱོབ་ཀྱི་མ་གོང་$100 རེ་རེའི་གོང་ཚད་ཨིན། @basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་"
"པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཀྱི་དབྱེ་བ་འདི་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @basis འདི་སྐྱུར་བཞག་སྟེ་ཡོད་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབད་ཡོདཔ།\n"
"* If @basis འདི་  ༠་དང་༤་གི་བར་ན་མེད་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:2890
msgid ""
"@FUNCTION=ODDFPRICE\n"
"@SYNTAX=ODDFPRICE(settlement,maturity,issue,first_coupon,rate,yld,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDFPRICE returns the price per $100 face value of a security. "
"The security should have an odd short or long first period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @issue is the issue date of the security. "
"@frequency is the number of coupon payments per year. Allowed frequencies "
"are: 1 = annual, 2 = semi, 4 = quarterly. @basis is the type of day counting "
"system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDFPRICE returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ODDFPRICE\n"
"@SYNTAX=ODDFPRICE(settlement,maturity,issue,first_coupon,rate,yld,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDFPRICE དེ་གིས་  སྲུང་སྐྱོབ་མ་གོང་ $100 རེ་རེ་གི་གོང་ཚད་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།  སྲུང་སྐྱོབ་དེ་ལུ་  ཡ་ཅན་ཐུང་ཀུ་ཡང་ན་དུས་ཡུན་རིངམ་དགོཔ་ཨིན།\n"
"\n"
"@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན། @maturity འདི་ སྲུང་སྐྱོབ་དུས་ཡུན་ཡལ་བའི་ཚེས་"
"གྲངས་ཨིན། @issue འདི་  སྲུང་སྐྱོབ་སྤྲོད་པའི་ཚེས་གྲངས་ཨིན། @frequency འདི་  ལོ་རེའི་ནང་འཛིན་ཤོག་གླ་"
"དངུལ་གྱི་ཨང་གྲངས་ཨིན།  ཆོག་པའི་འབྱུང་རིམ་ཚུ: 1 = ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་ @basis "
"འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1 ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན 30/360\n"
"\n"
"* If @frequency འདི་ 1, 2, ཡང་ན་ 4 ཨིན་པ་ཅིན་, ODDFPRICE དེ་གིས་ #NUM! འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ 0 དང་ 4 གི་བར་ན་ཨིན་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3047
msgid ""
"@FUNCTION=ODDFYIELD\n"
"@SYNTAX=ODDFYIELD(settlement,maturity,issue,first_coupon,rate,pr,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDFYIELD calculates the yield of a security having an odd "
"first period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @frequency is the number of coupon payments "
"per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDFYIELD returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ODDFYIELD\n"
"@SYNTAX=ODDFYIELD(settlement,maturity,issue,first_coupon,rate,pr,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDFYIELD དེ་གིས་  ཡ་ཅན་དུས་ཡུན་དང་པ་ཡོད་མི་  སྲུང་སྐྱོབ་ཅིག་གི་ཐོན་འབྲས་འདི་རྩིས་"
"བཏོནམ་ཨིན།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཚེས་གྲངས་འདི་ཨིན། @maturity འདི་ སྲུང་སྐྱོབ་དུས་ལས་ཡལ་བའི་"
"ཚེས་གྲངས་ཨིན། @frequency འདི་  ལོ་རེའི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས།  ཆོག་པའི་འབྱུང་རིམ་ཚུ: 1 = "
"ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི། @basis འདི་ ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་"
"ལུགས་ཀྱི་དབྱེ་བ་ཨིན:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @frequency འདི་ 1, 2, ཡང་ན་ 4 ལས་གཞན་མི་ཨིན་པ་ཅིན་, ODDFYIELD དེ་གིས་ #NUM! "
"འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་0 དང་ 4བར་ན་ཡོད་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3158
msgid ""
"@FUNCTION=ODDLPRICE\n"
"@SYNTAX=ODDLPRICE(settlement,maturity,last_interest,rate,yld,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDLPRICE calculates the price per $100 face value of a "
"security that has an odd last coupon period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @frequency is the number of coupon payments "
"per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDLPRICE returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ODDLPRICE\n"
"@SYNTAX=ODDLPRICE(settlement,maturity,last_interest,rate,yld,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDLPRICE དེ་གིས་  ཡ་ཅན་མཇུག་གི་འཛིན་ཤོག་དུས་ཡུན་ཡོད་མི་  སྲུང་སྐྱོབ་ཅིག་གི་$100 "
"མ་གོང་རེ་རེ་གི་གོང་ཚད་འདི་རྩིས་བཏོནམ་ཨིན།\n"
"\n"
"@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན། @maturity འདི་སྲུང་སྐྱོབ་ཀྱི་དུས་ཡུན་ཚང་བའི་"
"ཚེས་གྲངས་ཨིན། @frequency འདི་ ལོ་རེའི་ནང་གི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན། ཆོག་པའི་བྱུང་རིམ་ཚུ: "
"1 = ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཕྱ་བཞི། @basis འདི་ ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁ་"
"བརྐྱབ་ནི་འདི་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་30/360\n"
"\n"
"* If @frequency འདི་ 1, 2, ཡངན་ 4 ལས་རྙིངམ་ཨིན་པ་ཅིན་, ODDLPRICE དེ་གིས་ #NUM! འཛོལ་"
"བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ 0 དང་ 4 གི་བར་ན་མེན་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3252
msgid ""
"@FUNCTION=ODDLYIELD\n"
"@SYNTAX=ODDLYIELD(settlement,maturity,last_interest,rate,pr,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDLYIELD calculates the yield of a security having an odd last "
"period.\n"
"\n"
"@settlement is the settlement date of the security. @maturity is the "
"maturity date of the security. @frequency is the number of coupon payments "
"per year. Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. "
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @frequency is other than 1, 2, or 4, ODDLYIELD returns #NUM! error.\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ODDLYIELD\n"
"@SYNTAX=ODDLYIELD(settlement,maturity,last_interest,rate,pr,redemption,"
"frequency[,basis])\n"
"@DESCRIPTION=ODDLYIELD དེ་གིས་  ཡ་ཅན་མཇུག་གི་དུས་ཡུན་ཡོདཔ་སྦེ་  སྲུང་སྐྱོབ་ཀྱི་ཐོན་འབྲས་འདི་རྩིས་"
"བཏོནམ་ཨིན།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན། @maturity འདི་  སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་"
"ཚེས་གྲངས་ཨིན། @frequency འདི་  ལོ་རེའི་ནང་འཛིན་ཤོག་གླ་དངུལ་གཡི་ཨང་གྲངས་ཨིན།  ཆོག་པའི་འབྱུང་རིམ་"
"ཚུ: 1 = ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི། @basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་"
"ཁའི་རིམ་ལུགས་ཀྱི་དབྱེ་བ་ཨིན:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ/ཉིནམ་ངོ་མ\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་30/360\n"
"\n"
"* If @frequency འདི་ 1, 2, ཡང་ན་ 4 ལས་རྙིངམ་ཨིན་པ་ཅིན་, ODDLYIELD དེ་གིས་ #NUM! འཛོལ་"
"བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ 0 དང་4 གི་བར་ན་མེད་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3346
msgid ""
"@FUNCTION=AMORDEGRC\n"
"@SYNTAX=AMORDEGRC(cost,purchase_date,first_period,salvage,period,rate[,"
"basis])\n"
"@DESCRIPTION=AMORDEGRC: Calculates depreciation for each accounting period "
"using French accounting conventions.   Assets purchased in the middle of a "
"period take prorated depreciation into account.  This is similar to "
"AMORLINC, except that a depreciation coefficient is applied in the "
"calculation depending on the life of the assets.\n"
"Named for AMORtissement DEGRessif Comptabilite\n"
"\n"
"@cost The value of the asset.\n"
"@purchase_date The date the asset was purchased.\n"
"@first_period The end of the first period.\n"
"@salvage Asset value at maturity.\n"
"@period The length of accounting periods.\n"
"@rate rate of depreciation as a percentage.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"AMORDEGRC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1) = 733\n"
"\n"
"@SEEALSO=AMORLINC"
msgstr ""
"@FUNCTION=AMORDEGRC\n"
"@SYNTAX=AMORDEGRC(cost,purchase_date,first_period,salvage,period,rate[,"
"basis])\n"
"@DESCRIPTION=AMORDEGRC: དེ་གིས་  ཕེརེནཆི་རྩིས་ཐོའི་གྲོས་འཛོམས་ལག་ལེན་འཐབ་སྟེ་  རྩིས་ཐོ་རེ་རེའི་དུས་"
"ཡུན་གྱི་དོན་ལུ་  གོང་འབབ་འདི་རྩིས་བཏོནམ་ཨིན།  དུས་ཡུན་བར་ན་ལུ་ཉོ་ཚོང་འབད་བའི་བདོག་གཏད་དེ་གིས་  པོ་"
"རེ་ཊེཌི་གོང་འབབ་འདི་རྩིས་ཐོའི་ནང་འབགཔ་ཨིན།  འདི་ AMORLINC དང་ཆ་འདྲཝ་ཨིན་, གོང་འབབ་ཕན་ཚུན་ནུས་"
"པ་འདི་  བདོག་གཏད་ཚུ་གི་ཚེ་གུ་གཞི་བཞག་སྟེ་  རྩིས་ཐོའི་ནང་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"AMORtissement DEGRessif Comptabiliteདོན་ལུ་མིང་བཏགས་ཡོདཔ།\n"
"\n"
"@cost བདོག་གཏད་ཀྱི་གནས་གོང་།\n"
"@purchase_date བདོག་གཏད་ཉོ་ཚོང་བརྐྱབ་ཡོད་པའི་ཚེས་གྲངས།\n"
"@first_period དུས་ཡུན་དང་པའི་མཇུག།\n"
"@salvage དུས་ཡུན་ཚང་བའི་བདོག་གཏད་གནས་གོང་།\n"
"@period རྩིས་ཐོའི་དུས་ཡུན་གྱི་རིང་ཚད།\n"
"@rate གོང་འབབ་ཀྱི་ཚད་འདི་བརྒྱ་ཆ་སྦེ།@basis  འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་"
"ལུགས་ཨིན།:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ 0 དང་ 4གི་བར་ན་མེད་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"AMORDEGRC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1) = 733\n"
"\n"
"@SEEALSO=AMORLINC"

#: ../plugins/fn-financial/functions.c:3413
msgid ""
"@FUNCTION=AMORLINC\n"
"@SYNTAX=AMORLINC(cost,purchase_date,first_period,salvage,period,rate[,"
"basis])\n"
"@DESCRIPTION=AMORLINC: Calculates depreciation for each accounting period "
"using French accounting conventions.   Assets purchased in the middle of a "
"period take prorated depreciation into account.\n"
"Named for AMORtissement LINeaire Comptabilite.\n"
"\n"
"@cost The value of the asset.\n"
"@purchase_date The date the asset was purchased.\n"
"@first_period The end of the first period.\n"
"@salvage Asset value at maturity.\n"
"@period The length of accounting periods.\n"
"@rate rate of depreciation as a percentage.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  US 30/360\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"\n"
"* If @basis is omitted, US 30/360 is applied.\n"
"* If @basis is not in between 0 and 4, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"AMORLINC(2400,DATE(1998,8,19),DATE(1998,12,31),300,1,0.15,1) = 360\n"
"\n"
"@SEEALSO=AMORDEGRC"
msgstr ""
"@FUNCTION=AMORLINC\n"
"@SYNTAX=AMORLINC(cost,purchase_date,first_period,salvage,period,rate[,"
"basis])\n"
"@DESCRIPTION=AMORLINC: དེ་གིས་  ཕེརེནཆི་རྩིས་ཐོའི་གྲོས་འཛོམས་ཚུ་ལག་ལེན་འཐབ་སྟེ་  རྩིས་ཐོའི་དུས་ཡུན་"
"གྱི་དོན་ལུ་གོང་འབབ་འདི་རྩིས་བཏོནམ་ཨིན།   དུས་ཡུན་གྱི་བར་ན་ཉོ་ཚོང་འཐབ་ཡོད་པའི་བདོག་གཏད་དེ་གིས་  པོརོ་"
"རེ་ཊེཌི་གོང་འབབ་འདི་རྩིས་ཐོའི་ནང་འབགཔ་ཨིན།\n"
"AMORtissement LINeaire Comptabiliteདོན་ལུ་མིང་བཏགས་ཡོདཔ།\n"
"\n"
"@cost བདོག་གཏད་ཀྱི་གནས་གོང་།\n"
"@purchase_date བདོག་གཏད་ཉོ་ཚོང་འཐབ་ཡོད་པའི་ཚེས་གྲངས།\n"
"@first_period དུས་ཡུན་དང་པའི་མཇུག།\n"
"@salvage དུས་ཡུན་ཚང་བ་ལུ་བདོག་གཏད་གནས་གོང་།\n"
"@period རྩིས་ཐོའི་དུས་ཡུན་གྱི་རིང་ཚད།\n"
"@rate གོང་འབབ་ཚད་འདི་བརྒྱ་ཆ་སྦེ་ཨིན།\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས:\n"
"\n"
"  0  US 30/360\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, US 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་0 དང་4 གི་བར་ན་ཨིན་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"AMORLINC(2400,DATE(1998,8,19),DATE(1998,12,31),300,1,0.15,1) = 360\n"
"\n"
"@SEEALSO=AMORDEGRC"

#: ../plugins/fn-financial/functions.c:3475
msgid ""
"@FUNCTION=COUPDAYBS\n"
"@SYNTAX=COUPDAYBS(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYBS returns the number of days from the beginning of the "
"coupon period to the settlement date.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPDAYBS returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 89\n"
"COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 0\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COUPDAYBS\n"
"@SYNTAX=COUPDAYBS(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYBS དེ་གིས་  འཛིན་ཤོག་དུས་ཡུན་གྱི་མགོ་ལས་ཉིནམ་གྱི་གྲངས་འདི་་གཞི་བཙུགས་ཚེས་"
"གྲངས་ལུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།\n"
"@maturity འདི་  སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་ཨིན།\n"
"@frequency འདི་  ལོ་རེའི་ནང་གི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།\n"
"@eom = TRUE དེ་གིས་ ཟླཝ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་དམིགས་བསལ་གྱི་མཇུག་འདི་ལེགས་སྐྱོང་འཐབ་ཨིན།\n"
"ཆོག་པའི་འབྱུང་རིམ་ཚུ་: 1 = ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་, 6 = ཟླཝ་ཟུང་ལྡན་སྦེ་, 12 = ཟླཝ་"
"གྲངས།\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཨིན།:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"  5  ཡུ་རོ་པིན་+ 30/360\n"
"\n"
"(གཞི་རྟེན་དེ་ཚུ་གི་རྒྱས་བཤད་འགྲེལ་བཤད་ཅིག་གི་དོན་ལུ་ ཇི་ནུ་མི་རིག་འདི་ལྟ།)\n"
"\n"
"* If @frequency འདི་ནུས་མེད་ཨིན་པ་ཅིན་, COUPDAYBS དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, MSRB 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ནུས་མེད་ཨིན་, #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 89\n"
"COUPDAYBS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 0\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3523
msgid ""
"@FUNCTION=COUPDAYS\n"
"@SYNTAX=COUPDAYS(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYS returns the number of days in the coupon period of the "
"settlement date.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPDAYS returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 90\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 90\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,1,FALSE) = 91\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COUPDAYS\n"
"@SYNTAX=COUPDAYS(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYS དེ་གིས་  གཞི་བཙུགས་ཚེས་གྲངས་ཀྱི་འཛིན་ཤོག་དུས་ཡུན་ནང་  ཉིནམ་གྲངས་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"@settlement འདི་ སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།\n"
"@maturity འདི་ སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་ཨིན།\n"
"@frequency འདི་  ལོ་རེའི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།\n"
"@eom = TRUE དེ་གིས་  ཟླཝ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་དམིགས་བསལ་གྱི་མཇུག་འདི་ལེགས་སྐྱོང་འཐབ་ཨིན།\n"
"ཆོག་པའི་འབྱུང་རིམ་ཚུ: 1 =ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་, 6 = ཟླཝ་ཟུང་ལྡན་སྦེ་, 12 = ཟླཝ་"
"གྲངས།\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཨིན།:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"  5  ཡུ་རོ་པིན་+ 30/360\n"
"\n"
"(གཞི་རྟེན་དེ་ཚུ་གི་གྲས་བཤད་འགྲེལ་བཤད་ཅིག་གི་དོན་ལུ་  ཇི་ནུ་མེ་རིག་འདི་ལྟ།)\n"
"\n"
"* If @frequency འདི་ནུས་མེད་ཨིན་, COUPDAYS དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, MSRB 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ནུས་མེད་ཨིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0) = 90\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 90\n"
"COUPDAYS (DATE(2002,11,29),DATE(2004,2,29),4,1,FALSE) = 91\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3572
msgid ""
"@FUNCTION=COUPDAYSNC\n"
"@SYNTAX=COUPDAYSNC(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYSNC returns the number of days from the settlement date "
"to the next coupon date.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPDAYSNC returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COUPDAYSNC\n"
"@SYNTAX=COUPDAYSNC(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPDAYSNC དེ་གིས་  གཞི་བཙུགས་ཚེས་གྲངས་ལས་ཤུལ་མའི་འཛིན་ཤོག་ཚེས་གྲངས་ལུ་  ཉིནམ་"
"གྱི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།\n"
"@maturity འདི་སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་ཨིན།\n"
"@frequency འདི་ལོ་རེའི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།\n"
"@eom = TRUE དེ་གིས་  ཟླཝ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་དམིགས་བསལ་གྱི་མཇུག་འདི་ལེགས་སྐྱོང་འཐབ་ཨིན།\n"
"ཆོག་པའི་འབྱུང་རིམ་ཚུ: 1 =ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་, 6 = ཟླཝ་ཟུང་ལྡན་སྦེ་, 12 = ཟླ་"
"གྲངས།\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཨིན།:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"  5  ཡུ་རོ་པིན་+ 30/360\n"
"\n"
"(གཞི་རྟེན་དེ་ཚུ་གི་རྒྱས་བཤད་འགྲེལ་བཤད་ཅིག་གི་དོན་ལུ་  ཇི་ནུ་མེ་རིག་ལག་དེབ་འདི་ལྟ།)\n"
"\n"
"* If @frequency འདི་ནུས་མེད་ཨིན་, COUPDAYSNC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, MSRB 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ནུས་མེད་, #NUM! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0) = 1\n"
"COUPDAYSNC (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 89\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3620
msgid ""
"@FUNCTION=COUPNCD\n"
"@SYNTAX=COUPNCD(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPNCD returns the coupon date following settlement.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPNCD returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 30-Nov-2002\n"
"COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 28-Feb-2003\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COUPNCD\n"
"@SYNTAX=COUPNCD(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPNCD དེ་གིས་  གཞི་བཙུགས་དང་འཁྲིལ་ཏེ་འཛིན་ཤོག་ཚེས་གྲངས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཚེས་གྲངས་ཨིན།\n"
"@maturity འདི་སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་ཨིན།\n"
"@frequency འདི་ ལོ་རེའི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།\n"
"@eom = TRUE དེ་གིས་  ཟླཝ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་དམིགས་བསལ་གྱི་མཇུག་འདི་ལེགས་སྐྱོང་འཐབ་ཨིན།\n"
"ཆོག་པའི་འབྱུང་རིམ་ཚུ: 1 = ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་, 6 = ཟླཝ་ཟུང་ལྡན་, 12 = ཟླཝ་"
"གྲངས།\n"
"@basis འདི་ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཨིན།:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"  5  ཡུ་རོ་པིན་+ 30/360\n"
"\n"
"(གཞི་རྟེན་དེ་ཚུ་གི་རྒྱས་བཤད་འགྲེལ་བཤད་ཅིག་གི་དོན་ལུ་ཇི་ནུ་ཤེ་རིག་ལག་དེབ་འདི་ལྟ།)\n"
"\n"
"* If @frequency འདི་ནུས་མེད་, COUPNCD དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, MSRB 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ནུས་མེད་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 30-Nov-2002\n"
"COUPNCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 28-Feb-2003\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3669
msgid ""
"@FUNCTION=COUPPCD\n"
"@SYNTAX=COUPPCD(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPPCD returns the coupon date preceding settlement.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly, 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"(See the gnumeric manual for a detailed description of these bases).\n"
"\n"
"* If @frequency is invalid, COUPPCD returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 31-Aug-2002\n"
"COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 29-Nov-2002\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COUPPCD\n"
"@SYNTAX=COUPPCD(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPPCD དེ་གིས་གཞི་བཙུགས་སྦོམ་ཤོས་འཛིན་ཤོག་ཚེས་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@settlement འདི་  སྲུང་སྐྱོབ་གཞི་བཙུགས་ཚེས་གྲངས་ཨིན།\n"
"@maturity འདི་སྲུང་སྐྱོབ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་ཨིན།\n"
"@frequency འདི་  ལོ་རེའི་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།\n"
"@eom = TRUE དེ་གིས་  ཟླཝ་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་དམིགས་བསལ་གྱི་མཇུག་འདི་ལེགས་སྐྱོང་འཐབ་ཨིན།\n"
"ཆོག་པའི་འབྱུང་རིམ་ཚུ: 1 = ལོ་བསྟར, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་, 6 = ཟུང་ལྡན་ཟླཝ་, 12 = ཟླཝ་གྲངས།\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས།:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"  5  ཡུ་རོ་པིན་+ 30/360\n"
"\n"
"(གཞི་རྟེན་དེ་ཚུ་གི་རྒྱས་བཤད་འགྲེལ་བཤད་ཅིག་གི་དོན་ལུ་  ཇི་ནུ་མེ་རིག་ལག་དེབ་འདི་ལྟ།)\n"
"\n"
"* If @frequency འདི་ནུས་མེད་ཨིན་, COUPPCD དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, MSRB 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ནུས་མེད་ཨིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0) = 31-Aug-2002\n"
"COUPPCD (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 29-Nov-2002\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3719
msgid ""
"@FUNCTION=COUPNUM\n"
"@SYNTAX=COUPNUM(settlement,maturity,frequency[,basis,eom])\n"
"@DESCRIPTION=COUPNUM returns the numbers of coupons to be paid between the "
"settlement and maturity dates, rounded up.\n"
"\n"
"@settlement is the settlement date of the security.\n"
"@maturity is the maturity date of the security.\n"
"@frequency is the number of coupon payments per year.\n"
"@eom = TRUE handles end of month maturity dates special.\n"
"Allowed frequencies are: 1 = annual, 2 = semi, 4 = quarterly. 6 = bimonthly, "
"12 = monthly.\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"* If @frequency is other than 1, 2, 4, 6 or 12, COUPNUM returns #NUM! "
"error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is not in between 0 and 5, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0) = 6\n"
"COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 5\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COUPNUM\n"
"@SYNTAX=COUPNUM(གཞི་བཙུགས་,དུས་ཡུན་ཚང་བ,འབྱུང་རིམ་[,basis,eom])\n"
"@DESCRIPTION=COUPNUM དེ་གིས་  གཞི་བཙུགས་དང་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་བསྐོར་སྐྱོད་ཀྱི་བར་ན་སྤྲོད་"
"ཡོད་པའི་  འཛིན་ཤོག་གི་ཨང་གྲངས་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@settlement འདི་སྲུང་སྐྱོབ་གཞི་བཙུགས་ཀྱི་ཚེས་གྲངས་ཨིན།\n"
"@maturity འདི་ སྲུང་སྐྱོབ་ཀྱི་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་ཨིན།\n"
"@frequency འདི་ ལོ་རེའི་ནང་འཛིན་ཤོག་གླ་དངུལ་གྱི་ཨང་གྲངས་ཨིན།\n"
"@eom = TRUE དེ་གིས་  ཟླཝ་གི་དུས་ཡུན་ཚང་བའི་ཚེས་གྲངས་དམིགས་བསལ་འདི་ལེགས་སྐྱོང་འཐབ་ཨིན།\n"
"ཆོག་པའི་འབྱུང་ཐེངས་འདི: 1 = ལོ་བསྟར་, 2 = ཕྱེད་, 4 = དཔྱ་བཞི་. 6 =ཟླཝ་གཉིས་སྦེ་, 12 = ཟླཝ་"
"གྲངས།\n"
"@basis ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁའི་རིམ་ལུགས་ཨིན:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན 30/360\n"
"  5  ཡུ་རོ་པིན་+ 30/360\n"
"\n"
"* If @frequency འདི་ 1, 2, 4, 6 ཡང་ན་ 12 ལས་རྙིངམ་ཨིན་པ་ཅིན་, COUPNUM དེ་གིས་ #NUM! "
"འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, MSRB 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་0 དང་5 གི་བར་མེན་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0) = 6\n"
"COUPNUM (DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE) = 5\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3763
msgid ""
"@FUNCTION=CUMIPMT\n"
"@SYNTAX=CUMIPMT(rate,nper,pv,start_period,end_period,type)\n"
"@DESCRIPTION=CUMIPMT returns the cumulative interest paid on a loan between "
"@start_period and @end_period.\n"
"\n"
"* If @rate <= 0, CUMIPMT returns #NUM! error.\n"
"* If @nper <= 0, CUMIPMT returns #NUM! error.\n"
"* If @pv <= 0, CUMIPMT returns #NUM! error.\n"
"* If @start_period < 1, CUMIPMT returns #NUM! error.\n"
"* If @end_period < @start_period, CUMIPMT returns #NUM! error.\n"
"* If @end_period > @nper, CUMIPMT returns #NUM! error.\n"
"* If @type <> 0 and @type <> 1, CUMIPMT returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=CUMIPMT\n"
"@SYNTAX=CUMIPMT(rate,nper,pv,start_period,end_period,type)\n"
"@DESCRIPTION=CUMIPMT དེ་གིས་  @start_period དང་ @end_periodབར་ན་སྤྲོད་པའི་སྐྱིན་འགྲུལ་"
"ཅིག་གུ་  རིམ་གྱིས་བསག་པའི་སྐྱེད་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @rate <= 0ཨིན་པ་ཅིན་, CUMIPMT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @nper <= 0ཨིན་པ་ཅིན་, CUMIPMT དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @pv <= 0ཨིན་པ་ཅིན་, CUMIPMT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @start_period < 1ཨིནཔ་ཅིན་, CUMIPMT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @end_period < @start_periodཨིན་པ་ཅིན་, CUMIPMT དེ་གིས་ #NUM!འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @end_period > @nperཨིན་པ་ཅིན་, CUMIPMT དེ་གིས་ #NUM!འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @type <> 0 and @type <> 1ཨིན་པ་ཅིན་, CUMIPMT དེ་གིས་ #NUM! སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3816
msgid ""
"@FUNCTION=CUMPRINC\n"
"@SYNTAX=CUMPRINC(rate,nper,pv,start_period,end_period,type)\n"
"@DESCRIPTION=CUMPRINC returns the cumulative principal paid on a loan "
"between @start_period and @end_period.\n"
"\n"
"* If @rate <= 0, CUMPRINC returns #NUM! error.\n"
"* If @nper <= 0, CUMPRINC returns #NUM! error.\n"
"* If @pv <= 0, CUMPRINC returns #NUM! error.\n"
"* If @start_period < 1, CUMPRINC returns #NUM! error.\n"
"* If @end_period < @start_period, CUMPRINC returns #NUM! error.\n"
"* If @end_period > @nper, CUMPRINC returns #NUM! error.\n"
"* If @type <> 0 and @type <> 1, CUMPRINC returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=CUMPRINC\n"
"@SYNTAX=CUMPRINC(rate,nper,pv,start_period,end_period,type)\n"
"@DESCRIPTION=CUMPRINC དེ་གིས་  @start_period and @end_period བར་ན་སྐྱིན་འགྲུལ་ཅིག་གུ་"
"སྤྲོད་པའི་རིམ་གྱིས་བསག་པའི་མ་རྩ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @rate <= 0ཨིན་པ་ཅིན་, CUMPRINC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @nper <= 0ཨིན་པ་ཅིན་, CUMPRINC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @pv <= 0ཨིན་པ་ཅིན་, CUMPRINC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @start_period < 1ཨིན་པ་ཅིན་, CUMPRINC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @end_period < @start_periodཨིན་པ་ཅིན་, CUMPRINC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @end_period > @nperཨིནཔ་ཅིན་, CUMPRINC དེགིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @type <> 0 and @type <> 1ཨིན་པ་ཅིན་, CUMPRINC དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-financial/functions.c:3869
msgid ""
"@FUNCTION=MDURATION\n"
"@SYNTAX=MDURATION(settlement,maturity,coupon,yield,frequency[,basis])\n"
"@DESCRIPTION=MDURATION returns the Macauley duration for a security with par "
"value 100.\n"
"\n"
"@basis is the type of day counting system you want to use:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  actual days/actual days\n"
"  2  actual days/360\n"
"  3  actual days/365\n"
"  4  European 30/360\n"
"  5  European+ 30/360\n"
"\n"
"* If @settlement or @maturity are not valid dates, MDURATION returns #NUM! "
"error.\n"
"* If @frequency is other than 1, 2, or 4, MDURATION returns #NUM! error.\n"
"* If @basis is omitted, MSRB 30/360 is applied.\n"
"* If @basis is invalid, #NUM! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DURATION,G_DURATION"
msgstr ""
"@FUNCTION=MDURATION\n"
"@SYNTAX=MDURATION(settlement,maturity,coupon,yield,frequency[,basis])\n"
"@DESCRIPTION=MDURATION དེ་གིས་  ༡༠༠་ གི་གནས་གོང་རེ་རེ་དང་ཅགི་ཁར་  སྲུང་སྐྱོབ་ཀཡི་དོན་ལུ་མ་"
"ཀའུ་ལི་དུས་ཡུན་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@basis འདི་  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོ་པའི་ཉིནམ་གྱངས་ཁ་བརྐྱབ་པའི་རིམ་ལུགས་ཨིན།:\n"
"\n"
"  0  MSRB 30/360 (MSRB Rule G33 (e))\n"
"  1  ཉིནམ་ངོ་མ་/ཉིནམ་ངོ་མ་\n"
"  2  ཉིནམ་ངོ་མ་/360\n"
"  3  ཉིནམ་ངོ་མ་/365\n"
"  4  ཡུ་རོ་པིན་ 30/360\n"
"  5  ཡུ་རོ་པིན་+ 30/360\n"
"\n"
"* If @settlement ཡང་ན་ @maturity ཚུ་ ནུས་ཅན་གྱི་ཚེས་གྲངས་མེན་པ་ཅིན་, MDURATION དེ་གིས་ "
"#NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @frequency འདི་ ༡,༢,ཡང་ན་༤,ལས་གཞན་ཨིན་པ་ཅིན་ MDURATION དེ་གིས་ #NUM! འཛོལ་བ་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @basis འདི་སྐྱུར་བཞག་པ་ཅིན་, MSRB 30/360 འདི་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"* If @basis འདི་ནུས་མེད་ཨིན་པ་ཅིན་, #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DURATION,G_DURATION"

#: ../plugins/fn-financial/functions.c:3930
msgid ""
"@FUNCTION=VDB\n"
"@SYNTAX=VDB(cost,salvage,life,start_period,end_period[,factor,switch])\n"
"@DESCRIPTION=VDB calculates the depreciation of an asset for a given period "
"or partial period using the double-declining balance method.\n"
"\n"
"* If @start_period < 0, VDB returns #NUM! error.\n"
"* If @start_period > @end_period, VDB returns #NUM! error.\n"
"* If @end_period > @life, VDB returns #NUM! error.\n"
"* If @cost < 0, VDB returns #NUM! error.\n"
"* If @salvage > @cost, VDB returns #NUM! error.\n"
"* If @factor <= 0, VDB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DB"
msgstr ""
"@FUNCTION=VDB\n"
"@SYNTAX=VDB(cost,salvage,life,start_period,end_period[,factor,switch])\n"
"@DESCRIPTION=VDB དེ་གིས་  ཉམས་པ་གཉིས་ལྡན་ཚད་སྙོམས་ཐབས་ལམ་ལག་ལེན་འཐབ་ཐོག་ལས་  བྱིན་ཡོད་"
"པའི་དུས་ཡུན་ཡང་ན་ཆ་ཤས་དུས་ཡུན་ཅིག་ གི་དོན་ལུ་བདོག་གཏད་ཅིག་གི་གོང་ཆག་འདི་རྩིས་སྟོནམ་ཨིན།\n"
"\n"
"* If @start_period < 0ཨིན་པ་ཅིན་, VDB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @start_period > @end_periodཨིན་པ་ཅིན་, VDB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @end_period > @lifeཨིན་པ་ཅིན་, VDB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @cost < 0ཨིན་པ་ཅིན་, VDB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @salvage > @costཨིན་པ་ཅིན་, VDB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @factor <= 0ཨིན་པ་ཅིན་, VDB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=DB"

#: ../plugins/fn-info/functions.c:69
msgid ""
"@FUNCTION=CELL\n"
"@SYNTAX=CELL(type,ref)\n"
"@DESCRIPTION=CELL returns information about the formatting, location, or "
"contents of a cell.\n"
"\n"
"@type specifies the type of information you want to obtain:\n"
"\n"
"  address    \tReturns the given cell reference as text.\n"
"  col        \t\tReturns the number of the column in @ref.\n"
"  contents   \tReturns the contents of the cell in @ref.\n"
"  format     \t\tReturns the code of the format of the cell.\n"
"  parentheses\tReturns 1 if @ref contains a negative value\n"
"             \t\tand its format displays it with parentheses.\n"
"  row        \t\tReturns the number of the row in @ref.\n"
"  width      \t\tReturns the column width.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Cell(\"format\",A1) returns the code of the format of the cell A1.\n"
"\n"
"@SEEALSO=INDIRECT"
msgstr ""
"@FUNCTION=CELL\n"
"@SYNTAX=CELL(type,ref)\n"
"@DESCRIPTION=CELL དེ་གིས་  རྩ་སྒྲིག་འབད་ནི་  གནས་ཁོངས་ཡང་ན་ནང་ཐིག་གི་ནང་དོན་ཚུ་སླར་ལོག་"
"འབདཝ་ཨིན\n"
"\n"
"@type དེ་གིས་ ཁྱོད་ཀྱིས་ལེན་དགོ་པའི་བརྡ་དོན་གྱི་དབྱེ་བ་འདི་གསལ་བཀོད་འབདཝ་ཨིན།:\n"
"\n"
"  address    \tReturns བྱིད་ཡོད་པའི་ནང་ཐིག་གཞི་བསྟུན་འདི་ཚིག་ཡིག་སྦེ་སླར་ལོག་འབདཝ་ཨིན།\n"
"  col        \t\tReturns ཀེར་ཐིག་གི་ཨང་གྲངས་འདི་@ref ནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"  contents   \tReturns ནང་ཐིག་གི་ནང་དོན་ཚུ་ @ref ནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"  format     \t\tReturns ནང་ཐིག་གི་རྩ་སྒྲིག་ཨང་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"  parentheses\tReturns ༡་ སླར་ལོག་འབདཝ་ཨིན་ ག་དེམ་ཅིག་སྦེ་ @ref དེ་ལུ་མེད་ཆའི་གནས་གོང་ཡོད་"
"པ་ཅིན།\n"
"             \t\tand དེའི་རྩ་སྒྲིག་འདི་གུག་ཤད་དང་ཅིག་ཁར་བཀྲམ་སྟོན་འབདཝ་ཨིན།\n"
"  row        \t\tReturns གྲལ་ཐིག་གི་ཨང་གྲངས་འདི་@refནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"  width      \t\tReturns ཀེར་ཐིག་གི་རྒྱ་ཚད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"Cell(\"format\",A1) ནང་ཐིག་ A1 གི་རྩ་སྒྲིག་ཨང་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=INDIRECT"

#: ../plugins/fn-info/functions.c:1166
msgid ""
"@FUNCTION=EXPRESSION\n"
"@SYNTAX=EXPRESSION(cell)\n"
"@DESCRIPTION=EXPRESSION returns expression in @cell as a string, or empty if "
"the cell is not an expression.\n"
"@EXAMPLES=\n"
"entering '=EXPRESSION(A3)' in A2 = empty (assuming there is nothing in A3).\n"
"entering '=EXPRESSION(A2)' in A1 = 'EXPRESSION(A3)'.\n"
"\n"
"@SEEALSO=TEXT"
msgstr ""
"@FUNCTION=EXPRESSION\n"
"@SYNTAX=EXPRESSION(cell)\n"
"@DESCRIPTION=EXPRESSION དེ་གིས་གསལ་བརྗོད་འདི་ @cell ནང་ཡིག་རྒྱུན་ཅིག་སྦེ་སླར་ལོག་འབདཝ་ཨིན་, "
"ཡང་ན་ནང་ཐིག་འདི་གསལ་བརྗོད་མེད་པ་ཅིན་སྟོངམ་ཨིན།\n"
"@EXAMPLES=\n"
"entering '=EXPRESSION(A3)' ནང་ A2 = སྟོངམ་ (A3ནང་ག་ནི་ཡང་མེདཔ་སྦེ་བཞགཔ་ཨིན).\n"
"entering '=EXPRESSION(A2)' ནང་ A1 = 'EXPRESSION(A3)'.\n"
"\n"
"@SEEALSO=TEXT"

#: ../plugins/fn-info/functions.c:1213
msgid ""
"@FUNCTION=COUNTBLANK\n"
"@SYNTAX=COUNTBLANK(range)\n"
"@DESCRIPTION=COUNTBLANK returns the number of blank cells in a @range.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COUNTBLANK(A1:A20) returns the number of blank cell in A1:A20.\n"
"\n"
"@SEEALSO=COUNT"
msgstr ""
"@FUNCTION=COUNTBLANK\n"
"@SYNTAX=COUNTBLANK(range)\n"
"@DESCRIPTION=COUNTBLANK དེ་གིས་@range ནང་ནང་ཐིག་སྟོངམ་གྱི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COUNTBLANK(A1:A20) དེ་གིས་  ནང་ཐིག་སྟོངམ་གྱི་ཨང་གྲངས་འདི་ A1:A20 ནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=COUNT"

#: ../plugins/fn-info/functions.c:1264
msgid ""
"@FUNCTION=INFO\n"
"@SYNTAX=INFO(type)\n"
"@DESCRIPTION=INFO returns information about the current operating "
"environment. \n"
"\n"
"@type is the type of information you want to obtain:\n"
"\n"
"  memavail \tReturns the amount of memory available, bytes.\n"
"  memused  \tReturns the amount of memory used (bytes).\n"
"  numfile  \t\tReturns the number of active worksheets.\n"
"  osversion\t\tReturns the operating system version.\n"
"  recalc   \t\tReturns the recalculation mode (automatic).\n"
"  release  \t\tReturns the version of Gnumeric as text.\n"
"  system   \t\tReturns the name of the environment.\n"
"  totmem   \t\tReturns the amount of total memory available.\n"
"\n"
"* This function is Excel compatible, except that types directory and origin "
"are not implemented.\n"
"\n"
"@EXAMPLES=\n"
"INFO(\"system\") returns \"Linux\" on a Linux system.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=INFO\n"
"@SYNTAX=INFO(type)\n"
"@DESCRIPTION=INFO དེ་གིས་  ད་ལྟོའི་བཀོལ་སྤྱོདཔ་གི་མཐའ་འཁོར་འདི་གི་སྐོར་ལས་བརྡ་དོན་སླར་ལོག་འབདཝ་"
"ཨིན། \n"
"\n"
"@type འདི་ཁྱོད་ཀཡིས་ཐོབ་དགོ་པའི་བརྡ་དོན་གྱི་དབྱེ་བ་ཨིན།:\n"
"\n"
"  memavail \tReturns དེ་གིས  དྲན་ཚད་ཐོབ་ཚུགསཔ་  བཱའིཊིསི་གི་འབོར་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"  memused  \tReturnsདེ་གིས་ ལག་ལེན་འཐབ་སྟེ་ཡོད་པའི་དྲན་ཚན་ (བཱའིཊིསི་) འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"  numfile  \t\tReturns དེ་གིས་ཤུགས་ལྡན་ལཱ་ཤོག་གི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"  osversion\t\tReturns དེ་གིས་  བཀོལ་སྤྱོད་རིམ་ལུགས་ཐོན་རིམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"  recalc   \t\tReturns དེ་གིས་ ལོག་རྩིས་ཀྱི་ཐབས་ལམ་ (རང་བཞིན་གྱི་) འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"  release  \t\tReturns དེ་གིས་  ཇི་ནུ་མི་རིག་གི་ཐོན་རིམ་འདི་ཚིག་ཡིག་སྦེ་སླར་ལོག་འབདཝ་ཨིན།\n"
"  system   \t\tReturns དེ་གིས་ མཐའ་འཁོར་གྱི་མིང་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"  totmem   \t\tReturns དེ་གིས་  དྲན་ཚད་ཐོབ་ཚུགས་པའི་བསྡོམ་གྱི་འབོར་ཚད་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན་, སྣོད་ཐོ་དང་བྱུང་རིམ་ཚུ་བསྟར་སྤྱོད་མ་འབད་བར་ཡོདཔ་རྐྱངམ་"
"ཅིག་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"INFO(\"system\") དེ་གིས་ \"Linux\" ལི་ནགསི་རིམ་ལུགས་གུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1372
msgid ""
"@FUNCTION=ISERROR\n"
"@SYNTAX=ISERROR(value)\n"
"@DESCRIPTION=ISERROR returns a TRUE value if the expression has an error.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISERROR(NA()) equals TRUE.\n"
"\n"
"@SEEALSO=ERROR"
msgstr ""
"@FUNCTION=ISERROR\n"
"@SYNTAX=ISERROR(value)\n"
"@DESCRIPTION=ISERROR དེ་གིས་ གསལ་བརྗོད་དེ་ལུ་འཛོལ་བ་ཡོད་པ་ཅིན་ གནས་གོང་TRUE འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISERROR(NA()) equals TRUE.\n"
"\n"
"@SEEALSO=ERROR"

#: ../plugins/fn-info/functions.c:1397
msgid ""
"@FUNCTION=ISNA\n"
"@SYNTAX=ISNA(value)\n"
"@DESCRIPTION=ISNA returns TRUE if the value is the #N/A error value.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISNA(NA()) equals TRUE.\n"
"\n"
"@SEEALSO=NA"
msgstr ""
"@FUNCTION=ISNA\n"
"@SYNTAX=ISNA(value)\n"
"@DESCRIPTION=ISNA དེ་གིས་  གནས་གོང་འདི་  #N/A འཛོལ་བའི་གནས་གོང་ཨིན་པ་ཅིན་ TRUE སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISNA(NA()) equals TRUE.\n"
"\n"
"@SEEALSO=NA"

#: ../plugins/fn-info/functions.c:1426
msgid ""
"@FUNCTION=ISERR\n"
"@SYNTAX=ISERR(value)\n"
"@DESCRIPTION=ISERR returns TRUE if the value is any error value except #N/"
"A.\n"
"\n"
"* This function is Excel compatible. \n"
"@EXAMPLES=\n"
"ISERR(NA()) return FALSE.\n"
"\n"
"@SEEALSO=ISERROR"
msgstr ""
"@FUNCTION=ISERR\n"
"@SYNTAX=ISERR(value)\n"
"@DESCRIPTION=ISERR དེ་གིས་  གནས་གོང་འདི་འཛོལ་བའི་གནས་གོང་གང་རུང་ཨིནམ་དང་#N/Aརྐྱངམ་ཅིག་མེན་"
"པ་ཅིན་TRUEསླར་ལོག་འབདཝ་ཨིན།  \n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"@EXAMPLES=\n"
"ISERR(NA()) return FALSE.\n"
"\n"
"@SEEALSO=ISERROR"

#: ../plugins/fn-info/functions.c:1452
msgid ""
"@FUNCTION=ERROR.TYPE\n"
"@SYNTAX=ERROR.TYPE(value)\n"
"@DESCRIPTION=ERROR.TYPE returns an error number corresponding to the given "
"error value.  The error numbers for error values are:\n"
"\n"
"\t#DIV/0!  \t\t2\n"
"\t#VALUE!  \t3\n"
"\t#REF!    \t\t4\n"
"\t#NAME?   \t5\n"
"\t#NUM!    \t\t6\n"
"\t#N/A     \t\t7\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ERROR.TYPE(NA()) equals 7.\n"
"\n"
"@SEEALSO=ISERROR"
msgstr ""
"@FUNCTION=ERROR.TYPE\n"
"@SYNTAX=ERROR.TYPE(value)\n"
"@DESCRIPTION=ERROR.TYPE དེ་གིས་  བྱིན་ཡོད་པའི་འཛོལ་བའི་གནས་གོང་ལུ་ཆ་མཉམ་པའི་འཛོལ་བའི་ཨང་"
"གྲངས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།  འཛོལ་བའི་གནས་གོང་གི་དོན་ལུ་འཛོལ་བའི་ཨང་གྲངས་ཚུ:\n"
"\n"
"\t#DIV/0!  \t\t2\n"
"\t#VALUE!  \t3\n"
"\t#REF!    \t\t4\n"
"\t#NAME?   \t5\n"
"\t#NUM!    \t\t6\n"
"\t#N/A     \t\t7\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ERROR.TYPE(NA()) equals 7.\n"
"\n"
"@SEEALSO=ISERROR"

#: ../plugins/fn-info/functions.c:1494
msgid ""
"@FUNCTION=NA\n"
"@SYNTAX=NA()\n"
"@DESCRIPTION=NA returns the error value #N/A.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NA() equals #N/A error.\n"
"\n"
"@SEEALSO=ISNA"
msgstr ""
"@FUNCTION=NA\n"
"@SYNTAX=NA()\n"
"@DESCRIPTION=NA དེ་གིས་  འཛོལ་བའི་གནས་གོང་ #N/A འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NA() equals #N/A error.\n"
"\n"
"@SEEALSO=ISNA"

#: ../plugins/fn-info/functions.c:1519
msgid ""
"@FUNCTION=ERROR\n"
"@SYNTAX=ERROR(text)\n"
"@DESCRIPTION=ERROR return the specified error.\n"
"\n"
"@EXAMPLES=\n"
"ERROR(\"#OWN ERROR\").\n"
"\n"
"@SEEALSO=ISERROR"
msgstr ""
"@FUNCTION=ERROR\n"
"@SYNTAX=ERROR(text)\n"
"@DESCRIPTION=ERROR དེ་གིས་  གསལ་བཀོད་འབད་དེ་ཡོད་པའི་འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ERROR(\"#OWN ERROR\").\n"
"\n"
"@SEEALSO=ISERROR"

#: ../plugins/fn-info/functions.c:1543
msgid ""
"@FUNCTION=ISBLANK\n"
"@SYNTAX=ISBLANK(value)\n"
"@DESCRIPTION=ISBLANK returns TRUE if the value is blank.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISBLANK(A1).\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISBLANK\n"
"@SYNTAX=ISBLANK(value)\n"
"@DESCRIPTION=ISBLANK དེ་གིས་  གནས་གོང་འདི་སྟོངམ་ཨིན་པ་ཅིན་TRUE སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISBLANK(A1).\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1568
msgid ""
"@FUNCTION=ISEVEN\n"
"@SYNTAX=ISEVEN(value)\n"
"@DESCRIPTION=ISEVEN returns TRUE if the number is even.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISEVEN(4) equals TRUE.\n"
"\n"
"@SEEALSO=ISODD"
msgstr ""
"@FUNCTION=ISEVEN\n"
"@SYNTAX=ISEVEN(value)\n"
"@DESCRIPTION=ISEVEN དེ་གིས་ ཨང་གྲངས་འདི་ཆ་ཅན་ཨིནཔ་ཅིན་TRUE སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISEVEN(4) equals TRUE.\n"
"\n"
"@SEEALSO=ISODD"

#: ../plugins/fn-info/functions.c:1597
msgid ""
"@FUNCTION=ISLOGICAL\n"
"@SYNTAX=ISLOGICAL(value)\n"
"@DESCRIPTION=ISLOGICAL returns TRUE if the value is a logical value.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISLOGICAL(A1).\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISLOGICAL\n"
"@SYNTAX=ISLOGICAL(value)\n"
"@DESCRIPTION=ISLOGICAL དེ་གིས་  གནས་གོང་འདི་གཏན་ཚིག་ཅན་གྱི་གནས་གོང་ཨིན་པ་ཅིན་TRUE སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISLOGICAL(A1).\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1622
msgid ""
"@FUNCTION=ISNONTEXT\n"
"@SYNTAX=ISNONTEXT(value)\n"
"@DESCRIPTION=ISNONTEXT Returns TRUE if the value is not text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISNONTEXT(\"text\") equals FALSE.\n"
"\n"
"@SEEALSO=ISTEXT"
msgstr ""
"@FUNCTION=ISNONTEXT\n"
"@SYNTAX=ISNONTEXT(value)\n"
"@DESCRIPTION=ISNONTEXT དེ་གིས་ གནས་གོང་འདི་ཚིག་ཡིག་མེན་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISNONTEXT(\"text\") equals FALSE.\n"
"\n"
"@SEEALSO=ISTEXT"

#: ../plugins/fn-info/functions.c:1647
msgid ""
"@FUNCTION=ISNUMBER\n"
"@SYNTAX=ISNUMBER(value)\n"
"@DESCRIPTION=ISNUMBER returns TRUE if the value is a number.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISNUMBER(\"text\") equals FALSE.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISNUMBER\n"
"@SYNTAX=ISNUMBER(value)\n"
"@DESCRIPTION=ISNUMBER དེ་གིས་ གནས་གོང་འདི་ཨང་གྲངས་ཨིན་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISNUMBER(\"text\") equals FALSE.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1672
msgid ""
"@FUNCTION=ISODD\n"
"@SYNTAX=ISODD(value)\n"
"@DESCRIPTION=ISODD returns TRUE if the number is odd.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISODD(3) equals TRUE.\n"
"\n"
"@SEEALSO=ISEVEN"
msgstr ""
"@FUNCTION=ISODD\n"
"@SYNTAX=ISODD(value)\n"
"@DESCRIPTION=ISODD དེ་གིས་  ཨང་གྲངས་འདི་ཡ་ཅན་ཨིན་པ་ཅིན་TRUE སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISODD(3) equals TRUE.\n"
"\n"
"@SEEALSO=ISEVEN"

#: ../plugins/fn-info/functions.c:1701
msgid ""
"@FUNCTION=ISREF\n"
"@SYNTAX=ISREF(value)\n"
"@DESCRIPTION=ISREF returns TRUE if the value is a reference.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISREF(A1) equals TRUE.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ISREF\n"
"@SYNTAX=ISREF(value)\n"
"@DESCRIPTION=ISREF དེ་གིས་ གནས་གོང་འདི་གཞི་བསྟུན་ཨིན་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISREF(A1) equals TRUE.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1730
msgid ""
"@FUNCTION=ISTEXT\n"
"@SYNTAX=ISTEXT(value)\n"
"@DESCRIPTION=ISTEXT returns TRUE if the value is text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ISTEXT(\"text\") equals TRUE.\n"
"\n"
"@SEEALSO=ISNONTEXT"
msgstr ""
"@FUNCTION=ISTEXT\n"
"@SYNTAX=ISTEXT(value)\n"
"@DESCRIPTION=ISTEXT དེ་གིས་ གནས་གོང་འདི་ཚིག་ཡིག་ཨིན་པ་ཅིན་ TRUE སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ISTEXT(\"text\") equals TRUE.\n"
"\n"
"@SEEALSO=ISNONTEXT"

#: ../plugins/fn-info/functions.c:1755
msgid ""
"@FUNCTION=N\n"
"@SYNTAX=N(value)\n"
"@DESCRIPTION=N returns a value converted to a number.  Strings containing "
"text are converted to the zero value.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"N(\"42\") equals 42.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=N\n"
"@SYNTAX=N(value)\n"
"@DESCRIPTION=N དེ་གིས་  ཨང་གྲངས་ལུ་གཞི་བསྒྱུར་འབད་དེ་ཡོད་པའི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན།  "
"ཚིག་ཡིག་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་ཀླད་ཀོར་གནས་གོང་ལུ་གཞི་བསྒྱུར་འབད་དེ་ཡོད།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"N(\"42\") equals 42.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1795
msgid ""
"@FUNCTION=TYPE\n"
"@SYNTAX=TYPE(value)\n"
"@DESCRIPTION=TYPE returns a number indicating the data type of a value.\n"
"\n"
"1  == number\n"
"2  == text\n"
"4  == boolean\n"
"16 == error\n"
"64 == array\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TYPE(3) equals 1.\n"
"TYPE(\"text\") equals 2.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=TYPE\n"
"@SYNTAX=TYPE(value)\n"
"@DESCRIPTION=TYPE དེ་གིས་  གནས་གོང་གི་གནས་སྡུད་བརྡ་སྟོན་པའི་ཨང་གྲངས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"1  == ཨང་གྲངས་\n"
"2  == ཚིག་ཡིག་\n"
"4  == བུ་ལིན་\n"
"16 == འཛོལ་བ་\n"
"64 == ཨེ་རེ་\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TYPE(3) equals 1.\n"
"TYPE(\"text\") equals 2.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-info/functions.c:1844
msgid ""
"@FUNCTION=GETENV\n"
"@SYNTAX=GETENV(string)\n"
"@DESCRIPTION=GETENV retrieves a value from the execution environment.\n"
"\n"
"* If the variable specified by @string does not exist, #N/A! will be "
"returned.  Note, that variable names are case sensitive.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=GETENV\n"
"@SYNTAX=GETENV(string)\n"
"@DESCRIPTION=GETENV དེ་གིས་ ལག་ལེན་འཐབ་པའི་མཐའ་འཁོར་ལས་གནས་གོང་ཅིག་སླར་འདྲེན་འབདཝ་ཨིན།\n"
"\n"
"* འགྱུར་ཅན་ @string གིས་གསལ་བཀོད་འབད་དེ་ཡོད་པ་ཅིན་  མེདཔ་ཨིན་, #N/A!  འདི་སླར་ལོག་འབདཝ་"
"ཨིན།  འགྱུར་ཅན་གྱི་མིང་ཚུ་གནད་དོན་ཚོར་ཅན་ཨིན་ཟེར་དྲན་འཛིན་འབད།\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-logical/functions.c:45
msgid ""
"@FUNCTION=AND\n"
"@SYNTAX=AND(b1, b2, ...)\n"
"@DESCRIPTION=AND implements the logical AND function: the result is TRUE if "
"all of the expressions evaluate to TRUE, otherwise it returns FALSE.\n"
"\n"
"@b1 through @bN are expressions that should evaluate to TRUE or FALSE.  If "
"an integer or floating point value is provided, zero is considered FALSE and "
"anything else is TRUE.\n"
"\n"
"* If the values contain strings or empty cells those values are ignored.\n"
"* If no logical values are provided, then the error #VALUE! is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"AND(TRUE,TRUE) equals TRUE.\n"
"AND(TRUE,FALSE) equals FALSE.\n"
"\n"
"Let us assume that A1 holds number five and A2 number one.  Then\n"
"AND(A1>3,A2<2) equals TRUE.\n"
"\n"
"@SEEALSO=OR, NOT"
msgstr ""
"@FUNCTION=AND\n"
"@SYNTAX=AND(b1, b2, ...)\n"
"@DESCRIPTION=AND གཏན་ཚིག་རིག་པ་དང་ལཱ་འགན་འདི་བསྟར་སྤྱོད་འབདཝ་ཨིན: གྲུབ་འབདྲས་འདི་ TRUE "
"ཨིན་  ག་དེམ་ཅིག་སྦེ་གསལ་བརྗོད་ཚུ་ཆ་མཉམ་TRUEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, དེ་མེན་པ་ཅིན་དེ་གིས་ "
"FALSEལུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@b1 འདི་ @bN ལས་ཨིན་མི་ཚུ་  TRUE ཡང་ན་ FALSEལུ་བརྟག་ཞིབ་འབད་དགོ་པའི་གསལ་སྟོན་ཨིན།  ཧྲིལ་"
"གྲངས་ཡང་ན་ལྡིང་བའི་དཔག་ཚད་གནས་གོང་འདི་བྱིན་ཡོད་པ་ཅིན་  ཀླད་ཀོར་འདི་ FALSE སྦེ་ཆ་འཇོག་འབད་ནི་"
"དང་  གཞན་ག་ཅི་སྦེ་རུང་ TRUEཨིན།\n"
"\n"
"* གནས་གོང་ཚུ་གིས་ཡིགརྒྱུན་ཡང་ན་  ནང་ཐིག་སྟོང་པ་ཚུ་གནས་ཡོད་པ་ཅིན་  གནས་གོང་དེ་ཚུ་སྣང་མེད་བཞགཔ་"
"ཨིན།\n"
"* གཏན་ཚིག་རིག་པའི་གནས་གོང་བྱིན་ཏེ་མེད་པ་ཅིན་, དེ་ལས་ འཛོལ་བ་ #VALUE!འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"AND(TRUE,TRUE) equals TRUE.\n"
"AND(TRUE,FALSE) equals FALSE.\n"
"\n"
"ང་བཅས་ཀྱིས་A1 དེ་གིས་  ཨང་གྲངས་ལྔ་འཆང་ནི་དང་ A2 ཨང་གྲངས་དེ་གིས་གཅིག་འཆངམ་ཨིན་ཟེར་བཞག་གེ།  "
"དེ་ལས་\n"
"AND(A1>3,A2<2)  TRUEལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO=OR, NOT"

#: ../plugins/fn-logical/functions.c:112
msgid ""
"@FUNCTION=NOT\n"
"@SYNTAX=NOT(number)\n"
"@DESCRIPTION=NOT implements the logical NOT function: the result is TRUE if "
"the @number is zero;  otherwise the result is FALSE.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NOT(0) equals TRUE.\n"
"NOT(TRUE) equals FALSE.\n"
"\n"
"@SEEALSO=AND, OR"
msgstr ""
"@FUNCTION=NOT\n"
"@SYNTAX=NOT(number)\n"
"@DESCRIPTION=NOT དེ་གིས་གཏན་ཚིག་ཅན་ NOT ལཱ་འགན་འདི་བསྟར་སྤྱོད་འབདཝ་ཨིན:  @number འདི་ཀླད་"
"ཀོར་ཨིན་པ་ཅིན་ གྲུབ་འབྲས་འདི་TRUEཨིན;  དེ་མེན་པ་ཅིན་གྲུབ་འབྲས་འདི་ FALSEཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NOT(0) equals TRUE.\n"
"NOT(TRUE) equals FALSE.\n"
"\n"
"@SEEALSO=AND, OR"

#: ../plugins/fn-logical/functions.c:143
msgid ""
"@FUNCTION=OR\n"
"@SYNTAX=OR(b1, b2, ...)\n"
"@DESCRIPTION=OR implements the logical OR function: the result is TRUE if "
"any of the values evaluated to TRUE.\n"
"\n"
"@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If an "
"integer or floating point value is provided, zero is considered FALSE and "
"anything else is TRUE.\n"
"\n"
"* If the values contain strings or empty cells those values are ignored.\n"
"* If no logical values are provided, then the error #VALUE! is returned.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"OR(TRUE,FALSE) equals TRUE.\n"
"OR(3>4,4<3) equals FALSE.\n"
"\n"
"@SEEALSO=AND, NOT"
msgstr ""
"@FUNCTION=OR\n"
"@SYNTAX=OR(b1, b2, ...)\n"
"@DESCRIPTION=OR དེ་གིས་  གཏན་ཚིག་ཅན་ཡང་ན་ལས་འགན་འདི་བསྟར་སྤྱོད་འབདཝ་ཨིན: གྲུབ་འབྲས་འདི་ "
"TRUE ཨིན་  ག་དེམ་ཅིག་སྦེ་  གནས་གོང་གང་རུང་ཅིག་TRUE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན།\n"
"\n"
"@b1 འདི་ @bN ལས་ཨིན་མི་ཚུ་  TRUE ཡང་ན་ FALSEལུ་བརྟག་ཞིབ་འབད་དགོཔ་འདི་ཨིན།  ཧྲིལ་གྲངས་ཡང་ན་"
"ལྡིང་མི་དཔག་ཚད་གནས་གོང་འདི་བྱིན་ཏེ་ཡོད་པ་ཅིན་, ཀླད་ཀོར་འདི་ FALSE སྦེ་ཆ་འཇོག་འབད་ནི་དང་  དེ་མེན་"
"པ་ཅིན་ TRUE ཨིན།\n"
"\n"
"* གནས་གོང་དེ་གིས་ཡིག་རྒྱུན་ཚུ་ཡང་ན་ ནང་ཐིག་སྟོངམ་ཚུ་གནས་ཏེ་ཡོད་པ་ཅིན་  གནས་གོང་དེ་ཚུ་སྣང་མེད་སྦེ་"
"བཞགཔ་ཨིན།\n"
"* གཏན་ཚིག་ཅན་གྱི་གནས་གོང་ཚུ་བྱིན་ཏེ་མེད་པ་ཅིན་, དེ་ལས་  འཛོལ་བ་ #VALUE! འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"OR(TRUE,FALSE) equals TRUE.\n"
"OR(3>4,4<3) equals FALSE.\n"
"\n"
"@SEEALSO=AND, NOT"

#: ../plugins/fn-logical/functions.c:207
msgid ""
"@FUNCTION=XOR\n"
"@SYNTAX=XOR(b1, b2, ...)\n"
"@DESCRIPTION=XOR implements the logical exclusive OR function: the result is "
"TRUE if an odd number of the values evaluated to TRUE.\n"
"\n"
"@b1 through @bN are expressions that should evaluate to TRUE or FALSE. If an "
"integer or floating point value is provided, zero is considered FALSE and "
"anything else is TRUE.\n"
"\n"
"* If the values contain strings or empty cells those values are ignored.\n"
"* If no logical values are provided, then the error #VALUE! is returned.\n"
"@EXAMPLES=\n"
"XOR(TRUE,FALSE) equals TRUE.\n"
"XOR(3>4,4<3) equals FALSE.\n"
"\n"
"@SEEALSO=OR, AND, NOT"
msgstr ""
"@FUNCTION=XOR\n"
"@SYNTAX=XOR(b1, b2, ...)\n"
"@DESCRIPTION=XOR དེ་གིས་  གཏན་ཚིག་ཅན་གྱི་རྩིས་ནི་ཡང་ན་ལས་འགན་འདི་བསྟར་སྤྱོད་འབདཝ་ཨིན: གྲུབ་"
"འབྲས་འདི་TRUE ཨིན་  ག་དེམ་ཅིག་སྦེ་བརྟག་ཞིབ་འབད་ཡོད་པའི་གནས་གོང་ཚུ་TRUEལུ་བརྟག་ཞིབ་འབད་དེ་ཡོད་པ་"
"ཅིན།\n"
"\n"
"@b1 འདི་ @bN ལས་ཨིན་མི་ཚུ་  TRUE ཡང་ན་ FALSE ལུ་བརྟག་ཞིབ་འབད་དགོ་པའི་གསལ་བརྗོད་ཨིན།  ཧྲིལ་"
"གྲངས་ཡང་ན་ལྡིང་བའི་དོན་ཚན་གནས་གོང་འདི་བྱིན་ཏེ་ཡོད་པ་ཅིན་  ཀླད་ཀོར་འདི་FALSE སྦེ་ཆ་འཇོག་འབད་ཡོདཔ་"
"དང་  གཞན་མི་ཚུ་ TRUEཨིན།\n"
"\n"
"* གནས་གོང་འདི་གིས་  ཡིག་རྒྱུན་ཚུ་ཡང་ན་ནང་ཐིག་སྟོངམ་ཚུ་གནས་ཡོད་པ་ཅིན་གནས་གོང་ཚུ་སྣང་མེད་བཞགཔ་"
"ཨིན།\n"
"* གཏན་ཚིག་གི་གནས་གོང་ཚུ་བྱིན་ཏེ་མེད་པ་ཅིན་, དེ་ལས་ འཛོལ་བ་ #VALUE! འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"@EXAMPLES=\n"
"XOR(TRUE,FALSE) equals TRUE.\n"
"XOR(3>4,4<3) equals FALSE.\n"
"\n"
"@SEEALSO=OR, AND, NOT"

#: ../plugins/fn-logical/functions.c:269
msgid ""
"@FUNCTION=IF\n"
"@SYNTAX=IF(condition[,if-true,if-false])\n"
"@DESCRIPTION=IF function can be used to evaluate conditionally other "
"expressions. IF evaluates @condition.  If @condition returns a non-zero "
"value the result of the IF expression is the @if-true expression, otherwise "
"IF evaluates to the value of @if-false.\n"
"\n"
"* If omitted @if-true defaults to TRUE and @if-false to FALSE.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"IF(FALSE,TRUE,FALSE) equals FALSE.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=IF\n"
"@SYNTAX=IF(condition[,if-true,if-false])\n"
"@DESCRIPTION=IF ལས་འགན་འདི་  གསལ་བརྗོད་གཞན་མི་ཚུ་གནས་སྟངས་ཀྱི་ཐོག་ལས་བརྟག་ཞིབ་འབད་ནི་ལུ་"
"ལག་ལེན་འཐབ་བཏུབ་ཨིན། ག་དེམ་ཅིག་སྦེ་@condition བརྟག་ཞིབ་འབད་བ་ཅིན། If @condition དེ་གིས་  "
"ཀླད་ཀོར་མེན་པའི་གནས་གོང་སླར་ལོག་འབད་བ་ཅིན་  ཨའི་ཨེཕ་གསལ་བརྗོད་ཀྱི་གྲུབ་འབྲས་འདི་ @if-true གསལ་"
"བརྗོད་འདི་ཨིན་, དེ་མེན་པ་ཅིན་  ཨའི་ཨེཕ་དེ་གིས་ @if-false གི་གནས་གོང་ལུ་བརྟག་ཞིབ་འབདཝ་ཨིན།\n"
"\n"
"* སྐྱུར་བཞག་པ་ཅིན་ @if-true དེ་གིས་ TRUE ལུ་སྔོན་སྒྲིག་འབད་ནི་དང་ @if-false འདི་ FALSE ལུ་"
"ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"IF(FALSE,TRUE,FALSE) equals FALSE.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-logical/functions.c:310
msgid ""
"@FUNCTION=TRUE\n"
"@SYNTAX=TRUE()\n"
"@DESCRIPTION=TRUE returns boolean value true.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TRUE() equals TRUE.\n"
"\n"
"@SEEALSO=FALSE"
msgstr ""
"@FUNCTION=TRUE\n"
"@SYNTAX=TRUE()\n"
"@DESCRIPTION=TRUE དེ་གིས་ བུ་ལིན་གནས་གོང་བདེན་པ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TRUE() equals TRUE.\n"
"\n"
"@SEEALSO=FALSE"

#: ../plugins/fn-logical/functions.c:335
msgid ""
"@FUNCTION=FALSE\n"
"@SYNTAX=FALSE()\n"
"@DESCRIPTION=FALSE returns boolean value false.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FALSE() equals FALSE.\n"
"\n"
"@SEEALSO=TRUE"
msgstr ""
"@FUNCTION=FALSE\n"
"@SYNTAX=FALSE()\n"
"@DESCRIPTION=FALSE དེ་གིས་  བུ་ལིན་གནས་གོང་བདེན་པ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FALSE() equals FALSE.\n"
"\n"
"@SEEALSO=TRUE"

#: ../plugins/fn-lookup/functions.c:327
msgid ""
"@FUNCTION=ADDRESS\n"
"@SYNTAX=ADDRESS(row_num,col_num[,abs_num,a1,text])\n"
"@DESCRIPTION=ADDRESS returns a cell address as text for specified row and "
"column numbers.\n"
"\n"
"@a1 is a logical value that specifies the reference style.  If @a1 is TRUE "
"or omitted, ADDRESS returns an A1-style reference, i.e. $D$4.  Otherwise "
"ADDRESS returns an R1C1-style reference, i.e. R4C4.\n"
"\n"
"@text specifies the name of the worksheet to be used as the external "
"reference.\n"
"\n"
"* If @abs_num is 1 or omitted, ADDRESS returns absolute reference.\n"
"* If @abs_num is 2 ADDRESS returns absolute row and relative column.\n"
"* If @abs_num is 3 ADDRESS returns relative row and absolute column.\n"
"* If @abs_num is 4 ADDRESS returns relative reference.\n"
"* If @abs_num is greater than 4 ADDRESS returns #VALUE! error.\n"
"* If @row_num or @col_num is less than one, ADDRESS returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"ADDRESS(5,4) equals \"$D$5\".\n"
"ADDRESS(5,4,4) equals \"D5\".\n"
"ADDRESS(5,4,3,FALSE) equals \"R[5]C4\".\n"
"\n"
"@SEEALSO=COLUMNNUMBER"
msgstr ""
"@FUNCTION=ADDRESS\n"
"@SYNTAX=ADDRESS(row_num,col_num[,abs_num,a1,text])\n"
"@DESCRIPTION=ADDRESS དེ་གིས་  གསལ་བཀོད་འབད་དེ་ཡོད་པའི་གྲལ་ཐིག་དང་ཀེར་ཐིག་ཨང་གྲངས་ཚུ་གི་དོན་"
"ལུ་  ནང་ཐིག་ཁ་བྱང་འདི་ཚིག་ཡིག་སྦེ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@a1 འདི་ གཞི་བསྟུན་བཟོ་རྣམ་གསལ་བཀོད་འབད་མི་གཏན་ཚིག་ཅན་གྱི་གནས་གོང་ཨིན།  ག་དེམ་ཅིག་སྦེ་ @a1 "
"འདི་ TRUE ཡང་ན་སྐྱུར་བཞག་པ་ཅིན་, ADDRESS དེ་གིས་  A1-བཟོ་རྣམ་གཞི་བསྟུན་སླར་ལོག་འབདཝ་ཨིན་, i."
"e. $D$4. དེ་མེན་པ་ཅིན་ ADDRESS དེ་གིས་ R1C1-བཟོ་རྣམ་གཞི་བསྟུན་འདི་སླར་ལོག་འབདཝ་ཨིན་, i.e. "
"R4C4.\n"
"\n"
"@text དེ་གིས་  ཕྱིའི་གཞི་བསྟུན་སྦེ་ལག་ལེན་འཐབ་ནི་ལུ་ལཱ་ཤོག་གི་མིང་འདི་གསལ་བཀོད་འབདཝ་ཨིན།\n"
"\n"
"* If @abs_num འདི་1 ཡང་ན་སྐྱུར་བཞག་པ་ཅིན་, ADDRESS དེ་གིས་ གཞི་བསྟུན་ཡང་དག་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @abs_num འདི་ 2 ADDRESS དེ་གིས་ གྲལ་ཐིག་ཡང་དག་དང་འབྲེལ་མཐུན་ཀེར་ཐིག་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @abs_num འདི་ 3 ADDRESS དེ་གིས་འབྲེལ་མཐུན་གྱི་གྲལ་ཐིག་དང་ཀེར་ཐིག་ཡང་དག་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @abs_num འདི་ 4 ADDRESS དེ་གིས་འབྲེལ་མཐུན་གཞི་བསྟུན་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @abs_num འདི་ 4ལས་སྦོམ་ཨིནཔ་ཅིན་ ADDRESS དེ་གིས་ #VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @row_num ཡང་ན་@col_num འདི་གཅིག་ལས་ཉུང་ཀུ་ཨིན་པ་ཨིན་, ADDRESS དེ་གིས་ #VALUE! "
"འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ADDRESS(5,4) equals \"$D$5\".\n"
"ADDRESS(5,4,4) equals \"D5\".\n"
"ADDRESS(5,4,3,FALSE) equals \"R[5]C4\".\n"
"\n"
"@SEEALSO=COLUMNNUMBER"

#: ../plugins/fn-lookup/functions.c:429
msgid ""
"@FUNCTION=AREAS\n"
"@SYNTAX=AREAS(reference)\n"
"@DESCRIPTION=AREAS returns the number of areas in @reference. \n"
"\n"
"@EXAMPLES=\n"
"AREAS((A1,B2,C3)) equals 3.\n"
"\n"
"@SEEALSO=ADDRESS,INDEX,INDIRECT,OFFSET"
msgstr ""
"@FUNCTION=AREAS\n"
"@SYNTAX=AREAS(reference)\n"
"@DESCRIPTION=AREAS དེ་གིས་ @reference ནང་གི་མངའ་ཁོངས་ཀྱི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན། \n"
"\n"
"@EXAMPLES=\n"
"AREAS((A1,B2,C3)) equals 3.\n"
"\n"
"@SEEALSO=ADDRESS,INDEX,INDIRECT,OFFSET"

#: ../plugins/fn-lookup/functions.c:508
msgid ""
"@FUNCTION=CHOOSE\n"
"@SYNTAX=CHOOSE(index[,value1][,value2]...)\n"
"@DESCRIPTION=CHOOSE returns the value of index @index. @index is rounded to "
"an integer if it is not.\n"
"\n"
"* If @index < 1 or @index > number of values, CHOOSE returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"CHOOSE(3,\"Apple\",\"Orange\",\"Grape\",\"Perry\") equals \"Grape\".\n"
"\n"
"@SEEALSO=IF"
msgstr ""
"@FUNCTION=CHOOSE\n"
"@SYNTAX=CHOOSE(index[,value1][,value2]...)\n"
"@DESCRIPTION=CHOOSE དེ་གིས་  ཟུར་ཐོ་ @index གི་གནས་གོང་སླར་ལོག་འབདཝ་ཨིན། @index འདི་ "
"ཧྲིལ་གྲངས་ལུ་བསྐོར་སྐྱོད་འབད་དེ་ཡོདཔ་ཨིན་  ག་དེམ་ཅིག་སྦེ་མེན་པ་ཅིན།\n"
"\n"
"* If @index < 1 ཡང་ཅིན་ @index > གནས་གོང་གི་ཨང་གྲངས་ཨིན་པ་ཅིན་, CHOOSE དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CHOOSE(3,\"Apple\",\"Orange\",\"Grape\",\"Perry\") equals \"Grape\".\n"
"\n"
"@SEEALSO=IF"

#: ../plugins/fn-lookup/functions.c:562
msgid ""
"@FUNCTION=VLOOKUP\n"
"@SYNTAX=VLOOKUP(value,range,column[,approximate,as_index])\n"
"@DESCRIPTION=VLOOKUP function finds the row in range that has a first column "
"similar to @value.  If @approximate is not true it finds the row with an "
"exact equivalence.  If @approximate is true, then the values must be sorted "
"in order of ascending value for correct function; in this case it finds the "
"row with value less than @value.  It returns the value in the row found at a "
"1-based offset in @column columns into the @range.  @as_index returns the 0-"
"based offset that matched rather than the value.\n"
"\n"
"* VLOOKUP returns #NUM! if @column < 0.\n"
"* VLOOKUP returns #REF! if @column falls outside @range.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=HLOOKUP"
msgstr ""
"@FUNCTION=VLOOKUP\n"
"@SYNTAX=VLOOKUP(value,range,column[,approximate,as_index])\n"
"@DESCRIPTION=VLOOKUP ལཱ་འགན་དེ་གིས་  ཀེར་ཐིག་དང་པ་འདི་@valueལུ་གཅིག་པ་ཡོད་པའི་  ཁྱབ་ཚད་"
"ནང་གི་གྲལ་ཐིག་འཚོལཝ་ཨིན།    @approximate འདི་བདེན་པ་མེན་པ་ཅིན་  དེ་གིས་འདྲ་མཉམ་ངེས་ཏིག་དང་"
"ཅིག་ཁར་གྲལ་ཐིག་འདི་འཚོལཝ་ཨིན།  @approximate འདི་བདེན་པ་ཨིན་པ་ཅིན་, ནོར་བཅོས་མེད་པའི་ལཱ་འགན་"
"གྱི་དོན་ལུ་  གནས་གོང་ཚུ་ཡར་འཛེག་གནས་གོང་རིམ་པའི་ནང་དབྱེ་སེལ་འབད་དགོ་;  གནད་དོན་འདི་ནང་  གྲལ་"
"ཐིག་འདི་ @value ལས་གལ་ཅན་མེདཔ་དང་ཅིག་ཁར་ཐོབ་ཨིན།  དེ་གིས་1-གཞི་རྟེན་ལུ་@column ཀེར་ཐིག་ནང་"
"ཐོབ་མི་@range ནང་གྲལ་ཐིག་ནང་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན། @as_index དེ་གིས་  གནས་གོང་མ་"
"ཡིན་པར་མཐུན་མི་ 0-གཞི་རྟེན་པར་ལེན་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* VLOOKUPདེ་གིས་ #NUM! སླར་ལོག་འབདཝ་ཨིན་ག་དེམ་ཅིག་སྦེ་ @column < 0ཨིན་པ་ཅིན།\n"
"* VLOOKUP དེ་གིས་ #REF!སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ @column འདི་ @range ཕྱི་ཁར་ཚུད་པ་"
"ཅིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=HLOOKUP"

#: ../plugins/fn-lookup/functions.c:623
msgid ""
"@FUNCTION=HLOOKUP\n"
"@SYNTAX=HLOOKUP(value,range,row[,approximate,as_index])\n"
"@DESCRIPTION=HLOOKUP function finds the col in range that has a first row "
"cell similar to @value.  If @approximate is not true it finds the col with "
"an exact equivalence.  If @approximate is true, then the values must be "
"sorted in order of ascending value for correct function; in this case it "
"finds the col with value less than @value it returns the value in the col "
"found at a 1-based offset in @row rows into the @range.  @as_index returns "
"the 0-based offset that matched rather than the value.\n"
"\n"
"* HLOOKUP returns #NUM! if @row < 0.\n"
"* HLOOKUP returns #REF! if @row falls outside @range.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=VLOOKUP"
msgstr ""
"@FUNCTION=HLOOKUP\n"
"@SYNTAX=HLOOKUP(value,range,row[,approximate,as_index])\n"
"@DESCRIPTION=HLOOKUP ལཱ་འགན་དེ་གིས་  @value ལུ་གཅིག་པའི་གྲལ་ཐིག་དང་པའི་ནང་ཐིག་ཅིག་ཡོད་"
"མི་  ཁྱབ་ཚདཚ་ནང་ཀོལ་འདི་འཚོལཝ་ཨིན།  @approximate འདི་བདེན་པ་མེན་པ་ཅིན་  དེ་གིས་ཀོལ་འདི་འདྲ་"
"མཉམ་ངེས་ཏིག་དང་ཅིག་ཁར་ཐོབ་ཨིན། @approximate འདི་བདེན་པ་ཨིན་པ་ཅིན་, དེ་ལས་  ནོར་བཅོས་མེད་"
"པའི་ལཱ་འགན་གྱི་དོན་ལུ་  གནས་གོང་ཚུ་ཡར་འཛེག་གནས་གོང་ནང་གི་རིམ་པའི་ནང་དབྱེ་སེལ་འབད་དགོ་; གནད་དོན་"
"འདི་ནང་  དེ་གིས་ཀོལ་འདི་གནས་གོང་ @value ལས་ཉུངམ་སྦེ་ཐོབ་ཨིན་  དེ་གིས་ཀོལ་ནང་གི་གནས་གོང་1-གཞི་"
"རྟེན་པར་ལེན་གུ་ཐོབ་མི་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ @row གྲལ་ཐིག་ནང་ལས་ @range ནང་ལུ་ཨིན།  "
"@as_index དེ་གིས་  གནས་གོང་མ་ཡིན་པ་མཐུན་མི་0-གཞི་རྟེན་པར་ལེན་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* HLOOKUP དེ་གིས་ #NUM! སླར་ལོག་འབདཝ་ཨིན་ @row < 0ཨིན་པ་ཅིན།\n"
"* HLOOKUP དེ་གིས་ #REF! སླར་ལོག་འབདཝ་ཨིན་ @row འདི་ @range ཕྱི་ཁར་ཚུད་པ་ཅིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=VLOOKUP"

#: ../plugins/fn-lookup/functions.c:685
msgid ""
"@FUNCTION=LOOKUP\n"
"@SYNTAX=LOOKUP(value,vector1[,vector2])\n"
"@DESCRIPTION=LOOKUP function finds the row index of @value in @vector1 and "
"returns the contents of @vector2 at that row index. Alternatively a single "
"array can be used for @vector1. If the area is longer than it is wide then "
"the sense of the search is rotated. \n"
"\n"
"* If LOOKUP can't find @value it uses the largest value less than @value.\n"
"* The data must be sorted.\n"
"* If @value is smaller than the first value it returns #N/A.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=VLOOKUP,HLOOKUP"
msgstr ""
"@FUNCTION=LOOKUP\n"
"@SYNTAX=LOOKUP(value,vector1[,vector2])\n"
"@DESCRIPTION=LOOKUP ལཱ་འགན་འདི་གིས་  @value གི་གྲལ་ཐིག་ཟུར་ཐོ་འདི་@vector1 ནང་འཚོཝལ་"
"ཨིནམ་དང་@vector2གི་ནང་དོན་ཚུ་  གྲལ་ཐིག་ཟུར་ཐོའི་ནང་སླར་ལོག་འབདཝ་ཨིན།   ཐབས་གཞན་གྱི་ཐོག་ལས་  "
"ཨེ་རེ་རྐྱང་པ་འདི་ @vector1དོན་ལུ་ལག་ལེན་འཐབ་ཚུགས། མངའ་ཁོངས་འདི་དེའི་རྒྱ་ཚད་ལས་རིངམ་ཡོད་པ་"
"ཅིན་   འཚོལ་ཞིབ་ཀྱི་དྲན་ཚོར་འདི་བསྒྱིརཝ་ཨིན། \n"
"\n"
"*  LOOKUP དེགིས་ @value མ་ཐོབ་པ་ཅིན་  དེ་གིས་གནས་གོང་ @value ལས་སྦོམ་མི་ཅིག་ལག་ལེན་འཐབ་"
"ཨིན།\n"
"* གནས་སྡུད་འདི་དབྱེ་སེལ་འབདཝ་ཨིན།\n"
"* If @value འདི་གནས་གོང་དངཔ་ལས་ཆུང་ཀུ་ཨིན་པ་ཅིན་ དེ་གིས་ #N/A འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=VLOOKUP,HLOOKUP"

#: ../plugins/fn-lookup/functions.c:751
msgid ""
"@FUNCTION=MATCH\n"
"@SYNTAX=MATCH(seek,vector[,type])\n"
"@DESCRIPTION=MATCH function finds the row index of @seek in @vector and "
"returns it.\n"
"\n"
"If the area is longer than it is wide then the sense of the search is "
"rotated. Alternatively a single array can be used.\n"
"\n"
"* The @type parameter, which defaults to +1, controls the search:\n"
"* If @type = 1, MATCH finds largest value <= @seek.\n"
"* If @type = 0, MATCH finds first value == @seek.\n"
"* If @type = -1, MATCH finds smallest value >= @seek.\n"
"* For @type = 0, the data can be in any order.  * For @type = -1 and @type = "
"+1, the data must be sorted.  (And in these cases, MATCH uses a binary "
"search to locate the index.)\n"
"* If @seek could not be found, #N/A is returned.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOOKUP"
msgstr ""
"@FUNCTION=MATCH\n"
"@SYNTAX=MATCH(seek,vector[,type])\n"
"@DESCRIPTION=MATCH ལཱ་འགན་དེ་གིས་  @seekགི་གྲལ་ཐིག་ཟུར་ཐོ་འདི་ @vector ནང་འཚོལཝ་ཨིནམ་དང་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"མངའ་ཁོངས་འདི་དེའི་རྒྱ་ཚད་ལས་རིངམ་ཨིན་པ་ཅིན་  འཚོལ་ཞིབ་ཀྱི་འཚོར་སྣང་འདི་པད་སྐོར་བསྒྱིར་ཡོདཔ།  ཐབས་"
"གཞན་གྱི་ཐོག་ལས་ཨེ་རེ་རྐྱང་པ་ཅིག་ལག་ལེན་འཐབ་ཚུགས།\n"
"\n"
"* The @type ཚད་བཟུང་, +1 ལུ་སྔོན་སྒྲིག་འབད་མི་དེ་གིས་, འཚོལ་ཞིབ་འདི་ཚད་འཛིན་འབདཝ་ཨིན:\n"
"* If @type = 1ཨིན་པ་ཅིན་, MATCH དེ་གིས་གནས་གོང་སྦོམ་ <= @seekའཚོལཝ་ཨིན།\n"
"* If @type = 0ཨིན་པ་ཅིན་, MATCH དེ་གིས་གནས་གོང་དང་པ་ == @seekའཚོལཝ་ཨིན།\n"
"* If @type = -1ཨིན་པ་ཅིན་, MATCH དེ་གིས་གནས་གོང་ཆུང་ཀུ་འདི་ >= @seekའཚོལཝ་ཨིན།\n"
"* For @type = 0དོན་ལུ་, གནས་སྡུད་འདི་རིམ་པ་གང་རུང་ནང་བཏུབ།  * For @type = -1དང་ "
"@type = +1དོན་ལུ་, གནས་སྡུད་འདི་གསོག་འཇོག་འབད་དགོ།  (གནད་དོན་འདི་ནང་, MATCH དེ་གིས་ ཟུར་ཐོ་"
"འདི་ག་ཡོད་འཚོལ་ནི་ལུ་ཟུང་ལྡན་འཚོལ་ཞིབ་ཅིག་ལག་ལེན་འཐབ་ཨིན།)\n"
"* If @seek འདི་མ་ཐོབ་པ་ཅིན་, #N/A འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOOKUP"

#: ../plugins/fn-lookup/functions.c:809
msgid ""
"@FUNCTION=INDIRECT\n"
"@SYNTAX=INDIRECT(ref_text[,format])\n"
"@DESCRIPTION=INDIRECT function returns the contents of the cell pointed to "
"by the @ref_text string. The string specifies a single cell reference the "
"format of which is either A1 or R1C1 style. The style is set by the @format "
"boolean, which defaults to the A1 style.\n"
"\n"
"* If @ref_text is not a valid reference returns #REF! \n"
"@EXAMPLES=\n"
"If A1 contains 3.14 and A2 contains A1, then\n"
"INDIRECT(A2) equals 3.14.\n"
"\n"
"@SEEALSO=AREAS,INDEX,CELL"
msgstr ""
"@FUNCTION=INDIRECT\n"
"@SYNTAX=INDIRECT(ref_text[,format])\n"
"@DESCRIPTION=INDIRECT ལཱ་འགན་དེགིས་  f@ref_text ཡིག་རྒྱུན་གྱིས་དཔག་སྟེ་ཡོད་པའི་ནང་ཐིག་གི་ནང་"
"དོན་ཚུ་སླར་ལོག་འབདཝ་ཨིན། ཡིག་རྒྱུན་དེ་གིས་  ནང་ཐིག་རྐྱང་པའི་གཞི་བསྟུན་ཅིག་གསལ་བཀོད་འབདཝ་ཨིནམ་དང་  "
"དེ་ཡང་ A1 ཡང་ན་ R1C1 བཟོ་རྣམ་གཉིས་ཀ་ཨིན་མི།  བཟོ་རྣམ་འདི་ @format བུ་ལིན་གྱིས་གཞི་སྒྲིག་འབད་དེ་"
"ཡོདཔ་ཨིན་, A1 བཟོ་རྣམ་ལུ་སྔོན་སྒྲིག་འབད་མི།\n"
"\n"
"* If @ref_text འདི་ནུས་ཅན་ཡོད་འི་གཞི་བསྟུན་མེན་པ་ཅིན་ #REF! སླར་ལོག་འབདཝ་ཨིན།\n"
"@EXAMPLES=\n"
"If A1 དེ་གིས་ 3.14 དང་ A2 ཡོད་པ་ཅིན་ A1, དེ་ལས་\n"
"INDIRECT(A2) མཉམ་ཨིན་3.14.\n"
"\n"
"@SEEALSO=AREAS,INDEX,CELL"

#: ../plugins/fn-lookup/functions.c:858
msgid ""
"@FUNCTION=INDEX\n"
"@SYNTAX=INDEX(array[,row, col, area])\n"
"@DESCRIPTION=INDEX gives a reference to a cell in the given @array.The cell "
"is pointed out by @row and @col, which count the rows and columns in the "
"array.\n"
"\n"
"* If @row and @col are omitted the are assumed to be 1.\n"
"* If the reference falls outside the range of the @array, INDEX returns a "
"#REF! error.\n"
"\n"
"@EXAMPLES=Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, "
"17.3, 21.3, 25.9, and 40.1. Then INDEX(A1:A5,4,1,1) equals 25.9\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=INDEX\n"
"@SYNTAX=INDEX(array[,row, col, area])\n"
"@DESCRIPTION=INDEX དེ་གིས་  བྱིན་ཡོད་པའི་@array ནང་གི་ནང་ཐིག་གཅིག་ལུ་གཞི་བསྟུན་བྱིནམ་ཨིན།  "
"ནང་ཐིག་འདི་@row དང་ @col གིས་དཔག་སྟེ་ཡོདཔ་ཨིན་, དེ་ཡང་ ཨེ་རེ་ནང་གྲལ་ཐིག་དང་ཀེར་ཐིག་ཚུ་གྱངས་ཁ་"
"བརྐྱབ་མི།\n"
"\n"
"* If @row དང་ @col ཚུ་སྐྱུར་བཞག་པ་ཅིན་ 1 སྦེ་བཞག་ནི་ཨིན།\n"
"* གཞི་བསྟུན་འདི་@arrayགི་ཁྱབ་ཚད་ཀྱི་ཕྱི་ཁར་ཚུད་པ་ཅིན་, INDEX དེ་གིས་ #REF! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=ང་བཅས་ཚུ་གིས་  ནང་ཐིག་ A1, A2, ..., A5 དེ་ལུ་ཨང་གྲངས་11.4, 17.3, 21.3, "
"25.9, དང་ 40.1ཡོདཔ་སྦེ་བཞག་གེ། དེ་ལས་ INDEX(A1:A5,4,1,1) འདི་ 25.9མཉམ་ཨིན།\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-lookup/functions.c:944
msgid "COLUMN:vector of column numbers."
msgstr ""

#: ../plugins/fn-lookup/functions.c:945 ../plugins/fn-lookup/functions.c:1124
msgid "[reference]."
msgstr ""

#: ../plugins/fn-lookup/functions.c:947
msgid ""
"COLUMN function returns a Nx1 array containing the series of integers from "
"the first column to the last column of @reference.\n"
"* @reference defaults to the position of the current expression.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, returns "
"#VALUE! error.\n"
msgstr ""

#: ../plugins/fn-lookup/functions.c:954
msgid "COLUMN(A1:C4) equals {1,2,3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:955
msgid "COLUMN(A:C) equals {1,2,3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:956
msgid "COLUMN() in G13 equals 7."
msgstr ""

#: ../plugins/fn-lookup/functions.c:997
msgid ""
"@FUNCTION=COLUMNNUMBER\n"
"@SYNTAX=COLUMNNUMBER(name)\n"
"@DESCRIPTION=COLUMNNUMBER function returns an integer corresponding to the "
"column name supplied as a string.\n"
"\n"
"* If @name is invalid, COLUMNNUMBER returns the #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"COLUMNNUMBER(\"E\") equals 5.\n"
"\n"
"@SEEALSO=ADDRESS"
msgstr ""
"@FUNCTION=COLUMNNUMBER\n"
"@SYNTAX=COLUMNNUMBER(name)\n"
"@DESCRIPTION=COLUMNNUMBER ལཱ་འགན་དེ་གིས་  ཀེར་ཐིག་མིང་ཡིག་རྒྱུན་སྦེ་བཀྲམ་སྤེལ་འབད་དེ་ཡོད་པའི་  "
"ཧྲིལ་གྲངས་ཆ་མཉམ་པ་ཅིག་ལུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @name འདི་ནུས་ཅན་མེད་པ་ཅིན་, COLUMNNUMBER དེ་གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COLUMNNUMBER(\"E\") equals 5.\n"
"\n"
"@SEEALSO=ADDRESS"

#: ../plugins/fn-lookup/functions.c:1032
msgid ""
"@FUNCTION=COLUMNS\n"
"@SYNTAX=COLUMNS(reference)\n"
"@DESCRIPTION=COLUMNS function returns the number of columns in area or array "
"reference.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, COLUMNS "
"returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"COLUMNS(H2:J3) equals 3.\n"
"\n"
"@SEEALSO=COLUMN,ROW,ROWS"
msgstr ""
"@FUNCTION=COLUMNS\n"
"@SYNTAX=COLUMNS(reference)\n"
"@DESCRIPTION=COLUMNS ལཱ་འགན་དེ་གིས་  ཀེར་ཐིག་ཚུ་གི་ཨང་གྲངས་འདི་མངའ་ཁོངས་ཡང་ན་ཨེ་རེ་གཞི་"
"བསྟུན་ཚུ་ནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @reference འདི་  ཨེ་རེ་ཡང་མེན་མི་ཡང་ན་གཞི་བསྟུན་ཡང་མེནམ་  ཡང་ན་ཁྱབ་ཚད་མེན་པ་ཅིན་, "
"COLUMNS དེ་གིས་#VALUE! འཛོལ་བ་འདི་སླར་ལོགའབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COLUMNS(H2:J3) equals 3.\n"
"\n"
"@SEEALSO=COLUMN,ROW,ROWS"

#: ../plugins/fn-lookup/functions.c:1060
msgid ""
"@FUNCTION=OFFSET\n"
"@SYNTAX=OFFSET(range,row,col[,height[,width]])\n"
"@DESCRIPTION=OFFSET function returns a cell range. The cell range starts at "
"offset (@row,@col) from @range, and is of height @height and width @width.\n"
"\n"
"* If @range is neither a reference nor a range, OFFSET returns #VALUE!.\n"
"* If either @height or @width is omitted, the height or width of the "
"reference is used.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=COLUMN,COLUMNS,ROWS,INDEX,INDIRECT,ADDRESS"
msgstr ""
"@FUNCTION=OFFSET\n"
"@SYNTAX=OFFSET(range,row,col[,height[,width]])\n"
"@DESCRIPTION=OFFSET ལཱ་འགན་དེ་གིས་  ནང་ཐིག་ཁྱབ་ཚད་སླར་ལོག་འབདཝ་ཨིན།  ནང་ཐིག་ཁྱམ་ཚད་འདི་ "
"པར་ལེན་(@row,@col) ལུ་@range ལས་འགོ་བཙུགསཔ་ཨིནམ་དང་, དེའི་མཐོ་ཚད་ @height དང་ རྒྱ་ཚད་ "
"@widthཨིན།\n"
"\n"
"* If @range ཁྱབ་ཚད་འདི་གཞི་བསྟུན་ཡང་མེན་  ཁྱབ་ཚད་ཡང་མེན་པ་ཅིན་, OFFSET དེ་གིས་ #VALUE!"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ག་དེམ་ཅིག་སྦེ་ @height ཡང་ན་ @width འདི་སྐྱུར་བཞག་པ་ཅིན་, མཐོ་ཚད་ཡང་ན་རྒྱ་ཚད་འདི་གི་གཞི་"
"བསྟུན་འདི་ལག་ལེན་འཐབ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=COLUMN,COLUMNS,ROWS,INDEX,INDIRECT,ADDRESS"

#: ../plugins/fn-lookup/functions.c:1123
msgid "ROW:vector of row numbers."
msgstr ""

#: ../plugins/fn-lookup/functions.c:1126
msgid ""
"ROW function returns a 1xN array containing the series of integers from the "
"first row to the last row of @reference.\n"
"* @reference defaults to the position of the current expression.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, returns "
"#VALUE! error.\n"
msgstr ""

#: ../plugins/fn-lookup/functions.c:1133
msgid "ROW(A1:D3) equals {1;2;3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:1134
msgid "ROW(1:3) equals {1;2;3}"
msgstr ""

#: ../plugins/fn-lookup/functions.c:1135
msgid "ROW() in G13 equals 13."
msgstr ""

#: ../plugins/fn-lookup/functions.c:1176
msgid ""
"@FUNCTION=ROWS\n"
"@SYNTAX=ROWS(reference)\n"
"@DESCRIPTION=ROWS function returns the number of rows in area or array "
"reference.\n"
"\n"
"* If @reference is neither an array nor a reference nor a range, ROWS "
"returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"ROWS(H7:I13) equals 7.\n"
"\n"
"@SEEALSO=COLUMN,COLUMNS,ROW"
msgstr ""
"@FUNCTION=ROWS\n"
"@SYNTAX=ROWS(reference)\n"
"@DESCRIPTION=ROWS ལཱ་འགན་དེ་གིས་  མངའ་ཁོངས་ཡང་ན་གཞི་བསྟུན་ནང་གི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* If @reference འདི་ཨེ་རེ་ཡང་མེན་ གཞི་བསྟུན་མེན་ཡང་ན་ཁྱབ་ཚད་མེན་པ་ཅིན་, ROWS དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ROWS(H7:I13) equals 7.\n"
"\n"
"@SEEALSO=COLUMN,COLUMNS,ROW"

#: ../plugins/fn-lookup/functions.c:1204
msgid ""
"@FUNCTION=HYPERLINK\n"
"@SYNTAX=HYPERLINK(link_location[,optional_label])\n"
"@DESCRIPTION=HYPERLINK function currently returns its 2nd argument, or if "
"that is omitted the 1st argument.\n"
"\n"
"@EXAMPLES=\n"
"HYPERLINK(\"www.gnome.org\",\"GNOME\").\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=HYPERLINK\n"
"@SYNTAX=HYPERLINK(link_location[,optional_label])\n"
"@DESCRIPTION=HYPERLINK ལཱ་འགན་དེ་གིས་  དེའི་སྒྲུབ་རྟགས་ ༢་པ་འདི་འཕྲལ་རང་སླར་ལོག་འབདཝ་ཨིན་  "
"ཡང་ན་  དེ་སྐྱུར་བཞག་སྟེ་ཡོད་པ་ཅིན་ སྒྲུབ་རྟགས་ ༡་པ།\n"
"\n"
"@EXAMPLES=\n"
"HYPERLINK(\"www.gnome.org\",\"GNOME\").\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-lookup/functions.c:1232
msgid ""
"@FUNCTION=TRANSPOSE\n"
"@SYNTAX=TRANSPOSE(matrix)\n"
"@DESCRIPTION=TRANSPOSE function returns the transpose of the input @matrix.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT"
msgstr ""
"@FUNCTION=TRANSPOSE\n"
"@SYNTAX=TRANSPOSE(matrix)\n"
"@DESCRIPTION=TRANSPOSE ལཱ་འགན་དེགིས་  ཨིན་པུཊི་གི་མགོ་མཇུག་སོར་ནི་འདི་སླར་ལོག་འབདཝ་ཨིན་ "
"@matrix.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT"

#: ../plugins/fn-math/functions.c:77
msgid ""
"@FUNCTION=GCD\n"
"@SYNTAX=GCD(number1,number2,...)\n"
"@DESCRIPTION=GCD returns the greatest common divisor of given numbers.\n"
"\n"
"* If any of the arguments is less than one, GCD returns #NUM! error.\n"
"* If any of the arguments is non-integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GCD(470,770) equals 10.\n"
"GCD(470,770,1495) equals 5.\n"
"\n"
"@SEEALSO=LCM"
msgstr ""
"@FUNCTION=GCD\n"
"@SYNTAX=GCD(number1,number2,...)\n"
"@DESCRIPTION=GCD དེ་གིས་  བྱིན་ཡོད་པའི་མཐུན་མོང་བགོ་བྱེད་སྦོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* སྒྲུབ་རྟགས་གང་རུང་ཅིག་གཅིག་ལས་ཉུངམ་སྦེ་ཡོད་པ་ཅིན་, GCD དེ་གིས་ #NUM! འཛོལ་བབ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* སྒྲུབ་རྟགས་གང་རུངུ་ཅིག་ཧྲིལ་གྲངས་མེན་པ་ཅིན་, དེ་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"GCD(470,770) equals 10.\n"
"GCD(470,770,1495) equals 5.\n"
"\n"
"@SEEALSO=LCM"

#: ../plugins/fn-math/functions.c:148
msgid ""
"@FUNCTION=LCM\n"
"@SYNTAX=LCM(number1,number2,...)\n"
"@DESCRIPTION=LCM returns the least common multiple of integers.  The least "
"common multiple is the smallest positive number that is a multiple of all "
"integer arguments given.\n"
"\n"
"* If any of the arguments is less than one, LCM returns #NUM!.\n"
"* If any of the arguments is non-integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LCM(2,13) equals 26.\n"
"LCM(4,7,5) equals 140.\n"
"\n"
"@SEEALSO=GCD"
msgstr ""
"@FUNCTION=LCM\n"
"@SYNTAX=LCM(number1,number2,...)\n"
"@DESCRIPTION=LCM དེ་གིས་  ཧྲིལ་གྲངས་ཀྱི་མཐུན་མོང་སྙོམས་གྲངས་ཉུང་ཤོས་འདི་སླར་ལོག་འབདཝ་ཨིན།  མཐུན་"
"མོང་སྙོམས་གྲངས་ཉུང་ཤོས་འདི་  བྱིན་ཡོད་པའི་ཧྲིལ་གྲངས་སྒྲུབ་རྟགས་ཆ་མཉམ་གྱི་སྙོམས་གྲངས་ཨིན་པའི་  ཡོད་ཆའི་"
"ཨང་གྲངས་ཆུང་ཀུ་འདི་ཨིན། \n"
"\n"
"* སྒྲུབ་རྟགས་ཚུ་གང་རུང་གཅིག་ལས་ཉུང་མི་ཨིན་པ་ཅིན་, LCM དེ་གིས་ #NUM!སླར་ལོག་འབདཝ་ཨིན།\n"
"* སྒྲུབ་རྟགས་གང་རུང་ཧྲིལ་གྲངས་མེན་པ་ཅིན་, ཆུང་ཀུ་བཟོ་ཡོདཔ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LCM(2,13) equals 26.\n"
"LCM(4,7,5) equals 140.\n"
"\n"
"@SEEALSO=GCD"

#: ../plugins/fn-math/functions.c:218
msgid ""
"@FUNCTION=HYPOT\n"
"@SYNTAX=HYPOT(number1,number2,...)\n"
"@DESCRIPTION=HYPOT returns the square root of the sum of the squares of the "
"arguments.\n"
"\n"
"@EXAMPLES=\n"
"HYPOT(3,4) equals 5.\n"
"\n"
"@SEEALSO=MIN,MAX"
msgstr ""
"@FUNCTION=HYPOT\n"
"@SYNTAX=HYPOT(number1,number2,...)\n"
"@DESCRIPTION=HYPOT དེ་གིས་ སྒྲུབ་རྟགས་ལ་ལོ་ཅིག་གི་གྲུ་བཞི་ཚུ་གི་བསྡོམ་གྱི་རང་བསྒྱུར་རྩ་གྲངས་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"HYPOT(3,4) equals 5.\n"
"\n"
"@SEEALSO=MIN,MAX"

#: ../plugins/fn-math/functions.c:248
msgid ""
"@FUNCTION=ABS\n"
"@SYNTAX=ABS(b1)\n"
"@DESCRIPTION=ABS implements the Absolute Value function:  the result is to "
"drop the negative sign (if present).  This can be done for integers and "
"floating point numbers.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ABS(7) equals 7.\n"
"ABS(-3.14) equals 3.14.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, INT, MOD"
msgstr ""
"@FUNCTION=ABS\n"
"@SYNTAX=ABS(b1)\n"
"@DESCRIPTION=ABS དེ་གིས་  གནས་གོང་ལཱ་འགན་ཡང་དག་འདི་བསྟར་སྤྱོད་འབདཝ་ཨིན:  གྲུབ་འབྲས་འདི་མེད་"
"ཆ་ཨང་རྟགས་ (ཡོད་པ་ཅིན་)བཞག་ནིའི་དོན་ལུ་ཨིན།  འདི་བཟུམ་སྦེ་  ཧྲིལ་གྲངས་ཚུ་དང་དཔག་ཚད་ལྡིང་མི་ཨང་"
"གྲངས་གུ་འབད་བཏུབ།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ABS(7) equals 7.\n"
"ABS(-3.14) equals 3.14.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, INT, MOD"

#: ../plugins/fn-math/functions.c:276
msgid ""
"@FUNCTION=ACOS\n"
"@SYNTAX=ACOS(x)\n"
"@DESCRIPTION=ACOS function calculates the arc cosine of @x; that is the "
"value whose cosine is @x.\n"
"\n"
"* The value it returns is in radians.\n"
"* If @x falls outside the range -1 to 1, ACOS returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ACOS(0.1) equals 1.470629.\n"
"ACOS(-0.1) equals 1.670964.\n"
"\n"
"@SEEALSO=COS, SIN, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ACOS\n"
"@SYNTAX=ACOS(x)\n"
"@DESCRIPTION=ACOS ལཱ་འགན་དེ་གིས་  @x གི་ཨརཀ་ཀོ་སིན་རྩིས་སྟོནམ་ཨིན་; ཀོ་སིན་@xཨིན་པའི་གནས་གོང་"
"ཨིན།\n"
"\n"
"* དེ་གིས་སླར་ལོག་འབད་མི་གནས་གོང་འདི་རེ་ཌི་ཡཱནསི་ནང་ཨིན།\n"
"* If @x འདི་ཁྱབ་ཚད་ -1 to 1ཕྱི་ཁར་ཚུད་པ་ཅིན་, ACOS དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ACOS(0.1) equals 1.470629.\n"
"ACOS(-0.1) equals 1.670964.\n"
"\n"
"@SEEALSO=COS, SIN, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:312
msgid ""
"@FUNCTION=ACOSH\n"
"@SYNTAX=ACOSH(x)\n"
"@DESCRIPTION=ACOSH  function  calculates  the inverse hyperbolic cosine of "
"@x; that is the value whose hyperbolic cosine is @x.\n"
"\n"
"* If @x is less than 1.0, ACOSH() returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"ACOSH(2) equals 1.31696.\n"
"ACOSH(5.3) equals 2.35183.\n"
"\n"
"@SEEALSO=ACOS, ASINH, DEGREES, RADIANS "
msgstr ""
"@FUNCTION=ACOSH\n"
"@SYNTAX=ACOSH(x)\n"
"@DESCRIPTION=ACOSH  ལཱ་འགན་དེ་གིས་  @xགི་ལུགས་ལྡོག་རབ་བཏགས་ཀྱི་རྒྱན་ཅན་ཀོ་སིན་འདི་རྩིས་སྟོནམ་"
"ཨིན; རབ་བཏགས་ཀྱི་རྒྱན་ཅན་ཀོ་སིན་ @xཨིན་པའི་གནས་གོང་ཨིན།\n"
"\n"
"* If @x འདི་1.0ལས་ཉུང་པ་ཅིན་, ACOSH() དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"ACOSH(2) equals 1.31696.\n"
"ACOSH(5.3) equals 2.35183.\n"
"\n"
"@SEEALSO=ACOS, ASINH, DEGREES, RADIANS "

#: ../plugins/fn-math/functions.c:347
msgid ""
"@FUNCTION=ASIN\n"
"@SYNTAX=ASIN(x)\n"
"@DESCRIPTION=ASIN function calculates the arc sine of @x; that is the value "
"whose sine is @x.\n"
"\n"
"* If @x falls outside the range -1 to 1, ASIN returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ASIN(0.5) equals 0.523599.\n"
"ASIN(1) equals 1.570797.\n"
"\n"
"@SEEALSO=SIN, COS, ASINH, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ASIN\n"
"@SYNTAX=ASIN(x)\n"
"@DESCRIPTION=ASIN ལཱ་འགན་དེ་གིས་ @xགི་ཨརཀ་ཀོ་སིན་རྩིས་སྟོནམ་ཨིན་; དེ་ཡང་ སིན་@xཨིན་པའི་གནས་"
"གོང་ཨིན།\n"
"\n"
"* If @x འདི་ ཁྱབ་ཚད་ -1 ལུ་1 ཚུད་པ་ཅིན་, ASIN དེ་གིས་#NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ASIN(0.5) equals 0.523599.\n"
"ASIN(1) equals 1.570797.\n"
"\n"
"@SEEALSO=SIN, COS, ASINH, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:382
msgid ""
"@FUNCTION=ASINH\n"
"@SYNTAX=ASINH(x)\n"
"@DESCRIPTION=ASINH function calculates the inverse hyperbolic sine of @x; "
"that is the value whose hyperbolic sine is @x.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ASINH(0.5) equals 0.481212.\n"
"ASINH(1.0) equals 0.881374.\n"
"\n"
"@SEEALSO=ASIN, ACOSH, SIN, COS, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ASINH\n"
"@SYNTAX=ASINH(x)\n"
"@DESCRIPTION=ASINH ལཱ་འགན་དེ་གིས་  @xགི་ལུགས་ལྡོག་རབ་བཏགས་ཀྱི་རྒྱན་ཅན་སིན་འདི་རྩིས་སྟོནམ་ཨིན་; "
"དེ་ཡང་ རབ་བཏགས་ཀྱི་རྒྱན་ཅན་སིན་ @xཨིན་པའི་གནས་གོང་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ASINH(0.5) equals 0.481212.\n"
"ASINH(1.0) equals 0.881374.\n"
"\n"
"@SEEALSO=ASIN, ACOSH, SIN, COS, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:409
msgid ""
"@FUNCTION=ATAN\n"
"@SYNTAX=ATAN(x)\n"
"@DESCRIPTION=ATAN function calculates the arc tangent of @x; that is the "
"value whose tangent is @x.\n"
"\n"
"* Return value is in radians.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ATAN(0.5) equals 0,463648.\n"
"ATAN(1) equals 0,785398.\n"
"\n"
"@SEEALSO=TAN, COS, SIN, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ATAN\n"
"@SYNTAX=ATAN(x)\n"
"@DESCRIPTION=ATAN ལཱ་འགན་འདི་གིས་  @xགི་ཨརཀ་ཊེན་ཇེནཊི་འདི་རྩིས་སྟོནམ་ཨིན་; དེ་ཡང་ ཊེན་ཇེནཊི་ "
"@xཨིན་པའི་གནས་གོང་ཨིན།\n"
"\n"
"* སླར་ལོག་གནས་གོང་འདི་རེ་ཌི་ཡཱནསི་ནང་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ATAN(0.5) equals 0,463648.\n"
"ATAN(1) equals 0,785398.\n"
"\n"
"@SEEALSO=TAN, COS, SIN, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:437
msgid ""
"@FUNCTION=ATANH\n"
"@SYNTAX=ATANH(x)\n"
"@DESCRIPTION=ATANH function calculates the inverse hyperbolic tangent of @x; "
"that is the value whose hyperbolic tangent is @x.\n"
"\n"
"* If the absolute value of @x is greater than 1.0, ATANH returns #NUM! "
"error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ATANH(0.5) equals 0.549306.\n"
"ATANH(0.8) equals 1.098612.\n"
"\n"
"@SEEALSO=ATAN, TAN, SIN, COS, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ATANH\n"
"@SYNTAX=ATANH(x)\n"
"@DESCRIPTION=ATANH ལཱ་འགན་འདི་གིས་  @xགི་ལུགས་ལྡོག་རབ་བཏགས་ཀྱི་རྒྱན་ཅན་ཊེན་ཇེནཊི་འདི་རྩིས་སྟོནམ་"
"ཨིན་; དེ་ཡང་རབ་བཏགས་ཀྱི་ཊེན་ཇེནཊི་འདི་ @xཨིན་པའི་གནས་གོང་ཨིན།\n"
"\n"
"*  @xགི་ཡང་དག་གནས་གོང་འདི་ 1.0ལས་སྦོམ་ཡོད་པ་ཅིན་, ATANH དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ATANH(0.5) equals 0.549306.\n"
"ATANH(0.8) equals 1.098612.\n"
"\n"
"@SEEALSO=ATAN, TAN, SIN, COS, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:472
msgid ""
"@FUNCTION=ATAN2\n"
"@SYNTAX=ATAN2(b1,b2)\n"
"@DESCRIPTION=ATAN2 function calculates the arc tangent of the two variables "
"@b1 and @b2.  It is similar to calculating the arc tangent of @b2 / @b1, "
"except that the signs of both arguments are used to determine the quadrant "
"of the result.\n"
"\n"
"* The result is in radians.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ATAN2(0.5,1.0) equals 1.107149.\n"
"ATAN2(-0.5,2.0) equals 1.815775.\n"
"\n"
"@SEEALSO=ATAN, ATANH, COS, SIN, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=ATAN2\n"
"@SYNTAX=ATAN2(b1,b2)\n"
"@DESCRIPTION=ATAN2 ལཱ་འགན་འདི་གིས་  འགྱུར་ཅན་གཉིས་ @b1 དང་ @b2གི་ཨརཀ་ཊེན་ཇེནཊི་འདི་རྩིས་"
"སྟོནམ་ཨིན།  དེ་ @b2 / @b1གི་ཨརཀ་ཊེན་ཇེནཊི་རྩིས་སྟོན་ནི་ལུ་གཅིག་པ་ཨིན་, སྒྲུབ་རྟགས་གཉིས་ཆ་རང་གི་ཨང་"
"རྟགས་འདི་  གྲུབ་འབྲས་བཞི་ཆ་གཏན་འབེབས་བཟོ་ནི་ལུ་ལག་ལེན་འཐབ་ཨིན།\n"
"\n"
"* The result is in radians.\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ATAN2(0.5,1.0) equals 1.107149.\n"
"ATAN2(-0.5,2.0) equals 1.815775.\n"
"\n"
"@SEEALSO=ATAN, ATANH, COS, SIN, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:508
msgid ""
"@FUNCTION=CEIL\n"
"@SYNTAX=CEIL(x)\n"
"@DESCRIPTION=CEIL function rounds @x up to the next nearest integer.\n"
"\n"
"\n"
"@EXAMPLES=\n"
"CEIL(0.4) equals 1.\n"
"CEIL(-1.1) equals -1.\n"
"CEIL(-2.9) equals -2.\n"
"\n"
"@SEEALSO=CEILING, FLOOR, ABS, INT, MOD"
msgstr ""
"@FUNCTION=CEIL\n"
"@SYNTAX=CEIL(x)\n"
"@DESCRIPTION=CEIL ལཱ་འགན་འདི་ @x ལུ་  ཧྲིལ་གྲངས་ཀྱི་ཉེ་འདབས་ལུ་བསྐོར་སྐྱོད་འབདཝ་ཨིན།\n"
"\n"
"\n"
"@EXAMPLES=\n"
"CEIL(0.4) equals 1.\n"
"CEIL(-1.1) equals -1.\n"
"CEIL(-2.9) equals -2.\n"
"\n"
"@SEEALSO=CEILING, FLOOR, ABS, INT, MOD"

#: ../plugins/fn-math/functions.c:534
msgid ""
"@FUNCTION=COUNTIF\n"
"@SYNTAX=COUNTIF(range,criteria)\n"
"@DESCRIPTION=COUNTIF function counts the number of cells in the given @range "
"that meet the given @criteria.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39.  Then\n"
"COUNTIF(A1:A5,\"<=28\") equals 3.\n"
"COUNTIF(A1:A5,\"<28\") equals 2.\n"
"COUNTIF(A1:A5,\"28\") equals 1.\n"
"COUNTIF(A1:A5,\">28\") equals 2.\n"
"\n"
"@SEEALSO=COUNT,SUMIF"
msgstr ""
"@FUNCTION=COUNTIF\n"
"@SYNTAX=COUNTIF(range,criteria)\n"
"@DESCRIPTION=COUNTIF ལཱ་འགན་འདི་གིས་  བྱིན་ཡོད་པའི་ @rangeནང་ལུ་ནང་ཐིག་གི་ཨང་གྲངས་  དེ་"
"ཡང་ བྱིན་ཡོད་པའི་ @criteriaལུ་མཐུན་མི་ཅིག་གྱངས་ཁ་བརྐྱབ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་  ནང་ཐིག་ A1, A2, ..., A5 དེ་གིས་ 23, 27, 28, 33, དང་ 39 གནས་ཡོདཔ་སྦེ་"
"བསམ་གེ།  དེ་ལས་\n"
"COUNTIF(A1:A5,\"<=28\") འདི་3ལུ་མཉམ་ཨིན།\n"
"COUNTIF(A1:A5,\"<28\") འདི་2 ལུ་མཉམ་ཨིན།\n"
"COUNTIF(A1:A5,\"28\")འདི་ 1ལུ་མཉམ་ཨིན།\n"
"COUNTIF(A1:A5,\">28\") འདི་ 2ལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO=COUNT,SUMIF"

#: ../plugins/fn-math/functions.c:612
msgid ""
"@FUNCTION=SUMIF\n"
"@SYNTAX=SUMIF(range,criteria[,actual_range])\n"
"@DESCRIPTION=SUMIF function sums the values in the given @range that meet "
"the given @criteria.  If @actual_range is given, SUMIF sums the values in "
"the @actual_range whose corresponding components in @range meet the given "
"@criteria.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39.  Then\n"
"SUMIF(A1:A5,\"<=28\") equals 78.\n"
"SUMIF(A1:A5,\"<28\") equals 50.\n"
"In addition, if the cells B1, B2, ..., B5 hold numbers 5, 3, 2, 6, and 7 "
"then:\n"
"SUMIF(A1:A5,\"<=27\",B1:B5) equals 8.\n"
"\n"
"@SEEALSO=COUNTIF, SUM"
msgstr ""
"@FUNCTION=SUMIF\n"
"@SYNTAX=SUMIF(range,criteria[,actual_range])\n"
"@DESCRIPTION=SUMIF ལཱ་འགན་དེ་གིས་  བྱིན་ཡོད་པའི་f @range ནང་གི་གནས་གོང་དེ་ཡང་བྱིན་ཡོད་པའི་ "
"@criteriaལུ་བསྡོམ་ཨིན།  If @actual_range འདི་བྱིན་ཡདོ་པ་ཅིན་, SUMIF དེ་གིས་ གནས་གོང་འདི་ "
"@actual_range ནང་ལུ་སྦེ་  དེ་ཡང་@range ནང་གི་ཆ་མཉམ་པའི་ཆ་ཤས་དེ་གིས་@criteriaལུ་མཐུན་མི་"
"བསྡོམ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་  ནང་ཐིག་ A1, A2, ..., A5 དེ་གིས་ ཨང་གྲངས་23, 27, 28, 33, དང་ 39 ཡོད་"
"ཟེར་བསམ་གེ།  དེ་ལས་\n"
"SUMIF(A1:A5,\"<=28\") འདི་ 78ལུ་མཉམ་ཨིན།\n"
"SUMIF(A1:A5,\"<28\") འདི་ 50 ལུ་མཉམ་ཨིན།\n"
"ཁ་སྐོང་སྦེ་, ནང་ཐིག་ B1, B2, ..., B5 དེ་གིས་  ཨང་གྲངས་ 5, 3, 2, 6, དང་ 7 འཆང་པ་ཅིན་དེ་"
"ལས་:\n"
"SUMIF(A1:A5,\"<=27\",B1:B5) འདི་8ལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO=COUNTIF, SUM"

#: ../plugins/fn-math/functions.c:736
msgid ""
"@FUNCTION=CEILING\n"
"@SYNTAX=CEILING(x[,significance])\n"
"@DESCRIPTION=CEILING function rounds @x up to the nearest multiple of "
"@significance.\n"
"\n"
"* If @x or @significance is non-numeric CEILING returns #VALUE! error.\n"
"* If @x and @significance have different signs CEILING returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CEILING(2.43,1) equals 3.\n"
"CEILING(123.123,3) equals 126.\n"
"\n"
"@SEEALSO=CEIL, FLOOR, ABS, INT, MOD"
msgstr ""
"@FUNCTION=CEILING\n"
"@SYNTAX=CEILING(x[,significance])\n"
"@DESCRIPTION=CEILING ལཱ་འགན་དེ་གིས་ @x འདི་ @significanceསྙོམས་གྲངས་ཀྱི་ཉེ་འདབས་ལུ་བསྐོར་"
"སྐྱོད་འབདཝ་ཨིན།\n"
"\n"
"* If @x ཡང་ན་ @significance འདི་ཨང་གྲངས་ཀྱི་མེན་མི་ཨིནཔ་ཅིན་ CEILING དེ་གིས་ #VALUE! "
"འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @x དང་ @significance དེ་ལུ་ཨང་རྟགས་སོ་སོ་ཡོད་པ་ཅིན་ CEILING དེ་གིས་ #NUM! འཛོལ་བ་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CEILING(2.43,1) equals 3.\n"
"CEILING(123.123,3) equals 126.\n"
"\n"
"@SEEALSO=CEIL, FLOOR, ABS, INT, MOD"

#: ../plugins/fn-math/functions.c:777
msgid ""
"@FUNCTION=COS\n"
"@SYNTAX=COS(x)\n"
"@DESCRIPTION=COS function returns the cosine of @x, where @x is given in "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COS(0.5) equals 0.877583.\n"
"COS(1) equals 0.540302.\n"
"\n"
"@SEEALSO=COSH, SIN, SINH, TAN, TANH, RADIANS, DEGREES"
msgstr ""
"@FUNCTION=COS\n"
"@SYNTAX=COS(x)\n"
"@DESCRIPTION=COS ལཱ་འགན་དེ་གིས་ @x གི་ཀོ་སིན་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་ @x འདི་རེ་ཌི་ཡཱནསི་"
"ནང་བྱིན་ཡོད་མི།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COS(0.5) equals 0.877583.\n"
"COS(1) equals 0.540302.\n"
"\n"
"@SEEALSO=COSH, SIN, SINH, TAN, TANH, RADIANS, DEGREES"

#: ../plugins/fn-math/functions.c:804
msgid ""
"@FUNCTION=COSH\n"
"@SYNTAX=COSH(x)\n"
"@DESCRIPTION=COSH function returns the hyperbolic cosine of @x, which is "
"defined mathematically as\n"
"\n"
"\t(exp(@x) + exp(-@x)) / 2.\n"
"\n"
"* @x is in radians.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COSH(0.5) equals 1.127626.\n"
"COSH(1) equals 1.543081.\n"
"\n"
"@SEEALSO=COS, SIN, SINH, TAN, TANH, RADIANS, DEGREES, EXP"
msgstr ""
"@FUNCTION=COSH\n"
"@SYNTAX=COSH(x)\n"
"@DESCRIPTION=COSH ལཱ་འགན་འདི་གིས་  @x གི་རབ་བཏགས་ཀྱི་རྒྱན་ཅན་ཀོ་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན་, "
"དེ་ཡང་ རྩིས་ཐོག་ལས་ངོས་འཛིན་འབད་ཡོདཔ་བཟུམ་\n"
"\n"
"\t(exp(@x) + exp(-@x)) / 2.\n"
"\n"
"* @x འདི་རེ་ཌི་ཡཱནསི་ནང་ཡོད།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན.\n"
"\n"
"@EXAMPLES=\n"
"COSH(0.5) equals 1.127626.\n"
"COSH(1) equals 1.543081.\n"
"\n"
"@SEEALSO=COS, SIN, SINH, TAN, TANH, RADIANS, DEGREES, EXP"

#: ../plugins/fn-math/functions.c:832
msgid ""
"@FUNCTION=DEGREES\n"
"@SYNTAX=DEGREES(x)\n"
"@DESCRIPTION=DEGREES computes the number of degrees equivalent to @x "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DEGREES(2.5) equals 143.2394.\n"
"\n"
"@SEEALSO=RADIANS, PI"
msgstr ""
"@FUNCTION=DEGREES\n"
"@SYNTAX=DEGREES(x)\n"
"@DESCRIPTION=DEGREES དེ་གིས་   @x རེ་ཌི་ཡཱནསི་ལུ་ཆ་མཉམ་པའི་ཁུག་ཟུར་གྱི་   ཨང་གྲངས་འདི་རྩིས་"
"བཏོནམ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DEGREES(2.5) equals 143.2394.\n"
"\n"
"@SEEALSO=RADIANS, PI"

#: ../plugins/fn-math/functions.c:859
msgid ""
"@FUNCTION=EXP\n"
"@SYNTAX=EXP(x)\n"
"@DESCRIPTION=EXP computes the value of e (the base of natural logarithms) "
"raised to the power of @x.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EXP(2) equals 7.389056.\n"
"\n"
"@SEEALSO=LOG, LOG2, LOG10"
msgstr ""
"@FUNCTION=EXP\n"
"@SYNTAX=EXP(x)\n"
"@DESCRIPTION=EXP དེ་གིས་ @xནུས་ཤུགས་ལུ་བསྡུ་ལེན་འབད་ཡོད་པའི་ (རང་བཞིན་རྩིས་བརྐྱབ་པའི་གཞི་རྟེན་)"
"གི་གནས་གོང་འདི་རྩིས་བཏོནམ་ཨིན། \n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"EXP(2) equals 7.389056.\n"
"\n"
"@SEEALSO=LOG, LOG2, LOG10"

#: ../plugins/fn-math/functions.c:885
msgid ""
"@FUNCTION=EXPM1\n"
"@SYNTAX=EXPM1(x)\n"
"@DESCRIPTION=EXPM1 computes EXP(@x)-1 with higher resulting precision than "
"the direct formula.\n"
"\n"
"@EXAMPLES=\n"
"EXPM1(0.01) equals 0.01005.\n"
"\n"
"@SEEALSO=EXP, LN1P"
msgstr ""
"@FUNCTION=EXPM1\n"
"@SYNTAX=EXPM1(x)\n"
"@DESCRIPTION=EXPM1 དེ་གིས་  EXP(@x)-1 ཐད་ཀར་མན་ངག་བ་ལྷག་སྟེ་  མཐོ་བའི་གྲུབ་འབྲས་ཀྲིག་ཀྲི་"
"དང་ཅིག་ཁར་རྩིས་བཏོནམ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"EXPM1(0.01) equals 0.01005.\n"
"\n"
"@SEEALSO=EXP, LN1P"

#: ../plugins/fn-math/functions.c:909
msgid ""
"@FUNCTION=FACT\n"
"@SYNTAX=FACT(x)\n"
"@DESCRIPTION=FACT computes the factorial of @x. ie, @x!\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FACT(3) equals 6.\n"
"FACT(9) equals 362880.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=FACT\n"
"@SYNTAX=FACT(x)\n"
"@DESCRIPTION=FACT དེ་གིས་  @x གི་བགོ་གྲངས་འདི་རྩིས་བཏོནམ་ཨིན། ie, @x!\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FACT(3) equals 6.\n"
"FACT(9) equals 362880.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:948
msgid ""
"@FUNCTION=BETA\n"
"@SYNTAX=BETA(a,b)\n"
"@DESCRIPTION=BETA function returns the value of the mathematical beta "
"function extended to all real numbers except 0 and negative integers.\n"
"\n"
"* If @a, @b, or (@a + @b) are non-positive integers, BETA returns #NUM! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"BETA(2,3) equals 0.083333.\n"
"BETA(-0.5,0.5) equals #NUM!.\n"
"\n"
"@SEEALSO=BETALN,GAMMALN"
msgstr ""
"@FUNCTION=BETA\n"
"@SYNTAX=BETA(a,b)\n"
"@DESCRIPTION=BETA ལཱ་འགན་དེ་གིས་  ༠་ དང་མེད་ཆ་ཧྲིལ་གྲངས་རྐྱངམ་ཅིག་མ་བརྩི་བར་   ཨང་གྲངས་ངོ་"
"མ་ཚུ་ཆ་མཉམ་ལུ་རྒྱ་བསྐྱེད་གཏང་པའི་  རྩིས་ཐོག་སྔོན་དཔྱད་ཀྱི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @a, @b, ཡང་ན་ (@a + @b) ཚུ་  ཡོད་ཆ་མེན་པའི་ཧྲིལ་གྲངས་ཚུ་ཨིན་པ་ཅིན་, BETA དེ་གིས་ "
"#NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BETA(2,3) equals 0.083333.\n"
"BETA(-0.5,0.5) equals #NUM!.\n"
"\n"
"@SEEALSO=BETALN,GAMMALN"

#: ../plugins/fn-math/functions.c:981
msgid ""
"@FUNCTION=BETALN\n"
"@SYNTAX=BETALN(a,b)\n"
"@DESCRIPTION=BETALN function returns the natural logarithm of the absolute "
"value of the beta function.\n"
"\n"
"* If @a, @b, or (@a + @b) are non-positive integers, BETALN returns #NUM! \n"
"@EXAMPLES=\n"
"BETALN(2,3) equals -2.48.\n"
"BETALN(-0.5,0.5) equals #NUM!.\n"
"\n"
"@SEEALSO=BETA,GAMMALN"
msgstr ""
"@FUNCTION=BETALN\n"
"@SYNTAX=BETALN(a,b)\n"
"@DESCRIPTION=BETALN ལཱ་འགན་དེ་གིས་  སྔོན་དཔྱད་ལཱ་འགན་གྱི་གནས་གོང་ཡང་དག་གི་  རང་བཞིན་རྩིས་"
"བརྐྱབ་ཐངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @a, @b, or (@a + @b) ཚུ་ ཡོད་ཆ་མེན་པའི་ཧྲིལ་གྲངས་ཨིན་པ་ཅིན་, BETALN དེ་གིས་ #NUM! "
"སླར་ལོག་འབདཝ་ཨིན།\n"
"@EXAMPLES=\n"
"BETALN(2,3) equals -2.48.\n"
"BETALN(-0.5,0.5) equals #NUM!.\n"
"\n"
"@SEEALSO=BETA,GAMMALN"

#: ../plugins/fn-math/functions.c:1013
msgid ""
"@FUNCTION=COMBIN\n"
"@SYNTAX=COMBIN(n,k)\n"
"@DESCRIPTION=COMBIN computes the number of combinations.\n"
"\n"
"* Performing this function on a non-integer or a negative number returns "
"#NUM! error.\n"
"* If @n is less than @k COMBIN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"COMBIN(8,6) equals 28.\n"
"COMBIN(6,2) equals 15.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=COMBIN\n"
"@SYNTAX=COMBIN(n,k)\n"
"@DESCRIPTION=COMBIN དེ་གིས་མཉམ་མཐུད་ཚུ་གི་ཨང་གྲངས་འདི་རྩིས་བརྐྱབ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ ཧྲིལ་གྲངས་མེན་མི་ཡང་ན་མེད་ཆ་ཨང་གྲངས་གུ་ལཱ་འགན་གྲུབ་མི་དེ་གིས་ #NUM! འཛོལ་བ་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* If @n འདི་ @k ལས་ཉུང་མི་ཨིན་པ་ཅིན་COMBIN དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"COMBIN(8,6) equals 28.\n"
"COMBIN(6,2) equals 15.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:1048
msgid "FLOOR:rounds down."
msgstr "FLOOR:མར་བསྐོར་སྐྱོད་འབདཝ་ཨིན།"

#: ../plugins/fn-math/functions.c:1049
msgid "x:value."
msgstr "x:གནས་གོང་།"

#: ../plugins/fn-math/functions.c:1050
msgid "significance:base multiple (defaults to 1 for @x > 0 and -1 for @x <0)"
msgstr ""
"གལ་གནད:གཞི་རྟེན་སྙོམས་གྲངས་ ( @x > 0 དང་ -1 གི་དོན་ལུ་ 1 ལུ་དང་ @x <0དོན་ལུ་སྔོན་སྒྲིག་འབདཝ་"
"ཨིན་)"

#: ../plugins/fn-math/functions.c:1052
msgid ""
"FLOOR function rounds @x down to the next nearest multiple of @significance."
msgstr ""
"FLOOR ལཱ་འགན་དེ་གིས་ @x འདི་@significanceགི་སྙོམས་གྲངས་ཉེ་འདབས་ལུ་བསྐོར་སྐྱོད་འབདཝ་ཨིན།"

#: ../plugins/fn-math/functions.c:1054
msgid "FLOOR(0.5) equals 0."
msgstr "FLOOR(0.5) དེ་གིས་ 0ལུ་མཉམ་ཨིན།"

#: ../plugins/fn-math/functions.c:1055
msgid "FLOOR(5,2) equals 4."
msgstr "FLOOR(5,2) དེ་གིས་ ༤་ལུ་མཉམ་ཨིན།"

#: ../plugins/fn-math/functions.c:1056
msgid "FLOOR(-5,-2) equals -4."
msgstr "FLOOR(-5,-2) དེ་གིས་ -༤་ལུ་མཉམ་ཨིན།"

#: ../plugins/fn-math/functions.c:1057
msgid "FLOOR(-5,2) equals #NUM!."
msgstr "FLOOR(-5,2) དེ་གིས་#NUM!ལུ་མཉམ་ཨིན།"

#: ../plugins/fn-math/functions.c:1084
msgid ""
"@FUNCTION=INT\n"
"@SYNTAX=INT(a)\n"
"@DESCRIPTION=INT function returns the largest integer that is not bigger "
"than its argument.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"INT(7.2) equals 7.\n"
"INT(-5.5) equals -6.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, ABS, MOD"
msgstr ""
"@FUNCTION=INT\n"
"@SYNTAX=INT(a)\n"
"@DESCRIPTION=INT ལཱ་འགན་དེ་གིས་  དེའི་སྒྲུབ་རྟགས་ལས་མ་སྦོམ་མི་ ཧྲིལ་གྲངས་སྦོམ་ཤོས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"INT(7.2) འདི་ 7ལུ་མཉམ་ཨིན།\n"
"INT(-5.5) འདི་ -6ལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, ABS, MOD"

#: ../plugins/fn-math/functions.c:1112
msgid ""
"@FUNCTION=LOG\n"
"@SYNTAX=LOG(x[,base])\n"
"@DESCRIPTION=LOG computes the logarithm of @x in the given base @base.  If "
"no @base is given LOG returns the logarithm in base 10. @base must be > 0. "
"and cannot equal 1.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOG(2) equals 0.30103.\n"
"LOG(8192,2) equals 13.\n"
"\n"
"@SEEALSO=LN, LOG2, LOG10"
msgstr ""
"@FUNCTION=LOG\n"
"@SYNTAX=LOG(x[,base])\n"
"@DESCRIPTION=LOG དེ་གིས་  གཞི་རྟེན་@baseནང་བྱིན་པའི་ @x གི་རྩིས་བརྐྱབ་ཐངས་རྩིས་བརྐྱབ་ཨིན།  "
"@base འདི་བྱིན་ཏེ་མེད་པ་ཅིན་LOG དེ་གིས་རྩིས་བརྐྱབ་ཐངས་འདི་ གཞི་རྟེན་ ༡༠་ ནང་སླར་ལོག་འབདཝ་ཨིན། "
"@base འདི་ > 0 འོང་དགོཔ་དང་ 1 ལུ་མཉམ་མི་ཚུགས།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LOG(2) equals 0.30103.\n"
"LOG(8192,2) equals 13.\n"
"\n"
"@SEEALSO=LN, LOG2, LOG10"

#: ../plugins/fn-math/functions.c:1149
msgid ""
"@FUNCTION=LN\n"
"@SYNTAX=LN(x)\n"
"@DESCRIPTION=LN returns the natural logarithm of @x.\n"
"\n"
"* If @x <= 0, LN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LN(7) equals 1.94591.\n"
"\n"
"@SEEALSO=EXP, LOG2, LOG10"
msgstr ""
"@FUNCTION=LN\n"
"@SYNTAX=LN(x)\n"
"@DESCRIPTION=LN དེ་གིས་ @xགི་རང་བཞིན་མཉམ་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @x <= 0, LN དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LN(7) equals 1.94591.\n"
"\n"
"@SEEALSO=EXP, LOG2, LOG10"

#: ../plugins/fn-math/functions.c:1181
msgid ""
"@FUNCTION=LN1P\n"
"@SYNTAX=LN1P(x)\n"
"@DESCRIPTION=LN1P computes LN(1+@x) with higher resulting precision than the "
"direct formula.\n"
"\n"
"* If @x <= -1, LN1P returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"LN1P(0.01) equals 0.00995.\n"
"\n"
"@SEEALSO=LN, EXPM1"
msgstr ""
"@FUNCTION=LN1P\n"
"@SYNTAX=LN1P(x)\n"
"@DESCRIPTION=LN1P དེ་གིས་  LN(1+@x) འདི་ཐད་ཀར་མན་ངག་ལས་ལྷག་སྟེ  མཐོ་བའི་གྲུབ་འབྲས་ཀྲིཀ་ཀྲི་"
"དང་ཅིག་ཁར་རྩིས་བརྐྱབ་ཨིན།\n"
"\n"
"* If @x <= -1ཨིན་པ་ཅིན་, LN1P དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LN1P(0.01) equals 0.00995.\n"
"\n"
"@SEEALSO=LN, EXPM1"

#: ../plugins/fn-math/functions.c:1213
msgid ""
"@FUNCTION=POWER\n"
"@SYNTAX=POWER(x,y)\n"
"@DESCRIPTION=POWER returns the value of @x raised to the power @y.\n"
"\n"
"\n"
"* If both @x and @y equal 0, POWER returns #NUM! error.\n"
"* If @x = 0 and @y < 0, POWER returns #DIV/0! error.\n"
"* If @x < 0 and @y is non-integer, POWER returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"POWER(2,7) equals 128.\n"
"POWER(3,3.141) equals 31.523749.\n"
"\n"
"@SEEALSO=EXP"
msgstr ""
"@FUNCTION=POWER\n"
"@SYNTAX=POWER(x,y)\n"
"@DESCRIPTION=POWER དེ་གིས་  @xགི་གནས་གོང་ @yནུས་ཤུགས་ལུ་བསྡུ་ལེན་འབད་ཡོདཔ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་@x དང་ @y གཉིས་ཆ་རང་ 0ལུ་མཉམ་པ་ཅིན་, POWER དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* If @x = 0 དང་ @y < 0ཨིནཔ་ཅིན་, POWER དེ་གིས་ #DIV/0! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @x < 0 དང་ @y འདི་ཧྲིལ་གྲངས་མེན་པ་ཅིན་, POWER དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"POWER(2,7) འདི་ 128ལུ་མཉམ་ཨིན།\n"
"POWER(3,3.141)འདི་ 31.523749ལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO=EXP"

#: ../plugins/fn-math/functions.c:1252
msgid ""
"@FUNCTION=LOG2\n"
"@SYNTAX=LOG2(x)\n"
"@DESCRIPTION=LOG2 computes the base-2 logarithm of @x.\n"
"\n"
"* If @x <= 0, LOG2 returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"LOG2(1024) equals 10.\n"
"\n"
"@SEEALSO=EXP, LOG10, LOG"
msgstr ""
"@FUNCTION=LOG2\n"
"@SYNTAX=LOG2(x)\n"
"@DESCRIPTION=LOG2 དེ་གིས་  @xགི་ གཞི་རྟེན་-༢་ རྩིས་བརྐྱབ་ཐང་འདི་རྩིས་བརྐྱབ་ཨིན།\n"
"\n"
"* If @x <= 0ཨིན་པ་ཅིན་, LOG2 དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LOG2(1024) equals 10.\n"
"\n"
"@SEEALSO=EXP, LOG10, LOG"

#: ../plugins/fn-math/functions.c:1282
msgid ""
"@FUNCTION=LOG10\n"
"@SYNTAX=LOG10(x)\n"
"@DESCRIPTION=LOG10 computes the base-10 logarithm of @x.\n"
"\n"
"* If @x <= 0, LOG10 returns #NUM! error.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"LOG10(7) equals 0.845098.\n"
"\n"
"@SEEALSO=EXP, LOG2, LOG"
msgstr ""
"@FUNCTION=LOG10\n"
"@SYNTAX=LOG10(x)\n"
"@DESCRIPTION=LOG10 དེ་གིས་@xགི་གཞི་རྟེན་-༡༠་ རྩིས་བརྐྱབ་ཐང་འདི་རྩིས་བརྐྱབ་ཨིན།\n"
"\n"
"* If @x <= 0ཨིན་པ་ཅིན་, LOG10 དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"LOG10(7) equals 0.845098.\n"
"\n"
"@SEEALSO=EXP, LOG2, LOG"

#: ../plugins/fn-math/functions.c:1313
msgid ""
"@FUNCTION=MOD\n"
"@SYNTAX=MOD(number,divisor)\n"
"@DESCRIPTION=MOD function returns the remainder when @divisor is divided "
"into @number.\n"
"\n"
"* MOD returns #DIV/0! if @divisor is zero.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"MOD(23,7) equals 2.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, ABS, INT, ABS"
msgstr ""
"@FUNCTION=MOD\n"
"@SYNTAX=MOD(number,divisor)\n"
"@DESCRIPTION=MOD ལཱ་འགན་དེ་གིས་ @divisor འདི་ @numberནང་བགོ་བཤའ་བརྐྱབ་ཡོདཔ་ད་  ལྷག་ལུད་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* MOD དེ་གིས་ #DIV/0! སླར་ལོག་འབདཝ་ཨིན་  @divisor འདི་ཀླད་ཀོར་ཨིན་པ་ཅིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"MOD(23,7) equals 2.\n"
"\n"
"@SEEALSO=CEIL, CEILING, FLOOR, ABS, INT, ABS"

#: ../plugins/fn-math/functions.c:1366
msgid ""
"@FUNCTION=RADIANS\n"
"@SYNTAX=RADIANS(x)\n"
"@DESCRIPTION=RADIANS computes the number of radians equivalent to @x "
"degrees.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RADIANS(180) equals 3.14159.\n"
"\n"
"@SEEALSO=PI,DEGREES"
msgstr ""
"@FUNCTION=RADIANS\n"
"@SYNTAX=RADIANS(x)\n"
"@DESCRIPTION=RADIANS དེ་གིས་  @x ཁུག་ཟུར་ལུ་རེ་ཌི་ཡཱནསི་འདྲ་མཉམ་ཡོད་མི་གི་ཨང་གྲངས་འདི་རྩིས་"
"བཏོནམ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RADIANS(180) equals 3.14159.\n"
"\n"
"@SEEALSO=PI,DEGREES"

#: ../plugins/fn-math/functions.c:1393
msgid ""
"@FUNCTION=SIN\n"
"@SYNTAX=SIN(x)\n"
"@DESCRIPTION=SIN function returns the sine of @x, where @x is given in "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SIN(0.5) equals 0.479426.\n"
"\n"
"@SEEALSO=COS, COSH, SINH, TAN, TANH, RADIANS, DEGREES"
msgstr ""
"@FUNCTION=SIN\n"
"@SYNTAX=SIN(x)\n"
"@DESCRIPTION=SIN ལཱ་འགན་འདི་གིས་   @x གི་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་ཡང་@x འདི་རེ་ཌི་"
"ཡཱནསི་ནང་བྱིན་ཡོད་མི།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SIN(0.5) equals 0.479426.\n"
"\n"
"@SEEALSO=COS, COSH, SINH, TAN, TANH, RADIANS, DEGREES"

#: ../plugins/fn-math/functions.c:1419
msgid ""
"@FUNCTION=SINH\n"
"@SYNTAX=SINH(x)\n"
"@DESCRIPTION=SINH function returns the hyperbolic sine of @x, which is "
"defined mathematically as\n"
"\n"
"\t(exp(@x) - exp(-@x)) / 2.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SINH(0.5) equals 0.521095.\n"
"\n"
"@SEEALSO=SIN, COS, COSH, TAN, TANH, DEGREES, RADIANS, EXP"
msgstr ""
"@FUNCTION=SINH\n"
"@SYNTAX=SINH(x)\n"
"@DESCRIPTION=SINH ལཱ་འགན་འདི་གིས་  @x གི་རབ་བཏགས་ཀྱི་རྒྱན་ཅན་སིན་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་"
"ཡང་རྩིས་ཐོག་ལས་ངོས་འཛིན་འབད་ཡོདཔ་བཟུམ་\n"
"\n"
"\t(exp(@x) - exp(-@x)) / 2.\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགཡུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SINH(0.5) equals 0.521095.\n"
"\n"
"@SEEALSO=SIN, COS, COSH, TAN, TANH, DEGREES, RADIANS, EXP"

#: ../plugins/fn-math/functions.c:1446
msgid ""
"@FUNCTION=SQRT\n"
"@SYNTAX=SQRT(x)\n"
"@DESCRIPTION=SQRT function returns the square root of @x.\n"
"\n"
"* If @x is negative, SQRT returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SQRT(2) equals 1.4142136.\n"
"\n"
"@SEEALSO=POWER"
msgstr ""
"@FUNCTION=SQRT\n"
"@SYNTAX=SQRT(x)\n"
"@DESCRIPTION=SQRT ལཱ་འགན་འདི་གིས་  @x གི་རང་བསྒྱུར་རྩ་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @x འདི་མེད་ཆ་ཨིན་པ་ཅིན་, SQRT དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SQRT(2) equals 1.4142136.\n"
"\n"
"@SEEALSO=POWER"

#: ../plugins/fn-math/functions.c:1477
msgid ""
"@FUNCTION=SUMA\n"
"@SYNTAX=SUMA(value1, value2, ...)\n"
"@DESCRIPTION=SUMA computes the sum of all the values and cells referenced in "
"the argument list.  Numbers, text and logical values are included in the "
"calculation too.  If the cell contains text or the argument evaluates to "
"FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, "
"it is counted as one (1).\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43.  Then\n"
"SUMA(A1:A5) equals 107.\n"
"\n"
"@SEEALSO=AVERAGE, SUM, COUNT"
msgstr ""
"@FUNCTION=SUMA\n"
"@SYNTAX=SUMA(value1, value2, ...)\n"
"@DESCRIPTION=SUMA དེ་གིས་སྒྲུབ་རྟགས་ཐོ་ཡིག་ནང་  གནས་གོང་ཆ་མཉམ་དང་ནང་ཐིག་གཞི་བསྟུན་འབད་ཡོདཔ་"
"ཚུ་ཆ་མཉམ་རྩིས་བཏོནམ་ཨིན།  ཨང་གྲངས་ཚུ་, ཚིག་ཡིག་དང་གཏན་ཚིག་ཅན་གྱི་གནས་གོང་ཚུ་  རྩིས་སྟོན་ནི་ནང་ལུ་"
"བཙུགས་ཏེ་ཡོདཔ་ཨིན།  ནང་ཐིག་དེ་གིས་ཚིག་ཡིག་ཡོདཔ་དང་ ཡང་ན་སྒྲུབ་རྟགས་དེ་གིས་ FALSEལུ་བརྟག་ཞིབ་འབད་"
"བ་ཅིན་, འདི་གནས་གོང་ཀླད་ཀོར་སྦེ་རྩིས་ནི་ཨིན་ (0). སྒྲུབ་རྟགས་དེ་གིས་ TRUE ལུ་བརྟག་ཞིབ་འབད་ནི་ཨིན་པ་"
"ཅིན་, འདི་གཅིག་(1) སྦེ་རྩིས་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་  ནང་ཐིག་A1, A2, ..., A5 དེ་གིས་ཨང་གྲངས་ 11, 15, 17, 21, དང་ 43 ཡོདཔ་སྦེ་"
"བཞག་གེ།  དེ་ལས་\n"
"SUMA(A1:A5) མཉམ་ཨིན་107.\n"
"\n"
"@SEEALSO=AVERAGE, SUM, COUNT"

#: ../plugins/fn-math/functions.c:1512
msgid ""
"@FUNCTION=SUMSQ\n"
"@SYNTAX=SUMSQ(value1, value2, ...)\n"
"@DESCRIPTION=SUMSQ returns the sum of the squares of all the values and "
"cells referenced in the argument list.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43.  Then\n"
"SUMSQ(A1:A5) equals 2925.\n"
"\n"
"@SEEALSO=SUM, COUNT"
msgstr ""
"@FUNCTION=SUMSQ\n"
"@SYNTAX=SUMSQ(value1, value2, ...)\n"
"@DESCRIPTION=SUMSQ དེ་གིས་  སྒྲུབ་རྟགས་ཀྱི་ཐོ་ཡིག་ནང་ནང་ཐིག་གཞི་བསྟུན་འབད་ཡོད་མི་དང་གནས་གོང་ཆ་"
"མཉམ་གྱི་  དགུ་འཐབ་བརྐྱབ་པའི་བསྡོམ་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་ ནང་ཐིག་ A1, A2, ..., A5 དེ་གིས་ ཨང་གྲངས་ 11, 15, 17, 21, དང་ 43 ཡོདཔ་"
"སྦེ་བཞག་གེ།  དེ་ལས་\n"
"SUMSQ(A1:A5) equals 2925.\n"
"\n"
"@SEEALSO=SUM, COUNT"

#: ../plugins/fn-math/functions.c:1546
msgid ""
"@FUNCTION=MULTINOMIAL\n"
"@SYNTAX=MULTINOMIAL(value1, value2, ...)\n"
"@DESCRIPTION=MULTINOMIAL returns the ratio of the factorial of a sum of "
"values to the product of factorials.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"MULTINOMIAL(2,3,4) equals 1260.\n"
"\n"
"@SEEALSO=SUM"
msgstr ""
"@FUNCTION=MULTINOMIAL\n"
"@SYNTAX=MULTINOMIAL(value1, value2, ...)\n"
"@DESCRIPTION=MULTINOMIAL དེ་གིས་  བགོ་གྲངས་ཀྱི་ཐོན་སྐྱེད་ལུ་གནས་གོང་བསྡོམ་ཅིག་གི་ བགོ་གྲངས་དཔྱ་"
"ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"MULTINOMIAL(2,3,4) equals 1260.\n"
"\n"
"@SEEALSO=SUM"

#: ../plugins/fn-math/functions.c:1578
msgid ""
"@FUNCTION=G_PRODUCT\n"
"@SYNTAX=G_PRODUCT(value1, value2, ...)\n"
"@DESCRIPTION=G_PRODUCT returns the product of all the values and cells "
"referenced in the argument list.\n"
"\n"
"* Empty cells are ignored and the empty product is 1.\n"
"\n"
"@EXAMPLES=\n"
"G_PRODUCT(2,5,9) equals 90.\n"
"\n"
"@SEEALSO=SUM, COUNT"
msgstr ""
"@FUNCTION=G_PRODUCT\n"
"@SYNTAX=G_PRODUCT(value1, value2, ...)\n"
"@DESCRIPTION=G_PRODUCT དེ་གིས་  སྒྲུབ་རྟགས་ཐོ་ཡིག་ནང་  ནང་ཐིག་ཚུ་གཞི་བསྟུན་འབད་ཡོད་པའི་གནས་"
"གོང་ཆ་མཉམ་གྱི་ཐོན་སྐྱེད་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞག་ཡོདཔ་དང་  ཐོན་སྐྱེད་སྟོངམ་ཚུ་ ༡་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"G_PRODUCT(2,5,9) equals 90.\n"
"\n"
"@SEEALSO=SUM, COUNT"

#: ../plugins/fn-math/functions.c:1609
msgid ""
"@FUNCTION=TAN\n"
"@SYNTAX=TAN(x)\n"
"@DESCRIPTION=TAN function returns the tangent of @x, where @x is given in "
"radians.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TAN(3) equals -0.1425465.\n"
"\n"
"@SEEALSO=TANH, COS, COSH, SIN, SINH, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=TAN\n"
"@SYNTAX=TAN(x)\n"
"@DESCRIPTION=TAN ལཱ་འགན་དེགིས་ @xགི་ཊེན་ཇེནཊི་འདི་སླར་ལགོ་འབདཝ་ཨིན་, དེ་ཡང་ @x འདི་རེ་ཌི་"
"ཡཱནསི་ནང་བྱིན་ཡོདཔ།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TAN(3) equals -0.1425465.\n"
"\n"
"@SEEALSO=TANH, COS, COSH, SIN, SINH, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:1635
msgid ""
"@FUNCTION=TANH\n"
"@SYNTAX=TANH(x)\n"
"@DESCRIPTION=TANH function returns the hyperbolic tangent of @x, which is "
"defined mathematically as \n"
"\n"
"\tsinh(@x) / cosh(@x).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TANH(2) equals 0.96402758.\n"
"\n"
"@SEEALSO=TAN, SIN, SINH, COS, COSH, DEGREES, RADIANS"
msgstr ""
"@FUNCTION=TANH\n"
"@SYNTAX=TANH(x)\n"
"@DESCRIPTION=TANH ལཱ་འགན་དེགིས་  @xརབ་བཏགས་ཀྱི་རྒྱན་ཅན་གྱི་ཊེ་ནཇེནཊི་འདི་སླར་ལོག་འབདཝ་ཨིན་, "
"དེ་ཡང་ རྩིས་ཐོག་ལས་ངོས་འཛིན་འབད་ཡོདཔ་ \n"
"\n"
"\tsinh(@x) / cosh(@x).\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TANH(2) equals 0.96402758.\n"
"\n"
"@SEEALSO=TAN, SIN, SINH, COS, COSH, DEGREES, RADIANS"

#: ../plugins/fn-math/functions.c:1661
msgid ""
"@FUNCTION=PI\n"
"@SYNTAX=PI()\n"
"@DESCRIPTION=PI functions returns the value of pi.\n"
"\n"
"* This function is called with no arguments.\n"
"* This function is Excel compatible, except that it returns pi with a better "
"precision.\n"
"\n"
"@EXAMPLES=\n"
"PI() equals about 3.141593.\n"
"\n"
"@SEEALSO=SQRTPI"
msgstr ""
"@FUNCTION=PI\n"
"@SYNTAX=PI()\n"
"@DESCRIPTION=PI ལཱ་འགན་ཚུ་གིས་  པི་ཨའི་གི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ སྒྲུབ་རྟགས་མེདཔ་སྦེ་འབོ་ཡོདཔ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིནམ་དང་, དེགིས་པི་ཨའི་འདི་ཀྲིག་ཀྲི་དང་ཅིག་ཁར་སླར་ལོག་འབད་མི་"
"རྐྱངམ་ཅིག་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"PI() དེ་གིས་ ཧ་ལམ་མཉམ་ཨིན་ 3.141593.\n"
"\n"
"@SEEALSO=SQRTPI"

#: ../plugins/fn-math/functions.c:1689
msgid ""
"@FUNCTION=TRUNC\n"
"@SYNTAX=TRUNC(number[,digits])\n"
"@DESCRIPTION=TRUNC function returns the value of @number truncated to the "
"number of digits specified.\n"
"\n"
"* If @digits is omitted or negative then @digits defaults to zero.\n"
"* If @digits is not an integer, it is truncated.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"TRUNC(3.12) equals 3.\n"
"TRUNC(4.15,1) equals 4.1.\n"
"\n"
"@SEEALSO=INT"
msgstr ""
"@FUNCTION=TRUNC\n"
"@SYNTAX=TRUNC(number[,digits])\n"
"@DESCRIPTION=TRUNC ལཱ་འགན་འདི་གིས་ གསལ་བཀོད་འབད་ཡོད་པའི་ཨང་ཡིག་ཨང་གྲངས་@numberཆུང་ཀུ་"
"བཟོ་མི་དེ་གི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན་\n"
"\n"
"* If @digits སྐྱུར་བཞག་ཡོདཔ་ཡང་ན་མེད་ཆ་ཨིན་པ་ཅིན་ @digitsཀླད་ཀོར་ལུ་སྔོན་སྒྲིག་འབདཝ་ཨིན།\n"
"* If @digits འདི་ཧྲིལ་གྲངས་ཅིག་མེན་པ་ཅིན་, འདི་བཏོན་བཀོཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"TRUNC(3.12) equals 3.\n"
"TRUNC(4.15,1) equals 4.1.\n"
"\n"
"@SEEALSO=INT"

#: ../plugins/fn-math/functions.c:1735
msgid ""
"@FUNCTION=EVEN\n"
"@SYNTAX=EVEN(number)\n"
"@DESCRIPTION=EVEN function returns the number rounded up to the nearest even "
"integer.  Negative numbers are rounded down.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"EVEN(5.4) equals 6.\n"
"EVEN(-5.4) equals -6.\n"
"\n"
"@SEEALSO=ODD"
msgstr ""
"@FUNCTION=EVEN\n"
"@SYNTAX=EVEN(number)\n"
"@DESCRIPTION=EVEN ལཱ་འགན་དེ་གིས་ཆ་ཅན་ཉེ་འདབས་ཧྲིལ་གྲངས་ལུ་བསྐོར་སྐྱོད་འབད་ཡོད་མི་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།  མེད་ཆའི་ཨང་གྲངས་ཚུ་མར་བསྐོར་སྐྱོད་འབད་དེ་ཡོདཔ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"EVEN(5.4) equals 6.\n"
"EVEN(-5.4) equals -6.\n"
"\n"
"@SEEALSO=ODD"

#: ../plugins/fn-math/functions.c:1779
msgid ""
"@FUNCTION=ODD\n"
"@SYNTAX=ODD(number)\n"
"@DESCRIPTION=ODD function returns the @number rounded up to the nearest odd "
"integer.  Negative numbers are rounded down.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"ODD(4.4) equals 5.\n"
"ODD(-4.4) equals -5.\n"
"\n"
"@SEEALSO=EVEN"
msgstr ""
"@FUNCTION=ODD\n"
"@SYNTAX=ODD(number)\n"
"@DESCRIPTION=ODD ལཱའགན་དེ་གིས་ @number ཡ་ཅན་ཧྲིལ་གྲངས་ཉེ་འདབས་ལུ་བསྐོར་སྐྱོད་འབད་ཡོདཔ་ཨིན།  "
"མེད་ཆའི་ཨང་གྲངས་ཚུ་མར་བསྐོར་སྐྱོད་འབད་ཡོདཔ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"ODD(4.4) equals 5.\n"
"ODD(-4.4) equals -5.\n"
"\n"
"@SEEALSO=EVEN"

#: ../plugins/fn-math/functions.c:1823
msgid ""
"@FUNCTION=FACTDOUBLE\n"
"@SYNTAX=FACTDOUBLE(number)\n"
"@DESCRIPTION=FACTDOUBLE function returns the double factorial of a @number, "
"i.e., x!!.\n"
"\n"
"* If @number is not an integer, it is truncated.\n"
"* If @number is negative FACTDOUBLE returns #NUM! error.\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"FACTDOUBLE(5) equals 15.\n"
"\n"
"@SEEALSO=FACT"
msgstr ""
"@FUNCTION=FACTDOUBLE\n"
"@SYNTAX=FACTDOUBLE(number)\n"
"@DESCRIPTION=FACTDOUBLE ལཱ་འགན་དེ་གིས་   @number, i.e., x!!.གི་བགོ་གྲངས་གཉིས་ལྡན་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @number འདི་ཧྲིལ་གྲངས་མེན་པ་ཅིན་, འདི་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* If @number འདི་མེད་ཆ་ཨི་ནཔ་ཅིན་ FACTDOUBLE དེ་གིས་  #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"FACTDOUBLE(5) equals 15.\n"
"\n"
"@SEEALSO=FACT"

#: ../plugins/fn-math/functions.c:1870
msgid ""
"@FUNCTION=FIB\n"
"@SYNTAX=FIB(number)\n"
"@DESCRIPTION=FIB function computes Fibonacci numbers.\n"
"\n"
"* If @number is not an integer, it is truncated.\n"
"* If @number is negative or zero FIB returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"FIB(12) equals 144.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=FIB\n"
"@SYNTAX=FIB(number)\n"
"@DESCRIPTION=FIB ལཱ་འགན་དེ་གིས་ ཕི་བོ་ན་སི་ཨང་གྲངས་ཚུ་རྩིས་བཏོནམ་ཨིན།\n"
"\n"
"* If @number འདི་ཧྲིལ་གྲངས་མེན་པ་ཅིན་,འདི་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* If @number འདི་མེད་ཆ་ཡང་ན་ཀླད་ཀོར་ཨིན་པ་ཅིན་FIB དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FIB(12) equals 144.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:1921
msgid ""
"@FUNCTION=QUOTIENT\n"
"@SYNTAX=QUOTIENT(numerator,denominator)\n"
"@DESCRIPTION=QUOTIENT function returns the integer portion of a division.  "
"@numerator is the divided number and @denominator is the divisor.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"QUOTIENT(23,5) equals 4.\n"
"\n"
"@SEEALSO=MOD"
msgstr ""
"@FUNCTION=QUOTIENT\n"
"@SYNTAX=QUOTIENT(numerator,denominator)\n"
"@DESCRIPTION=QUOTIENT ལཱ་འགན་དེ་གིས་  བགོ་བཤའི་ཧྲིལ་གྲངས་ཆ་ཤས་འདི་སླར་ལོག་འབདཝ་ཨིན།  "
"@numerator འདི་བགོ་བཤའ་བརྐྱབ་ཡོད་པའི་ཨང་གྲངས་དང་ @denominator འདི་བགོ་བྱེད་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"QUOTIENT(23,5) equals 4.\n"
"\n"
"@SEEALSO=MOD"

#: ../plugins/fn-math/functions.c:1954
msgid ""
"@FUNCTION=SIGN\n"
"@SYNTAX=SIGN(number)\n"
"@DESCRIPTION=SIGN function returns 1 if the @number is positive, zero if the "
"@number is 0, and -1 if the @number is negative.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"SIGN(3) equals 1.\n"
"SIGN(-3) equals -1.\n"
"SIGN(0) equals 0.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=SIGN\n"
"@SYNTAX=SIGN(number)\n"
"@DESCRIPTION=SIGN ལཱ་འགན་དེ་གིས་  ༡་སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ @number འདི་ཡོད་ཆ་"
"ཨིན་པ་ཅིན་, ཀླད་ཀོར་  ག་དེམ་ཅིག་སྦེ་ @number འདི་ 0ཨིན་པ་ཅིན་, དང་ -1 ག་དེམ་ཅིག་སྦེ་ "
"@number འདི་མེད་ཆ་ཨིནཔ་ཅིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"SIGN(3) equals 1.\n"
"SIGN(-3) equals -1.\n"
"SIGN(0) equals 0.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:1989
msgid ""
"@FUNCTION=SQRTPI\n"
"@SYNTAX=SQRTPI(number)\n"
"@DESCRIPTION=SQRTPI function returns the square root of a @number multiplied "
"by pi.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SQRTPI(2) equals 2.506628275.\n"
"\n"
"@SEEALSO=PI"
msgstr ""
"@FUNCTION=SQRTPI\n"
"@SYNTAX=SQRTPI(number)\n"
"@DESCRIPTION=SQRTPI ལཱ་འགན་དེ་གིས་@numberགི་རང་བསྒྱུར་རྩ་གྲངས་ པི་ཨའི་གིས་དགུ་འཐབ་བརྐྱབ་ཡོདཔ་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SQRTPI(2) equals 2.506628275.\n"
"\n"
"@SEEALSO=PI"

#: ../plugins/fn-math/functions.c:2020
msgid ""
"@FUNCTION=ROUNDDOWN\n"
"@SYNTAX=ROUNDDOWN(number[,digits])\n"
"@DESCRIPTION=ROUNDDOWN function rounds a given @number towards 0.\n"
"\n"
"@number is the number you want rounded toward 0 and @digits is the number of "
"digits to which you want to round that number.\n"
"\n"
"* If @digits is greater than zero, @number is rounded toward 0 to the given "
"number of digits.\n"
"* If @digits is zero or omitted, @number is rounded toward 0 to the next "
"integer.\n"
"* If @digits is less than zero, @number is rounded toward 0 to the left of "
"the decimal point.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROUNDDOWN(5.5) equals 5.\n"
"ROUNDDOWN(-3.3) equals -3.\n"
"ROUNDDOWN(1501.15,1) equals 1501.1.\n"
"ROUNDDOWN(1501.15,-2) equals 1500.0.\n"
"\n"
"@SEEALSO=ROUND,ROUNDUP"
msgstr ""
"@FUNCTION=ROUNDDOWN\n"
"@SYNTAX=ROUNDDOWN(number[,digits])\n"
"@DESCRIPTION=ROUNDDOWN ལཱ་འགན་དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་ @number འདི་ 0 ལུ་བསྐོར་སྐྱོད་འབདཝ་"
"ཨིན།\n"
"\n"
"@number འདི་  ཁྱོད་ཀྱིས་དགོ་པའི་ཨང་གྲངས་0 ལུ་བསྐོར་སྐྱོད་འབད་ཡོདཔ་འདི་ཨིནམ་དང་ @digits འདི་  "
"ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་བསྐོར་སྐྱོད་འབད་དགོ་པའི་ཨང་ཡིག་གི་ཨང་གྲངས་འདི་ཨིན།\n"
"\n"
"* If @digits འདི་ཀླད་ཀོར་ལས་སྦོམ་ཨིན་པ་ཅིན་, @number འདི་ བྱིན་ཡོད་པའི་ཨང་གྲངས་ཀྱི་ཨང་ཡིག་"
"ལུ་  ༠ བསྐོར་སྐྱོད་འབད་ཡོདཔ་འདི་ཨིན།\n"
"* If @digits འདི་ཀླད་ཀོར་ཡང་ན་སྐྱུར་བཞག་སྟེ་ཡོད་པ་ཅིན་, @number འདི་ཤུལ་མའི་ཧྲིལ་གྲངས་ལུ་  ༠ "
"བསྐོར་སྐྱོད་འབད་ཡོདཔ་ཨིན།\n"
"* If @digits འདི་ཀླད་ཀོར་ལས་ཉུང་མི་ཨིན་པ་ཅིན་, @number འདི་  བཅུ་ཚག་དཔག་ཚད་ཀྱི་གཡོན་ལུ་"
"བསྐོར་སྐྱོད་འབད་ཡོདཔ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ROUNDDOWN(5.5) equals 5.\n"
"ROUNDDOWN(-3.3) equals -3.\n"
"ROUNDDOWN(1501.15,1) equals 1501.1.\n"
"ROUNDDOWN(1501.15,-2) equals 1500.0.\n"
"\n"
"@SEEALSO=ROUND,ROUNDUP"

#: ../plugins/fn-math/functions.c:2057
msgid ""
"@FUNCTION=ROUND\n"
"@SYNTAX=ROUND(number[,digits])\n"
"@DESCRIPTION=ROUND function rounds a given number.\n"
"\n"
"@number is the number you want rounded and @digits is the number of digits "
"to which you want to round that number.\n"
"\n"
"* If @digits is greater than zero, @number is rounded to the given number of "
"digits.\n"
"* If @digits is zero or omitted, @number is rounded to the nearest integer.\n"
"* If @digits is less than zero, @number is rounded to the left of the "
"decimal point.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROUND(5.5) equals 6.\n"
"ROUND(-3.3) equals -3.\n"
"ROUND(1501.15,1) equals 1501.2.\n"
"ROUND(1501.15,-2) equals 1500.0.\n"
"\n"
"@SEEALSO=ROUNDDOWN,ROUNDUP"
msgstr ""
"@FUNCTION=ROUND\n"
"@SYNTAX=ROUND(number[,digits])\n"
"@DESCRIPTION=ROUND ལཱ་འགན་དེ་གིས་ བྱིན་ཏེ་ཡོད་པའི༥་ཨང་གྲངས་ཅིག་བསྐོ་སྐྱོད་འབདཝ་ཨིན།\n"
"\n"
"@number འདི་  ཁྱོད་ལུ་དགོ་པའི་བསྐོར་སྐྱོད་ཨང་གྲངས་འདི་ཨིནམ་དང་  @digits འདི་  ཁྱོད་ཀྱིས་ཨང་གྲངས་"
"འདི་བསྐོར་སྐྱོད་འབད་དགོ་པའི་  ཨང་ཡིག་ཨང་གྲངས་འདི་ཨིན།\n"
"\n"
"* If @digits འདི་ཀླད་ཀོར་ལས་སྦོམ་ཨིན་, @number འདི་ཨང་ཡིག་གི་བྱིན་ཡོད་པའི་ཨང་གྲངས་ལུ་བསྐོར་སྐྱོད་"
"འབདཝ་ཨིན།\n"
"* If @digits འདི་ཀླད་ཀོར་ཡང་ན་སྐྱུར་བཞག་ཡོདཔ་ཨིན་ @number འདི་  ཉེ་འདབས་ཀྱི་ཧྲིལ་གྲངས་ལུ་བསྐོར་"
"སྐྱོད་འབདཝ་ཨིན།\n"
"* If @digits འདི་ཀླད་ཀོར་ལས་ཉུང་ཀུ་ཡོདཔ་ཨིན་, @number འདི་བཅུ་ཚག་ཡིག་ཚད་ཀྱི་གཡོན་ལུ་བསྐོར་སྐྱོད་"
"འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ROUND(5.5) equals 6.\n"
"ROUND(-3.3) equals -3.\n"
"ROUND(1501.15,1) equals 1501.2.\n"
"ROUND(1501.15,-2) equals 1500.0.\n"
"\n"
"@SEEALSO=ROUNDDOWN,ROUNDUP"

#: ../plugins/fn-math/functions.c:2111
msgid ""
"@FUNCTION=ROUNDUP\n"
"@SYNTAX=ROUNDUP(number[,digits])\n"
"@DESCRIPTION=ROUNDUP function rounds a given number away from 0.\n"
"\n"
"@number is the number you want rounded away from 0 and @digits is the number "
"of digits to which you want to round that number.\n"
"\n"
"* If @digits is greater than zero, @number is rounded away from 0 to the "
"given number of digits.\n"
"* If @digits is zero or omitted, @number is rounded away from 0 to the next "
"integer.\n"
"* If @digits is less than zero, @number is rounded away from 0 to the left "
"of the decimal point.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROUNDUP(5.5) equals 6.\n"
"ROUNDUP(-3.3) equals -4.\n"
"ROUNDUP(1501.15,1) equals 1501.2.\n"
"ROUNDUP(1501.15,-2) equals 1600.0.\n"
"\n"
"@SEEALSO=ROUND,ROUNDDOWN"
msgstr ""
"@FUNCTION=ROUNDUP\n"
"@SYNTAX=ROUNDUP(number[,digits])\n"
"@DESCRIPTION=ROUNDUP ལཱ་འགན་འདི་གིས་  བྱིན་ཡོད་པའི་ཨང་གྲངས་འདི་ ༠་ ལས་ཐག་རིང་སྦེ་བསྐོར་སྐྱོད་"
"འབདཝ་ཨིན།\n"
"\n"
"@number འདི་  ཁྱོད་ཀྱིས་ ༠་ ལས་ཐག་རིང་ལུ་བསྐོར་སྐྱོད་འབད་དགོ་པའི་ཨང་གྲངས་ཨིནམ་དང་ @digits "
"འདི་ ཁྱོད་ཀྱིས་ཨང་གྲངས་འདི་བསྐོར་སྐྱོད་འབད་དགོ་པའི་ཨང་ཡིག་གི་ཨང་གྲངས་འདི་ཨིན།\n"
"\n"
"* If @digits འདི་ཀླད་ཀོར་ལས་སྦོམ་ཨིན་, @number འདི་ ཨང་ཡིག་གི་ཨང་གྲངས་བྱིན་ཡོད་མི་ལུ་  ༠་ "
"ལས་ཐག་རིང་ལུ་བསྐོར་སྐྱོད་འབད་ཡོདཔ་འདི་ཨིན།\n"
"* If @digits འདི་ཀླད་ཀོར་ཡང་ན་སྐྱུར་བཞག་པ་ཅིན་, @number འདི་ཤུལ་མའི་ཧྲིལ་གྲངས་ལུ་  ༠་ ལས་"
"ཐག་རིང་སྦེ་བསྐོར་སྐྱོད་འབད་ཡོདཔ་ཨིན།\n"
"* If @digits འདི་ཀླད་ཀོར་ལས་ཉུང་ཀུ་ཡོད་པ་ཅིན་, @number འདི་ བཅུ་ཚག་ཡིག་ཚད་ཀྱི་གཡོན་ལུ་  ༠ "
"ལས་ཐག་རིང་ས་བསྐོར་སྐྱོད་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ROUNDUP(5.5) equals 6.\n"
"ROUNDUP(-3.3) equals -4.\n"
"ROUNDUP(1501.15,1) equals 1501.2.\n"
"ROUNDUP(1501.15,-2) equals 1600.0.\n"
"\n"
"@SEEALSO=ROUND,ROUNDDOWN"

#: ../plugins/fn-math/functions.c:2172
msgid ""
"@FUNCTION=MROUND\n"
"@SYNTAX=MROUND(number,multiple)\n"
"@DESCRIPTION=MROUND function rounds a given number to the desired multiple.\n"
"\n"
"@number is the number you want rounded and @multiple is the the multiple to "
"which you want to round the number.\n"
"\n"
"* If @number and @multiple have different sign, MROUND returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MROUND(1.7,0.2) equals 1.8.\n"
"MROUND(321.123,0.12) equals 321.12.\n"
"\n"
"@SEEALSO=ROUNDDOWN,ROUND,ROUNDUP"
msgstr ""
"@FUNCTION=MROUND\n"
"@SYNTAX=MROUND(number,multiple)\n"
"@DESCRIPTION=MROUND ལཱ་འགན་འདི་གིས་  བྱིན་ཡོད་པའི་ཨང་གྲངས་འདི་རེ་འདུན་གྱི་སྙོམས་གྲངས་ལུ་བསྐོར་"
"སྐྱོད་འབདཝ་ཨིན།\n"
"\n"
"@number འདི་  ཁྱོད་ཀྱིས་བསྐོར་སྐྱོད་འབད་དགོ་པའི་ཨང་གྲངས་ཨིནམ་དང་ @multiple འདི་  ཁྱོད་ཀྱིས་ཨང་"
"གྲངས་བསྐོར་སྐྱོད་འབད་དགོ་པའི་སྙོམས་གྲངས་འདི་ཨིན།\n"
"\n"
"* If @number དང་ @multiple དེ་ལུ་ ཨང་རྟགས་སོ་སོ་ཡོད་པ་ཅིན་, MROUND དེ་གིས་ #NUM! འཛོལ་"
"བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"MROUND(1.7,0.2) equals 1.8.\n"
"MROUND(321.123,0.12) equals 321.12.\n"
"\n"
"@SEEALSO=ROUNDDOWN,ROUND,ROUNDUP"

#: ../plugins/fn-math/functions.c:2229
msgid ""
"@FUNCTION=ROMAN\n"
"@SYNTAX=ROMAN(number[,type])\n"
"@DESCRIPTION=ROMAN function returns an arabic number in the roman numeral "
"style, as text. @number is the number you want to convert and @type is the "
"type of roman numeral you want.\n"
"\n"
"* If @type is 0 or it is omitted, ROMAN returns classic roman numbers.\n"
"* Type 1 is more concise than classic type, type 2 is more concise than type "
"1, and type 3 is more concise than type 2.  Type 4 is simplified type.\n"
"* If @number is negative or greater than 3999, ROMAN returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"ROMAN(999) equals CMXCIX.\n"
"ROMAN(999,1) equals LMVLIV.\n"
"ROMAN(999,2) equals XMIX.\n"
"ROMAN(999,3) equals VMIV.\n"
"ROMAN(999,4) equals IM.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ROMAN\n"
"@SYNTAX=ROMAN(number[,type])\n"
"@DESCRIPTION=ROMAN ལས་འགན་འདི་གིས་  ཨ་ར་བིཀ་ཨང་གྲངས་འདི་རོ་མཱན་ཨང་གྲངས་ཀྱི་བཟོ་རྣམ་ནང་ཚིག་"
"ཡིག་སྦེ་སླར་ལོག་འབདཝ་ཨིན། @number འདི་  ཁྱོད་ཀྱིས་གཞི་བསྒྱུར་འབད་དགོ་པའི་ཨང་གྲངས་ཨིནམ་དང་ @type "
"འདི་ ཁྱོད་ལུ་དགོ་པའི་རོ་མཱན་ཨང་གྲངས་ཀྱི་ཨིན།\n"
"\n"
"* If @type འདི་ 0 ཡང་ན་སྐྱུར་བཞག་པ་ཅིན་ ROMAN དེ་གིས་ སྔོན་སྲོལ་རོ་མཱན་ཨང་གྲངས་ཚུ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* དབྱེ་བ་1 འདི་  སྔོན་སྲོལ་དབྱེ་བ་ལས་བསྡུས་པ་ཨིན་པ་ཅིན་, དབྱེ་བ་ 2 འདི་  དབྱེ་བ་1ལས་ཧེང་སྐལ་བསྡུས་"
"པ་ཨིནམ་དང་, དབྱེ་བ་ 3 འདི་ དབྱེ་བ་2 ལས་བསྡུས་པ་ཡོདཔ་ཨིན། དབྱེ་བ་4འདི་འཇམ་སམ་བཟོ་བཟོཝ་སྦེ་ཡོདཔ་"
"ཨིན།\n"
"* If @number འདི་  མེད་ཆ་ཡང་ན་3999ལས་སྦོམ་ཡོད་པ་ཅིན་, ROMAN དེ་གིས་ #VALUE! འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགཡུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ROMAN(999) equals CMXCIX.\n"
"ROMAN(999,1) equals LMVLIV.\n"
"ROMAN(999,2) equals XMIX.\n"
"ROMAN(999,3) equals VMIV.\n"
"ROMAN(999,4) equals IM.\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-math/functions.c:2494
msgid ""
"@FUNCTION=SUMX2MY2\n"
"@SYNTAX=SUMX2MY2(array1,array2)\n"
"@DESCRIPTION=SUMX2MY2 function returns the sum of the difference of squares "
"of corresponding values in two arrays. @array1 is the first array or range "
"of data points and @array2 is the second array or range of data points. The "
"equation of SUMX2MY2 is SUM (x^2-y^2).\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If @array1 and @array2 have different number of data points, SUMX2MY2 "
"returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and 39.  "
"Then\n"
"SUMX2MY2(A1:A5,B1:B5) equals -1299.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2PY2"
msgstr ""
"@FUNCTION=SUMX2MY2\n"
"@SYNTAX=SUMX2MY2(array1,array2)\n"
"@DESCRIPTION=SUMX2MY2 ལཱ་འགན་དེ་གིས་  ཨེ་རེ་གཉིས་ནང་ཆ་མཉམ་པའི་གནས་གོང་གི་གྲུ་གཞི་གི་ཁྱད་པར་"
"གྱི་བསྡོམ་འདི་སླར་ལོག་འབདཝ་ཨིན། @array1 འདི་ ཨེ་རེ་དང་པ་ཡང་ན་གནས་སྡུད་དོན་ཚན་གྱི་ཁྱབ་ཚད་འདི་"
"ཨིན། @array2 འདི་ ཨེ་རེ་གཉིས་པ་ཡང་ན་གནས་སྡུད་དོན་ཚན་ཚུ་གི་ཁྱབ་ཚད་ཨིན། SUMX2MY2 གི་སྙོམས་རྟགས་"
"འདི་ SUM (x^2-y^2)ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་སྦེ་བཞགཔ་ཨིན།\n"
"* If @array1 དང་@array2 དེ་ལུ་  གནས་སྡུད་དོན་ཚན་ཚུ་གི་ཨང་གྲངས་སོ་སོ་ཡོད་པ་ཅིན་, SUMX2MY2 "
"དེ་གིས་ #N/A འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 དེ་གིས་ཨང་གྲངས་ 11, 15, 17, 21, དང་ 43 ཡོདཔ་དང་ ནང་ཐིག་ "
"B1, B2, ..., B5 དེ་གིས་ ཨང་གྲངས་ 13, 22, 31, 33, དང་39 འཆངམ་ཨིན་ཟེར་ང་བཅས་ཚུ་གིས་"
"བཞག་གེ།  དེ་ལས་\n"
"SUMX2MY2(A1:A5,B1:B5) མཉམ་ཨིན་ -1299.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2PY2"

#: ../plugins/fn-math/functions.c:2611
msgid ""
"@FUNCTION=SUMX2PY2\n"
"@SYNTAX=SUMX2PY2(array1,array2)\n"
"@DESCRIPTION=SUMX2PY2 function returns the sum of the sum of squares of "
"corresponding values in two arrays. @array1 is the first array or range of "
"data points and @array2 is the second array or range of data points. The "
"equation of SUMX2PY2 is SUM (x^2+y^2).\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If @array1 and @array2 have different number of data points, SUMX2PY2 "
"returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and 39.  "
"Then\n"
"SUMX2PY2(A1:A5,B1:B5) equals 7149.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2MY2"
msgstr ""
"@FUNCTION=SUMX2PY2\n"
"@SYNTAX=SUMX2PY2(array1,array2)\n"
"@DESCRIPTION=SUMX2PY2 ལཱ་འགན་དེ་གིས་  ཨེ་རེ་གཉིས་ནང་  ཆ་མཉམ་པའི་གནས་གོང་ཚུ་གི་བསྡོམ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།@array1 འདི་  ཨེ་རེ་དང་པ་ཡང་ན་གནས་སྡུད་དོན་ཚན་གྱི་ཁྱབ་ཚད་དང་ @array2 འདི་"
"ཨེ་རེ་གཉིས་པ་ཡང་ན་གནས་སྡུད་དོན་ཚན་ཚུ་ཨིན།SUMX2PY2གི་སྙོམས་རྟགས་འདི་ SUM (x^2+y^2)ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེདཔ་བཞག་ཡོདཔ།\n"
"* If @array1 དང་ @array2 དེ་ལུ་  གནས་སྡུད་དོན་ཚན་ཚུ་གི་ཨང་གྲངས་སོ་སོ་ཡོདཔ་ཨིན་, SUMX2PY2 "
"དེ་གིས་ #N/A འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 དེ་གིས་ཨང་གྲངས་11, 15, 17, 21, དང་ 43 ཡོདཔ་ཨིནམ་དང་ ནང་ཐིག་ "
"B1, B2, ..., B5 དེ་གིས་ ཨང་གྲངས་ 13, 22, 31, 33, དང་ 39 འཆངམ་ཨིན་ཟེར་ང་བཅས་ཚུ་གིས་"
"བཞག་གེ།  དེ་ལས་\n"
"SUMX2PY2(A1:A5,B1:B5) མཉམ་ཨིན་ 7149.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2MY2"

#: ../plugins/fn-math/functions.c:2725
msgid ""
"@FUNCTION=SUMXMY2\n"
"@SYNTAX=SUMXMY2(array1,array2)\n"
"@DESCRIPTION=SUMXMY2 function returns the sum of squares of differences of "
"corresponding values in two arrays. @array1 is the first array or range of "
"data points and @array2 is the second array or range of data points. The "
"equation of SUMXMY2 is SUM (x-y)^2.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If @array1 and @array2 have different number of data points, SUMXMY2 "
"returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, "
"and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and 39.  "
"Then\n"
"SUMXMY2(A1:A5,B1:B5) equals 409.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2MY2,SUMX2PY2"
msgstr ""
"@FUNCTION=SUMXMY2\n"
"@SYNTAX=SUMXMY2(array1,array2)\n"
"@DESCRIPTION=SUMXMY2 ལཱ་འགན་དེ་གིས་  ཨེ་རེ་གཉིས་ནང་ཆ་མཉམ་པའི་གནས་གོང་གི་ཁྱད་པར་གྱི་གྲུ་གཞི་"
"བསྡོམ་འདི་སླར་ལོག་འབདཝ་ཨིན། @array1 འདི་  ཨེ་རེ་དང་པ་ཡང་ན་གནས་སྡུད་དོན་ཚན་ཚུ་གི་ཁྱབ་ཚད་ཨིནམ་"
"དང་@array2 འདི་ཨེ་རེ་གཉིས་པ་ཡང་ན་གནས་སྡུད་དོན་ཚན་གྱི་ཁྱབ་ཚད་ཨིན།SUMXMY2 གི་སྙོམས་རྟགས་འདི་ "
"SUM (x-y)^2ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞག་ཡོདཔ།\n"
"* If @array1 དང་ @array2 དེ་ལུ་  གནས་སྡུད་དོན་ཚན་གྱི་ཨང་གྲངས་སོ་སོ་ཡོདཔ་ཨིནམ་དང་, "
"SUMXMY2 དེ་གིས་ #N/A འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 དེ་གིས་ཨང་གྲངས་ 11, 15, 17, 21, དང་ 43 ཡོདཔ་ཨིནམ་དང་ 11, "
"B2, ..., B5 འཆངམ་ཨིནམ་དང་ཨང་གྲངས་ 13, 22, 31, 33,དང་ 39 ཡོདཔ་ཨིན་ཟེར་ང་བཅས་ཚུ་གིས་"
"བཞག་གེ། དེ་ལས་\n"
"SUMXMY2(A1:A5,B1:B5) མཉམ་ཨིན་ 409.\n"
"\n"
"@SEEALSO=SUMSQ,SUMX2MY2,SUMX2PY2"

#: ../plugins/fn-math/functions.c:2841
msgid ""
"@FUNCTION=SERIESSUM\n"
"@SYNTAX=SERIESSUM(x,n,m,coefficients)\n"
"@DESCRIPTION=SERIESSUM function returns the sum of a power series.  @x is "
"the base of the power series, @n is the initial power to raise @x, @m is the "
"increment to the power for each term in the series, and @coefficients are "
"the coefficients by which each successive power of @x is multiplied.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 1.23, 2.32, "
"2.98, 3.42, and 4.33.  Then\n"
"SERIESSUM(3,1,2.23,A1:A5) equals 251416.43018.\n"
"\n"
"@SEEALSO=COUNT,SUM"
msgstr ""
"@FUNCTION=SERIESSUM\n"
"@SYNTAX=SERIESSUM(x,n,m,coefficients)\n"
"@DESCRIPTION=SERIESSUM ལཱ་འགན་དེ་གིས་  ནུས་ཤུགས་རིམ་པའི་བསྡོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།  @x "
"འདི་ནུས་ཤུགས་རྒྱུན་རིམ་གྱི་གཞི་རྟེན་ཨིན། @n འདི་  @xབསྡུ་ལེན་འབད་ནི་ལུ་འགོ་ཐོག་ནུས་ཤུགས་ཨིན, @m འདི་  "
"རྒྱུན་རིམ་ནང་གི་དོན་ཚིག་རེ་རེའི་དོན་ལུ་ནུས་ཤུགས་ལུ་ཡར་སེང་འདི་ཨིནམ་དང་,  @coefficients ཚུ་  @x "
"གི་མཐར་འཁྱོལ་བའི་ནུས་ཤུགས་འདི་དགུ་འཐབ་བརྐྱབ་ཡོད་པའི་གྲངས་རྟགས་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 དེ་གིས་ཨང་གྲངས་ 1.23, 2.32, 2.98, 3.42, དང་ 4.33ཡོདཔ་ཨིན་ཟེར་"
"ང་བཅས་ཚུ་གིས་བཞག་གེ།  དེ་ལས་\n"
"SERIESSUM(3,1,2.23,A1:A5) མཉམ་ཨིན་251416.43018.\n"
"\n"
"@SEEALSO=COUNT,SUM"

#: ../plugins/fn-math/functions.c:2902
msgid ""
"@FUNCTION=MINVERSE\n"
"@SYNTAX=MINVERSE(matrix)\n"
"@DESCRIPTION=MINVERSE function returns the inverse matrix of @matrix.\n"
"\n"
"* If @matrix cannot be inverted, MINVERSE returns #NUM! error.\n"
"* If @matrix does not contain equal number of columns and rows, MINVERSE "
"returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT, MDETERM"
msgstr ""
"@FUNCTION=MINVERSE\n"
"@SYNTAX=MINVERSE(matrix)\n"
"@DESCRIPTION=MINVERSE ལཱ་འགན་དེ་གིས་ @matrixགི་ལུགས་ལྡོག་མེ་ཊིགསི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @matrix དེགིས་ ལུགས་ལྡོག་འབད་མ་ཚུགས་པ་ཅིན་, MINVERSE དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @matrix དེ་གིས་  ཀེར་ཐིག་གི་ཨང་གྲངས་མཉམ་པ་དང་གྲལ་ཐིག་ཚུ་མེད་པ་ཅིན་, MINVERSE དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=MMULT, MDETERM"

#: ../plugins/fn-math/functions.c:3047
msgid ""
"@FUNCTION=MMULT\n"
"@SYNTAX=MMULT(array1,array2)\n"
"@DESCRIPTION=MMULT function returns the matrix product of two arrays. The "
"result is an array with the same number of rows as @array1 and the same "
"number of columns as @array2.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TRANSPOSE,MINVERSE"
msgstr ""
"@FUNCTION=MMULT\n"
"@SYNTAX=MMULT(array1,array2)\n"
"@DESCRIPTION=MMULT ལཱ་འགན་དེ་གིས་  ཨེ་རེ་གཉིས་ཀྱི་མེ་ཊིགསི་ཐོན་སྐྱེད་འདི་སླར་ལོག་འབདཝ་ཨིན།  གྲུབ་"
"འབྲས་འདི་@array1བཟུམ་སྦེ་གྲལ་ཐིག་གི་ཨང་གྲངས་གཅིག་པ་དང་ཅིག་ཁར་ཨེ་རེ་འདི་ཨིནམ་དང་  ཀེར་ཐིག་གི་ཨང་"
"གྲངས་གཅིག་པ་འདི་@array2བཟུམ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=TRANSPOSE,MINVERSE"

#: ../plugins/fn-math/functions.c:3123
msgid ""
"@FUNCTION=MDETERM\n"
"@SYNTAX=MDETERM(matrix)\n"
"@DESCRIPTION=MDETERM function returns the determinant of a given matrix.\n"
"\n"
"* If the @matrix does not contain equal number of columns and rows, MDETERM "
"returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that A1, ..., A4 contain numbers 2, 3, 7, and 3, B1, ..., B4 "
"4, 2, 4, and 1, C1, ..., C4 9, 4, 3, and 2, and D1, ..., D4 7, 3, 6, and 5. "
"Then\n"
"MDETERM(A1:D4) equals 148.\n"
"\n"
"@SEEALSO=MMULT, MINVERSE"
msgstr ""
"@FUNCTION=MDETERM\n"
"@SYNTAX=MDETERM(matrix)\n"
"@DESCRIPTION=MDETERM ལཱ་འགན་དེ་གིས་  བྱིན་ཡོད་པའི་མེ་ཊིགསི་གི་བཅད་གཞི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @matrix འདི་གིས་  ཀེར་ཐིག་ཚུ་དང་གྲལ་ཐིག་ཚུ་གི་ཨང་གྲངས་མཉམ་པ་མེད་པ་ཅིན་, "
"MDETERM དེ་གིས་ #VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"A1, ..., A4 དེ་གིས་ཨང་གྲངས་ 2, 3, 7, དང་ 3, B1, ..., B4 4, 2, 4, དང་ 1, "
"C1, ..., C4 9, 4, 3, དང་ 2, དང་ D1, ..., D4 7, 3, 6, དང་ 5ཡོདཔ་ཨིན་ཟེར་ང་བཅས་ཚུ་"
"གིས་བཞག་གེ།  དེ་ལས་\n"
"MDETERM(A1:D4) མཉམ་ཨིན་ 148.\n"
"\n"
"@SEEALSO=MMULT, MINVERSE"

#: ../plugins/fn-math/functions.c:3172
msgid "SUMPRODUCT:Multiplies components and adds the results."
msgstr "SUMPRODUCT:ཆ་ཤས་ཚུ་དགུ་འཐབ་བརྐྱབ་ནི་དང་  གྲུབ་འབྲས་ཚུ་ཁ་སྐོང་བརྐྱབ་ཨིན།"

#: ../plugins/fn-math/functions.c:3174
msgid ""
"Multiplies corresponding data entries in the given arrays or ranges, and "
"then returns the sum of those products."
msgstr ""
"བྱིན་ཏེ་ཡོད་པའི་ཨེ་རེ་ཚུ་ཡང་ན་ཁྱབ་ཚད་ཚུ་ནང་ཡོད་པའི་  ཆ་མཉམ་པའི་གནས་སྡུད་འཛུལ་ཞུགས་ཚུ་དགུ་འཐབ་"
"བརྐྱབ་ནི་དང་  དེ་ལས་  དེ་ཚུ་གི་ཐོན་སྐྱེད་ཚུ་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-math/functions.c:3177
msgid "If an entry is not numeric, the value zero is used instead."
msgstr "ཐོ་བཀོད་འདི་ཨང་གྲངས་ཀྱི་མེན་པ་ཅིན་  གནས་གོང་ཀླད་ཀོར་འདི་ཚབ་སྦེ་ལག་ལེན་འཐབ་ཨིན།"

#: ../plugins/fn-math/functions.c:3178
msgid ""
"If arrays or range arguments do not have the same dimensions, return #VALUE! "
"error."
msgstr ""
"ཨེ་ཚུ་ཡང་ན་ཁྱབ་ཚད་ཚུ་གི་སྒྲུབ་རྟགས་ཚུ་  རྒྱ་ཁྱོན་གཅིག་པ་མེད་པ་ཅིན་  སླར་ལོག་#VALUE!འཛོལ་བ་ཨིན།"

#: ../plugins/fn-math/functions.c:3180
msgid ""
"SUMPRODUCTs arguments are arrays or ranges. Attempting to use A1:A5>0 will "
"not work, implicit intersection will kick in. Instead use --(A1:A5>0)"
msgstr ""
"SUMPRODUCTs གི་སྒྲུབ་རྟགས་ཚུ་ཨེ་རེ་ཡང་ན་ཁྱབ་ཚད་ཚུ་ཨིན། A1:A5>0 འདི་ལག་ལེན་འཐབ་ནི་ལུ་དཔའ་བཅམ་"
"མི་དེ་གིས་ལཱ་མི་འབད་  བསམ་པའི་ལམ་མདོ་དེ་གིས་ནང་ན་བཏོན་གཏངམ་ཨིན།   ཚབ་ལུ་ --(A1:A5>0)ལག་"
"ལེན་འཐབ།"

#: ../plugins/fn-r/functions.c:19
msgid "R.DNORM:probability density function of the normal distribution."
msgstr "R.DNORM:སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:20 ../plugins/fn-r/functions.c:45
#: ../plugins/fn-r/functions.c:99 ../plugins/fn-r/functions.c:124
#: ../plugins/fn-r/functions.c:151 ../plugins/fn-r/functions.c:178
#: ../plugins/fn-r/functions.c:203 ../plugins/fn-r/functions.c:257
#: ../plugins/fn-r/functions.c:282 ../plugins/fn-r/functions.c:336
#: ../plugins/fn-r/functions.c:359 ../plugins/fn-r/functions.c:409
#: ../plugins/fn-r/functions.c:434 ../plugins/fn-r/functions.c:461
#: ../plugins/fn-r/functions.c:488 ../plugins/fn-r/functions.c:511
#: ../plugins/fn-r/functions.c:561 ../plugins/fn-r/functions.c:586
#: ../plugins/fn-r/functions.c:640 ../plugins/fn-r/functions.c:663
#: ../plugins/fn-r/functions.c:713 ../plugins/fn-r/functions.c:736
#: ../plugins/fn-r/functions.c:786 ../plugins/fn-r/functions.c:811
#: ../plugins/fn-r/functions.c:838 ../plugins/fn-r/functions.c:865
#: ../plugins/fn-r/functions.c:890 ../plugins/fn-r/functions.c:944
#: ../plugins/fn-r/functions.c:971 ../plugins/fn-r/functions.c:1029
#: ../plugins/fn-r/functions.c:1052 ../plugins/fn-r/functions.c:1102
#: ../plugins/fn-r/functions.c:1127
msgid "x:observation."
msgstr "x:ལྟ་རྟོག།"

#: ../plugins/fn-r/functions.c:21 ../plugins/fn-r/functions.c:46
#: ../plugins/fn-r/functions.c:73
msgid "mu:mean of the distribution."
msgstr "mu:བཀྲམ་སྤེལ་གྱི་བར་མའི་ཆ་གྲངས།"

#: ../plugins/fn-r/functions.c:22 ../plugins/fn-r/functions.c:47
#: ../plugins/fn-r/functions.c:74
msgid "sigma:standard deviation of the distribution."
msgstr "sigma:བཀྲམ་སྤེལ་གྱི་ཚད་ལྡན་ཁ་བསྒྱུར་བ།"

#: ../plugins/fn-r/functions.c:23 ../plugins/fn-r/functions.c:102
#: ../plugins/fn-r/functions.c:181 ../plugins/fn-r/functions.c:260
#: ../plugins/fn-r/functions.c:338 ../plugins/fn-r/functions.c:412
#: ../plugins/fn-r/functions.c:490 ../plugins/fn-r/functions.c:564
#: ../plugins/fn-r/functions.c:642 ../plugins/fn-r/functions.c:715
#: ../plugins/fn-r/functions.c:789 ../plugins/fn-r/functions.c:868
#: ../plugins/fn-r/functions.c:948 ../plugins/fn-r/functions.c:1031
#: ../plugins/fn-r/functions.c:1105
msgid ""
"give_log:if true, log of the result will be returned instead.  This is "
"useful if the result would otherwise underflow to 0.  Defaults to false."
msgstr ""
"give_log:བདེན་པ་ཨིན་པ་ཅིན་  གྲུབ་འབྲས་ཀྱི་དྲན་དེབ་འདི་ཚབ་སྦེ་ལོག་འོངམ་ཨིན།  གྲུབ་འབྲས་དེ་གིས་འབད་"
"བ་ཅིན་ཕན་ཐོག་ཅན་ཡོད་  དེ་མེན་པ་ཅིན་  ༠་ ལུ་ཉུང་འབབ།  རྫུན་མ་ལུ་སྔོན་སྒྲིག།"

#: ../plugins/fn-r/functions.c:24
msgid ""
"This function returns the probability density function of the normal "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་  སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:44
msgid "R.PNORM:cumulative distribution function of the normal distribution."
msgstr "R.PNORM:སྤྱིར་སྟངས་བཀྲམ་སྤེལ་གྱི་  རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་བགོ་གྲངས།"

#: ../plugins/fn-r/functions.c:48 ../plugins/fn-r/functions.c:75
#: ../plugins/fn-r/functions.c:127 ../plugins/fn-r/functions.c:154
#: ../plugins/fn-r/functions.c:206 ../plugins/fn-r/functions.c:233
#: ../plugins/fn-r/functions.c:285 ../plugins/fn-r/functions.c:312
#: ../plugins/fn-r/functions.c:361 ../plugins/fn-r/functions.c:386
#: ../plugins/fn-r/functions.c:437 ../plugins/fn-r/functions.c:464
#: ../plugins/fn-r/functions.c:513 ../plugins/fn-r/functions.c:538
#: ../plugins/fn-r/functions.c:589 ../plugins/fn-r/functions.c:616
#: ../plugins/fn-r/functions.c:665 ../plugins/fn-r/functions.c:690
#: ../plugins/fn-r/functions.c:738 ../plugins/fn-r/functions.c:763
#: ../plugins/fn-r/functions.c:814 ../plugins/fn-r/functions.c:841
#: ../plugins/fn-r/functions.c:893 ../plugins/fn-r/functions.c:920
#: ../plugins/fn-r/functions.c:975 ../plugins/fn-r/functions.c:1004
#: ../plugins/fn-r/functions.c:1054 ../plugins/fn-r/functions.c:1079
#: ../plugins/fn-r/functions.c:1130 ../plugins/fn-r/functions.c:1157
msgid ""
"lower_tail:if true (the default), the lower tail of the distribution is "
"considered."
msgstr "lower_tail:བདེན་པ་ཨིན་པ་ཅིན་ (སྔོན་སྒྲིག་), བཀྲམ་སྤེལ་གྱི་འོག་མཇུག་འདི་ཆ་འཇོག་འབད་ཡོདཔ།"

#: ../plugins/fn-r/functions.c:49 ../plugins/fn-r/functions.c:76
#: ../plugins/fn-r/functions.c:128 ../plugins/fn-r/functions.c:155
#: ../plugins/fn-r/functions.c:207 ../plugins/fn-r/functions.c:234
#: ../plugins/fn-r/functions.c:286 ../plugins/fn-r/functions.c:313
#: ../plugins/fn-r/functions.c:362 ../plugins/fn-r/functions.c:387
#: ../plugins/fn-r/functions.c:438 ../plugins/fn-r/functions.c:465
#: ../plugins/fn-r/functions.c:514 ../plugins/fn-r/functions.c:539
#: ../plugins/fn-r/functions.c:590 ../plugins/fn-r/functions.c:617
#: ../plugins/fn-r/functions.c:666 ../plugins/fn-r/functions.c:691
#: ../plugins/fn-r/functions.c:739 ../plugins/fn-r/functions.c:764
#: ../plugins/fn-r/functions.c:815 ../plugins/fn-r/functions.c:842
#: ../plugins/fn-r/functions.c:894 ../plugins/fn-r/functions.c:921
#: ../plugins/fn-r/functions.c:976 ../plugins/fn-r/functions.c:1005
#: ../plugins/fn-r/functions.c:1055 ../plugins/fn-r/functions.c:1080
#: ../plugins/fn-r/functions.c:1131 ../plugins/fn-r/functions.c:1158
msgid ""
"log_p:if true, log of the probability is used.  This is useful if the "
"probability would otherwise underflow to 0.  Defaults to false."
msgstr ""
"log_p:བདེན་པ་ཅིན་, འབྱུང་སྲིད་པའི་དྲན་དེབ་འདི་ལག་ལེན་འཐབ་ཨིན།  འབྱུང་སྲིད་པ་དེ་གིས་ ༠་ ལུ་འོག་"
"འབབ་འབད་བ་ཅིན་འདི་ཕན་ཐོག་ཅན་ཡོདཔ་ཨིན།  རྫུན་མ་ལུ་སྔོན་སྒྲིག།"

#: ../plugins/fn-r/functions.c:50
msgid ""
"This function returns the cumulative distribution function of the normal "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་  སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:71
msgid "R.QNORM:probability quantile function of the normal distribution."
msgstr "R.QNORM:སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་  འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:72 ../plugins/fn-r/functions.c:230
#: ../plugins/fn-r/functions.c:309 ../plugins/fn-r/functions.c:384
#: ../plugins/fn-r/functions.c:536 ../plugins/fn-r/functions.c:613
#: ../plugins/fn-r/functions.c:688 ../plugins/fn-r/functions.c:761
#: ../plugins/fn-r/functions.c:917 ../plugins/fn-r/functions.c:1000
#: ../plugins/fn-r/functions.c:1077 ../plugins/fn-r/functions.c:1154
msgid "p:probability."
msgstr "p:འབྱུང་སྲིད་པ།"

#: ../plugins/fn-r/functions.c:77
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the normal distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ སྤྱིར་གཏང་བཀྲམ་སྤེལ་"
"གྱི་  རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་གྱི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:98
msgid "R.DLNORM:probability density function of the log-normal distribution."
msgstr "R.DLNORM:དྲན་དེབ་-སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:100 ../plugins/fn-r/functions.c:125
#: ../plugins/fn-r/functions.c:152
msgid "logmean:mean of the underlying normal distribution."
msgstr "logmean:འོག་ལུ་ཡོད་པའི་སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་བར་མའི་ཆ་གྲངས།"

#: ../plugins/fn-r/functions.c:101 ../plugins/fn-r/functions.c:126
#: ../plugins/fn-r/functions.c:153
msgid "logsd:standard deviation of the underlying normal distribution."
msgstr "logsd:འོག་ལུ་ཡོད་པའི་སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་ ཚད་ལྡན་ཁ་བསྒྱུར་བ།"

#: ../plugins/fn-r/functions.c:103
msgid ""
"This function returns the probability density function of the log-normal "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་  དྲན་དེབ་-སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:123
msgid ""
"R.PLNORM:cumulative distribution function of the log-normal distribution."
msgstr "R.PLNORM:དྲན་དེབ་-སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:129
msgid ""
"This function returns the cumulative distribution function of the log-normal "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་  དྲན་དེབ་-སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:150
msgid "R.QLNORM:probability quantile function of the log-normal distribution."
msgstr "R.QLNORM:དྲན་དེབ་-སྤྱིར་གཏང་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:156
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the log-normal distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་  འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱའགན་འདི་སླར་ལོག་འབདཝ་ཨིན་ དེ་ཡང་ དྲན་དེབ་-སྤྱིར་གཏང་"
"བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་གྱི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:177
msgid "R.DGAMMA:probability density function of the gamma distribution."
msgstr "R.DGAMMA:ག་མ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:179 ../plugins/fn-r/functions.c:204
#: ../plugins/fn-r/functions.c:231 ../plugins/fn-r/functions.c:562
#: ../plugins/fn-r/functions.c:587 ../plugins/fn-r/functions.c:614
msgid "shape:the shape parameter of the distribution"
msgstr "shape:བཀྲམ་སྤེལ་གྱི་དབྱིབས་ཚད་བཟུང་།"

#: ../plugins/fn-r/functions.c:180 ../plugins/fn-r/functions.c:205
#: ../plugins/fn-r/functions.c:232 ../plugins/fn-r/functions.c:563
#: ../plugins/fn-r/functions.c:588 ../plugins/fn-r/functions.c:615
#: ../plugins/fn-r/functions.c:714 ../plugins/fn-r/functions.c:737
#: ../plugins/fn-r/functions.c:762 ../plugins/fn-r/functions.c:1104
#: ../plugins/fn-r/functions.c:1129 ../plugins/fn-r/functions.c:1156
msgid "scale:the scale parameter of the distribution"
msgstr "scale:བཀྲམ་སྤེལ་གྱི་ཆ་ཚད་ཚད་འཛིན།"

#: ../plugins/fn-r/functions.c:182
msgid ""
"This function returns the probability density function of the gamma "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ག་མ་བཀྲམ་སྤེལ་གྱི་ འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:202
msgid "R.PGAMMA:cumulative distribution function of the gamma distribution."
msgstr "R.PGAMMA:ག་མ་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:208
msgid ""
"This function returns the cumulative distribution function of the gamma "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ག་མ་བཀྲམསྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་ལཱའགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:229
msgid "R.QGAMMA:probability quantile function of the gamma distribution."
msgstr "R.QGAMMA:ག་མ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:235
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the gamma distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་ དེ་ཡང་ ག་མ་བཀྲམ་སྤེལ་གྱི་  "
"རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་གྱི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:256
msgid "R.DBETA:probability density function of the beta distribution."
msgstr "R.DBETA:སྔོན་དཔྱད་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:258 ../plugins/fn-r/functions.c:283
#: ../plugins/fn-r/functions.c:310
msgid "a:the first shape parameter of the distribution"
msgstr "a:བཀྲམ་སྤེལ་གྱི་ཚད་འཛིན་དང་པའི་དབྱིབས།"

#: ../plugins/fn-r/functions.c:259 ../plugins/fn-r/functions.c:284
#: ../plugins/fn-r/functions.c:311
msgid "b:the second scale parameter of the distribution"
msgstr "b:བཀྲམ་སྤེལ་གྱི་ཚད་བཟུང་གཉིས་པའི་ཆ་ཚད།"

#: ../plugins/fn-r/functions.c:261
msgid ""
"This function returns the probability density function of the beta "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་སྔོན་དཔྱད་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:281
msgid "R.PBETA:cumulative distribution function of the beta distribution."
msgstr "R.PBETA:སྔོན་དཔྱད་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:287
msgid ""
"This function returns the cumulative distribution function of the beta "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་སྔོན་དཔྱད་བཀྲམསྤེལ་གྱི་  རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:308
msgid "R.QBETA:probability quantile function of the beta distribution."
msgstr "R.QBETA:སྔོན་དཔྱད་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:314
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the beta distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  སྔོན་དཔྱད་བཀྲམ་སྤེལ་"
"གྱི་ རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལས་འགན་གི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:335
msgid "R.DT:probability density function of the Student t distribution."
msgstr "R.DT:སློབ་ཕྲུག་ ཊི་བཀྲམ་སྤེལ་གྱི་འབྱུ་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:337 ../plugins/fn-r/functions.c:360
#: ../plugins/fn-r/functions.c:385
msgid "n:the number of degrees of freedom of the distribution"
msgstr "n:བཀྲམ་སྤེལ་གྱི་རང་དབང་ཁུག་ཟུར་གྱི་གྲངས།"

#: ../plugins/fn-r/functions.c:339
msgid ""
"This function returns the probability density function of the Student t "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་ སློབ་ཕྲུག་ ཊི་ བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཤོང་ཚད་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:358
msgid "R.PT:cumulative distribution function of the Student t distribution."
msgstr "R.PT:སློབ་ཕྲུག་ཊི་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:363
msgid ""
"This function returns the cumulative distribution function of the Student t "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་  སློབ་ཕྲུག་ཊི་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:383
msgid "R.QT:probability quantile function of the Student t distribution."
msgstr "R.QT:སློབ་ཕྲུག་ཊི་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:388
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Student t distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  སློབ་ཕྲུག་ཊི་བཀྲམ་"
"སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལས་འགན་གྱི་  ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:408
msgid "R.DF:probability density function of the F distribution."
msgstr "R.DF:ཨེཕ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཤོང་ཚད་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:410 ../plugins/fn-r/functions.c:435
#: ../plugins/fn-r/functions.c:462
msgid "n1:the first number of degrees of freedom of the distribution"
msgstr "n1:བཀྲམ་སྤེལ་གྱི་ཁུག་ཟུར་རང་དབང་གི་ཨང་གྲངས་དང་པ།"

#: ../plugins/fn-r/functions.c:411 ../plugins/fn-r/functions.c:436
#: ../plugins/fn-r/functions.c:463
msgid "n2:the second number of degrees of freedom of the distribution"
msgstr "n2:བཀྲམ་སྤེལ་གྱི་ཁུག་ཟུར་རང་དབང་གི་ཨང་གྲངས་གཉིས་པ།"

#: ../plugins/fn-r/functions.c:413
msgid ""
"This function returns the probability density function of the F distribution."
msgstr "ལཱ་འགན་འདི་གིས་  ཨེཕ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:433
msgid "R.PF:cumulative distribution function of the F distribution."
msgstr "R.PF:ཨེཕ་བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀརམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:439
msgid ""
"This function returns the cumulative distribution function of the F "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ ཨེཕ་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:460
msgid "R.QF:probability quantile function of the F distribution."
msgstr "R.QF:ཨེཕ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:466
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the F distribution."
msgstr ""
"ལས་འགན་འདི་གིས་  འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ ཨེཕ་བཀྲམ་སྤེལ་གྱི་"
"རིམ་གྱིས་བསག་པའི་བཀརམ་སྤེལ་ལས་འགན་གྱི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:487
msgid "R.DCHISQ:probability density function of the chi-square distribution."
msgstr "R.DCHISQ:ཆི་-གྲུ་བཞི་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:489 ../plugins/fn-r/functions.c:512
#: ../plugins/fn-r/functions.c:537
msgid "df:the number of degrees of freedom of the distribution"
msgstr "df:བཀྲམ་སྤེལ་གྱི་ཁུག་ཟུར་རང་དབང་གི་ཨང་གྲངས།"

#: ../plugins/fn-r/functions.c:491
msgid ""
"This function returns the probability density function of the chi-square "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ཆི་-གྲུ་བཞི་བཀྲམ་སྤེལ་གྱི་  འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:510
msgid ""
"R.PCHISQ:cumulative distribution function of the chi-square distribution."
msgstr "R.PCHISQ:ཆི་-གྲུ་བཞི་བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:515
msgid ""
"This function returns the cumulative distribution function of the chi-square "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་ཆི་-གྲུ་བཞི་བཀརམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀརམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:535
msgid "R.QCHISQ:probability quantile function of the chi-square distribution."
msgstr "R.QCHISQ:ཆི་-བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:540
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the chi-square distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  ཆི་-གྲུ་གཞི་"
"བཀྲམསྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལས་འགན་གྱི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:560
msgid "R.DWEIBULL:probability density function of the Weibull distribution."
msgstr "R.DWEIBULL: ཝིའི་བཱུལ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:565
msgid ""
"This function returns the probability density function of the Weibull "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ཝིའི་བཱུལ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:585
msgid ""
"R.PWEIBULL:cumulative distribution function of the Weibull distribution."
msgstr "R.PWEIBULL:ཝིའི་བཱུལ་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:591
msgid ""
"This function returns the cumulative distribution function of the Weibull "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་ ཝིའི་བཱུལ་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:612
msgid "R.QWEIBULL:probability quantile function of the Weibull distribution."
msgstr "R.QWEIBULL:ཝིའི་བཱུལ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིར་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:618
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Weibull distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  ཝི་འི་བཱུལ་བཀྲམ་"
"སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་ལས་འགན་གྱི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:639
msgid "R.DPOIS:probability density function of the Poisson distribution."
msgstr "R.DPOIS:པོའི་སཱོན་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:641 ../plugins/fn-r/functions.c:664
#: ../plugins/fn-r/functions.c:689
msgid "lambda:the mean of the distribution"
msgstr "lambda:བཀྲམ་སྤེལ་གྱི་བར་མའི་ཆ་གྲངས།"

#: ../plugins/fn-r/functions.c:643
msgid ""
"This function returns the probability density function of the Poisson "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ པོའི་སོན་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:662
msgid "R.PPOIS:cumulative distribution function of the Poisson distribution."
msgstr "R.PPOIS:པོའི་སོན་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:667
msgid ""
"This function returns the cumulative distribution function of the Poisson "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་པོའི་སོན་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:687
msgid "R.QPOIS:probability quantile function of the Poisson distribution."
msgstr "R.QPOIS:པོའི་སོན་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:692
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Poisson distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་ དེ་ཡང་ པོའི་སཱོན་བཀྲམ་སྤེལ་གྱི་"
"རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལས་འགན་འདི་གི་ལུགས་ལྡོག་ཨིན།"

#: ../plugins/fn-r/functions.c:712
msgid "R.DEXP:probability density function of the exponential distribution."
msgstr "R.DEXP:བསྒྱུར་གྲངས་བཀྲམ་སྤེལ་གྱི་ འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:716
msgid ""
"This function returns the probability density function of the exponential "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་བསྒྱུར་གྲངས་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:735
msgid ""
"R.PEXP:cumulative distribution function of the exponential distribution."
msgstr "R.PEXP:བསྒྱུར་གྲངས་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀརམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:740
msgid ""
"This function returns the cumulative distribution function of the "
"exponential distribution."
msgstr "ལཱ་འགན་འདི་གིས་བསྒྱུར་གྲངས་ཀྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:760
msgid "R.QEXP:probability quantile function of the exponential distribution."
msgstr "R.QEXP:བསྒྱུར་གྲངས་བཀྲམ་སྤེལ་གྱི་  འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:765
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the exponential distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ བསྒྱུར་གྲངས་བཀརམ་"
"སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀརམ་སྤེལ་འདི་གི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:785
msgid "R.DBINOM:probability density function of the binomial distribution."
msgstr "R.DBINOM:བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:787 ../plugins/fn-r/functions.c:812
#: ../plugins/fn-r/functions.c:839 ../plugins/fn-r/functions.c:866
#: ../plugins/fn-r/functions.c:891 ../plugins/fn-r/functions.c:918
msgid "n:the number of trials"
msgstr "n:རྗེས་བཤུལ་ཚུ་གི་ཨང་གྲངས་"

#: ../plugins/fn-r/functions.c:788 ../plugins/fn-r/functions.c:813
#: ../plugins/fn-r/functions.c:840 ../plugins/fn-r/functions.c:867
#: ../plugins/fn-r/functions.c:892 ../plugins/fn-r/functions.c:919
#: ../plugins/fn-r/functions.c:1030 ../plugins/fn-r/functions.c:1053
#: ../plugins/fn-r/functions.c:1078
msgid "psuc:the probability of success in each trial"
msgstr "psuc:རྗེས་བཤུལ་རེ་རེ་ནང་གི་འབྱུང་སྲིད་པའི་གྲུབ་འབྲས།"

#: ../plugins/fn-r/functions.c:790
msgid ""
"This function returns the probability density function of the binomial "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་ བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་  འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:810
msgid "R.PBINOM:cumulative distribution function of the binomial distribution."
msgstr "R.PBINOM:བའི་ནོ་མི་ཡལ་བཀྲམསྤེལ་གྱི་  རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:816
msgid ""
"This function returns the cumulative distribution function of the binomial "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:837
msgid "R.QBINOM:probability quantile function of the binomial distribution."
msgstr "R.QBINOM:བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:843
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the binomial distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ བའི་ནོ་མི་ནལ་བཀྲམ་"
"སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལས་འགན་འདི་གི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:864
msgid ""
"R.DNBINOM:probability density function of the negative binomial distribution."
msgstr "R.DNBINOM:མེད་ཆའི་བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:869
msgid ""
"This function returns the probability density function of the negative "
"binomial distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་མེད་ཆའི་བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་  འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།"

#: ../plugins/fn-r/functions.c:889
msgid ""
"R.PNBINOM:cumulative distribution function of the negative binomial "
"distribution."
msgstr "R.PNBINOM:མེད་ཆའི་བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:895
msgid ""
"This function returns the cumulative distribution function of the negative "
"binomial distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་མེད་ཆའི་བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀྲས་སྤེལ་ལའ་འགན་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:916
msgid ""
"R.QNBINOM:probability quantile function of the negative binomial "
"distribution."
msgstr "R.QNBINOM:མེད་ཆའི་བའི་ནོ་མི་ལཡ་བཀྲམ་སྤེལ་གྱི་ འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:922
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the negative binomial "
"distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་ མེད་ཆའི་བའི་ནོ་མི་"
"ནལ་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀརམ་སྤེལ་ལས་འགན་འདི་གིལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:943
msgid ""
"R.DHYPER:probability density function of the hypergeometric distribution."
msgstr "R.DHYPER:ཧའི་པར་ཇིའོ་མེ་ཊིཀ་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:945 ../plugins/fn-r/functions.c:972
#: ../plugins/fn-r/functions.c:1001
msgid "r:the number of red balls"
msgstr "r:རྩེད་རིལ་དམརཔོ་གི་ཨང་གྲངས་"

#: ../plugins/fn-r/functions.c:946 ../plugins/fn-r/functions.c:973
#: ../plugins/fn-r/functions.c:1002
msgid "b:the number of black balls"
msgstr "b:རྩེད་རིལ་གནགཔོ་ཚུ་གི་ཨང་གྲངས་"

#: ../plugins/fn-r/functions.c:947 ../plugins/fn-r/functions.c:974
#: ../plugins/fn-r/functions.c:1003
msgid "n:the number of balls drawn"
msgstr "n:རྒྱལ་ཕམ་མེད་པའི་རྩེད་རིལ་གྱི་ཨང་གྲངས་"

#: ../plugins/fn-r/functions.c:949
msgid ""
"This function returns the probability density function of the hypergeometric "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་ཧའི་པར་ཇིའོ་མེ་ཊིཀ་བཀྲམ་སྤེལ་གྱི་ འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:970
msgid ""
"R.PHYPER:cumulative distribution function of the hypergeometric distribution."
msgstr "R.PHYPER:ཧའི་པར་ཇིའོ་མེ་ཊིཀ་བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:977
msgid ""
"This function returns the cumulative distribution function of the "
"hypergeometric distribution."
msgstr "ལཱ་འགན་འདི་གིས་ཧའི་པར་ཇིའོ་མེ་ཊིཀ་བཀརམ་སྤེལ་གྱི་  རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:999
msgid ""
"R.QHYPER:probability quantile function of the hypergeometric distribution."
msgstr "R.QHYPER:ཧའི་པར་ཇིའོ་མེ་ཊིཀ་བཀྲམ་སྤེལ་གྱི་  འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:1006
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the hypergeometric distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  ཧའི་པར་ཇིའོ་མེ་"
"ཊིཀ་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀརམསྤེལ་ལས་འགན་འདི་གི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:1028
msgid "R.DGEOM:probability density function of the geometric distribution."
msgstr "R.DGEOM:ཐིག་རྩིས་ཀྱི་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:1032
msgid ""
"This function returns the probability density function of the geometric "
"distribution."
msgstr "ལཱ་འགན་དེ་གིས་ ཐིག་རྩིས་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:1051
msgid "R.PGEOM:cumulative distribution function of the geometric distribution."
msgstr "R.PGEOM:ཐིག་རྩིས་ཀྱི་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:1056
msgid ""
"This function returns the cumulative distribution function of the geometric "
"distribution."
msgstr ""
"ལཱ་འགན་འདི་གིས་ཐིག་རྩིས་ཀྱི་བཀྲམ་སྤེལ་གྱི་ རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:1076
msgid "R.QGEOM:probability quantile function of the geometric distribution."
msgstr "R.QGEOM:ཐིག་རྩིས་ཀྱི་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:1081
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the geometric distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིར་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  ཐིག་རྩིས་ཀྱི་བཀྲམ་"
"སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལས་འགན་འདི་གི་ལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:1101
msgid "R.DCAUCHY:probability density function of the Cauchy distribution."
msgstr "R.DCAUCHY:ཀཱ་ཆི་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད།"

#: ../plugins/fn-r/functions.c:1103 ../plugins/fn-r/functions.c:1128
#: ../plugins/fn-r/functions.c:1155
msgid "location:the center of the distribution"
msgstr "གནས་ཁོངས:བཀྲམ་སྤེལ་འབད་ནིའི་དབུས་"

#: ../plugins/fn-r/functions.c:1106
msgid ""
"This function returns the probability density function of the Cauchy "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ཀཱ་ཆི་བཀྲམ་སྤེལ་གྱི་ འབྱུང་སྲིད་པའི་ལཱ་འགན་ཤོང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:1126
msgid "R.PCAUCHY:cumulative distribution function of the Cauchy distribution."
msgstr "R.PCAUCHY:ཀཱ་ཆི་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:1132
msgid ""
"This function returns the cumulative distribution function of the Cauchy "
"distribution."
msgstr "ལཱ་འགན་འདི་གིས་ཀཱ་ཆི་བཀྲམ་སྤེལ་གྱི་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།"

#: ../plugins/fn-r/functions.c:1153
msgid "R.QCAUCHY:probability quantile function of the Cauchy distribution."
msgstr "R.QCAUCHY:ཀཱ་ཆི་བཀྲམ་སྤེལ་གྱི་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལཱ་འགན།"

#: ../plugins/fn-r/functions.c:1159
msgid ""
"This function returns the probability quantile function, i.e., the inverse "
"of the cumulative distribution function, of the Cauchy distribution."
msgstr ""
"ལས་འགན་འདི་གིས་འབྱུང་སྲིད་པའི་ཀོའིན་ཊཡིལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  ཀོ་ཆི་བཀྲམ་སྤེལ་གྱི་"
"རིམ་གྱིས་བསག་པའི་བཀརམ་སྤེལ་ལས་འགན་འདི་གིལུགས་ལྡོག་འདི་ཨིན།"

#: ../plugins/fn-r/functions.c:1194
msgid "x,mu,sigma,give_log"
msgstr "x,mu,sigma,give_log"

#: ../plugins/fn-r/functions.c:1202
msgid "x,mu,sigma,lower_tail,log_p"
msgstr "x,mu,sigma,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1210
msgid "p,mu,sigma,lower_tail,log_p"
msgstr "p,mu,sigma,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1218
msgid "x,logmean,logsd,give_log"
msgstr "x,logmean,logsd,give_log"

#: ../plugins/fn-r/functions.c:1226 ../plugins/fn-r/functions.c:1234
msgid "x,logmean,logsd,lower_tail,log_p"
msgstr "x,logmean,logsd,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1242 ../plugins/fn-r/functions.c:1362
msgid "x,shape,scale,give_log"
msgstr "x,shape,scale,give_log"

#: ../plugins/fn-r/functions.c:1250 ../plugins/fn-r/functions.c:1370
msgid "x,shape,scale,lower_tail,log_p"
msgstr "x,shape,scale,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1258 ../plugins/fn-r/functions.c:1378
msgid "p,shape,scale,lower_tail,log_p"
msgstr "p,shape,scale,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1266
msgid "x,a,b,give_log"
msgstr "x,a,b,give_log"

#: ../plugins/fn-r/functions.c:1274
msgid "x,a,b,lower_tail,log_p"
msgstr "x,a,b,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1282
msgid "p,a,b,lower_tail,log_p"
msgstr "p,a,b,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1290
msgid "x,n,give_log"
msgstr "x,n,give_log"

#: ../plugins/fn-r/functions.c:1298
msgid "x,n,lower_tail,log_p"
msgstr "x,n,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1306
msgid "p,n,lower_tail,log_p"
msgstr "p,n,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1314
msgid "x,n1,n2,give_log"
msgstr "x,n1,n2,give_log"

#: ../plugins/fn-r/functions.c:1322 ../plugins/fn-r/functions.c:1330
msgid "x,n1,n2,lower_tail,log_p"
msgstr "x,n1,n2,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1338
msgid "x,df,give_log"
msgstr "x,df,give_log"

#: ../plugins/fn-r/functions.c:1346
msgid "x,df,lower_tail,log_p"
msgstr "x,df,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1354
msgid "p,df,lower_tail,log_p"
msgstr "p,df,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1386
msgid "x,lambda,give_log"
msgstr "x,lambda,give_log"

#: ../plugins/fn-r/functions.c:1394
msgid "x,lambda,lower_tail,log_p"
msgstr "x,lambda,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1402
msgid "p,lambda,lower_tail,log_p"
msgstr "p,lambda,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1410
msgid "x,scale,give_log"
msgstr "x,scale,give_log"

#: ../plugins/fn-r/functions.c:1418
msgid "x,scale,lower_tail,log_p"
msgstr "x,scale,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1426
msgid "p,scale,lower_tail,log_p"
msgstr "p,scale,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1434 ../plugins/fn-r/functions.c:1458
msgid "x,n,psuc,give_log"
msgstr "x,n,psuc,give_log"

#: ../plugins/fn-r/functions.c:1442 ../plugins/fn-r/functions.c:1450
#: ../plugins/fn-r/functions.c:1466
msgid "x,n,psuc,lower_tail,log_p"
msgstr "x,n,psuc,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1474
msgid "p,n,psuc,lower_tail,log_p"
msgstr "p,n,psuc,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1482
msgid "x,r,b,n,give_log"
msgstr "x,r,b,n,give_log"

#: ../plugins/fn-r/functions.c:1490
msgid "x,r,b,n,lower_tail,log_p"
msgstr "x,r,b,n,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1498
msgid "p,r,b,n,lower_tail,log_p"
msgstr "p,r,b,n,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1506
msgid "x,psuc,give_log"
msgstr "x,psuc,give_log"

#: ../plugins/fn-r/functions.c:1514
msgid "x,psuc,lower_tail,log_p"
msgstr "x,psuc,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1522
msgid "p,psuc,lower_tail,log_p"
msgstr "p,psuc,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1530
msgid "x,location,scale,give_log"
msgstr "x,location,scale,give_log"

#: ../plugins/fn-r/functions.c:1538
msgid "x,location,scale,lower_tail,log_p"
msgstr "x,location,scale,lower_tail,log_p"

#: ../plugins/fn-r/functions.c:1546
msgid "p,location,scale,lower_tail,log_p"
msgstr "p,location,scale,lower_tail,log_p"

#: ../plugins/fn-random/functions.c:47
msgid ""
"@FUNCTION=RAND\n"
"@SYNTAX=RAND()\n"
"@DESCRIPTION=RAND returns a random number between zero and one.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RAND() returns a random number greater than zero but less than one.\n"
"\n"
"@SEEALSO=RANDBETWEEN"
msgstr ""
"@FUNCTION=RAND\n"
"@SYNTAX=RAND()\n"
"@DESCRIPTION=RAND དེ་གིས་  ཀླད་ཀོར་དང་གཅིག་གི་བར་ནའི་ཨང་གྲངས་གང་བྱུང་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RAND() དེ་གིས་  ཀླད་ཀོར་ལས་སྦོམ་དང་གཅིག་ལས་ཉུང་་མི་ཨང་གྲངས་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=RANDBETWEEN"

#: ../plugins/fn-random/functions.c:73
msgid ""
"@FUNCTION=RANDUNIFORM\n"
"@SYNTAX=RANDUNIFORM(a,b)\n"
"@DESCRIPTION=RANDUNIFORM returns a random variate from the uniform (flat) "
"distribution from a to b. The distribution is,\n"
"\n"
"\tp(x) dx = {1 over (b-a)} dx : for a <= x < b.\n"
"p(x) dx = 0 : for x < a or b <= x.\n"
"* If @a > @b RANDUNIFORM returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDUNIFORM(1.4,4.2) returns a random number greater than or equal to 1.4 "
"but less than 4.2.\n"
"\n"
"@SEEALSO=RANDBETWEEN,RAND"
msgstr ""
"@FUNCTION=RANDUNIFORM\n"
"@SYNTAX=RANDUNIFORM(a,b)\n"
"@DESCRIPTION=RANDUNIFORM དེ་གིས་  གང་བྱུང་འགྱུར་བ་འདི་གཅིག་མཚུངས་ (flat) བཀྲམ་སྤེལ་ལས་ "
"ཨེ་ ལས་ བི་སླར་ལོག་འབདཝ་ཨིན། བཀྲམ་སྤེལ་འདི་,\n"
"\n"
"\tp(x) dx = {1 over (b-a)} dx : འདི་ a <= x < bདོན་ལུ་ཨིན།\n"
"p(x) dx = 0 : for x < a or b <= x.\n"
"* If @a > @b RANDUNIFORM དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDUNIFORM(1.4,4.2) དེ་གིས་ གང་བྱུང་ཨང་གྲངས་1.4 ལས་སྦོམ་ཡང་ན་མཉམ་པ་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིནམ་དང་  དེ་འབདཝ་ད་ 4.2ལས་ཉུང་མི་ཨིན།\n"
"\n"
"@SEEALSO=RANDBETWEEN,RAND"

#: ../plugins/fn-random/functions.c:108
msgid ""
"@FUNCTION=RANDDISCRETE\n"
"@SYNTAX=RANDDISCRETE(val_range[,prob_range])\n"
"@DESCRIPTION=RANDDISCRETE returns one of the values in the @val_range. The "
"probabilities for each value are given in the @prob_range.\n"
"\n"
"* If @prob_range is omitted, the uniform discrete distribution is assumed.\n"
"* If the sum of all values in @prob_range is other than one, RANDDISCRETE "
"returns #NUM! error.\n"
"* If @val_range and @prob_range are not the same size, RANDDISCRETE returns "
"#NUM! error.\n"
"* If @val_range or @prob_range is not a range, RANDDISCRETE returns #VALUE! "
"error.\n"
"\n"
"@EXAMPLES=\n"
"RANDDISCRETE(A1:A6) returns one of the values in the range A1:A6.\n"
"\n"
"@SEEALSO=RANDBETWEEN,RAND"
msgstr ""
"@FUNCTION=RANDDISCRETE\n"
"@SYNTAX=RANDDISCRETE(val_range[,prob_range])\n"
"@DESCRIPTION=RANDDISCRETE དེ་གིས་   @val_range ནང་གི་གནས་གོང་གཅིག་སླར་ལོག་འབདཝ་ཨིན། "
"གནས་གོང་རེ་རེ་ནང་འབྱུང་སྲིད་པ་འདི་ @prob_rangeནང་བྱིན་ཏེ་ཡོདཔ་ཨིན།\n"
"\n"
"* If @prob_range འདི་སྐྱུར་བཞག་པ་ཅིན་, གཅིག་མཚུངས་དབྱེ་བའི་བཀྲམ་སྤེལ་སྦེ་བཞགཔ་ཨིན།\n"
"* ག་དེམ་ཅིག་སྦེ་@prob_range ནང་གི་གནས་གོང་ལ་ལོ་ཅིག་གཅིག་ལས་གཞན་ཨིན་པ་ཅིན་, RANDDISCRETE "
"དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @val_range དང་ @prob_range ཚུ་ཚད་གཅིག་པ་མེན་པ་ཅིན་, RANDDISCRETE དེ་གིས་ "
"#NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @val_range ཡང་ན་ @prob_range འདི་ཁྱབ་ཚད་མེན་པ་ཅིན་, RANDDISCRETE དེ་གིས་ "
"#VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDDISCRETE(A1:A6) དེ་གིས་  ཁྱབ་ཚད་ A1:A6 ནང་གནས་གོང་གཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@SEEALSO=RANDBETWEEN,RAND"

#: ../plugins/fn-random/functions.c:244
msgid ""
"@FUNCTION=RANDEXP\n"
"@SYNTAX=RANDEXP(b)\n"
"@DESCRIPTION=RANDEXP returns a exponentially-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDEXP(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=RANDEXP\n"
"@SYNTAX=RANDEXP(b)\n"
"@DESCRIPTION=RANDEXP དེ་གིས་  བསྒྱུར་གྲངས་ཀྱི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDEXP(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"

#: ../plugins/fn-random/functions.c:270
msgid ""
"@FUNCTION=RANDPOISSON\n"
"@SYNTAX=RANDPOISSON(lambda)\n"
"@DESCRIPTION=RANDPOISSON returns a Poisson-distributed random number.\n"
"\n"
"* If @lambda < 0 RANDPOISSON returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDPOISSON(3).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=RANDPOISSON\n"
"@SYNTAX=RANDPOISSON(lambda)\n"
"@DESCRIPTION=RANDPOISSON དེ་གིས་  པོའི་སཱོན་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @lambda < 0 ཨིན་པ་ཅིན་RANDPOISSON དེ་གིས་ #NUM! འཛོལ་བ་ཨིན་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDPOISSON(3).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"

#: ../plugins/fn-random/functions.c:301
msgid ""
"@FUNCTION=RANDBINOM\n"
"@SYNTAX=RANDBINOM(p,trials)\n"
"@DESCRIPTION=RANDBINOM returns a binomially-distributed random number.\n"
"\n"
"* If @p < 0 or @p > 1 RANDBINOM returns #NUM! error.\n"
"* If @trials < 0 RANDBINOM returns #NUM! error. \n"
"@EXAMPLES=\n"
"RANDBINOM(0.5,2).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=RANDBINOM\n"
"@SYNTAX=RANDBINOM(p,trials)\n"
"@DESCRIPTION=RANDBINOM དེ་གིས་  བའི་ནོ་མི་ཡ་ལི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @p < 0 ཡང་ན་ @p > 1ཨིན་པ་ཅིན་ RANDBINOM དེ་གིས་ #NUM!འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* ག་དེམ་ཅིག་སྦེ་ @trials < 0 ཨིན་པ་ཅིན་RANDBINOM དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན། \n"
"@EXAMPLES=\n"
"RANDBINOM(0.5,2).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"

#: ../plugins/fn-random/functions.c:334
msgid ""
"@FUNCTION=RANDBETWEEN\n"
"@SYNTAX=RANDBETWEEN(bottom,top)\n"
"@DESCRIPTION=RANDBETWEEN function returns a random integer number between "
"and including @bottom and @top.\n"
"\n"
"* If @bottom is non-integer, it is rounded up.\n"
"* If @top is non-integer, it is rounded down.\n"
"* If @bottom > @top, RANDBETWEEN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RANDBETWEEN(3,7).\n"
"\n"
"@SEEALSO=RAND,RANDUNIFORM"
msgstr ""
"@FUNCTION=RANDBETWEEN\n"
"@SYNTAX=RANDBETWEEN(bottom,top)\n"
"@DESCRIPTION=RANDBETWEEN ལས་འགན་འདི་གིས་ གང་བྱུང་ཧྲིལ་གྲངས་ @bottom བར་ན་དང་རྩིས་ཏེ་ དེ་"
"ལས་@top སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @bottom འདི་ཧྲིལ་གྲངས་མེན་པ་ཅིན་, འདི་བསྐོར་སྐྱོད་འབད་ཡོདཔ་ཨིན།\n"
"* If @top འདི་ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་, འདི་ མར་བསྐོར་སྐྱོད་འབད་ཡོདཔ་ཨིན།\n"
"* If @bottom > @top ཨིན་པ་ཅིན་, RANDBETWEEN དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDBETWEEN(3,7).\n"
"\n"
"@SEEALSO=RAND,RANDUNIFORM"

#: ../plugins/fn-random/functions.c:374
msgid ""
"@FUNCTION=RANDNEGBINOM\n"
"@SYNTAX=RANDNEGBINOM(p,failures)\n"
"@DESCRIPTION=RANDNEGBINOM returns a negative binomially-distributed random "
"number.\n"
"\n"
"* If @p < 0 or @p > 1, RANDNEGBINOM returns #NUM! error.\n"
"* If @failures < 1, RANDNEGBINOM returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDNEGBINOM(0.5,2).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=RANDNEGBINOM\n"
"@SYNTAX=RANDNEGBINOM(p,failures)\n"
"@DESCRIPTION=RANDNEGBINOM དེ་གིས་  ཡ་ཅན་བའི་ནོ་མི་ཡ་ལི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་"
"གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ག་དེམ་ཅིག་སྦེ་ @p < 0 ཡང་ན་ @p > 1ཨིན་པ་ཅིན་, RANDNEGBINOM དེ་གིས #NUM! འཛོལ་བ་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* ག་དེམ་ཅིག་སྦེ་@failures < 1, RANDNEGBINOM དེ་གིས་ #NUM! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDNEGBINOM(0.5,2).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"

#: ../plugins/fn-random/functions.c:408
msgid ""
"@FUNCTION=RANDBERNOULLI\n"
"@SYNTAX=RANDBERNOULLI(p)\n"
"@DESCRIPTION=RANDBERNOULLI returns a Bernoulli-distributed random number.\n"
"\n"
"* If @p < 0 or @p > 1 RANDBERNOULLI returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDBERNOULLI(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"
msgstr ""
"@FUNCTION=RANDBERNOULLI\n"
"@SYNTAX=RANDBERNOULLI(p)\n"
"@DESCRIPTION=RANDBERNOULLI དེ་གིས་  བར་ནའུ་ལི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @p < 0 ཡང་ན་ @p > 1ཨིན་པ་ཅིན་ RANDBERNOULLI དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDBERNOULLI(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDBETWEEN"

#: ../plugins/fn-random/functions.c:439
msgid ""
"@FUNCTION=RANDNORM\n"
"@SYNTAX=RANDNORM(mean,stdev)\n"
"@DESCRIPTION=RANDNORM returns a normal-distributed random number.\n"
"\n"
"* If @stdev < 0 RANDNORM returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDNORM(0,1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDNORM\n"
"@SYNTAX=RANDNORM(mean,stdev)\n"
"@DESCRIPTION=RANDNORM དེ་གིས་  སྤྱིར་གཏང་-བཀྲམ་སྤེལ་གང་བྱུང་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @stdev < 0 ཨིན་པ་ཅིན་RANDNORM དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDNORM(0,1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:471
msgid ""
"@FUNCTION=RANDCAUCHY\n"
"@SYNTAX=RANDCAUCHY(a)\n"
"@DESCRIPTION=RANDCAUCHY returns a Cauchy-distributed random number with "
"scale parameter a. The Cauchy distribution is also known as the Lorentz "
"distribution.\n"
"\n"
"* If @a < 0 RANDCAUCHY returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDCAUCHY(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDCAUCHY\n"
"@SYNTAX=RANDCAUCHY(a)\n"
"@DESCRIPTION=RANDCAUCHY དེ་གིས་  ཀོ་ཆི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་ ཆ་ཚད་"
"ཚད་བཟུང་ ཨེ་དང་ཅིག་ཁར་སླར་ལོག་འབདཝ་ཨིན།  ཀོ་ཆི་བཀྲམ་སྤེལ་འདི་  ལོ་རེནསི་བཀྲམ་སྤེལ་ཟེར་ཡང་སླབ་"
"ཨིན།\n"
"\n"
"* If @a < 0 ཨི་ནཔ་ཅིན་RANDCAUCHY དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDCAUCHY(1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:504
msgid ""
"@FUNCTION=RANDLOGNORM\n"
"@SYNTAX=RANDLOGNORM(zeta,sigma)\n"
"@DESCRIPTION=RANDLOGNORM returns a lognormal-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDLOGNORM(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDLOGNORM\n"
"@SYNTAX=RANDLOGNORM(zeta,sigma)\n"
"@DESCRIPTION=RANDLOGNORM དེ་གིས་  དྲན་དེབ་སྤྱིར་གཏང་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDLOGNORM(1,2).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:531
msgid ""
"@FUNCTION=RANDWEIBULL\n"
"@SYNTAX=RANDWEIBULL(a,b)\n"
"@DESCRIPTION=RANDWEIBULL returns a Weibull-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDWEIBULL(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDWEIBULL\n"
"@SYNTAX=RANDWEIBULL(a,b)\n"
"@DESCRIPTION=RANDWEIBULL དེ་གིས་  ཝིའི་བཱུལ་-བཀྲམ་སྤེལ་གང་བྱུང་ཨང་གྲངས་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDWEIBULL(1,2).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:558
msgid ""
"@FUNCTION=RANDLAPLACE\n"
"@SYNTAX=RANDLAPLACE(a)\n"
"@DESCRIPTION=RANDLAPLACE returns a Laplace-distributed random number. "
"Laplace distribution is also known as two-sided exponential probability "
"distribution.\n"
"\n"
"@EXAMPLES=\n"
"RANDLAPLACE(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDLAPLACE\n"
"@SYNTAX=RANDLAPLACE(a)\n"
"@DESCRIPTION=RANDLAPLACE དེ་གིས་ ལེབ་པེལེསི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་ཅིག་སླར་"
"ལོག་འབདཝ་ཨིན།ལེབ་པེལེསི་བཀྲམ་སྤེལ་འདི་  ཟུར་གཉིས་ལྡན་བསྒྱུར་གྲངས་འབྱུང་སྲིད་པའི་བཀྲམ་སྤེལ་ཟེར་ཡང་སླབ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDLAPLACE(1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:586
msgid ""
"@FUNCTION=RANDRAYLEIGH\n"
"@SYNTAX=RANDRAYLEIGH(sigma)\n"
"@DESCRIPTION=RANDRAYLEIGH returns a Rayleigh-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDRAYLEIGH(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDRAYLEIGH\n"
"@SYNTAX=RANDRAYLEIGH(sigma)\n"
"@DESCRIPTION=RANDRAYLEIGH དེ་གིས་  རེ་ལིའི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་ཅིག་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDRAYLEIGH(1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:612
msgid ""
"@FUNCTION=RANDRAYLEIGHTAIL\n"
"@SYNTAX=RANDRAYLEIGHTAIL(a,sigma)\n"
"@DESCRIPTION=RANDRAYLEIGHTAIL returns  a random variate from the tail of the "
"Rayleigh distribution with scale parameter sigma and a lower limit of a. The "
"distribution is,\n"
"\n"
"\tp(x) dx = {x over sigma^2} exp ((a^2 - x^2) /(2 sigma^2)) dx,\n"
"\n"
"for x > a.\n"
"\n"
"@EXAMPLES=\n"
"RANDRAYLEIGHTAIL(0.3,1).\n"
"\n"
"@SEEALSO=RAND,RANDRAYLEIGH"
msgstr ""
"@FUNCTION=RANDRAYLEIGHTAIL\n"
"@SYNTAX=RANDRAYLEIGHTAIL(a,sigma)\n"
"@DESCRIPTION=RANDRAYLEIGHTAIL དེ་གིས་ གང་བྱུང་འགྱུར་བ་འདི་  ཆ་ཚད་ཚད་བཟུང་སིག་མ་དང་ཨེ་གི་"
"འོག་གི་ཚད་དང་ཅིག་ཁར་  རེ་ལིའི་བཀྲམ་སྤེལ་གྱི་མཇུག་ལས་སླར་ལོག་འབདཝ་ཨིན། བཀརམ་སྤེལ་འདི་\n"
"\n"
"\tp(x) dx = {x over sigma^2} exp ((a^2 - x^2) /(2 sigma^2)) dx,\n"
"\n"
"for x > a.\n"
"\n"
"@EXAMPLES=\n"
"RANDRAYLEIGHTAIL(0.3,1).\n"
"\n"
"@SEEALSO=RAND,RANDRAYLEIGH"

#: ../plugins/fn-random/functions.c:643
msgid ""
"@FUNCTION=RANDGAMMA\n"
"@SYNTAX=RANDGAMMA(a,b)\n"
"@DESCRIPTION=RANDGAMMA returns a Gamma-distributed random number.\n"
"\n"
"* If @a <= 0 RANDGAMMA returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDGAMMA(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDGAMMA\n"
"@SYNTAX=RANDGAMMA(a,b)\n"
"@DESCRIPTION=RANDGAMMA དེ་གིས་ ག་མ་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་ཅིག་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* If @a <= 0 RANDGAMMA དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDGAMMA(1,2).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:675
msgid ""
"@FUNCTION=RANDPARETO\n"
"@SYNTAX=RANDPARETO(a,b)\n"
"@DESCRIPTION=RANDPARETO returns a Pareto-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDPARETO(1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDPARETO\n"
"@SYNTAX=RANDPARETO(a,b)\n"
"@DESCRIPTION=RANDPARETO དེ་གིས་  པེ་རི་ཊོ་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDPARETO(1,2).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:702
msgid ""
"@FUNCTION=RANDFDIST\n"
"@SYNTAX=RANDFDIST(nu1,nu2)\n"
"@DESCRIPTION=RANDFDIST returns a F-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDFDIST(1,2).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"
msgstr ""
"@FUNCTION=RANDFDIST\n"
"@SYNTAX=RANDFDIST(nu1,nu2)\n"
"@DESCRIPTION=RANDFDIST དེ་གིས་ ཨེཕ་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDFDIST(1,2).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"

#: ../plugins/fn-random/functions.c:729
msgid ""
"@FUNCTION=RANDBETA\n"
"@SYNTAX=RANDBETA(a,b)\n"
"@DESCRIPTION=RANDBETA returns a Beta-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDBETA(1,2).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"
msgstr ""
"@FUNCTION=RANDBETA\n"
"@SYNTAX=RANDBETA(a,b)\n"
"@DESCRIPTION=RANDBETA དེ་གིས་  སྔོན་དཔྱད་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDBETA(1,2).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"

#: ../plugins/fn-random/functions.c:756
msgid ""
"@FUNCTION=RANDLOGISTIC\n"
"@SYNTAX=RANDLOGISTIC(a)\n"
"@DESCRIPTION=RANDLOGISTIC returns a logistic-distributed random number.  The "
"distribution function is,\n"
"\n"
"\tp(x) dx = { exp(-x/a) over a (1 + exp(-x/a))^2 } dx for -infty < x < "
"+infty.\n"
"\n"
"@EXAMPLES=\n"
"RANDLOGISTIC(1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDLOGISTIC\n"
"@SYNTAX=RANDLOGISTIC(a)\n"
"@DESCRIPTION=RANDLOGISTIC དེ་གིས་  གཏན་ཚིག་ཅན་གྱི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་"
"ཅིག་སླར་ལོག་འབདཝ་ཨིན། བཀྲམ་སྤེལ་གྱི་ལས་འགན་འདི་,\n"
"\n"
"\tp(x) dx = { exp(-x/a) over a (1 + exp(-x/a))^2 } dx for -infty < x < "
"+infty.\n"
"\n"
"@EXAMPLES=\n"
"RANDLOGISTIC(1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:785
msgid ""
"@FUNCTION=RANDGEOM\n"
"@SYNTAX=RANDGEOM(p)\n"
"@DESCRIPTION=RANDGEOM returns a geometric-distributed random number. The "
"number of independent trials with probability @p until the first success. "
"The probability distribution for geometric variates is, \n"
"\n"
"\tp(k) =  p (1-p)^(k-1), for k >= 1.\n"
"\n"
"* If @p < 0 or @p > 1 RANDGEOM returns #NUM! error. \n"
"@EXAMPLES=\n"
"RANDGEOM(0.4).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDGEOM\n"
"@SYNTAX=RANDGEOM(p)\n"
"@DESCRIPTION=RANDGEOM དེ་གིས་  ཐིག་རྩིས་ཀྱི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།  རང་དབང་དོ་འགྲན་གྱི་ཨང་གྲངས་འདི་  བྱུང་སྲིད་པའི་ @p དང་ཅིག་ཁར་ མགོའི་མཐར་འཁྱོལ་ཚུན་"
"ཚོད།  ཐིག་རྩིས་ཀྱི་འགྱུར་བའི་དོན་ལུ་འབྱུང་སྲིད་པའི་བཀྲམ་སྤེལ་འདི་, \n"
"\n"
"\tp(k) =  p (1-p)^(k-1), for k >= 1.\n"
"\n"
"* If @p < 0 or @p > 1 RANDGEOMདེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན། \n"
"@EXAMPLES=\n"
"RANDGEOM(0.4).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:819
msgid ""
"@FUNCTION=RANDHYPERG\n"
"@SYNTAX=RANDHYPERG(n1,n2,t)\n"
"@DESCRIPTION=RANDHYPERG returns a hypergeometric-distributed random number. "
"The probability distribution for hypergeometric random variates is,\n"
"\n"
"\tp(k) =  C(n_1,k) C(n_2, t-k) / C(n_1 + n_2,k), \n"
"\n"
"where C(a,b) = a!/(b!(a-b)!). \n"
"\n"
"The domain of k is max(0,t-n_2), ..., max(t,n_1).\n"
"@EXAMPLES=\n"
"RANDHYPERG(21,1,9).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDHYPERG\n"
"@SYNTAX=RANDHYPERG(n1,n2,t)\n"
"@DESCRIPTION=RANDHYPERG དེ་གིས་  ཧའི་པར་ཇིའོ་མེ་ཊིཀ་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།  ཧའི་པར་ཇིའོ་མེ་ཊིཀ་གང་བྱུང་ཨང་གྲངས་འགྱུར་ཅན་གྱི་དོན་ལུ་ འབྱུང་སྲིད་པའི་བཀྲམ་"
"སྤེལ་འདི་,\n"
"\n"
"\tp(k) =  C(n_1,k) C(n_2, t-k) / C(n_1 + n_2,k), \n"
"\n"
"where C(a,b) = a!/(b!(a-b)!). \n"
"\n"
"ཀེ་གི་ཌོ་མེན་འདི་ མང་མཐའ་(0,t-n_2), ..., མང་མཐའ་(t,n_1).\n"
"@EXAMPLES=\n"
"RANDHYPERG(21,1,9).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:854
msgid ""
"@FUNCTION=RANDLOG\n"
"@SYNTAX=RANDLOG(p)\n"
"@DESCRIPTION=RANDLOG returns a logarithmic-distributed random number.\n"
"\n"
"* If @p < 0 or @p > 1 RANDLOG returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDLOG(0.72).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDLOG\n"
"@SYNTAX=RANDLOG(p)\n"
"@DESCRIPTION=RANDLOG དེ་གིས་ མཉམ་གྲངས་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་ཅིག་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* If @p < 0 or @p > 1 RANDLOG དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDLOG(0.72).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:885
msgid ""
"@FUNCTION=RANDCHISQ\n"
"@SYNTAX=RANDCHISQ(nu)\n"
"@DESCRIPTION=RANDCHISQ returns a Chi-Square-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDCHISQ(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"
msgstr ""
"@FUNCTION=RANDCHISQ\n"
"@SYNTAX=RANDCHISQ(nu)\n"
"@DESCRIPTION=RANDCHISQ དེ་གིས་ ཆི་གྲུ་གཞི་-བཀྲམ་སྟོན་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་ཅིག་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDCHISQ(0.5).\n"
"\n"
"@SEEALSO=RAND,RANDGAMMA"

#: ../plugins/fn-random/functions.c:911
msgid ""
"@FUNCTION=RANDTDIST\n"
"@SYNTAX=RANDTDIST(nu)\n"
"@DESCRIPTION=RANDTDIST returns a T-distributed random number.\n"
"\n"
"@EXAMPLES=\n"
"RANDTDIST(0.5).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDTDIST\n"
"@SYNTAX=RANDTDIST(nu)\n"
"@DESCRIPTION=RANDTDIST དེ་གིས་  ཊི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་གང་གྲངས་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDTDIST(0.5).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:937
msgid ""
"@FUNCTION=RANDGUMBEL\n"
"@SYNTAX=RANDGUMBEL(a,b[,type])\n"
"@DESCRIPTION=RANDGUMBEL returns a Type I or Type II Gumbel-distributed "
"random number. @type is either 1 or 2 and specifies the type of the "
"distribution (Type I or Type II).\n"
"\n"
"* If @type is neither 1 nor 2, RANDGUMBEL returns #NUM! error.\n"
"* If @type is omitted, Type I is assumed.\n"
"\n"
"@EXAMPLES=\n"
"RANDGUMBEL(0.5,1,2).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDGUMBEL\n"
"@SYNTAX=RANDGUMBEL(a,b[,type])\n"
"@DESCRIPTION=RANDGUMBEL དེ་གིས་ དབྱེ་བ་ ༡ ཡང་ན་ དབྱེ་བ་ ༢་ གམ་བལ་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་"
"གང་བྱུང་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན། @type འདི་  ༡ ཡང་ན་ ༢ གང་རུང་ཨིནམ་དང་  བཀྲམ་སྤེལ་ "
"(དབྱེ་བ་ I ཡང་ན་ དབྱེ་བ་ II) གསལ་བཀོད་འབདཝ་ཨིན།\n"
"\n"
"* If @type འདི་ ༡་ཡང་ན་༢་ མེན་པ་ཅིན་, RANDGUMBEL དེ་གིས་ #NUM!འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @type འདི་སྐྱུར་བཞག་པ་ཅིན་, དབྱེ་བ་ I  འདི་འཛནི་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDGUMBEL(0.5,1,2).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:975
msgid ""
"@FUNCTION=RANDLEVY\n"
"@SYNTAX=RANDLEVY(c,alpha[,beta])\n"
"@DESCRIPTION=RANDLEVY returns a Levy-distributed random number. If @beta is "
"omitted, it is assumed to be 0.\n"
"\n"
"* For @alpha = 1, @beta=0, we get the Lorentz distribution.\n"
"* For @alpha = 2, @beta=0, we get the normal distribution.\n"
"\n"
"* If @alpha <= 0 or @alpha > 2, RANDLEVY returns #NUM! error.\n"
"* If @beta < -1 or @beta > 1, RANDLEVY returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"RANDLEVY(0.5,0.1,1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDLEVY\n"
"@SYNTAX=RANDLEVY(c,alpha[,beta])\n"
"@DESCRIPTION=RANDLEVY དེ་གིས་  ལེ་ཝི་-བཀྲམ་སྤེལ་འབད་ཡོད་པའི་གང་བྱུང་ཨང་གྲངས་ཅིག་སླར་ལོག་"
"འབདཝ་ཨིན།  @beta འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ ༠་ ཨིན་ཟེར་བཞགཔ་ཨིན།\n"
"\n"
"* For @alpha = 1གི་དོན་ལུ་, @beta=0, ང་བཅས་ལུ་ལོ་རེནསི་བཀྲམ་སྤེལ་འདི་ཐོབ་ཨིན།\n"
"* For @alpha = 2དོན་ལུ་, @beta=0, ང་བཅས་ལུ་སྤྱིར་གཏང་བཀྲམ་སྤེལ་འདི་ཐོབ་ཨིན།\n"
"\n"
"* If @alpha <= 0 ཡང་ན་ @alpha > 2ཨིན་པ་ཅིན་, RANDLEVY དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @beta < -1 ཡང་ན་ @beta > 1ཨིན་པ་ཅིན་, RANDLEVY དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RANDLEVY(0.5,0.1,1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:1013
msgid ""
"@FUNCTION=RANDEXPPOW\n"
"@SYNTAX=RANDEXPPOW(a,b)\n"
"@DESCRIPTION=RANDEXPPOW returns a random variate from the exponential power "
"distribution with scale parameter @a and exponent @b. The distribution is,\n"
"\n"
"\tp(x) dx = {1 over 2 a Gamma(1+1/b)} exp(-|x/a|^b) dx, for x >= 0.\n"
"\n"
"* For @b = 1 this reduces to the Laplace distribution.\n"
"* For @b = 2 it has the same form as a normal distribution with sigma = a/"
"sqrt(2).\n"
"\n"
"@EXAMPLES=\n"
"RANDEXPPOW(0.5,0.1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDEXPPOW\n"
"@SYNTAX=RANDEXPPOW(a,b)\n"
"@DESCRIPTION=RANDEXPPOW དེ་གིས་  གང་བྱུང་འགྱུར་བ་འདི་  བསྒྱུར་གྲངས་ནུས་ཤུགས་ལས་ཆ་ཚད་ཚད་"
"བཟུང་ @a དང་ ཐབས་རིག་ཅན་ @bདང་ཅིག་ཁར་སླར་ལོག་འབདཝ་ཨིན།  བཀྲམ་སྤེལ་འདི་,\n"
"\n"
"\tp(x) dx = {1 over 2 a Gamma(1+1/b)} exp(-|x/a|^b) dx, for x >= 0.\n"
"\n"
"* For @b = 1གི་དོན་ལུ་  འདི་གིས་ལེབ་པེལེསི་བཀརམ་སྤེལ་ལུ་ཕབ་ལེན་འབདཝ་ཨིན།\n"
"* For @b = 2 གི་དོན་ལུ་  དེ་ལུ་སིག་མ་དང་ཅིག་ཁར་སྤྱིར་གཏང་བཀྲམ་སྤེལ་ཅིག་སྦེ་རྣམ་པ་གཅིག་པ་ཡོདཔ་"
"ཨིན། = a/sqrt(2).\n"
"\n"
"@EXAMPLES=\n"
"RANDEXPPOW(0.5,0.1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:1047
msgid ""
"@FUNCTION=RANDLANDAU\n"
"@SYNTAX=RANDLANDAU()\n"
"@DESCRIPTION=RANDLANDAU returns a random variate from the Landau "
"distribution. The probability distribution for Landau random variates is "
"defined analytically by the complex integral,\n"
"\n"
"\tp(x) = (1/(2 pi i)) int_{c-i infty}^{c+i infty} ds exp(s log(s) + x s).\n"
"\n"
"For numerical purposes it is more convenient to use the following equivalent "
"form of the integral,\n"
"\n"
"\tp(x) = (1/pi) int_0^ infty dt exp(-t log(t) - x t) sin(pi t).\n"
"\n"
"@EXAMPLES=\n"
"RANDLANDAU().\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDLANDAU\n"
"@SYNTAX=RANDLANDAU()\n"
"@DESCRIPTION=RANDLANDAU དེ་གིས་ ལཱན་ཌའུ་བཀྲམ་སྤེལ་ལས་གང་བྱུང་འགྱུར་བ་ཅིག་སླར་ལོག་འབདཝ་ཨིན།  "
"ལན་ཌའུ་གང་བྱུང་འགྱུར་བའི་དོན་ལུ་བྱུང་སྲིད་པའི་བཀརམ་སྤེལ་འདི་ དབྱེ་དཔྱད་ཀྱི་གོ་ལས་གོ་དཀའ་བའི་མེད་ཐབས་"
"མེད་མི་གིས་ངོས་འཛིན་འབད་དེ་ཡོདཔ་ཨིན།\n"
"\n"
"\tp(x) = (1/(2 pi i)) int_{c-i infty}^{c+i infty} ds exp(s log(s) + x s).\n"
"\n"
"ཨང་གྲངས་ཀྱི་དོན་ལུ་  མེད་ཐབས་མེད་པའི་འོག་གི་འདྲ་མཉམ་འདི་ལག་ལེན་འཐབ་ནི་ལུ་སྟབས་བདེ་ཏོག་ཏོ་ཡོདཔ་"
"ཨིན། \n"
"\n"
"\tp(x) = (1/pi) int_0^ infty dt exp(-t log(t) - x t) sin(pi t).\n"
"\n"
"@EXAMPLES=\n"
"RANDLANDAU().\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:1078
msgid ""
"@FUNCTION=RANDNORMTAIL\n"
"@SYNTAX=RANDNORMTAIL(a,sigma)\n"
"@DESCRIPTION=RANDNORMTAIL returns a random variates from the upper tail of a "
"normal distribution with standard deviation @sigma. The values returned are "
"larger than the lower limit @a, which must be positive. The method is based "
"on Marsaglia's famous rectangle-wedge-tail algorithm (Ann Math Stat 32, 894-"
"899 (1961)), with this aspect explained in Knuth, v2, 3rd ed, p139, 586 "
"(exercise 11).\n"
"\n"
"The probability distribution for normal tail random variates is,\n"
"\n"
"\tp(x) dx = {1 over N(a;sigma)} exp (- x^2/(2 sigma^2)) dx,\n"
"\n"
"for x > a where N(a;sigma) is the normalization constant, N(a;sigma) = (1/2) "
"erfc(a / sqrt(2 sigma^2)).\n"
"\n"
"@EXAMPLES=\n"
"RANDNORMTAIL(0.5,0.1).\n"
"\n"
"@SEEALSO=RAND"
msgstr ""
"@FUNCTION=RANDNORMTAIL\n"
"@SYNTAX=RANDNORMTAIL(a,sigma)\n"
"@DESCRIPTION=RANDNORMTAIL དེ་གིས་  ཚད་ལྡན་ཁ་བསྒྱུར་བ་@sigmaདང་ཅིག་ཁར་  སྤྱིར་གཏང་བཀྲམ་"
"སྤེལ་ཅིག་གི་མགོའི་མཇུག་ལས་  གང་བྱུང་མི་མཐུན་པ་ཅིག་སླར་ལོག་འབདཝ་ཨིན།  སླར་ལོག་འབད་ཡོད་པའི་གནས་གོང་"
"ཚུ་  འོག་ཚད་@aལས་སྦོམ་ཡོདཔ་ཨིན་, དེ་ཡང་ ཡོད་ཆ་འོང་དགོཔ།  ཐབས་ལམ་འདི་ མར་སག་ལི་ཡ་གི་  སྐད་"
"གྲགས་ཅན་གཡི་གྲུ་བཞི་ནར་མོ་-ཤབས་གཟེར་-མཇུག་ཨང་གྲངས་(Ann Math Stat 32, 894-899 (1961))"
"འདི་, རྣམ་པ་འདི་དང་ཅིག་ཁར་ཀའུནཌ་ v2, 3rd ed, p139, 586 (exercise 11)ནང་འགྲལ་བཤད་"
"འབད་ཡོདཔ།\n"
"\n"
"སྤྱིར་གཏང་མཇུག་མི་མཐུན་པའི་དོན་ལུ་འབྱུང་སྲིད་པའི་བཀརམ་སྤེལ་འདི་,\n"
"\n"
"\tp(x) dx = {1 over N(a;sigma)} exp (- x^2/(2 sigma^2)) dx,\n"
"\n"
"for x > a དེ་ཡང་ N(a;sigma) འདི་སྤྱིར་གཏང་འབད་ཡོད་པའི་ཆད་མེད་ཨིན་, N(a;sigma) = (1/2) "
"erfc(a / sqrt(2 sigma^2)).\n"
"\n"
"@EXAMPLES=\n"
"RANDNORMTAIL(0.5,0.1).\n"
"\n"
"@SEEALSO=RAND"

#: ../plugins/fn-random/functions.c:1117
msgid ""
"@FUNCTION=SIMTABLE\n"
"@SYNTAX=SIMTABLE(d1, d2, ..., dN)\n"
"@DESCRIPTION=SIMTABLE returns one of the values in the given argument list "
"depending on the round number of the simulation tool. When the simulation "
"tool is not activated, SIMTABLE returns @d1.\n"
"\n"
"With the simulation tool and the SIMTABLE function you can test given "
"decision variables. Each SIMTABLE function contains the possible values of a "
"simulation variable. In most valid simulation models you should have the "
"same number of values @dN for all decision variables.  If the simulation is "
"run more rounds than there are values defined, SIMTABLE returns #N/A! error "
"(e.g. if A1 contains `=SIMTABLE(1)' and A2 `=SIMTABLE(1,2)', A1 yields #N/A! "
"error on the second round).\n"
"\n"
"The successive use of the simulation tool also requires that you give to the "
"tool at least one input variable having RAND() or any other "
"RAND<distribution name>() function in it. On each round, the simulation tool "
"iterates for the given number of rounds over all the input variables to "
"reevaluate them. On each iteration, the values of the output variables are "
"stored, and when the round is completed, descriptive statistical information "
"is created according to the values.\n"
"\n"
"@EXAMPLES=\n"
"SIMTABLE(TRUE,FALSE) returns TRUE on the first simulation round and FALSE on "
"the second round.\n"
"SIMTABLE(223,225,227,229) returns 227 on the simulation round #3.\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=SIMTABLE\n"
"@SYNTAX=SIMTABLE(d1, d2, ..., dN)\n"
"@DESCRIPTION=SIMTABLE དེ་གིས་  བྱིན་ཡོད་པའི་སྒྲུབ་རྟགས་ཐོ་ཡིག་ནང་གནས་གོང་ཚུ་  ངོ་མ་བཟུམ་བཟོ་"
"མིའི་ལག་ཆས་ཀྱི་བསྐོར་སྐྱོད་ཨང་གྲངས་དང་འཁྲིལ་ཏེ་སླར་ལོག་འབདཝ་ཨིན།  ངོ་མ་བཟུམ་བཟོ་བའི་ལག་ཆས་འདི་ཤུགས་"
"ལྡན་མ་བཟོ་བ་ཅིན་, SIMTABLE དེ་གིས་ @d1སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"ངོ་མ་བཟུམ་བཟོ་བའི་ལག་ཆས་དང་ཅིག་ཁར་  དང་SIMTABLE ལས་འགན་  བྱིན་ཡོད་པའི་འགྱུར་ཅན་ཚུའི་གྲོས་ཆོད་"
"ཀྱི་བརྟག་ཞིབ།SIMTABLE ལས་འགན་རེ་རེ་གིས་  ངོ་མ་བཟུམ་བཟོ་བའི་འགྱུར་ཅན་ཅིག་གི་སྲིད་པའི་གནས་གོང་ཡོདཔ་"
"ཨིན།  ནུས་ཅན་ངོ་མ་བཟུམ་བཟོ་བའི་དཔེ་ཚུ་ནང་  ཁྱོད་ལུ་གནས་གོང་གི་ཨང་གྲངས་གཅིག་པ་དགོཔ་ཨིན།@dN འདི་"
"གྲོས་ཆོད་འགྱུར་ཅན་ཆ་མཉམ་གྱི་དོན་ལུ།  ངོ་མ་བཟུམ་བཟོ་མི་འདི་  བསྐོར་སྐྱོད་ལེ་ཤ་སྦེ་གཡོག་བཀོལ་བ་ཅིན་  དེ་"
"ནང་གནས་གོང་ངོས་འཛིན་འབད་ཡོདཔ་ཨིན་, SIMTABLE དེ་གིས་  #N/A! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན་ (e."
"g.  A1 གིས་ `=SIMTABLE(1)' ཡོདཔ་དང་A2 `=SIMTABLE(1,2)'ཡོད་པ་ཅིན་, A1 དེ་གིས #N/A! "
"འཛོལ་བ་འདི་བསྐོར་ཐེང་གཉིས་པ་གུ་ཐོན་འབྲས་ཐོནམ་ཨིན།)\n"
"\n"
"ངོ་མ་བཟུམ་བཟོ་བའི་ལག་ཆས་ཀྱི་མཐར་འཁྱོལ་ལག་ལེན་འདི་ལུ་   ཁྱོད་ཀྱིས་ལག་ཆས་ལུ་བྱིན་མི་ ཨིན་པུཊི་འགྱུར་ཅན་"
"གཅིག་དགོཔ་ཨིན་  དེ་ཡང་RAND() ཡང་ན་RAND<distribution name>() ལས་འགན་འདི་ཨིན།  ཐེང་རེ་"
"རེའི་ནང་, དེ་ཚུ་ལོག་བརྟག་ཞིབ་འབད་ནི་ལུ་  ངོ་མ་བཟུམ་བཟོ་མིའི་ལག་ཆས་དེ་གིས་  ཨིན་པུཊི་འགྱུར་ཅན་ཆ་"
"མཉམ་གྱི་ཨང་གྲངས་དོན་ལུ་  བསྐྱར་ཟློས་འབདཝ་ཨིན།  བསྐྱར་ཟློས་རེ་རེ་གུ་,  ཨའུཊི་པུཊི་འགྱུར་ཅན་གྱི་གནས་གོང་"
"ཚུ་གསོག་འཇོག་འབད་དེ་ཡོདཔ་ཨིནམ་དང་, ཐེང་འདི་མཇུག་བསྡུ་ཞིནམ་ལས་, འགྲེལ་བཤད་ཅན་གྱི་ཚད་རྩིས་བརྡ་དོན་"
"འདི་  གནས་གོང་དང་འཁྲུལ་ཏེ་གསར་བསྐྲུན་འབད་ཡོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SIMTABLE(TRUE,FALSE) དེ་གིས་ TRUE འདི་ངོ་མ་བཟུམ་བཟོ་མི་ཐེང་དང་པའི་གུ་སླར་ལོག་འབད་ནི་དང་ "
"FALSE གུ་ཐེང་གཉིས་པ་གུ་ཨིན།\n"
"SIMTABLE(223,225,227,229) དེ་གིས་ 227 གུ་ ངོ་མ་བཟུམ་བཟོ་བའི་ཐེང་#3ཨིན།\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-stat/functions.c:65
msgid ""
"@FUNCTION=VARP\n"
"@SYNTAX=VARP(b1, b2, ...)\n"
"@DESCRIPTION=VARP calculates the variance of an entire population.\n"
"VARP is also known as the N-variance.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"VARP(A1:A5) equals 94.112.\n"
"\n"
"@SEEALSO=AVERAGE,DVAR,DVARP,STDEV,VAR"
msgstr ""
"@FUNCTION=VARP\n"
"@SYNTAX=VARP(b1, b2, ...)\n"
"@DESCRIPTION=VARP དེ་གིས་  མི་རློབས་ཆ་ཚངས་ཅིག་གི་མི་མཐུན་པ་འདི་རྩིས་བཏོནམ་ཨིན།\n"
"VARP འདི་ ཨེན་-མི་མཐུན་པ་སྦེ་སླབ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བཞག་གེ།  དེ་ལས་\n"
"VARP(A1:A5) མཉམ་ཨིན་ 94.112.\n"
"\n"
"@SEEALSO=AVERAGE,DVAR,DVARP,STDEV,VAR"

#: ../plugins/fn-stat/functions.c:97
msgid ""
"@FUNCTION=VAR\n"
"@SYNTAX=VAR(b1, b2, ...)\n"
"@DESCRIPTION=VAR calculates sample variance of the given sample. To get the "
"true variance of a complete population use VARP.\n"
"VAR is also known as the N-1-variance. Under reasonable conditions, it is "
"the maximum-likelihood estimator for the true variance.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"VAR(A1:A5) equals 117.64.\n"
"\n"
"@SEEALSO=VARP,STDEV"
msgstr ""
"@FUNCTION=VAR\n"
"@SYNTAX=VAR(b1, b2, ...)\n"
"@DESCRIPTION=VAR དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་དཔེ་གཞི་གི་དཔེ་གཞི་མི་མཐུན་པ་བརྩི་བཏོནམ་ཨིན།  མི་རློབས་"
"ཆ་ཚང་ཅགི་གི་བདེན་པའི་མི་མཐུན་པ་ལེན་ནི་ལུ་ VARP ལག་ལེན་འཐབ།\n"
"VAR འདི་  N-1-མི་མཐུན་པ་ཟེར་ཡང་སླབ་ཨིན།  རྒྱུ་མཚན་ལྡན་པའི་གནས་སྟངས་ཀྱི་འོག་ལུ་, མི་མཐུན་པ་བདེན་"
"པའི་དོན་ལུ་  མང་མཐའ་སྲིད་པའི་ཕོག་ཚད་དཔག་མི་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་བཞག་"
"གེ།  དེ་ལས་\n"
"VAR(A1:A5) equals 117.64.\n"
"\n"
"@SEEALSO=VARP,STDEV"

#: ../plugins/fn-stat/functions.c:134
msgid ""
"@FUNCTION=STDEV\n"
"@SYNTAX=STDEV(b1, b2, ...)\n"
"@DESCRIPTION=STDEV returns the sample standard deviation of the given "
"sample.\n"
"To obtain the population standard deviation of a whole population use "
"STDEVP.\n"
"STDEV is also known as the N-1-standard deviation.\n"
"Under reasonable conditions, it is the maximum-likelihood estimator for the "
"true population standard deviation.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"STDEV(A1:A5) equals 10.84619749.\n"
"\n"
"@SEEALSO=AVERAGE,DSTDEV,DSTDEVP,STDEVA,STDEVPA,VAR"
msgstr ""
"@FUNCTION=STDEV\n"
"@SYNTAX=STDEV(b1, b2, ...)\n"
"@DESCRIPTION=STDEV དེ་གིས་ བྱིན་ཡོད་པའི་དཔེ་གཞི་གི་ཚད་ལྡན་དཔེ་གཞི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"མི་རློབས་ཆ་ཚང་ཅིག་གི་  མི་རློབས་ཚད་ལྡན་ཁ་སྒྱུར་བ་འདི་ཐོབ་ནི་ལུ་ STDEVP འདི་ལག་ལེན་འཐབ།\n"
"STDEV འདི་   N-1-ཚད་ལྡན་ཁ་སྒྱུར་བ་ཟེར་ཡང་སླབ་ཨིན།\n"
"རྒྱུ་མཚན་ལྡན་པའི་གནས་སྟངས་ཚུ་གི་འོག་ལུ་,  མི་རློབ་ཚད་ལྡན་ཁ་སྒྱུར་བ་བདེན་མི་གི་དོན་ལུ་  མང་མཐའ་སྲིད་པ་"
"ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ནང་ ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་"
"བཞག་གེ།  དེ་ལས་\n"
"STDEV(A1:A5) equals 10.84619749.\n"
"\n"
"@SEEALSO=AVERAGE,DSTDEV,DSTDEVP,STDEVA,STDEVPA,VAR"

#: ../plugins/fn-stat/functions.c:173
msgid ""
"@FUNCTION=STDEVP\n"
"@SYNTAX=STDEVP(b1, b2, ...)\n"
"@DESCRIPTION=STDEVP returns the population standard deviation of the given "
"population. \n"
"This is also known as the N-standard deviation\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"STDEVP(A1:A5) equals 9.701133954.\n"
"\n"
"@SEEALSO=STDEV,STDEVA,STDEVPA"
msgstr ""
"@FUNCTION=STDEVP\n"
"@SYNTAX=STDEVP(b1, b2, ...)\n"
"@DESCRIPTION=STDEVP དེ་གིས་ བྱིན་ཡོད་པའི་མི་རློབས་ཀྱི་མི་རློབས་ཚད་ལྡན་འདི་སླར་ལོག་འབདཝ་ཨིན། \n"
"འདི་ལུ་ ཨེན་-ཚད་ལྡན་ཁ་བསྒྱུར་བ་ཟེར་ཡང་སླབ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བཞག་གེ། དེ་ལས་\n"
"STDEVP(A1:A5) མཉམ་ཨིན་9.701133954.\n"
"\n"
"@SEEALSO=STDEV,STDEVA,STDEVPA"

#: ../plugins/fn-stat/functions.c:207
msgid ""
"@FUNCTION=RANK\n"
"@SYNTAX=RANK(x,ref[,order])\n"
"@DESCRIPTION=RANK returns the rank of a number in a list of numbers.  @x is "
"the number whose rank you want to find, @ref is the list of numbers, and "
"@order specifies how to rank numbers.  If @order is 0, numbers are ranked in "
"descending order, otherwise numbers are ranked in ascending order.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"RANK(17.3,A1:A5) equals 4.\n"
"\n"
"@SEEALSO=PERCENTRANK"
msgstr ""
"@FUNCTION=RANK\n"
"@SYNTAX=RANK(x,ref[,order])\n"
"@DESCRIPTION=RANK དེ་གིས་  ཨང་གྲངས་ཀྱི་ཐོ་ཡིག་ནང་ ཨང་གྲངས་ཀྱི་གྲལ་རིམ་འདི་སླར་ལོག་འབདཝ་ཨིན། "
"@x འདི་  ཁྱོད་ཀྱིས་འཚོལ་མི་ཨང་གྲངས་ཀྱི་གྲལ་རིམ་ཨིན་, @ref འདི་ཨང་གྲངས་ཚུ་གི་ཐོ་ཡིག་ཨིནམ་དང་ "
"@order དེ་གིས་  ཨང་གྲངས་ཚུ་ག་དེ་སྦེ་གྲལ་རིམ་ནང་བཟོ་ནི་ཨིན་ན་གསལ་བཀོད་འབདཝ་ཨིན།@order འདི་ 0 "
"ཨིན་པ་ཅིན་, ཨང་གྲངས་ཚུ་མར་འབབ་རིམ་པའི་ནང་གྲལ་རིམ་བཟོ་ཡོདཔ་དང་, དེ་མེན་པ་ཅིན་  ཨང་གྲངས་ཚུ་ཡར་"
"འཛེགས་རིམ་པའི་ནང་གྲལ་རིམ་བཟོ་ཡོདཔ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོད་ཟེར་བཞག་"
"གེ།  དེ་ལས་\n"
"RANK(17.3,A1:A5) equals 4.\n"
"\n"
"@SEEALSO=PERCENTRANK"

#: ../plugins/fn-stat/functions.c:294
msgid ""
"@FUNCTION=TRIMMEAN\n"
"@SYNTAX=TRIMMEAN(ref,fraction)\n"
"@DESCRIPTION=TRIMMEAN returns the mean of the interior of a data set. @ref "
"is the list of numbers whose mean you want to calculate and @fraction is the "
"fraction of the data set excluded from the mean. For example, if "
"@fraction=0.2 and the data set contains 40 numbers, 8 numbers are trimmed "
"from the data set (40 x 0.2): the 4 largest and the 4 smallest.  To avoid a "
"bias, the number of points to be excluded is always rounded down to the "
"nearest even number.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"TRIMMEAN(A1:A5,0.2) equals 23.2.\n"
"\n"
"@SEEALSO=AVERAGE,GEOMEAN,HARMEAN,MEDIAN,MODE"
msgstr ""
"@FUNCTION=TRIMMEAN\n"
"@SYNTAX=TRIMMEAN(ref,fraction)\n"
"@DESCRIPTION=TRIMMEAN དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་གི་དབུས་ཕྱོགས་ཀྱི་བར་མའི་ཆ་གྲངས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན། @ref འདི་  ཁྱོད་ཀྱིས་བརྩི་བཏོན་དགོ་པའི་བར་མའི་ཆ་གྲངས་ཨང་གྲངས་ཚུ་གི་ཐོ་ཡིག་ཨིནམ་དང་ "
"@fraction འདི་  བར་མའི་ཆ་གྲངས་ལས་ཕྱིར་བཏོན་པའི་གནས་སྡུད་གཞི་སྒྲིག་ཨིན།  དཔེར་ན་ , "
"@fraction=0.2 དང་གནས་སྡུད་གཞི་སྒྲིག་དེ་ལུ་  ཨང་གྲངས་ ༤༠་ ཡོད་པ་ཅིན་  ཨང་གྲངས་ ༨་ ཚུ་གནས་"
"སྡུད་གཞི་སྒྲིག་ (40 x 0.2)ལས་  སྙོམས་ཡོདཔ་ཨིན: སྦོམ་ ༤་ དང་ཆུང་ཀུ་ ༤།  ཉེ་རིང་ཅིག་སྤང་ནི་ལུ་, ཕྱིར་"
"བཏོན་ནི་ཨིན་པའི་དོན་ཚན་གྱི་ཨང་གྲངས་འདི་ཨ་རྟག་རང་  ཆ་ཅན་ཨང་གྲངས་ཀྱི་ཉེ་འདབས་ལུ་བསྐོར་སྐྱོད་འབད་"
"ཡོདཔ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་བཞག་"
"གེ།  དེ་ལས་\n"
"TRIMMEAN(A1:A5,0.2) equals 23.2.\n"
"\n"
"@SEEALSO=AVERAGE,GEOMEAN,HARMEAN,MEDIAN,MODE"

#: ../plugins/fn-stat/functions.c:356
msgid ""
"@FUNCTION=COVAR\n"
"@SYNTAX=COVAR(array1,array2)\n"
"@DESCRIPTION=COVAR returns the covariance of two data sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"COVAR(A1:A5,B1:B5) equals 65.858.\n"
"\n"
"@SEEALSO=CORREL,FISHER,FISHERINV"
msgstr ""
"@FUNCTION=COVAR\n"
"@SYNTAX=COVAR(array1,array2)\n"
"@DESCRIPTION=COVAR དེ་གིས་ གནས་སྡུད་གཉིས་ཀྱི་གཞི་སྒྲིག་མི་མཐུན་པ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ ནང་ཐིག་སྟོང་པ་ཚུ་སྣང་མེད་སྦེ་བཞགཔ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1ཡོདཔ་དང་, "
"ནང་ཐིག་ B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, དང་ 42.7 ཡོད་ཟེར་ང་བཅས་ཚུ་གིས་བཞག་"
"གེ།  དེ་ལས་\n"
"COVAR(A1:A5,B1:B5) མཉམ་ཨིན་ 65.858.\n"
"\n"
"@SEEALSO=CORREL,FISHER,FISHERINV"

#: ../plugins/fn-stat/functions.c:392
msgid ""
"@FUNCTION=CORREL\n"
"@SYNTAX=CORREL(array1,array2)\n"
"@DESCRIPTION=CORREL returns the correlation coefficient of two data sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"CORREL(A1:A5,B1:B5) equals 0.996124788.\n"
"\n"
"@SEEALSO=COVAR,FISHER,FISHERINV"
msgstr ""
"@FUNCTION=CORREL\n"
"@SYNTAX=CORREL(array1,array2)\n"
"@DESCRIPTION=CORREL དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་ཚུ་གི་ཕན་ཚུན་འབྲེལ་བའི་གྲངས་རྟགས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེདཔ་བཞགཔ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགཡུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1ཡོདཔ་, དང་"
"ནང་ཐིག་ B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, དང་ 42.7ཡོད་ཟེར་ང་བཅས་ཚུ་གིས་བཞག་"
"གེ། དེ་ལས་\n"
"CORREL(A1:A5,B1:B5) equals 0.996124788.\n"
"\n"
"@SEEALSO=COVAR,FISHER,FISHERINV"

#: ../plugins/fn-stat/functions.c:428
msgid ""
"@FUNCTION=NEGBINOMDIST\n"
"@SYNTAX=NEGBINOMDIST(f,t,p)\n"
"@DESCRIPTION=NEGBINOMDIST function returns the negative binomial "
"distribution. @f is the number of failures, @t is the threshold number of "
"successes, and @p is the probability of a success.\n"
"\n"
"* If @f or @t is a non-integer it is truncated.\n"
"* If (@f + @t -1) <= 0 NEGBINOMDIST returns #NUM! error.\n"
"* If @p < 0 or @p > 1 NEGBINOMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NEGBINOMDIST(2,5,0.55) equals 0.152872629.\n"
"\n"
"@SEEALSO=BINOMDIST,COMBIN,FACT,HYPGEOMDIST,PERMUT"
msgstr ""
"@FUNCTION=NEGBINOMDIST\n"
"@SYNTAX=NEGBINOMDIST(f,t,p)\n"
"@DESCRIPTION=NEGBINOMDIST ལས་འགན་འདི་གིས་  མེད་ཆའི་བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན། @f འདི་འཐུས་ཤོར་གྱི་ཨང་གྲངས་ཨིན་པ་ཅིན་, @t འདི་  མཐར་འཁྱོལ་གྱི་ཐེརེཤ་ཧཱོལ་ཨང་གྲངས་འདི་"
"ཨིནམ་དང་ @p འདི་མཐར་འཁྱོར་གཡི་བྱུང་སྲིད་པ་ཨིན།\n"
"\n"
"* If @f ཡང་ན་ @t འདི་ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་ འདི་ཆུང་ཀུ་བཟོ་ཡོདཔ་ཨིན།\n"
"* If (@f + @t -1) <= 0ཨིན་པ་ཅིན་ NEGBINOMDIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @p < 0 or @p > 1 ཨིན་པ་ཅིན་NEGBINOMDIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NEGBINOMDIST(2,5,0.55) equals 0.152872629.\n"
"\n"
"@SEEALSO=BINOMDIST,COMBIN,FACT,HYPGEOMDIST,PERMUT"

#: ../plugins/fn-stat/functions.c:466
msgid ""
"@FUNCTION=NORMSDIST\n"
"@SYNTAX=NORMSDIST(x)\n"
"@DESCRIPTION=NORMSDIST function returns the standard normal cumulative "
"distribution. @x is the value for which you want the distribution.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMSDIST(2) equals 0.977249868.\n"
"\n"
"@SEEALSO=NORMDIST"
msgstr ""
"@FUNCTION=NORMSDIST\n"
"@SYNTAX=NORMSDIST(x)\n"
"@DESCRIPTION=NORMSDIST ལས་འགན་འདི་གིས་  ཚད་ལྡན་སྤྱིར་གཏང་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།@x འདི་ཁྱོད་ཀྱིས་དགོ་པའི་བཀྲམ་སྤེལ་གྱི་དོན་ལུ་གནས་གོང་འདི་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NORMSDIST(2) equals 0.977249868.\n"
"\n"
"@SEEALSO=NORMDIST"

#: ../plugins/fn-stat/functions.c:498
msgid ""
"@FUNCTION=NORMSINV\n"
"@SYNTAX=NORMSINV(p)\n"
"@DESCRIPTION=NORMSINV function returns the inverse of the standard normal "
"cumulative distribution. @p is the given probability corresponding to the "
"normal distribution.\n"
"\n"
"* If @p < 0 or @p > 1 NORMSINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMSINV(0.2) equals -0.841621234.\n"
"\n"
"@SEEALSO=NORMDIST,NORMINV,NORMSDIST,STANDARDIZE,ZTEST"
msgstr ""
"@FUNCTION=NORMSINV\n"
"@SYNTAX=NORMSINV(p)\n"
"@DESCRIPTION=NORMSINV ལས་འགན་འདི་གིས་  ཚད་ལྡན་སྤྱིར་གཏང་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་གྱི་ལུགས་"
"ལྡོག་འདི་སླར་ལོག་འབདཝ་ཨིན། @p འདི་ སྤྱིར་གཏང་བཀྲམ་སྤེལ་ལུ་འབྱུང་སྲིད་པའི་ཆ་མཉམ་པ་འདི་ཨིན།\n"
"\n"
"* If @p < 0 or @p > 1 ཨིན་པ་ཅིན་NORMSINV དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NORMSINV(0.2) equals -0.841621234.\n"
"\n"
"@SEEALSO=NORMDIST,NORMINV,NORMSDIST,STANDARDIZE,ZTEST"

#: ../plugins/fn-stat/functions.c:533
msgid ""
"@FUNCTION=LOGNORMDIST\n"
"@SYNTAX=LOGNORMDIST(x,mean,stddev)\n"
"@DESCRIPTION=LOGNORMDIST function returns the lognormal distribution. @x is "
"the value for which you want the distribution, @mean is the mean of the "
"distribution, and @stddev is the standard deviation of the distribution.\n"
"\n"
"* If @stddev = 0 LOGNORMDIST returns #DIV/0! error.\n"
"* If @x <= 0, @mean < 0 or @stddev < 0 LOGNORMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOGNORMDIST(3,1,2) equals 0.519662338.\n"
"\n"
"@SEEALSO=NORMDIST"
msgstr ""
"@FUNCTION=LOGNORMDIST\n"
"@SYNTAX=LOGNORMDIST(x,mean,stddev)\n"
"@DESCRIPTION=LOGNORMDIST ལཱ་འགན་དེ་གིས་  དྲན་དེབ་སྤྱིར་གཏང་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་ཨིན། "
"@x འདི་ཁྱོད་ཀྱིས་བཀྲམསྤེལ་དགོ་མིའི་དོན་ལུ་གནས་གོང་ཨིན།, @mean འདི་  བཀྲམསྤེལ་གྱི་བར་མའི་ཆ་གྲངས་"
"ཨིནམ་, དང་ @stddev འདི་བཀྲམ་སྤེལ་གྱི་ཚད་ལྡ་ཁ་བསྒྱུར་བ་ཨིན།\n"
"\n"
"* If @stddev = 0 ཨིན་པ་ཅིན་LOGNORMDISTདེ་གིས་ #DIV/0! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @x <= 0ཨིན་པ་ཅིན་, @mean < 0 ཡང་ན་ @stddev < 0 LOGNORMDIST དེ་གིས་ #NUM! "
"འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LOGNORMDIST(3,1,2) equals 0.519662338.\n"
"\n"
"@SEEALSO=NORMDIST"

#: ../plugins/fn-stat/functions.c:571
msgid ""
"@FUNCTION=LOGINV\n"
"@SYNTAX=LOGINV(p,mean,stddev)\n"
"@DESCRIPTION=LOGINV function returns the inverse of the lognormal cumulative "
"distribution. @p is the given probability corresponding to the normal "
"distribution, @mean is the arithmetic mean of the distribution, and @stddev "
"is the standard deviation of the distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @stddev <= 0 LOGINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOGINV(0.5,2,3) equals 7.389056099.\n"
"\n"
"@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMDIST"
msgstr ""
"@FUNCTION=LOGINV\n"
"@SYNTAX=LOGINV(p,mean,stddev)\n"
"@DESCRIPTION=LOGINV ལཱ་འགན་དེ་གིས་  དྲན་དེབ་སྤྱིར་གཏང་རིམ་གྱིས་བསག་པའི་བཀརམསྤེལ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།@p འདི་སྤྱིར་གཏང་བཀྲམ་སྤེལ་ལུ་འབྱུང་སྲིད་པའི་ཆ་མཉམ་པ་བྱིན་མི་འདི་ཨིན།, @mean འདི་བཀྲམ་སྤེལ་"
"གྱི་ཨང་རྩིས་རིག་པའི་བར་མའི་ཆ་གྲངས་ཨིནམ་,དང་ @stddev འདི་བཀྲམ་སྤེལ་གཡི་ཚད་ལྡན་ཁ་བསྒྱུར་བ་འདི་"
"ཨིན།\n"
"\n"
"* If @p < 0 ཡང་ན་ @p > 1 ཡང་ན་ @stddev <= 0 ཨིན་པ་ཅིན་LOGINV དེ་གིས་ #NUM! འཛོལ་བ་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LOGINV(0.5,2,3) equals 7.389056099.\n"
"\n"
"@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMDIST"

#: ../plugins/fn-stat/functions.c:611
msgid ""
"@FUNCTION=FISHERINV\n"
"@SYNTAX=FISHERINV(x)\n"
"@DESCRIPTION=FISHERINV function returns the inverse of the Fisher "
"transformation at @x.\n"
"\n"
"* If @x is non-number FISHERINV returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FISHERINV(2) equals 0.96402758.\n"
"\n"
"@SEEALSO=FISHER"
msgstr ""
"@FUNCTION=FISHERINV\n"
"@SYNTAX=FISHERINV(x)\n"
"@DESCRIPTION=FISHERINV ལཱ་འགན་དེ་གིས་  ཕི་ཤར་བཟོ་བསྒྱུར་གྱི་ལུགས་ལྡོག་འདི་ @xལུ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* If @x འདི་ཨང་གྲངས་མེན་མི་ཨིན་པ་ཅིན་  FISHERINV དེ་གིས་ #VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FISHERINV(2) equals 0.96402758.\n"
"\n"
"@SEEALSO=FISHER"

#: ../plugins/fn-stat/functions.c:641
msgid ""
"@FUNCTION=MODE\n"
"@SYNTAX=MODE(n1, n2, ...)\n"
"@DESCRIPTION=MODE returns the most common number of the data set. If the "
"data set has many most common numbers MODE returns the first one of them.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If the data set does not contain any duplicates MODE returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"11.4, 25.9, and 40.1.  Then\n"
"MODE(A1:A5) equals 11.4.\n"
"\n"
"@SEEALSO=AVERAGE,MEDIAN"
msgstr ""
"@FUNCTION=MODE\n"
"@SYNTAX=MODE(n1, n2, ...)\n"
"@DESCRIPTION=MODE དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་གི་མཐུན་མོང་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན། གནས་"
"སྡུད་གཞི་སྒྲིག་འདི་ལུ་ མཐུན་མོང་གི་ཨང་གྲངས་ལེ་ཤ་ཡོད་པ་ཅིན་ MODE དེ་གིས་དེ་ཚུ་གི་དང་པ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞག་ཡོདཔ།\n"
"* གནས་སྡུད་གཞི་སྒྲིག་འདི་ལུ་རྫུན་མ་ཅི་ཡང་མེད་པ་ཅིན་ MODE དེ་གིས་ #N/A འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ ཨང་གྲངས་ 11.4, 17.3, 11.4, 25.9, དང་40.1ཡོད་པ་ཅིན་  "
"དེ་ལས་\n"
"MODE(A1:A5) equals 11.4.\n"
"\n"
"@SEEALSO=AVERAGE,MEDIAN"

#: ../plugins/fn-stat/functions.c:679
msgid ""
"@FUNCTION=HARMEAN\n"
"@SYNTAX=HARMEAN(b1, b2, ...)\n"
"@DESCRIPTION=HARMEAN returns the harmonic mean of the N data points (that "
"is, N divided by the sum of the inverses of the data points).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"HARMEAN(A1:A5) equals 19.529814427.\n"
"\n"
"@SEEALSO=AVERAGE,GEOMEAN,MEDIAN,MODE,TRIMMEAN"
msgstr ""
"@FUNCTION=HARMEAN\n"
"@SYNTAX=HARMEAN(b1, b2, ...)\n"
"@DESCRIPTION=HARMEAN དེ་གིས་  ཨེན་གནས་སྡུད་དོན་ཚན་ (དེ་ཡང་, ཨེན་འདི་གནས་སྡུད་དོན་ཚན་ཚུ་གིས་"
"བགོ་བཤའ་བརྐྱབ་ཡོད་པའི་ལུགས་ལྡོག་གི་བསྡོམ་)ཧར་མོ་ནིཀ་བར་མའི་ཆ་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བསམ་གེ།  དེ་ལས་\n"
"HARMEAN(A1:A5) equals 19.529814427.\n"
"\n"
"@SEEALSO=AVERAGE,GEOMEAN,MEDIAN,MODE,TRIMMEAN"

#: ../plugins/fn-stat/functions.c:713
msgid ""
"@FUNCTION=GEOMEAN\n"
"@SYNTAX=GEOMEAN(b1, b2, ...)\n"
"@DESCRIPTION=GEOMEAN returns the geometric mean of the given arguments. This "
"is equal to the Nth root of the product of the terms.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"GEOMEAN(A1:A5) equals 21.279182482.\n"
"\n"
"@SEEALSO=AVERAGE,HARMEAN,MEDIAN,MODE,TRIMMEAN"
msgstr ""
"@FUNCTION=GEOMEAN\n"
"@SYNTAX=GEOMEAN(b1, b2, ...)\n"
"@DESCRIPTION=GEOMEAN དེ་གིས་  བྱིན་ཡོད་པའི་སྒྲུབ་རྟགས་ཚུ་གི་ཐིག་རྩིས་ཀྱི་བར་མའི་ཆ་གྲངས་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།  འདི་ཐ་སྙད་ཚུ་གི་ཐོན་སྐྱེད་ཀྱི་ཨེན་ཊི་ཨེཆ་རྩ་བ་འདི་ལུ་མཉམ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ང་བཅས་ཚུ་གིས་ ནང་ཐིག་ A1, A2, ..., A5 དེ་གིས་ 11.4, 17.3, 21.3, 25.9, དང་40.1ཡོད་"
"ཟེར་བཞག་གེ། དེ་ལས་\n"
"GEOMEAN(A1:A5) མཉམ་ཨིན་ 21.279182482.\n"
"\n"
"@SEEALSO=AVERAGE,HARMEAN,MEDIAN,MODE,TRIMMEAN"

#: ../plugins/fn-stat/functions.c:746
msgid ""
"@FUNCTION=COUNT\n"
"@SYNTAX=COUNT(b1, b2, ...)\n"
"@DESCRIPTION=COUNT returns the total number of integer or floating point "
"arguments passed.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"COUNT(A1:A5) equals 5.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=COUNT\n"
"@SYNTAX=COUNT(b1, b2, ...)\n"
"@DESCRIPTION=COUNT དེ་གིས་  ཧྲིལ་གྲངས་ཀྱི་ཨང་གྲངས་བསྡོམ་ཡང་ན་སྤྲོད་ཡོད་པའི་ལྡིང་བའི་དཔག་ཚད་སྒྲུབ་"
"རྟགས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བསམ་གེ། དེ་ལས་\n"
"COUNT(A1:A5) equals 5.\n"
"\n"
"@SEEALSO=AVERAGE"

#: ../plugins/fn-stat/functions.c:791
msgid ""
"@FUNCTION=COUNTA\n"
"@SYNTAX=COUNTA(b1, b2, ...)\n"
"@DESCRIPTION=COUNTA returns the number of arguments passed not including "
"empty cells.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, \"missing\", \"missing\", 25.9, and 40.1.  Then\n"
"COUNTA(A1:A5) equals 5.\n"
"\n"
"@SEEALSO=AVERAGE,COUNT,DCOUNT,DCOUNTA,PRODUCT,SUM"
msgstr ""
"@FUNCTION=COUNTA\n"
"@SYNTAX=COUNTA(b1, b2, ...)\n"
"@DESCRIPTION=COUNTA དེ་གིས་  ནང་ཐིག་སྟོངམ་མ་བརྩི་བར་  སྒྲུབ་རྟགས་སྤྲོད་ཡོད་པའི་ཨང་གྲངས་ཚུ་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་  ཨང་གྲངས་དང་ཡིག་རྒྱུན་ 11.4 ཚུ་ཡོདཔ་, \"missing\", "
"\"missing\", 25.9,དང་ 40.1ཡོད་ཟེར་ང་བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"COUNTA(A1:A5) equals 5.\n"
"\n"
"@SEEALSO=AVERAGE,COUNT,DCOUNT,DCOUNTA,PRODUCT,SUM"

#: ../plugins/fn-stat/functions.c:835
msgid ""
"@FUNCTION=AVERAGE\n"
"@SYNTAX=AVERAGE(value1, value2,...)\n"
"@DESCRIPTION=AVERAGE computes the average of all the values and cells "
"referenced in the argument list.  This is equivalent to the sum of the "
"arguments divided by the count of the arguments.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"AVERAGE(A1:A5) equals 23.2.\n"
"\n"
"@SEEALSO=SUM, COUNT"
msgstr ""
"@FUNCTION=AVERAGE\n"
"@SYNTAX=AVERAGE(value1, value2,...)\n"
"@DESCRIPTION=AVERAGE དེ་གིས་  སྒྲུབ་རྟགས་ཐོ་ཡིག་ནང་གཞི་བསྟུན་འབད་ཡོད་པའི་ནང་ཐིག་ཚུ་དང་  གནས་"
"གོང་ཆ་མཉམ་གྱི་ཆ་སྙོམས་འདི་འདི་རྩིས་བཏོནམ་ཨིན།  འདི་ སྒྲུབ་རྟགས་ཀྱི་གྱངས་ཁ་གིས་བགོ་བཤའ་བརྐྱབ་པའི་སྒྲུབ་"
"རྟགས་འདི་ལུ་འདྲ་མཉམ་ཨིན།\n"
"\n"
"* ལཱ་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1ཡོད་ཟེར་ང་བཅས་"
"ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"AVERAGE(A1:A5) equals 23.2.\n"
"\n"
"@SEEALSO=SUM, COUNT"

#: ../plugins/fn-stat/functions.c:869
msgid ""
"@FUNCTION=MIN\n"
"@SYNTAX=MIN(b1, b2, ...)\n"
"@DESCRIPTION=MIN returns the value of the element of the values passed that "
"has the smallest value, with negative numbers considered smaller than "
"positive numbers.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"MIN(A1:A5) equals 11.4.\n"
"\n"
"@SEEALSO=MAX,ABS"
msgstr ""
"@FUNCTION=MIN\n"
"@SYNTAX=MIN(b1, b2, ...)\n"
"@DESCRIPTION=MIN དེ་གིས་  གནས་གོང་སྤྲོད་ཡོད་མི་གི་ཆ་ཤས་ཀྱི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་"
"ཡང་  མེད་ཆའི་ཨང་གྲངས་ཡོད་ཆ་ལས་ཆུང་ཀུ་སྦེ་ཆ་འཇོག་འབད་མི་དང་ཅིག་ཁར་གནས་གོང་ཆུང་ཀུ་ཡོད་མི་འདི་"
"ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ། དེ་ལས་\n"
"MIN(A1:A5) equals 11.4.\n"
"\n"
"@SEEALSO=MAX,ABS"

#: ../plugins/fn-stat/functions.c:913
msgid ""
"@FUNCTION=MAX\n"
"@SYNTAX=MAX(b1, b2, ...)\n"
"@DESCRIPTION=MAX returns the value of the element of the values passed that "
"has the largest value, with negative numbers considered smaller than "
"positive numbers.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"MAX(A1:A5) equals 40.1.\n"
"\n"
"@SEEALSO=MIN,ABS"
msgstr ""
"@FUNCTION=MAX\n"
"@SYNTAX=MAX(b1, b2, ...)\n"
"@DESCRIPTION=MAX དེ་གིས་  གནས་གོང་སྤྲོད་ཡོད་མི་གི་ཆ་ཤས་ཀྱི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་"
"ཡང་  མེད་ཆའི་ཨང་གྲངས་ཡོད་ཆ་ལས་སྦོམ་སྦེ་ཆ་འཇོག་འབད་མི་དང་ཅིག་ཁར་གནས་གོང་ཆུང་ཀུ་ཡོད་མི་འདི་"
"ཨིན། \n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོད་ཟེར་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ། དེ་ལས་\n"
"MAX(A1:A5) equals 40.1.\n"
"\n"
"@SEEALSO=MIN,ABS"

#: ../plugins/fn-stat/functions.c:957
msgid ""
"@FUNCTION=SKEW\n"
"@SYNTAX=SKEW(n1, n2, ...)\n"
"@DESCRIPTION=SKEW returns an unbiased estimate for skewness of a "
"distribution.\n"
"\n"
"Note, that this is only meaningful if the underlying distribution really has "
"a third moment.  The skewness of a symmetric (e.g., normal) distribution is "
"zero.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If less than three numbers are given, SKEW returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"SKEW(A1:A5) equals 0.976798268.\n"
"\n"
"@SEEALSO=AVERAGE,VAR,SKEWP,KURT"
msgstr ""
"@FUNCTION=SKEW\n"
"@SYNTAX=SKEW(n1, n2, ...)\n"
"@DESCRIPTION=SKEW དེ་གིས་  བཀྲམ་སྤེལ་ཅིག་གི་སི་ཀི་ནེསི་གི་དོན་ལུ་ཕྱོག་རིས་ཅན་མེད་པའི་ཕྱོག་ཚད་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"དྲན་འཛིན་འབད་, འོག་ལུ་ཡོད་པའི་བཀྲམ་སྤེལ་དེ་ལུ་ཡུད་ཙམ་གསུམ་པ་ཡོད་པ་ཅིན་རྐྱངམ་ཅིག་དོན་དག་ཡོདཔ་ཨིན།  "
"མཛེས་སྙོམས་(e.g., normal) བཀྲམ་སྤེལ་འདི་ཀླད་ཀོར་ཅིག་གི་སི་ཀི་ནེསི།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞག་ཡོདཔ་ཨིན།\n"
"* ཨང་གྲངས་གསུམ་ལས་ཉུངམ་སྦེ་བྱིན་ཡོད་པ་ཅིན་, SKEW དེ་གིས་ #DIV/0! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་40.1ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"SKEW(A1:A5) equals 0.976798268.\n"
"\n"
"@SEEALSO=AVERAGE,VAR,SKEWP,KURT"

#: ../plugins/fn-stat/functions.c:997
msgid ""
"@FUNCTION=SKEWP\n"
"@SYNTAX=SKEWP(n1, n2, ...)\n"
"@DESCRIPTION=SKEWP returns the population skewness of a data set.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If less than two numbers are given, SKEWP returns #DIV/0! error.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"SKEWP(A1:A5) equals 0.655256198.\n"
"\n"
"@SEEALSO=AVERAGE,VARP,SKEW,KURTP"
msgstr ""
"@FUNCTION=SKEWP\n"
"@SYNTAX=SKEWP(n1, n2, ...)\n"
"@DESCRIPTION=SKEWP དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་ཅིག་གི་མི་རློབས་སི་ཀི་ནེསི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་སྦེ་བཞག་ཡོདཔ་ཨིན།\n"
"*ཨང་གྲངས་གཉིས་ལས་ཉུངམ་སྦེ་བྱིན་པ་ཅིན་, SKEWP དེ་གིས་ #DIV/0! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"SKEWP(A1:A5) equals 0.655256198.\n"
"\n"
"@SEEALSO=AVERAGE,VARP,SKEW,KURTP"

#: ../plugins/fn-stat/functions.c:1032
msgid ""
"@FUNCTION=EXPONDIST\n"
"@SYNTAX=EXPONDIST(x,y,cumulative)\n"
"@DESCRIPTION=EXPONDIST function returns the exponential distribution. If the "
"@cumulative boolean is false it will return:\n"
"\n"
"\t@y * exp (-@y*@x),\n"
"\n"
"otherwise it will return\n"
"\n"
"\t1 - exp (-@y*@x).\n"
"\n"
"* If @x < 0 or @y <= 0 this will return an error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EXPONDIST(2,4,0) equals 0.001341851.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=EXPONDIST\n"
"@SYNTAX=EXPONDIST(x,y,cumulative)\n"
"@DESCRIPTION=EXPONDIST ལས་འགན་འདི་གིས་  བསྒྱུར་གྲངས་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་ཨིན།   "
"@cumulative བུ་བིན་འདི་བདེན་པ་མེན་པ་ཅིན་  དེ་གིས་སླར་ལོག་འབདཝ་ཨིན།:\n"
"\n"
"\t@y * exp (-@y*@x),\n"
"\n"
"དེ་མེན་པ་ཅིན་འདི་གིས་སླར་ལོག་འབད་འོང་\n"
"\n"
"\t1 - exp (-@y*@x).\n"
"\n"
"* If @x < 0 ཡང་ན་ @y <= 0ཨིན་པ་ཅིན་  འདི་གིས་འཛོལ་བ་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"EXPONDIST(2,4,0) equals 0.001341851.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:1072
msgid ""
"@FUNCTION=BERNOULLI\n"
"@SYNTAX=BERNOULLI(k,p)\n"
"@DESCRIPTION=BERNOULLI returns the probability p(k) of obtaining @k from a "
"Bernoulli distribution with probability parameter @p.\n"
"\n"
"* If @k != 0 and @k != 1 BERNOULLI returns #NUM! error.\n"
"* If @p < 0 or @p > 1 BERNOULLI returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"BERNOULLI(0,0.5).\n"
"\n"
"@SEEALSO=RANDBERNOULLI"
msgstr ""
"@FUNCTION=BERNOULLI\n"
"@SYNTAX=BERNOULLI(k,p)\n"
"@DESCRIPTION=BERNOULLI དེ་གིས་ འབྱུང་སྲིད་པའི་p(k) དེ་གིས་ @k ཐོབ་ནི་ལུ་  འབྱུང་སྲིད་པའི་ཚད་"
"བཟུང་ @p དང་ཅིག་ཁར་བར་ནའོ་ལི་བཀརམ་སྤེལ་ཅིག་ལས་ཨིན་མི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @k != 0 and @k != 1ཨིན་པ་ཅིན་ BERNOULLI དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @p < 0 or @p > 1ཨིན་པ་ཅིན་ BERNOULLI དེ་གིས་ #NUM! འཛོལ་བའིདསླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BERNOULLI(0,0.5).\n"
"\n"
"@SEEALSO=RANDBERNOULLI"

#: ../plugins/fn-stat/functions.c:1117
msgid ""
"@FUNCTION=GAMMALN\n"
"@SYNTAX=GAMMALN(x)\n"
"@DESCRIPTION=GAMMALN function returns the natural logarithm of the gamma "
"function.\n"
"\n"
"* If @x is non-number then GAMMALN returns #VALUE! error.\n"
"* If @x <= 0 then GAMMALN returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GAMMALN(23) equals 48.471181352.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=GAMMALN\n"
"@SYNTAX=GAMMALN(x)\n"
"@DESCRIPTION=GAMMALN ལས་འགན་འདི་གིས་  ག་མ་ལས་འགན་གྱི་རང་བཞིན བརྩི་བརྐྱབ་ཐང་ཅིག་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* If @x འདི་ ཨང་གྲངས་མེན་མི་ཨིནཔ་ཅིན་  དེ་ལས་ GAMMALN དེ་གིས་ #VALUE! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @x <= 0 ཨིན་པ་ཅིན་དེ་ལས་ GAMMALN དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"GAMMALN(23) equals 48.471181352.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:1157
msgid ""
"@FUNCTION=GAMMADIST\n"
"@SYNTAX=GAMMADIST(x,alpha,beta,cum)\n"
"@DESCRIPTION=GAMMADIST function returns the gamma distribution. If @cum is "
"TRUE, GAMMADIST returns the incomplete gamma function, otherwise it returns "
"the probability mass function.\n"
"\n"
"* If @x < 0 GAMMADIST returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0, GAMMADIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GAMMADIST(1,2,3,0) equals 0.07961459.\n"
"\n"
"@SEEALSO=GAMMAINV"
msgstr ""
"@FUNCTION=GAMMADIST\n"
"@SYNTAX=GAMMADIST(x,alpha,beta,cum)\n"
"@DESCRIPTION=GAMMADIST ལས་འགན་འདི་གིས་  ག་མ་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་ཨིན། @cum འདི་"
"TRUEཨིན་པ་ཅིན་, GAMMADIST དེ་གིས་ ཆ་མ་ཚང་བའི་ག་མ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན་, དེ་མེན་པ་"
"ཅིན་འདི་གིས་  འབྱུང་སྲིད་པའི་རྒྱ་ཆེ་བའི་ལཱ་འགན་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @x < 0 ཨིན་པ་ཅིན་GAMMADIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @alpha <= 0 ཡང་ན་ @beta <= 0ཨིན་པ་ཅིན་, GAMMADIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"GAMMADIST(1,2,3,0) equals 0.07961459.\n"
"\n"
"@SEEALSO=GAMMAINV"

#: ../plugins/fn-stat/functions.c:1198
msgid ""
"@FUNCTION=GAMMAINV\n"
"@SYNTAX=GAMMAINV(p,alpha,beta)\n"
"@DESCRIPTION=GAMMAINV function returns the inverse of the cumulative gamma "
"distribution.\n"
"\n"
"* If @p < 0 or @p > 1 GAMMAINV returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0 GAMMAINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"GAMMAINV(0.34,2,4) equals 4.829093908.\n"
"\n"
"@SEEALSO=GAMMADIST"
msgstr ""
"@FUNCTION=GAMMAINV\n"
"@SYNTAX=GAMMAINV(p,alpha,beta)\n"
"@DESCRIPTION=GAMMAINV ལས་འགན་འདི་གིས་  རིམ་གྱིས་བསག་པའི་ག་མ་བཀྲམ་སྤེལ་གཡི་ལུགས་ལྡོག་འདིསླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @p < 0 ཡང་ན་@p > 1 ཨིན་པ་ཅིན་GAMMAINV དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @alpha <= 0 ཡང་ན་ @beta <= 0 ཨིན་པ་ཅིན་GAMMAINV དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"GAMMAINV(0.34,2,4) equals 4.829093908.\n"
"\n"
"@SEEALSO=GAMMADIST"

#: ../plugins/fn-stat/functions.c:1236
msgid ""
"@FUNCTION=CHIDIST\n"
"@SYNTAX=CHIDIST(x,dof)\n"
"@DESCRIPTION=CHIDIST function returns the one-tailed probability of the chi-"
"squared distribution. @dof is the number of degrees of freedom.\n"
"\n"
"* If @dof is non-integer it is truncated.\n"
"* If @dof < 1 CHIDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CHIDIST(5.3,2) equals 0.070651213.\n"
"\n"
"@SEEALSO=CHIINV,CHITEST"
msgstr ""
"@FUNCTION=CHIDIST\n"
"@SYNTAX=CHIDIST(x,dof)\n"
"@DESCRIPTION=CHIDIST ལས་འགན་འདི་གིས་  ཆི་གྲུ་གཞི་བཀརམ་སྤེལ་གྱི་བྱུང་སྲིད་པའི་མཇུག་གཅིགཔ་འདི་ "
"སླར་ལོག་འབདཝ་ཨིན། @dof འདི་རང་དབང་གི་ཁུག་ཟུར་གི་ཨང་གྲངས་ཨིན།\n"
"\n"
"* If @dof ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་  འདི་ཆུང་ཀུ་བཟོ་ཡོདཔ་ཨིན།\n"
"* If @dof < 1ཨིན་པ་ཅིན་ CHIDIST དེ་གིས་  #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CHIDIST(5.3,2) equals 0.070651213.\n"
"\n"
"@SEEALSO=CHIINV,CHITEST"

#: ../plugins/fn-stat/functions.c:1272
msgid ""
"@FUNCTION=CHIINV\n"
"@SYNTAX=CHIINV(p,dof)\n"
"@DESCRIPTION=CHIINV function returns the inverse of the one-tailed "
"probability of the chi-squared distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @dof < 1 CHIINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CHIINV(0.98,7) equals 1.564293004.\n"
"\n"
"@SEEALSO=CHIDIST,CHITEST"
msgstr ""
"@FUNCTION=CHIINV\n"
"@SYNTAX=CHIINV(p,dof)\n"
"@DESCRIPTION=CHIINV ལས་འགན་འདི་གིས་  ཆི་གྲུ་གཞི་བཀྲམ་སྤེལ་གྱི་བྱུང་སྲིད་པའི་མཇུག་གཅིག་གི་ལུགས་ལྡོག་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @p < 0 ཡང་ན་ @p > 1ཡང་ན་ @dof < 1 ཨིན་པ་ཅིན་CHIINV དེ་གིས་  #NUM! འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CHIINV(0.98,7) equals 1.564293004.\n"
"\n"
"@SEEALSO=CHIDIST,CHITEST"

#: ../plugins/fn-stat/functions.c:1306
msgid ""
"@FUNCTION=CHITEST\n"
"@SYNTAX=CHITEST(actual_range,theoretical_range)\n"
"@DESCRIPTION=CHITEST function returns the test for independence of chi-"
"squared distribution.\n"
"\n"
"@actual_range is a range that contains the observed data points. "
"@theoretical_range is a range that contains the expected values of the data "
"points.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=CHIDIST,CHIINV"
msgstr ""
"@FUNCTION=CHITEST\n"
"@SYNTAX=CHITEST(actual_range,theoretical_range)\n"
"@DESCRIPTION=CHITEST ལས་འགན་འདི་གིས་  ཆི་གྲུ་གཞི་བཀྲམ་སྤེལ་གྱི་རང་དབང་གི་དོན་ལུ་བརྟག་ཞིབ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@actual_range འདི་  བལྟ་ཡོད་པའི་གནས་སྡུད་དོན་ཚན་འདི་ཡོད་མི་ཁྱབ་ཚད་ཅིག་"
"ཨིན།@theoretical_range འདི་  གནས་སྡུད་དོན་ཚན་ཚུ་གི་རེ་བ་བཀོད་པའི་གནས་གོང་ཡོད་མིའི་ཁྱབ་ཚད་འདི་"
"ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=CHIDIST,CHIINV"

#: ../plugins/fn-stat/functions.c:1401
msgid ""
"@FUNCTION=BETADIST\n"
"@SYNTAX=BETADIST(x,alpha,beta[,a,b])\n"
"@DESCRIPTION=BETADIST function returns the cumulative beta distribution. @a "
"is the optional lower bound of @x and @b is the optional upper bound of @x.\n"
"* If @a is not given, BETADIST uses 0.\n"
"* If @b is not given, BETADIST uses 1.\n"
"* If @x < @a or @x > @b BETADIST returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0, BETADIST returns #NUM! error.\n"
"* If @a >= @b BETADIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BETADIST(0.12,2,3) equals 0.07319808.\n"
"\n"
"@SEEALSO=BETAINV"
msgstr ""
"@FUNCTION=BETADIST\n"
"@SYNTAX=BETADIST(x,alpha,beta[,a,b])\n"
"@DESCRIPTION=BETADIST ལས་འགན་འདི་གིས་ རིམ་གྱིས་བསག་པའི་སྔོན་དཔྱད་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།@a འདི་ i@x གི་གི་གདམ་ཁ་ཅན་གྱི་འོག་གི་གནས་དགོཔ་ཨིནམ་དང་ @bའདི་ @xགི་གདམ་ཁ་ཅན་གྱི་གནས་"
"དགོཔ་འདི་ཨིན།\n"
"* If @a འདི་བྱིན་ཏེ་མེདཔ་ཨིན་, BETADIST དེ་གིས་0 ལག་ལེན་འཐབ་ཨིན།\n"
"* If @b འདི་བྱིན་ཏེ་མེདཔ་ཨིན་, BETADIST དེ་གིས་1 ལག་ལེན་འཐབ་ཨིན།\n"
"* If @x < @a ཡང་ན་ @x > @b ཨིན་པ་ཅིན་BETADIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @alpha <= 0 ཡང་ན་ @beta <= 0ཨིན་པ་ཅིན་, BETADIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @a >= @b ཨིན་པ་ཅིན་BETADIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BETADIST(0.12,2,3) equals 0.07319808.\n"
"\n"
"@SEEALSO=BETAINV"

#: ../plugins/fn-stat/functions.c:1447
msgid ""
"@FUNCTION=BETAINV\n"
"@SYNTAX=BETAINV(p,alpha,beta[,a,b])\n"
"@DESCRIPTION=BETAINV function returns the inverse of cumulative beta "
"distribution.  @a is the optional lower bound of @x and @b is the optional "
"upper bound of @x.\n"
"\n"
"* If @a is not given, BETAINV uses 0.\n"
"* If @b is not given, BETAINV uses 1.\n"
"* If @p < 0 or @p > 1 BETAINV returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0, BETAINV returns #NUM! error.\n"
"* If @a >= @b BETAINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BETAINV(0.45,1.6,1) equals 0.607096629.\n"
"\n"
"@SEEALSO=BETADIST"
msgstr ""
"@FUNCTION=BETAINV\n"
"@SYNTAX=BETAINV(p,alpha,beta[,a,b])\n"
"@DESCRIPTION=BETAINV ལས་འགན་འདི་གིས་  རིམ་གྱིས་བསག་པའི་སྔོན་དཔྱད་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།@a འདི་  @xགི་གདམ་ཁ་ཅན་གྱི་འོག་གི་གནས་དགོཔ་ཨིནམ་དང་  @b འདི་@xགི་གདམ་ཁ་ཅན་གྱི་ལྟག་གི་"
"གནས་དགོཔ་ཨིན།\n"
"\n"
"* If @a འདི་མ་བྱིན་མས་, BETAINV དེ་གིས་ 0 ལག་ལེན་འཐབ་ཨིན།\n"
"* If @b མ་བྱིན་མས་, BETAINV དེ་གིས་1ལག་ལེན་འཐབ་ཨིན།\n"
"* If @p < 0 ཡང་ན་ @p > 1 ཨིན་པ་ཅིན་BETAINV དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @alpha <= 0 ཡང་ན་ @beta <= 0ཨིན་པ་ཅིན་, BETAINV དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @a >= @bཨིན་པ་ཅིན་ BETAINV དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BETAINV(0.45,1.6,1) equals 0.607096629.\n"
"\n"
"@SEEALSO=BETADIST"

#: ../plugins/fn-stat/functions.c:1491
msgid ""
"@FUNCTION=TDIST\n"
"@SYNTAX=TDIST(x,dof,tails)\n"
"@DESCRIPTION=TDIST function returns the Student's t-distribution. @dof is "
"the degree of freedom and @tails is 1 or 2 depending on whether you want one-"
"tailed or two-tailed distribution.\n"
"@tails = 1 returns the size of the right tail.\n"
"\n"
"* If @dof < 1 TDIST returns #NUM! error.\n"
"* If @tails is neither 1 or 2 TDIST returns #NUM! error.\n"
"* This function is Excel compatible for non-negative @x.\n"
"\n"
"Warning: the parameterization of this function is different from what is "
"used for, e.g., NORMSDIST.  This is a common source of mistakes, but "
"necessary for compatibility.\n"
"\n"
"@EXAMPLES=\n"
"TDIST(2,5,1) equals 0.050969739.\n"
"TDIST(-2,5,1) equals 0.949030261.\n"
"TDIST(0,5,2) equals 1.\n"
"\n"
"@SEEALSO=TINV,TTEST"
msgstr ""
"@FUNCTION=TDIST\n"
"@SYNTAX=TDIST(x,dof,tails)\n"
"@DESCRIPTION=TDIST ལས་འགན་འདི་གིས་  སློབ་ཕྲུག་ཊི་གི་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་ཨིན།@dof འདི་"
"རང་དབང་གི་ཁུག་ཟུར་དང་@tails འདི་  ཁྱོད་ལུ་ མཇུག་གཅིག་དགོ་ནི་ཨིན་ན་མཇུག་གཉིས་དགོ་ནི་ཨིན་ན་དང་"
"འཁྲིལ་ཏེ་བཀྲམ་སྤེལ་ཨིན།\n"
"@tails = 1 དེ་གིས་མཇུག་གཡས་ཀྱི་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @dof < 1 ཨིན་པ་ཅིན་TDIST དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @tails འདི་༡་ཡང་ན་༢་ ཡང་མེན་པ་ཅིན་ TDIST དེ་གིས་ #NUM! འཛོལ་བ་འདིསླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* This function is Excel compatible for non-negative @x.\n"
"\n"
"ཉེན་བརྡ: ལས་འགན་འདི་གི་ཚད་བཟུང་འབད་ནི་འདི་ལག་ལེན་འཐབ་ཡོད་མི་ལས་ རྣམ་པ་སོ་སོ་ནང་ཡོདཔ་ཨིན་, e."
"g., NORMSDIST.  འདི་འཛོལ་བའི་བྱུང་ཁུངས་མཐུན་མོང་པ་ཅིག་ཨིན་, དེ་འབདཝ་ད་ མཐུན་འགྱུར་ཅན་གཡི་དོན་"
"ལུ་དགོས་མཁོ་ཡོདཔ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TDIST(2,5,1) equals 0.050969739.\n"
"TDIST(-2,5,1) equals 0.949030261.\n"
"TDIST(0,5,2) equals 1.\n"
"\n"
"@SEEALSO=TINV,TTEST"

#: ../plugins/fn-stat/functions.c:1536
msgid ""
"@FUNCTION=TINV\n"
"@SYNTAX=TINV(p,dof)\n"
"@DESCRIPTION=TINV function returns the inverse of the two-tailed Student's t-"
"distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @dof < 1 TINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"Warning: the parameterization of this function is different from what is "
"used for, e.g., NORMSINV.  This is a common source of mistakes, but "
"necessary for compatibility.\n"
"\n"
"@EXAMPLES=\n"
"TINV(0.4,32) equals 0.852998454.\n"
"\n"
"@SEEALSO=TDIST,TTEST"
msgstr ""
"@FUNCTION=TINV\n"
"@SYNTAX=TINV(p,dof)\n"
"@DESCRIPTION=TINV ལས་འགན་འདི་གིས་ སློབ་ཕྲུག་གི་ཊི་བཀྲམ་སྤེལ་གྱི་མཇུག་གཉིས་ཀྱི་ལུགས་ལྡོག་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* If @p < 0 ཡང་ན་ @p > 1 ཡང་ན་ @dof < 1ཨིན་པ་ཅིན་ TINV དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"ཉེན་བརྡ: ལས་འགན་འདི་གི་ཚད་བཟུང་འབད་ནི་འདི་  ལག་ལེན་འཐབ་ཡོད་མི་ལས་སོ་སོ་ཅིག་ཨིན་, e.g., "
"NORMSINV.  འདི་འཛོལ་བ་མཐུན་མོང་ཅིག་ཨིན་  དེ་འབདཝ་ད་ མཐུན་འགྱུར་ཅན་གྱི་དོན་ལུ་དགོས་མཁོ་ཡོདཔ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TINV(0.4,32) equals 0.852998454.\n"
"\n"
"@SEEALSO=TDIST,TTEST"

#: ../plugins/fn-stat/functions.c:1580
msgid ""
"@FUNCTION=FDIST\n"
"@SYNTAX=FDIST(x,dof1,dof2)\n"
"@DESCRIPTION=FDIST function returns the F probability distribution. @dof1 is "
"the numerator degrees of freedom and @dof2 is the denominator degrees of "
"freedom.\n"
"\n"
"* If @x < 0 FDIST returns #NUM! error.\n"
"* If @dof1 < 1 or @dof2 < 1, FDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FDIST(2,5,5) equals 0.232511319.\n"
"\n"
"@SEEALSO=FINV"
msgstr ""
"@FUNCTION=FDIST\n"
"@SYNTAX=FDIST(x,dof1,dof2)\n"
"@DESCRIPTION=FDIST ལས་འགན་འདི་གིས་  ཨེཕ་འབྱུང་སྲིད་པའི་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།f@dof1 འདི་  རང་དབང་གི་ཨང་གྲངས་ཀྱི་ཁུག་ཟུར་འདི་ཨིནམ་དང་ @dof2 འདི་ རང་དབང་གི་གཞི་གྲངས་"
"ཁུག་ཟུར་འདི་ཨིན།\n"
"\n"
"* If @x < 0 ཨིན་པ་ཅིན་FDIST དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @dof1 < 1 ཡང་ན་ @dof2 < 1ཨིན་པ་ཅིན་, FDIST དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FDIST(2,5,5) equals 0.232511319.\n"
"\n"
"@SEEALSO=FINV"

#: ../plugins/fn-stat/functions.c:1617
msgid ""
"@FUNCTION=LANDAU\n"
"@SYNTAX=LANDAU(x)\n"
"@DESCRIPTION=LANDAU returns the probability density p(x) at @x for the "
"Landau distribution using an approximation method. \n"
"@EXAMPLES=\n"
"LANDAU(0.34).\n"
"\n"
"@SEEALSO=RANDLANDAU"
msgstr ""
"@FUNCTION=LANDAU\n"
"@SYNTAX=LANDAU(x)\n"
"@DESCRIPTION=LANDAU དེ་གིས་  འབྱུང་སྲིད་པའི་ཤོང་ཚད་ p(x)འདི་ @x ལུ་  ཚོད་རྩིས་ཐབས་ལམ་ཅིག་"
"ལག་ལེན་འཐབ་ཐོག་ལས་  ལེན་ཌའུ་གི་དོན་ལུ་ཨིན། \n"
"@EXAMPLES=\n"
"LANDAU(0.34).\n"
"\n"
"@SEEALSO=RANDLANDAU"

#: ../plugins/fn-stat/functions.c:1762
msgid ""
"@FUNCTION=FINV\n"
"@SYNTAX=FINV(p,dof1,dof2)\n"
"@DESCRIPTION=FINV function returns the inverse of the F probability "
"distribution.\n"
"\n"
"* If @p < 0 or @p > 1 FINV returns #NUM! error.\n"
"* If @dof1 < 1 or @dof2 < 1 FINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FINV(0.2,2,4) equals 2.472135955.\n"
"\n"
"@SEEALSO=FDIST"
msgstr ""
"@FUNCTION=FINV\n"
"@SYNTAX=FINV(p,dof1,dof2)\n"
"@DESCRIPTION=FINV ལས་འགན་འདི་གིས་  ཨེཕ་འབྱུང་སྲིད་པའི་བཀྲམ་སྤེལ་འདི་གི་ལུགས་ལྡོག་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* If @p < 0 or @p > 1 ཨིན་པ་ཅིན་FINVདེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @dof1 < 1 ཡང་ན་ @dof2 < 1ཨིན་པ་ཅིན་ FINV དེ་གིས་#NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FINV(0.2,2,4) equals 2.472135955.\n"
"\n"
"@SEEALSO=FDIST"

#: ../plugins/fn-stat/functions.c:1798
msgid ""
"@FUNCTION=BINOMDIST\n"
"@SYNTAX=BINOMDIST(n,trials,p,cumulative)\n"
"@DESCRIPTION=BINOMDIST function returns the binomial distribution. @n is the "
"number of successes, @trials is the total number of independent trials, @p "
"is the probability of success in trials, and @cumulative describes whether "
"to return the sum of the binomial function from 0 to @n.\n"
"\n"
"* If @n or @trials are non-integer they are truncated.\n"
"* If @n < 0 or @trials < 0 BINOMDIST returns #NUM! error.\n"
"* If @n > @trials BINOMDIST returns #NUM! error.\n"
"* If @p < 0 or @p > 1 BINOMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"BINOMDIST(3,5,0.8,0) equals 0.2048.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=BINOMDIST\n"
"@SYNTAX=BINOMDIST(n,trials,p,cumulative)\n"
"@DESCRIPTION=BINOMDIST ལས་འགན་འདི་གིས་  བའི་ནོ་མི་ཡལ་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་ཨིན། @n "
"འདི་མཐར་འཁྱོལ་གཡི་ཨང་གྲངས་ཨིན། @trials འདི་ རང་དབང་དོ་འགྲན་ཚུ་གི་ཡོངས་བསྡོམ་ཨང་གྲངས་འདི་ཨིན། "
"@p འདི་  དོ་འགྲན་ནང་མཐར་འཁྱོལ་གྱི་འབྱུང་སྲིད་པ་འདི་ཨིནམ་དང་@cumulative འདི་གིས་  ༠་ ལས་བའི་ནོ་"
"མི་ཡལ་ལས་འགན་གི་བསྡོམ་འདི་@nལུ་སླར་ལོག་འབད་ནི་ཨིན་ན་མེན་ན་འགྲེལ་བཤད་འབདཝ་ཨིན།\n"
"\n"
"* If @n ཡང་ན་ @trials ཚུ་ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་  དེ་ཚུ་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* If @n < 0 ཡང་ན་ @trials < 0 ཨིན་པ་ཅིན་BINOMDIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @n > @trials ཨིན་པ་ཅིན་BINOMDIST དེ་གིས་#NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @p < 0 ཡང་ན་ @p > 1 ཨིན་པ་ཅིན་BINOMDIST དེ་གིས་ #NUM! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"BINOMDIST(3,5,0.8,0) equals 0.2048.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:1843
msgid ""
"@FUNCTION=CAUCHY\n"
"@SYNTAX=CAUCHY(x,a,cum)\n"
"@DESCRIPTION=CAUCHY returns the Cauchy distribution with scale parameter @a. "
"If @cum is TRUE, CAUCHY returns the cumulative distribution.\n"
"\n"
"* If @a < 0 CAUCHY returns #NUM! error.\n"
"* If @cum != TRUE and @cum != FALSE CAUCHY returns #VALUE! error.\n"
"\n"
"@EXAMPLES=\n"
"CAUCHY(0.43,1,TRUE) returns 0.370735.\n"
"\n"
"@SEEALSO=RANDCAUCHY"
msgstr ""
"@FUNCTION=CAUCHY\n"
"@SYNTAX=CAUCHY(x,a,cum)\n"
"@DESCRIPTION=CAUCHY དེ་གིས་  ཆ་ཚད་@aཚད་བཟུང་དང་ཅིག་ཁར་ཀོ་ཆི་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།  @cum འདི་ TRUEཨིན་པ་ཅིན་, CAUCHY དེ་གིས་ རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* If @a < 0 ཨིན་པ་ཅིན་CAUCHY དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @cum != TRUE དང་ @cum != FALSE CAUCHY rདེ་གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CAUCHY(0.43,1,TRUE) returns 0.370735.\n"
"\n"
"@SEEALSO=RANDCAUCHY"

#: ../plugins/fn-stat/functions.c:1881
msgid ""
"@FUNCTION=CRITBINOM\n"
"@SYNTAX=CRITBINOM(trials,p,alpha)\n"
"@DESCRIPTION=CRITBINOM function returns the smallest value for which the "
"cumulative is greater than or equal to a given value. @n is the number of "
"trials, @p is the probability of success in trials, and @alpha is the "
"criterion value.\n"
"\n"
"* If @trials is a non-integer it is truncated.\n"
"* If @trials < 0 CRITBINOM returns #NUM! error.\n"
"* If @p < 0 or @p > 1 CRITBINOM returns #NUM! error.\n"
"* If @alpha < 0 or @alpha > 1 CRITBINOM returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CRITBINOM(10,0.5,0.75) equals 6.\n"
"\n"
"@SEEALSO=BINOMDIST"
msgstr ""
"@FUNCTION=CRITBINOM\n"
"@SYNTAX=CRITBINOM(trials,p,alpha)\n"
"@DESCRIPTION=CRITBINOM ལས་འགན་འདི་གིས་  རིམ་གྱིས་བསག་པ་འདི་བྱིན་ཡོད་པའི་གནས་གོང་ལུ་སྦོམ་ཡང་"
"ན་མཉམ་པ་ཡོད་མི་གི་དོན་ལུ་  གནས་གོང་ཆུང་ཤོས་འིད་སླར་ལོག་འབདཝ་ཨིན། @n འདི་དོ་འགྲན་གྱི་ཨང་གྲངས་"
"ཨིན།, @p འདི་  དོ་འགྲན་ནང་མཐར་འཁྱོལ་གྱི་འབྱུང་སྲིད་པ་ཨིནམ་དང་ @alpha འདི་ཁྱད་ཚད་གནས་གོང་ཨིན།\n"
"\n"
"* If @trials འདི་ཧྲིལ་གྲངས་མེན་མི་འདི་ཨིན་པ་ཅིན་་ འདི་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* If @trials < 0 ཨིན་པ་ཅིན་CRITBINOM དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @p < 0 ཡང་ན་ @p > 1 ཨིན་པ་ཅིན་CRITBINOM དེ་གིས་ #NUM!འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @alpha < 0 ཡང་ན་ @alpha > 1 ཨིན་པ་ཅིན་CRITBINOM དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CRITBINOM(10,0.5,0.75) equals 6.\n"
"\n"
"@SEEALSO=BINOMDIST"

#: ../plugins/fn-stat/functions.c:1921
msgid ""
"@FUNCTION=PERMUT\n"
"@SYNTAX=PERMUT(n,k)\n"
"@DESCRIPTION=PERMUT function returns the number of permutations. @n is the "
"number of objects, @k is the number of objects in each permutation.\n"
"\n"
"* If @n = 0 PERMUT returns #NUM! error.\n"
"* If @n < @k PERMUT returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"PERMUT(7,3) equals 210.\n"
"\n"
"@SEEALSO=COMBIN"
msgstr ""
"@FUNCTION=PERMUT\n"
"@SYNTAX=PERMUT(n,k)\n"
"@DESCRIPTION=PERMUT ལས་འགན་འདི་གིས་  གོ་རིམ་བརྗེ་སྒྱུར་གྱི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།@n "
"འདི་  དངོས་པོ་ཚུ་གི་ཨང་གྲངས་ཨིན།, @k འདི་  གོ་རིམ་བརྗེ་སྒྱུར་རེ་རེ་ནང་གི་དངོས་པོ་ཚུ་གི་ཨང་གྲངས་འདི་"
"ཨིན།\n"
"\n"
"* If @n = 0 ཨིན་པ་ཅིན་PERMUT དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @n < @k ཨིན་པ་ཅིན་PERMUT དེ་གིས་ #NUM! འཛོལ་བ་འིད་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"PERMUT(7,3) equals 210.\n"
"\n"
"@SEEALSO=COMBIN"

#: ../plugins/fn-stat/functions.c:1957
msgid ""
"@FUNCTION=HYPGEOMDIST\n"
"@SYNTAX=HYPGEOMDIST(x,n,M,N[,cumulative])\n"
"@DESCRIPTION=HYPGEOMDIST function returns the hypergeometric distribution. "
"@x is the number of successes in the sample, @n is the number of trials, @M "
"is the number of successes overall, and @N is the population size.\n"
"\n"
"If the optional argument @cumulative is TRUE, the cumulative left tail will "
"be returned.\n"
"\n"
"* If @x,@n,@M or @N is a non-integer it is truncated.\n"
"* If @x,@n,@M or @N < 0 HYPGEOMDIST returns #NUM! error.\n"
"* If @x > @M or @n > @N HYPGEOMDIST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"HYPGEOMDIST(1,2,3,10) equals 0.4666667.\n"
"\n"
"@SEEALSO=BINOMDIST,POISSON"
msgstr ""
"@FUNCTION=HYPGEOMDIST\n"
"@SYNTAX=HYPGEOMDIST(x,n,M,N[,cumulative])\n"
"@DESCRIPTION=HYPGEOMDIST ལས་འགན་འདི་གིས་  ཧའི་པར་ཇིའོ་མེ་ཊིཀ་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན། @x འདི་ དཔེ་ཚན་ནང་གི་མཐར་འཁྱོལ་གྱི་ཨང་གྲངས་ཨིན།, @n འདི་ དོ་འགྲན་གྱི་ཨང་གྲངས་ཨིན།, @M "
"འདི་  མཐར་འཁྱོལ་ཡོངས་ཀྱི་ཨང་གྲངས་འདི་ཨིནམ་དང་ @N འདི་  མི་རློབས་ཀྱི་ཚད་ཨིན།\n"
"\n"
"གདམ་ཁ་ཅན་གྱི་སྒྲུབ་རྟགས་ @cumulative འདི་ TRUEཨིན་པ་ཅིན་, རིམ་གྱིས་བསག་པའི་གཡོན་གྱི་དོ་འགྲན་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @x,@n,@M ཨིན་པ་ཅིན་ཡང་ན་or @N < 0 ཨིན་པ་ཅིན་HYPGEOMDIST དེ་གིས་ #NUM! འཛོལ་བ་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @x > @M ཡངན་@n > @N ཨིན་པ་ཅིན་HYPGEOMDIST དེ་གིས་#NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"HYPGEOMDIST(1,2,3,10) equals 0.4666667.\n"
"\n"
"@SEEALSO=BINOMDIST,POISSON"

#: ../plugins/fn-stat/functions.c:2004
msgid ""
"@FUNCTION=CONFIDENCE\n"
"@SYNTAX=CONFIDENCE(x,stddev,size)\n"
"@DESCRIPTION=CONFIDENCE function returns the confidence interval for a mean. "
"@x is the significance level, @stddev is the population standard deviation, "
"and @size is the size of the sample.\n"
"\n"
"* If @size is non-integer it is truncated.\n"
"* If @size < 0 CONFIDENCE returns #NUM! error.\n"
"* If @size is 0 CONFIDENCE returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CONFIDENCE(0.05,1,33) equals 0.341185936.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=CONFIDENCE\n"
"@SYNTAX=CONFIDENCE(x,stddev,size)\n"
"@DESCRIPTION=CONFIDENCE ལས་འགན་འདི་གིས་ བར་མའི་ཆ་གྲངས་ཀྱི་དོན་ལུ་ཡིད་ཆེས་ཀྱི་བར་མཚམས་འདི་"
"སླར་ལོག་འབདཝ་ཨིན། @x འདི་  གལ་ཅན་གཡི་གནས་རིམ་ཨིན།, @stddev འདི་ མི་རློབས་ཚད་ལྡན་ཁ་སྒྱུར་ཨིནམ་"
"དང་ @size འདི་  དཔེ་གཞི་གི་ཚད་ཨིན།\n"
"\n"
"* If @size འདི་ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་  འདི་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* If @size < 0 ཨིན་པ་ཅིན་CONFIDENCE དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན\n"
"* If @size འདི་ 0 ཨིན་པ་ཅིན་CONFIDENCE དེ་གིས་ #DIV/0! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།* "
"ལས་འགན་འདི་ཨེགས་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CONFIDENCE(0.05,1,33) equals 0.341185936.\n"
"\n"
"@SEEALSO=AVERAGE"

#: ../plugins/fn-stat/functions.c:2042
msgid ""
"@FUNCTION=STANDARDIZE\n"
"@SYNTAX=STANDARDIZE(x,mean,stddev)\n"
"@DESCRIPTION=STANDARDIZE function returns a normalized value. @x is the "
"number to be normalized, @mean is the mean of the distribution, @stddev is "
"the standard deviation of the distribution.\n"
"\n"
"* If @stddev is 0 STANDARDIZE returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"STANDARDIZE(3,2,4) equals 0.25.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=STANDARDIZE\n"
"@SYNTAX=STANDARDIZE(x,mean,stddev)\n"
"@DESCRIPTION=STANDARDIZE ལས་འགན་འདི་གིས་ སྤྱིར་གཏང་བཟོ་ཡོད་པའི་གནས་གོང་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིན།  @x འདི་སྤྱིར་གཏང་བཟོ་ནི་ཨིན་པའི་ཨང་གྲངས་ཨིན། @mean འདི་  བཀྲམ་སྤེལ་འབད་ནིའི་བར་མའི་ཆ་གྲངས་"
"ཨིན། @stddev འདི་  བཀརམ་སྤེལ་གྱི་ཚད་ལྡན་ཁ་བསྒྱུར་བ་འདི་ཨིན།\n"
"\n"
"* If @stddev འདི་ 0 ཨིན་པ་ཅིན་STANDARDIZE དེ་གིས་ #DIV/0! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"STANDARDIZE(3,2,4) equals 0.25.\n"
"\n"
"@SEEALSO=AVERAGE"

#: ../plugins/fn-stat/functions.c:2079
msgid ""
"@FUNCTION=WEIBULL\n"
"@SYNTAX=WEIBULL(x,alpha,beta,cumulative)\n"
"@DESCRIPTION=WEIBULL function returns the Weibull distribution. If the "
"@cumulative boolean is true it will return:\n"
"\n"
"\t1 - exp (-(@x/@beta)^@alpha),\n"
"\n"
"otherwise it will return\n"
"\n"
"\t(@alpha/@beta^@alpha) * @x^(@alpha-1) * exp(-(@x/@beta^@alpha)).\n"
"\n"
"* If @x < 0 WEIBULL returns #NUM! error.\n"
"* If @alpha <= 0 or @beta <= 0 WEIBULL returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"WEIBULL(3,2,4,0) equals 0.213668559.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=WEIBULL\n"
"@SYNTAX=WEIBULL(x,alpha,beta,cumulative)\n"
"@DESCRIPTION=WEIBULL ལས་འགན་འདི་གིས་  ཝིའི་བཱུལ་བཀྲམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་ཨིན།  "
"@cumulative བུ་ལིན་འདི་བདེན་པ་ཨིན་པ་ཅིན་འདི་སླར་ལོག་འབདཝ་ཨིན།:\n"
"\n"
"\t1 - exp (-(@x/@beta)^@alpha),\n"
"\n"
"དེ་མེན་པ་ཅིན་འདི་སླར་ལོག་འབདཝ་ཨིན་\n"
"\n"
"\t(@alpha/@beta^@alpha) * @x^(@alpha-1) * exp(-(@x/@beta^@alpha)).\n"
"\n"
"* If @x < 0 ཨིན་པ་ཅིན་WEIBULL དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @alpha <= 0 ཡང་ན་@beta <= 0 ཨིན་པ་ཅིན་ WEIBULL དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་མཐུན་འགཡུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"WEIBULL(3,2,4,0) equals 0.213668559.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:2121
msgid ""
"@FUNCTION=NORMDIST\n"
"@SYNTAX=NORMDIST(x,mean,stddev,cumulative)\n"
"@DESCRIPTION=The NORMDIST function returns the value of the probability "
"density function or the cumulative distribution function for the normal "
"distribution with the mean given by @mean, and the standard deviation given "
"by @stddev. If @cumulative is FALSE, NORMDIST returns the value of the "
"probability density function at the value @x. If @cumulative is TRUE, "
"NORMDIST returns the value of the cumulative distribution function at @x.\n"
"\n"
"* If @stddev is 0 NORMDIST returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMDIST(2,1,2,0) equals 0.176032663.\n"
"\n"
"@SEEALSO=POISSON"
msgstr ""
"@FUNCTION=NORMDIST\n"
"@SYNTAX=NORMDIST(x,mean,stddev,cumulative)\n"
"@DESCRIPTION=The NORMDIST ལས་འགན་འདི་གིས་  འབྱུང་སྲིད་པའི་ཤོང་ཚད་ལས་འགན་ཡང་ན་  སྤྱིར་"
"གཏང་བཀྲམ་སྤེལ་གྱི་དོན་ལུ་ @meanགིས་བྱིན་ཡོད་པའི་བར་མའི་ཆ་གྲངས་དང་ཅིག་ཁར་  རིམ་གྱིས་བསག་པའི་བཀྲམ་"
"སྤེལ་ལས་འགན་འདི་སླར་ལོག་འབདཝ་ཨིནམ་དང་  ཚད་ལྡན་ཁ་སྒྱུར་བ་@stddevབྱིན་ཡོད་མི་འདི་ཡང་ཨིན།  "
"@cumulative འདི་ FALSE ཨིན་པ་ཅིན་, NORMDIST དེ་གིས་ གནས་གོང་@xལུ་ཡོད་མི་  འབྱུང་སྲིད་པའི་"
"ཤོང་ཚད་ཀྱི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན།   @cumulative འདི་ TRUE ཨིན་པ་ཅིན་, NORMDIST དེ་"
"གིས་གནས་གོང་ @x ལུ་  རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་ལས་འགན་གྱི་གནས་གོང་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @stddev འདི་0 ཨིན་པ་ཅིན་NORMDIST དེ་གིས་ #DIV/0! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NORMDIST(2,1,2,0) equals 0.176032663.\n"
"\n"
"@SEEALSO=POISSON"

#: ../plugins/fn-stat/functions.c:2167
msgid ""
"@FUNCTION=NORMINV\n"
"@SYNTAX=NORMINV(p,mean,stddev)\n"
"@DESCRIPTION=NORMINV function returns the inverse of the normal cumulative "
"distribution. @p is the given probability corresponding to the normal "
"distribution, @mean is the arithmetic mean of the distribution, and @stddev "
"is the standard deviation of the distribution.\n"
"\n"
"* If @p < 0 or @p > 1 or @stddev <= 0 NORMINV returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"NORMINV(0.76,2,3) equals 4.118907689.\n"
"\n"
"@SEEALSO=NORMDIST,NORMSDIST,NORMSINV,STANDARDIZE,ZTEST"
msgstr ""
"@FUNCTION=NORMINV\n"
"@SYNTAX=NORMINV(p,mean,stddev)\n"
"@DESCRIPTION=NORMINV ལས་འགན་འདི་གིས་  སྤྱིར་གཏང་རིམ་གྱིས་བསག་པའི་བཀྲམ་སྤེལ་གྱི་ལུགས་ལྡོག་འདི་"
"སླར་ལོག་འབདཝ་ཨིན། @p འདི་  སྤྱིར་གཏང་བཀྲམ་སྤེལ་ལུ་འབྱུང་སྲིད་པའི་ཆ་མཉམ་པ་བྱིན་མི་འདི་ཨིན། @mean "
"འདི་  བཀྲམ་སྤེལ་གྱི་ཨང་གྲངས་ཀྱི་བར་མའི་ཆ་གྲངས་འདི་ཨིནམ་དང་ @stddev འདི་ བཀྲམ་སྤེལ་གྱི་ཚད་ལྡན་ཁ་"
"བསྒྱུར་བ་འདི་ཨིན།\n"
"\n"
"* If @p < 0 ཡང་ན་ @p > 1ཡང་ན་ @stddev <= 0 ཨིནཔ་ཅིན་ NORMINV དེ་གིས་ #NUM! འཛོལ་བ་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"NORMINV(0.76,2,3) equals 4.118907689.\n"
"\n"
"@SEEALSO=NORMDIST,NORMSDIST,NORMSINV,STANDARDIZE,ZTEST"

#: ../plugins/fn-stat/functions.c:2206
msgid ""
"@FUNCTION=KURT\n"
"@SYNTAX=KURT(n1, n2, ...)\n"
"@DESCRIPTION=KURT returns an unbiased estimate of the kurtosis of a data "
"set.\n"
"Note, that this is only meaningful if the underlying distribution really has "
"a fourth moment.  The kurtosis is offset by three such that a normal "
"distribution will have zero kurtosis.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If fewer than four numbers are given or all of them are equal KURT returns "
"#DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"KURT(A1:A5) equals 1.234546305.\n"
"\n"
"@SEEALSO=AVERAGE,VAR,SKEW,KURTP"
msgstr ""
"@FUNCTION=KURT\n"
"@SYNTAX=KURT(n1, n2, ...)\n"
"@DESCRIPTION=KURT དེ་གིས་ གནས་སྡུད་གཞི་སྒྲིག་ཅིག་གི་ཀུར་ཊོསི་གི་ཕྱོག་རིས་ཅན་མེད་པའི་སྔོན་བརྩི་བཏོན་ནི་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"དྲན་འཛིན་འབད་, འོག་ལུ་ཡོད་མི་བཀྲམ་སྤེལ་འདི་ལུ་  ཡུད་ཙམ་བཞི་པ་ཡོད་པ་ཅིན་རྐྱངམ་ཅིག་དོན་ཡོདཔ་ཨིན།  "
"སྤྱིར་གཏང་གི་བཀྲམ་སྤེལ་དེ་ལུ་  ཀླད་ཀོར་ཀུར་ཊོསི་ཡོདཔ་སྦེ་  ཀུར་ཊོསི་འདི་གསུམ་གྱིས་སྦེ་པར་ལེནམ་ཨིན།  \n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་སྦེ་བཞགཔ་ཨིན།\n"
"* ཨང་གྲངས་བཞི་ལས་ཉུངམ་སྦེ་ཨིན་པ་ཅིན་  ཡང་ན་  དེ་ཚུ་ཆ་མཉམ་མཉམ་པ་ཨིན་པ་ཅིན་ KURT དེ་གིས་ "
"#DIV/0! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་བཞག་"
"གེ།  དེ་ལས་\n"
"KURT(A1:A5) equals 1.234546305.\n"
"\n"
"@SEEALSO=AVERAGE,VAR,SKEW,KURTP"

#: ../plugins/fn-stat/functions.c:2247
msgid ""
"@FUNCTION=KURTP\n"
"@SYNTAX=KURTP(n1, n2, ...)\n"
"@DESCRIPTION=KURTP returns the population kurtosis of a data set.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If fewer than two numbers are given or all of them are equal KURTP returns "
"#DIV/0! error.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"KURTP(A1:A5) equals -0.691363424.\n"
"\n"
"@SEEALSO=AVERAGE,VARP,SKEWP,KURT"
msgstr ""
"@FUNCTION=KURTP\n"
"@SYNTAX=KURTP(n1, n2, ...)\n"
"@DESCRIPTION=KURTP དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་གི་མི་རློབས་ཀུར་ཊོ་སིསི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞགཔ་ཨིན།\n"
"* ཨང་གྲངས་གཉིས་ལས་ཉུང་མི་བྱིན་ཏེ་ཡོད་པ་ཅིན་  ཡང་ན་  དེ་ཚུ་ཆ་མཉམ་མཉམ་པ་ཨིན་པ་ཅིན་ KURTP དེ་"
"གིས་ #DIV/0! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་  ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོད་ཟེར་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"KURTP(A1:A5) equals -0.691363424.\n"
"\n"
"@SEEALSO=AVERAGE,VARP,SKEWP,KURT"

#: ../plugins/fn-stat/functions.c:2282
msgid ""
"@FUNCTION=AVEDEV\n"
"@SYNTAX=AVEDEV(n1, n2, ...)\n"
"@DESCRIPTION=AVEDEV returns the average of the absolute deviations of a data "
"set from their mean.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"AVEDEV(A1:A5) equals 7.84.\n"
"\n"
"@SEEALSO=STDEV"
msgstr ""
"@FUNCTION=AVEDEV\n"
"@SYNTAX=AVEDEV(n1, n2, ...)\n"
"@DESCRIPTION=AVEDEV དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་ཚུ་ཁོང་རའི་བར་མའི་ཆ་གྲངས་ལས་  ཁ་བསྒྱུར་བ་ཡང་"
"དག་གི་ཆ་སྙོམས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1ཡོད་ཟེར་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"AVEDEV(A1:A5) equals 7.84.\n"
"\n"
"@SEEALSO=STDEV"

#: ../plugins/fn-stat/functions.c:2315
msgid ""
"@FUNCTION=DEVSQ\n"
"@SYNTAX=DEVSQ(n1, n2, ...)\n"
"@DESCRIPTION=DEVSQ returns the sum of squares of deviations of a data set "
"from the sample mean.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"DEVSQ(A1:A5) equals 470.56.\n"
"\n"
"@SEEALSO=STDEV"
msgstr ""
"@FUNCTION=DEVSQ\n"
"@SYNTAX=DEVSQ(n1, n2, ...)\n"
"@DESCRIPTION=DEVSQ དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་འདི་དཔེ་གཞི་བར་མའི་ཆ་གྲངས་ལས་  ཁ་བསྒྱུར་བའི་གྲུ་"
"གཞི་གི་བསྡོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞག་ཡོདཔ།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1ཡོད་ཟེར་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"DEVSQ(A1:A5) equals 470.56.\n"
"\n"
"@SEEALSO=STDEV"

#: ../plugins/fn-stat/functions.c:2350
msgid ""
"@FUNCTION=FISHER\n"
"@SYNTAX=FISHER(x)\n"
"@DESCRIPTION=FISHER function returns the Fisher transformation at @x.\n"
"\n"
"* If @x is not a number, FISHER returns #VALUE! error.\n"
"* If @x <= -1 or @x >= 1, FISHER returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FISHER(0.332) equals 0.345074339.\n"
"\n"
"@SEEALSO=SKEW"
msgstr ""
"@FUNCTION=FISHER\n"
"@SYNTAX=FISHER(x)\n"
"@DESCRIPTION=FISHER ལས་འགན་འདི་གིས་  @x ལུ་ཕི་ཤར་གཞི་བསྒྱུར་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @x འདི་ཨང་གྲངས་ཅིག་མེན་པ་ཅིན་, FISHER དེ་གིས་ #VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @x <= -1 ཡང་ན་ @x >= 1ཨིན་པ་ཅིན་, FISHER དེ་གིས་ #NUM! སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FISHER(0.332) equals 0.345074339.\n"
"\n"
"@SEEALSO=SKEW"

#: ../plugins/fn-stat/functions.c:2388
msgid ""
"@FUNCTION=POISSON\n"
"@SYNTAX=POISSON(x,mean,cumulative)\n"
"@DESCRIPTION=POISSON function returns the Poisson distribution. @x is the "
"number of events, @mean is the expected numeric value @cumulative describes "
"whether to return the sum of the Poisson function from 0 to @x.\n"
"\n"
"* If @x is a non-integer it is truncated.\n"
"* If @x < 0 POISSON returns #NUM! error.\n"
"* If @mean <= 0 POISSON returns the #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"POISSON(3,6,0) equals 0.089235078.\n"
"\n"
"@SEEALSO=NORMDIST, WEIBULL"
msgstr ""
"@FUNCTION=POISSON\n"
"@SYNTAX=POISSON(x,mean,cumulative)\n"
"@DESCRIPTION=POISSON ལས་འགན་འདི་གིས་  པོའི་སཱོན་བཀརམ་སྤེལ་འདི་སླར་ལོག་འབདཝ་ཨིན།  @x འདི་ "
"བྱུང་ལས་ཀྱི་ཨང་གྲངས་ཨིན། @mean འདི་  རེ་བ་སྐྱེད་ཡོད་པའི་ཨང་གྲངས་ཀྱི་གནས་གོང་འདི་ཨིན། "
"@cumulative འདི་གིས་  ༠་ལས་པོའི་སཱོན་ལས་འགན་འདི་ @xལུ་སླར་ལོག་འབད་ནི་ཨིན་ན་མེན་ན་འགྲེལ་བཤད་"
"འབདཝ་ཨིན།\n"
"\n"
"* If @x འདི་ཧྲིལ་གྲངས་མེན་མི་ཨིན་པ་ཅིན་  འདི་ཆུང་ཀུ་བཟོ་ཡོདཔ་ཨིན།\n"
"* If @x < 0 ཨིན་པ་ཅིན་POISSON དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @mean <= 0 ཨིན་པ་ཅིན་POISSON དེ་གིས་  #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"POISSON(3,6,0) equals 0.089235078.\n"
"\n"
"@SEEALSO=NORMDIST, WEIBULL"

#: ../plugins/fn-stat/functions.c:2430
msgid ""
"@FUNCTION=PEARSON\n"
"@SYNTAX=PEARSON(array1,array2)\n"
"@DESCRIPTION=PEARSON returns the Pearson correlation coefficient of two data "
"sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=INTERCEPT,LINEST,RSQ,SLOPE,STEYX"
msgstr ""
"@FUNCTION=PEARSON\n"
"@SYNTAX=PEARSON(array1,array2)\n"
"@DESCRIPTION=PEARSON དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་གཉིས་ཀྱི་ཕན་ཚུན་འབྲེལ་བའི་གྲངས་རྟགས་པི་ཡར་སཱོན་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞགཔ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=INTERCEPT,LINEST,RSQ,SLOPE,STEYX"

#: ../plugins/fn-stat/functions.c:2458
msgid ""
"@FUNCTION=RSQ\n"
"@SYNTAX=RSQ(array1,array2)\n"
"@DESCRIPTION=RSQ returns the square of the Pearson correlation coefficient "
"of two data sets.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=CORREL,COVAR,INTERCEPT,LINEST,LOGEST,PEARSON,SLOPE,STEYX,TREND"
msgstr ""
"@FUNCTION=RSQ\n"
"@SYNTAX=RSQ(array1,array2)\n"
"@DESCRIPTION=RSQ དེ་གིས་  གནས་སྡུད་གཞི་སྒྲིག་གཉིས་ཀྱི་ཕན་ཚུན་འབྲེལ་བའི་པི་ཡར་སཱོན་གྱི་གྲུ་གཞི་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེད་བཞག་ཡོདཔ།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=CORREL,COVAR,INTERCEPT,LINEST,LOGEST,PEARSON,SLOPE,STEYX,TREND"

#: ../plugins/fn-stat/functions.c:2492
msgid ""
"@FUNCTION=MEDIAN\n"
"@SYNTAX=MEDIAN(n1, n2, ...)\n"
"@DESCRIPTION=MEDIAN returns the median of the given data set.\n"
"\n"
"* Strings and empty cells are simply ignored.\n"
"* If even numbers are given MEDIAN returns the average of the two numbers in "
"the middle.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"MEDIAN(A1:A5) equals 21.3.\n"
"\n"
"@SEEALSO=AVERAGE,COUNT,COUNTA,DAVERAGE,MODE,SSMEDIAN,SUM"
msgstr ""
"@FUNCTION=MEDIAN\n"
"@SYNTAX=MEDIAN(n1, n2, ...)\n"
"@DESCRIPTION=MEDIAN དེ་གིས་  བྱིན་ཡོད་པའི་གནས་སྡུད་གཞི་སྒྲིག་གི་གུང་ཐིག་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ཡིག་རྒྱུན་ཚུ་དང་ནང་ཐིག་སྟོངམ་ཚུ་སྣང་མེདཔ་སྦེ་བཞགཔ་ཨིན།\n"
"* ཆ་ཅན་ཨང་གྲངས་ཚུ་བྱིན་ཡོད་པ་ཅིན་ MEDIAN དེ་གིས་  བར་མའི་ནང་ལུ་ཨང་གྲངས་གཉིས་ཀྱི་ཅ་སྙོམས་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་40.1ཚུ་ཡོདཔ་སྦེ་བཞག་"
"གེ།  དེ་ལས་\n"
"MEDIAN(A1:A5) equals 21.3.\n"
"\n"
"@SEEALSO=AVERAGE,COUNT,COUNTA,DAVERAGE,MODE,SSMEDIAN,SUM"

#: ../plugins/fn-stat/functions.c:2528
msgid ""
"@FUNCTION=SSMEDIAN\n"
"@SYNTAX=SSMEDIAN(array[,interval)]\n"
"@DESCRIPTION=The SSMEDIAN function returns the median for grouped data as "
"commonly determined in the social sciences. The data points given in @array "
"are assumed to be the result of grouping data into intervals of length "
"@interval\n"
"\n"
"* If @interval is not given, SSMEDIAN uses 1.\n"
"* If @array is empty, SSMEDIAN returns #NUM! error.\n"
"* If @interval <= 0, SSMEDIAN returns #NUM! error.\n"
"* SSMEDIAN does not check whether the data points are at least @interval "
"apart.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, A3 contain numbers 7, 8, 8.  Then\n"
"SSMEDIAN(A1:A3, 1) equals 7.75.\n"
"\n"
"@SEEALSO=MEDIAN"
msgstr ""
"@FUNCTION=SSMEDIAN\n"
"@SYNTAX=SSMEDIAN(array[,interval)]\n"
"@DESCRIPTION=The SSMEDIAN ལས་འགན་འདི་གིས་  སྤྱི་སྡེའི་ལམ་ལུགས་ཚུ་ནང་  མཐུན་མོང་གི་གཏན་"
"འབེབས་བཟོ་ཡོདཔ་བཟུམ་སྦེ་ སྡེ་ཚན་བཟོ་ཡོད་པའི་གནས་སྡུད་ཀྱི་དོན་ལུ་  གུང་ཐིག་འདི་སླར་ལོག་འབདཝ་ཨིན། "
"@array ནང་བྱིན་ཡོད་པའི་གནས་སྡུད་དོན་ཚན་ཚུ་  རིང་ཚད་@interval གི་བར་མཚམས་ནང་གི་  སྡེ་ཚན་བཟོ་"
"བའི་གནས་སྡུད་ཀྱི་གྲུབ་འབྲས་ཨིན་ཟེར་བཞག་ཡོདཔ།\n"
"\n"
"* If @interval འདི་མ་བྱིན་པ་ཅིན་, SSMEDIAN དེ་གིས་1 ལག་ལེན་འཐབ་ཨིན།\n"
"* If @array འདི་སྟོངམ་ཨིན་པ་ཅིན་, SSMEDIAN དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @interval <= 0ཨིན་པ་ཅིན་, SSMEDIAN དེ་གིས་  #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* SSMEDIAN དེ་གིས་  གནས་སྡུད་དོན་ཚན་ཚུ་  @interval ལོགས་སུ་ཨིན་ན་མེན་ན་ཞིབ་དཔྱད་མི་འབད།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, A3 ཚུ་ ལུ་ཨང་གྲངས་ 7, 8, 8 ཡོདཔ་སྦེ་བཞག་གེ།  དེ་ལས་\n"
"SSMEDIAN(A1:A3, 1) equals 7.75.\n"
"\n"
"@SEEALSO=MEDIAN"

#: ../plugins/fn-stat/functions.c:2634
#, fuzzy
msgid ""
"@FUNCTION=LARGE\n"
"@SYNTAX=LARGE(n, k)\n"
"@DESCRIPTION=LARGE returns the k-th largest value in a data set.\n"
"\n"
"* If data set is empty LARGE returns #NUM! error.\n"
"* If @k <= 0 or @k is greater than the number of data items given LARGE "
"returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"LARGE(A1:A5,2) equals 25.9.\n"
"LARGE(A1:A5,4) equals 17.3.\n"
"\n"
"@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,SMALL"
msgstr ""
"@FUNCTION=LARGE\n"
"@SYNTAX=LARGE(n1, n2, ..., k)\n"
"@DESCRIPTION=LARGE དེ་གིས་  k-th གནས་གོང་སྦོམ་འདི་ གནས་སྡུད་གཞི་སྒྲིག་ནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* གནས་སྡུད་གཞི་སྒྲིག་འདི་སྟོངམ་ཨིན་པ་ཅིན་LARGE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @k <= 0 ཡང་ན་ @k འདི་  བྱིན་ཡོད་པའི་གནས་སྡུད་རྣམ་གྲངས་ཚུ་གི་ཨང་གྲངས་ལས་སྦོམ་ཡོད་པ་ཅིན་ "
"LARGE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་  ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཚུ་ཡོདཔ་སྦེ་"
"བཞག་གེ།  དེ་ལས་\n"
"LARGE(A1:A5,2) equals 25.9.\n"
"LARGE(A1:A5,4) equals 17.3.\n"
"\n"
"@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,SMALL"

#: ../plugins/fn-stat/functions.c:2685
#, fuzzy
msgid ""
"@FUNCTION=SMALL\n"
"@SYNTAX=SMALL(n, k)\n"
"@DESCRIPTION=SMALL returns the k-th smallest value in a data set.\n"
"\n"
"* If data set is empty SMALL returns #NUM! error.\n"
"* If @k <= 0 or @k is greater than the number of data items given SMALL "
"returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"SMALL(A1:A5,2) equals 17.3.\n"
"SMALL(A1:A5,4) equals 25.9.\n"
"\n"
"@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,LARGE"
msgstr ""
"@FUNCTION=SMALL\n"
"@SYNTAX=SMALL(n1, n2, ..., k)\n"
"@DESCRIPTION=SMALL དེ་གིས་ k-th ཆུང་ཀུའི་གནས་གོང་འདི་  གནས་སྡུད་གཞི་སྒྲིག་ནང་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* གནས་སྡུད་གཞི་སྒྲིག་འདི་སྟོངམ་ཨིན་པ་ཅིན་ SMALLདེ་གིས་ #NUM!འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @k <= 0 ཡང་ན་ @k འདི་  བྱིན་ཡོད་པའི་གནས་སྡུད་རྣམ་གྲངས་ཚུ་གི་ཨང་གྲངས་ལས་སྦོམ་ཨིན་པ་ཅིན་"
"SMALL དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་བཞག་"
"གེ།  དེ་ལས་\n"
"SMALL(A1:A5,2) equals 17.3.\n"
"SMALL(A1:A5,4) equals 25.9.\n"
"\n"
"@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,LARGE"

#: ../plugins/fn-stat/functions.c:2762
msgid ""
"@FUNCTION=PROB\n"
"@SYNTAX=PROB(x_range,prob_range,lower_limit[,upper_limit])\n"
"@DESCRIPTION=PROB function returns the probability that values in a range or "
"an array are between two limits. If @upper_limit is not given, PROB returns "
"the probability that values in @x_range are equal to @lower_limit.\n"
"\n"
"* If the sum of the probabilities in @prob_range is not equal to 1 PROB "
"returns #NUM! error.\n"
"* If any value in @prob_range is <=0 or > 1, PROB returns #NUM! error.\n"
"* If @x_range and @prob_range contain a different number of data entries, "
"PROB returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=BINOMDIST,CRITBINOM"
msgstr ""
"@FUNCTION=PROB\n"
"@SYNTAX=PROB(x_range,prob_range,lower_limit[,upper_limit])\n"
"@DESCRIPTION=PROB ལས་འགན་འདི་གིས་  ཁྱབ་ཚད་ནང་གནས་གོང་འབད་མི་འབྱུང་སྲིད་པ་  ཡང་ན་  ཨེ་རེ་"
"ཚུ་ཚད་གཉིས་ཀྱི་བར་ན་ཨིན་མི་སླར་ལོག་འབདཝ་ཨིན། @upper_limit འདི་བྱིན་ཏེ་མེད་པ་ཅིན་, PROB དེ་"
"གིས་  re @x_range ཚུ་ @lower_limit ལུ་མཉམ་པའི་ནང་གནས་གོང་འབད་མི་འབྱུང་སྲིད་པ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"* @prob_range ནང་གི་འབྱུང་སྲིད་པའི་བསྡོམ་ཚུ་1 ལུ་མཉམ་པ་མེད་པ་ཅིན་PROB དེ་གིས་ #NUM! འཛོལ་བ་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"*  @prob_range ནང་ལུ་གནས་གོང་གང་རུང་འདི་ <=0 ཡང་ན་ > 1 ཨིན་པ་ཅིན་, PROB དེ་གིས་ "
"#NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @x_range དང་ @prob_range དེ་ལུ་  གནས་སྡུད་འཛུལ་ཞུགས་ཀྱི་ཨང་གྲངས་སོ་སོ་ཡོད་པ་ཅིན་, "
"PROB དེ་གིས་ #N/A འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=BINOMDIST,CRITBINOM"

#: ../plugins/fn-stat/functions.c:2857
msgid ""
"@FUNCTION=STEYX\n"
"@SYNTAX=STEYX(known_y's,known_x's)\n"
"@DESCRIPTION=STEYX function returns the standard error of the predicted y-"
"value for each x in the regression.\n"
"\n"
"* If @known_y's and @known_x's are empty or have a different number of "
"arguments then STEYX returns #N/A error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"STEYX(A1:A5,B1:B5) equals 1.101509979.\n"
"\n"
"@SEEALSO=PEARSON,RSQ,SLOPE"
msgstr ""
"@FUNCTION=STEYX\n"
"@SYNTAX=STEYX(known_y's,known_x's)\n"
"@DESCRIPTION=STEYX ལས་འགན་འདི་གིས་  སྔོན་བཤད་འབད་ཡོད་པའི་ ཝའི་-གནས་གོང་འདི་ རི་གེ་རེ་ཤཱན་"
"ནང་གི་ཨེགསི་རེ་རེའི་དོན་ལུ་  ཚད་ལྡན་འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @known_y's དང་ @known_x's ཚུ་སྟོངམ་ཨིན་པ་ཅིན་  ཡང་ན་ སྒྲུབ་རྟགས་ཀྱི་ཨང་གྲངས་སོ་སོ་ཡོད་"
"པ་ཅིན་  STEYX དེ་གིས་  #N/A སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1, དང་ནང་"
"ཐིག་ B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, དང་ 42.7 ཡོདཔ་སྦེ་བཞག་གེ།  དེ་ལས་\n"
"STEYX(A1:A5,B1:B5) equals 1.101509979.\n"
"\n"
"@SEEALSO=PEARSON,RSQ,SLOPE"

#: ../plugins/fn-stat/functions.c:3015
msgid ""
"@FUNCTION=ZTEST\n"
"@SYNTAX=ZTEST(ref,x)\n"
"@DESCRIPTION=ZTEST returns the two-tailed probability of a z-test.\n"
"\n"
"@ref is the data set and @x is the value to be tested.\n"
"\n"
"* If @ref contains less than two data items ZTEST returns #DIV/0! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"ZTEST(A1:A5,20) equals 0.254717826.\n"
"\n"
"@SEEALSO=CONFIDENCE,NORMDIST,NORMINV,NORMSDIST,NORMSINV,STANDARDIZE"
msgstr ""
"@FUNCTION=ZTEST\n"
"@SYNTAX=ZTEST(ref,x)\n"
"@DESCRIPTION=ZTEST དེ་གིས་  ཛེརཌི་-ཞིབ་དཔྱད་ཅིག་གི་འབྱུང་སྲིད་པའི་མཇུག་གཉིས་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@ref འདི་  གནས་སྡུད་གཞི་རྟེན་དང་ @x འདི་ཞིབ་དཔྱད་འབད་ནི་ཨིན་པའི་གནས་གོང་ཨིན།\n"
"\n"
"* If @ref དེ་གིས་  གནས་སྡུད་རྣམ་གྲངས་གཉིས་ལས་ཉུངམ་སྦེ་ཡོད་པ་ཅིན་ ZTEST དེ་གིས་ #DIV/0! འཛོལ་"
"བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་  ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་"
"བཞག་གེ།  དེ་ལས་\n"
"ZTEST(A1:A5,20) equals 0.254717826.\n"
"\n"
"@SEEALSO=CONFIDENCE,NORMDIST,NORMINV,NORMSDIST,NORMSINV,STANDARDIZE"

#: ../plugins/fn-stat/functions.c:3071
msgid ""
"@FUNCTION=AVERAGEA\n"
"@SYNTAX=AVERAGEA(number1,number2,...)\n"
"@DESCRIPTION=AVERAGEA returns the average of the given arguments.  Numbers, "
"text and logical values are included in the calculation too. If the cell "
"contains text or the argument evaluates to FALSE, it is counted as value "
"zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  "
"Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"AVERAGEA(A1:A5) equals 18.94.\n"
"\n"
"@SEEALSO=AVERAGE"
msgstr ""
"@FUNCTION=AVERAGEA\n"
"@SYNTAX=AVERAGEA(number1,number2,...)\n"
"@DESCRIPTION=AVERAGEA དེ་གིས་  བྱིན་ཡོད་པའི་སྒྲུབ་རྟགས་ཚུ་གི་ཆ་སྙོམས་འདི་སླར་ལོག་འབདཝ་ཨིན། ཨང་"
"གྲངས་ཚུ་  ཚིག་ཡིག་དང་གཞན་ཚིག་ཅན་གྱི་གནས་གོང་ཚུ་  རྩིས་ལས་ནང་ལུ་ཡང་གྲངས་སུ་བརྩི་སྟེ་ཡོདཔ་ཨིན།  ནང་"
"ཐིག་དེ་གིས་ཚིག་ཡིག་གནས་ཡོདཔ་དང་  སྒྲུབ་རྟགས་དེ་གིས་FALSE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གནས་གོང་"
"ཀླད་ཀོར་སྦེ་བརྩི་ནི་ཨིན།(0). སྒྲུབ་རྟགས་དེ་གིས་TRUEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གཅིག་སྦེ་(1)གྱངས་ཁ་"
"བརྐྱབ་ནི་ཨིན།  ནང་ཐིག་སྟོངམ་ཚུ་གྱངས་ཁ་མི་བརྐྱབ་ཟེར་དྲན་འཛིན་འབད།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ཚུ་དང་ཡིག་རྒྱུན་ 11.4, 17.3, \"missing\", 25.9, "
"དང་40.1ཚུ་ཡོད་ཟེར་ང་བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"AVERAGEA(A1:A5) equals 18.94.\n"
"\n"
"@SEEALSO=AVERAGE"

#: ../plugins/fn-stat/functions.c:3109
msgid ""
"@FUNCTION=MAXA\n"
"@SYNTAX=MAXA(number1,number2,...)\n"
"@DESCRIPTION=MAXA returns the largest value of the given arguments.  "
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"MAXA(A1:A5) equals 40.1.\n"
"\n"
"@SEEALSO=MAX,MINA"
msgstr ""
"@FUNCTION=MAXA\n"
"@SYNTAX=MAXA(number1,number2,...)\n"
"@DESCRIPTION=MAXA དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་སྒྲུབ་རྟགས་ཚུ་གི་གནས་གོང་སྦོམ་འདི་སླར་ལོག་འབདཝ་ཨིན།  "
"ཨང་གྲངས་ཚུ་, ཚིག་ཡིག་དང་གཞན་ཚིག་ཅན་གྱི་གནས་གོང་ཚུ་  རྩིས་ནང་ལུ་བརྩི་སྟེ་ཡོདཔ་ཨིན།  ནང་ཐིག་དེ་གིས་"
"ཚིག་ཡིག་གནས་ཡོདཔ་དང་ཡང་ན་སྒྲུབ་རྟགས་ཀྱིས་ FALSE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གནས་གོང་ཀླད་ཀོར་ "
"(0) སྦེ་གྱངས་ཁ་བརྐྱབ་ཨིན།  སྒྲུབ་རྟགས་དེ་གིས་TRUE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་,འདི་གཅིག་ (1) སྦེ་གྱངས་ཁ་"
"བརྐྱབ་ཨིན།  ནང་ཐིག་སྟོངམ་ཚུ་གྱངས་ཁ་བརྐྱབ་ནི་མེད་ཟེར་དྲན་འཛིན་འབད།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ ཨང་གྲངས་ཚུ་དང་ཡིག་རྒྱུན་ 11.4, 17.3, \"missing\", 25.9, "
"དང་ 40.1ཚུ་ཡོདཔ་སྦེ་ང་བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས\n"
"MAXA(A1:A5) equals 40.1.\n"
"\n"
"@SEEALSO=MAX,MINA"

#: ../plugins/fn-stat/functions.c:3147
msgid ""
"@FUNCTION=MINA\n"
"@SYNTAX=MINA(number1,number2,...)\n"
"@DESCRIPTION=MINA returns the smallest value of the given arguments.  "
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"MINA(A1:A5) equals 0.\n"
"\n"
"@SEEALSO=MIN,MAXA"
msgstr ""
"@FUNCTION=MINA\n"
"@SYNTAX=MINA(number1,number2,...)\n"
"@DESCRIPTION=MINA དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་སྒྲུབ་རྟགས་ཀྱི་གནས་གོང་ཆུང་ཀུ་འདི་སླར་ལོག་འབདཝ་ཨིན།  "
"ཨང་གྲངས་ཚུ་  ཚིག་ཡིག་དང་གཏན་ཚིག་ཅན་གྱི་གནས་གོང་ཚུ་རྩིས་ནང་བརྩིཝ་ཨིན།  ནང་ཐིག་དེ་གིས་ཚིག་ཡིག་གནས་"
"ཡོདཔ་ཡང་ན་ སྒྲུབ་རྟགས་དེ་གིས་ FALSE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་ གནས་གོང་ཀླད་ཀོར (0)སྦེ་གྱངས་ཁ་"
"བརྐྱབ་ཨིན།  སྒྲུབ་རྟགས་དེ་གིས་TRUEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གཅིག་ (1)སྦེ་གྱངས་ཁ་བརྐྱབ་ཨིན།  ནང་"
"ཐིག་སྟོངམ་ཚུ་གྱངས་ཁ་བརྐྱབ་ནི་མེད་ཟེར་དྲན་འཛིན་འབད།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ཚུ་དང་ཡིག་རྒྱུན་ 11.4, 17.3, \"missing\", 25.9, "
"དང་ 40.1 ཡོད་ཟེར་ང་བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"MINA(A1:A5) equals 0.\n"
"\n"
"@SEEALSO=MIN,MAXA"

#: ../plugins/fn-stat/functions.c:3185
msgid ""
"@FUNCTION=VARA\n"
"@SYNTAX=VARA(number1,number2,...)\n"
"@DESCRIPTION=VARA calculates sample variance of the given sample.\n"
"To get the true variance of a complete population use VARPA.\n"
"VARA is also known as the N-1-variance.\n"
"Under reasonable conditions, it is the maximum-likelihood estimator for the "
"true variance.\n"
"Numbers, text and logical values are included in the calculation too. If the "
"cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"VARA(A1:A5) equals 228.613.\n"
"\n"
"@SEEALSO=VAR,VARPA"
msgstr ""
"@FUNCTION=VARA\n"
"@SYNTAX=VARA(number1,number2,...)\n"
"@DESCRIPTION=VARA དེ་གིས་  བྱིན་ཏེ་ཡོད་པའི་དཔེ་གཞི་གི་དཔེ་གཞི་མི་མཐུན་པ་འདི་བརྩི་བཏོནམ་ཨིན།\n"
"མི་རློབས་ཆ་ཚང་ཅིག་གི་བདེན་པ་མི་མཐུན་པ་ཐོབ་ནི་ལུ་ VARPA འདི་ལག་ལེན་འཐབ་ཨིན།\n"
"VARA འདི་  N-1-མི་མཐུན་པ་སྦེ་ཡང་སླབ་ཨིན།\n"
"རྒྱུ་མཚད་ལྡན་པའི་གནས་སྟངས་ཀྱི་འོག་ལུ་, བདེན་པ་མི་མཐུན་པའི་དོན་ལུ་  མང་མཐའ་སྲིད་པའི་ཕོག་ཚད་དཔག་མི་"
"ཨིན།\n"
"ཨང་གྲངས་ཚུ་, ཚིག་ཡིག་དང་གཞན་ཚིག་གནས་གོང་ཚུ་  བརྩི་ནང་ལུ་ཡང་བཙུགས་ཡོདཔ་ཨིན།  ནང་ཐིག་དེ་གིས་ཚིག་"
"ཡིག་ཡང་ན་  སྒྲུབ་རྟགས་དེ་གིས་ FALSE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གནས་གོང་ཀླད་ཀོར་སྦེ་(0) བརྩིཝ་"
"ཨིན།  སྒྲུབ་རྟགས་འདི་གིས་ TRUEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གཅིག་སྦེ་ (1)བརྩིཝ་ཨིན། ནང་ཐིག་སྟོངམ་ཚུ་"
"གྱངས་ཁ་མ་བརྐྱབ་ཟེར་དྲན་འཛིན་འབད།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་ ཨང་གྲངས་ཚུ་དང་ཡིག་རྒྱུན་ 11.4, 17.3, \"missing\", "
"25.9, དང་ 40.1 ཚུ་ཡོདཔ་སྦེ་བཞག་གེ།  དེ་ལས་\n"
"VARA(A1:A5) equals 228.613.\n"
"\n"
"@SEEALSO=VAR,VARPA"

#: ../plugins/fn-stat/functions.c:3229
msgid ""
"@FUNCTION=VARPA\n"
"@SYNTAX=VARPA(number1,number2,...)\n"
"@DESCRIPTION=VARPA calculates the variance of an entire population.\n"
"VARPA is also known as the N-variance.\n"
"Numbers, text and logical values are included in the calculation too.  If "
"the cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"VARPA(A1:A5) equals 182.8904.\n"
"\n"
"@SEEALSO=VARA,VARP"
msgstr ""
"@FUNCTION=VARPA\n"
"@SYNTAX=VARPA(number1,number2,...)\n"
"@DESCRIPTION=VARPA དེ་གིས་  མི་རློབས་ཧྲིལ་བུ་གི་མི་མཐུན་པ་འདི་རྩིས་བཏོནམ་ཨིན།\n"
"VARPA འདི་ཨེན་-མི་མཐུན་པ་ཟེར་ཡང་སླབ་ཨིན།\n"
"ཨང་གྲངས་ཚུ་, ཚིག་ཡིག་དང་གཏན་ཚིག་ཅན་གྱི་གནས་གོང་ཚུ་  རྩིས་སྟོན་ནི་ནང་གྲངས་སུ་བཙུགས་ཡོད།  ནང་ཐིག་"
"དེ་གིས་ཚིག་ཡིག་གནས་ཡོད་པ་ཅིན་  ཡང་ན་  སྒྲུབ་རྟགས་དེ་གིས་ FALSEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གནས་"
"གོང་ཀླད་ཀོར་སྦེ་གྱངས་ཁ་བརྐྱབ་ཨིན།(0). སྒྲུབ་རྟགས་འདི་གིས་ TRUE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གཅིག་"
"སྦེ་ (1)བརྩིཝ་ཨིན།  ནང་ཐིག་སྟོངམ་ཚུ་གྱངས་ཁ་བརྐྱབ་ནི་མེད་ཟེར་དྲན་འཛིན་འབད།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་  ཨང་གྲངས་ཚུ་དང་ཡིག་རྒྱུན་ 11.4, 17.3, \"missing\", "
"25.9,དང་ 40.1ཚུ་ཡོད་ཟེར་བཞག་གེ། དེ་ལས་\n"
"VARPA(A1:A5) equals 182.8904.\n"
"\n"
"@SEEALSO=VARA,VARP"

#: ../plugins/fn-stat/functions.c:3268
msgid ""
"@FUNCTION=STDEVA\n"
"@SYNTAX=STDEVA(number1,number2,...)\n"
"@DESCRIPTION=STDEVA returns the sample standard deviation of the given "
"sample.\n"
"To obtain the population standard deviation of a whole population use "
"STDEVPA.\n"
"STDEVA is also known as the N-1-standard deviation.\n"
"Under reasonable conditions, it is the maximum-likelihood estimator for the "
"true population standard deviation.\n"
"Numbers, text and logical values are included in the calculation too.  If "
"the cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"STDEVA(A1:A5) equals 15.119953704.\n"
"\n"
"@SEEALSO=STDEV,STDEVPA"
msgstr ""
"@FUNCTION=STDEVA\n"
"@SYNTAX=STDEVA(number1,number2,...)\n"
"@DESCRIPTION=STDEVA དེ་གིས་བྱིན་ཡོད་པའི་དཔེ་གཞི་གི་  དཔེ་གཞི་ཚད་ལྡན་ཁ་སྒྱུར་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"མི་རློབས་ཆ་ཚང་ཅིག་གི་  མི་རློབས་ཚད་ལྡན་ཁ་སྒྱུར་བ་འདི་ལེན་ནི་ལུ་ STDEVPA འདི་ལག་ལེན་འཐབ།\n"
"STDEVA འདི་ ཨེན་-1-ཚད་ལྡན་ཁ་སྒྱུར་བ་ཟེར་ཡང་སླབབ་ཨིན།\n"
"རྒྱུ་མཚན་ལྡན་པའི་གནས་སྟངས་ཚུ་གི་འོག་ལུ་ , མི་རློབས་ཚད་ལྡན་ཁ་སྒྱུར་བ་བདེན་པའི་དོན་ལུ་  མང་མཐའ་སྲིད་"
"པའི་ཕོག་ཚད་འདི་ཨིན།\n"
"ཨང་གྲངས་ཚུ་, ཚིག་ཡིག་དང་གཏན་ཚིག་ཅན་གྱི་གནས་གོང་ཚུ་  རྩིས་ནང་ལུ་བཙུགས་ཏེ་ཡོདཔ་ཨིན།  ནང་ཐིག་དེ་"
"གིས་ཚིག་ཡིག་ཡང་ན་སྒྲུབ་རྟགས་འདི་FALSEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་ ཀླད་ཀོར་ (0)སྦེ་བརྩིཝ་ཨིན།  "
"སྒྲུགས་རྟས་དེ་གིས་ TRUE ལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་ གཅིག་སྦེ་(1)བརྩིཝ་ཨིན།  ནང་ཐིག་སྟོངམ་ཚུ་གྱངས་"
"ཁ་བརྐྱབ་ནིམེད་ཟེར་དྲན་འཛིན་འབད།\n"
"\n"
"*ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགཡུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ཚུ་དང་ཡིག་རྒྱུན་ 11.4, 17.3, \"missing\", 25.9, "
"དང་ 40.1 ཡོད་ཟེར་བཞག་གེ།  དེ་ལས་\n"
"STDEVA(A1:A5) equals 15.119953704.\n"
"\n"
"@SEEALSO=STDEV,STDEVPA"

#: ../plugins/fn-stat/functions.c:3313
msgid ""
"@FUNCTION=STDEVPA\n"
"@SYNTAX=STDEVPA(number1,number2,...)\n"
"@DESCRIPTION=STDEVPA returns the population standard deviation of an entire "
"population.\n"
"This is also known as the N-standard deviation\n"
"Numbers, text and logical values are included in the calculation too.  If "
"the cell contains text or the argument evaluates to FALSE, it is counted as "
"value zero (0).  If the argument evaluates to TRUE, it is counted as one "
"(1).  Note that empty cells are not counted.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers and strings "
"11.4, 17.3, \"missing\", 25.9, and 40.1.  Then\n"
"STDEVPA(A1:A5) equals 13.523697719.\n"
"\n"
"@SEEALSO=STDEVA,STDEVP"
msgstr ""
"@FUNCTION=STDEVPA\n"
"@SYNTAX=STDEVPA(number1,number2,...)\n"
"@DESCRIPTION=STDEVPA དེ་གིས་  མི་རློབས་ཧྲིལ་བུ་གི་ མི་རློབས་ཚད་ལྡན་ཁ་སྒྱུར་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"འདི་  ཨེན་-ཚད་ལྡན་ཁ་སྒྱུར་བ་ཟེར་ཡང་སླབ་ཨིན།\n"
"ཨང་གྲངས་ཚུ་, ཚིག་ཡིག་དང་གཏན་ཚིག་གནས་གོང་ཚུ་  རྩིས་ནང་ལུ་བཙུགས་ཡོདཔ་ཨིན།  ནང་ཐིག་དེ་གིས་  ཚིག་"
"ཡིག་ཡང་ན་ སྒྲུབ་རྟགས་དེ་གིས་FALSEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་  གནས་གོང་ཀླད་ཀོར་(0) སྦེ་བརྩིཝ་"
"ཨིན།  སྒྲུབ་རྟགས་དེ་གིས་ TRUEལུ་བརྟག་ཞིབ་འབད་བ་ཅིན་, འདི་གཅིག་སྦེ་(1) བརྩིཝ་ཨིན།  ནང་ཐིག་སྟོངམ་ཚུ་"
"གྱངས་ཁ་བརྐྱབ་ནི་མེད་ཟེར་དྲན་འཛིན་འབད།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་ ཨང་གྲངས་ཚུ་དང་ཡིག་རྒྱུན་ 11.4, 17.3, \"missing\", 25.9, "
"དང་ 40.1 ཚུ་ཡོདཔ་སྦེ་བཞག་གེ།  དེ་ལས་\n"
"STDEVPA(A1:A5) equals 13.523697719.\n"
"\n"
"@SEEALSO=STDEVA,STDEVP"

#: ../plugins/fn-stat/functions.c:3353
msgid ""
"@FUNCTION=PERCENTRANK\n"
"@SYNTAX=PERCENTRANK(array,x[,significance])\n"
"@DESCRIPTION=PERCENTRANK function returns the rank of a data point in a data "
"set.  @array is the range of numeric values, @x is the data point which you "
"want to rank, and the optional @significance specifies the number of "
"significant digits for the returned value, truncating the remainder.  If "
"@significance is omitted, PERCENTRANK uses three digits.\n"
"\n"
"* If @array contains no data points, PERCENTRANK returns #NUM! error.\n"
"* If @significance is less than one, PERCENTRANK returns #NUM! error.\n"
"* If @x exceeds the largest value or is less than the smallest value in "
"@array, PERCENTRANK returns #NUM! error.\n"
"* If @x does not match any of the values in @array or @x matches more than "
"once, PERCENTRANK interpolates the returned value.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,QUARTILE,SMALL"
msgstr ""
"@FUNCTION=PERCENTRANK\n"
"@SYNTAX=PERCENTRANK(array,x[,significance])\n"
"@DESCRIPTION=PERCENTRANK ལས་འགན་འདི་གིས་ གནས་སྡུད་གཞི་སྒྲིག་ནང་ལུ་  གནས་སྡུད་དོན་ཚན་གྱི་གྲལ་"
"རིམ་འདི་སླར་ལོག་འབདཝ་ཨིན།  @array འདི་  ཨང་གྲངས་ཀྱི་གནས་གོང་ཚུ་གི་གྲལ་རིམ་ཨིན་, @x འདི་ ཁྱོད་"
"ཀྱིས་གྲལ་རིམ་བཟོ་དགོ་པའི་གནས་སྡུད་དོན་ཚན་ཨིནམ་དང་, གདམ་ཁ་ཅན་ @significance དེ་གིས་  སླར་ལོག་"
"འབད་ཡོད་པའི་གནས་གོང་གི་དོན་ལུ་  གལ་ཅན་གྱི་ཨང་ཡིག་གི་ཨང་གྲངས་འདི་གསལ་བཀོད་འབདཝ་ཨིན་  དེ་ཡང་"
"ལྷག་ལུད་ཆུང་ཀུ་བཟོ་ཐོག་ལས་ཨིན།   @significance འདི་སྐྱུར་བཞག་པ་ཅིན་, PERCENTRANK དེ་གིས་ཨང་"
"ཡིག་གསུམ་ལག་ལེན་འཐབ་ཨིན།\n"
"\n"
"* If @array དེ་གིས་  གནས་སྡུད་དོན་ཚན་མེད་པ་ཅིན་, PERCENTRANK དེ་གིས་  #NUM! འཛོལ་བ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @significance འདི་  གཅིག་ལས་ཉུང་པ་ཅིན་, PERCENTRANK དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* If @x གནས་གོང་སྦོམ་འདི་ལུ་ལྷག་པ་ཅིན་  ཡང་ན་  @arrayནང་གི་གནས་གོང་ཆུང་ཀུ་ལས་ཉུང་པ་ཅིན་, "
"PERCENTRANK དེ་གིས་#NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @x འདི་གིས་  @arrayནང་གི་གནས་གོང་ཅི་ཡང་མ་མཐུན་པ་ཅིན་  ཡང་ན་ @xའདི་གིས་གཅིག་ལས་ལྷག་"
"སྟེ་མཐུན་པ་ཅིན་, PERCENTRANK འདི་གིས་སླར་ལོག་འབད་ཡོད་པའི་གནས་གོང་འདི་བསྐྱར་བསྣོན་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,QUARTILE,SMALL"

#: ../plugins/fn-stat/functions.c:3466
msgid ""
"@FUNCTION=PERCENTILE\n"
"@SYNTAX=PERCENTILE(array,k)\n"
"@DESCRIPTION=PERCENTILE function returns the 100*@k-th percentile of the "
"given data points (that is, a number x such that a fraction @k of the data "
"points are less than x).\n"
"\n"
"* If @array is empty, PERCENTILE returns #NUM! error.\n"
"* If @k < 0 or @k > 1, PERCENTILE returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"PERCENTILE(A1:A5,0.42) equals 20.02.\n"
"\n"
"@SEEALSO=QUARTILE"
msgstr ""
"@FUNCTION=PERCENTILE\n"
"@SYNTAX=PERCENTILE(array,k)\n"
"@DESCRIPTION=PERCENTILE ལས་འགན་དེ་གིས་ བྱིན་ཡོད་པའི་གནས་སྡུད་དོན་ཚན་(དེ་ཡང་, ཨང་གྲངས་"
"ཨེགསི་  གནས་སྡུད་དོན་ཚན་ཚུ་གི་བགོ་གྲངས་ @k འདི་ཨེགསི་ལས་ཉུང་མི་)གི་  100*@k-th པར་སིན་ཊཡིལ་འདི་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @array སྟོནམ་ཨིན་པ་ཅིན་, PERCENTILE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @k < 0 or @k > 1ཨིན་པ་ཅིན་, PERCENTILE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་བཞག་"
"གེ།  དེ་ལས་\n"
"PERCENTILE(A1:A5,0.42) equals 20.02.\n"
"\n"
"@SEEALSO=QUARTILE"

#: ../plugins/fn-stat/functions.c:3518
msgid ""
"@FUNCTION=QUARTILE\n"
"@SYNTAX=QUARTILE(array,quart)\n"
"@DESCRIPTION=QUARTILE function returns the quartile of the given data "
"points.\n"
"\n"
"If @quart is equal to: QUARTILE returns:\n"
"0                      the smallest value of @array.\n"
"1                      the first quartile\n"
"2                      the second quartile\n"
"3                      the third quartile\n"
"4                      the largest value of @array.\n"
"\n"
"* If @array is empty, QUARTILE returns #NUM! error.\n"
"* If @quart < 0 or @quart > 4, QUARTILE returns #NUM! error.\n"
"* If @quart is not an integer, it is truncated.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1.  Then\n"
"QUARTILE(A1:A5,1) equals 17.3.\n"
"\n"
"@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,SMALL"
msgstr ""
"@FUNCTION=QUARTILE\n"
"@SYNTAX=QUARTILE(array,quart)\n"
"@DESCRIPTION=QUARTILE ལས་འགན་འདི་གིས་  བྱིན་ཡོད་པའི་གནས་སྡུད་དོན་ཚན་ཚུ་གི་ཀོའིར་ཊཡིལ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"If @quart འདི་མཉམ་པ་ཅིན་: QUARTILE སླར་ལོག་འབདཝ་ཨིན:\n"
"0                       @arrayགི་གནས་གོང་ཆུང་ཀུ་\n"
"1                                         ཀོའིར་ཊཡིལ་དང་པ\n"
"2                                        ཀོའིར་ཊཡིལ་གཉིས་པ་\n"
"3                                         ཀོའིར་ཊཡིལ་གསུམ་པ་\n"
"4                         @arrayགི་གནས་གོང་སྦོམ\n"
"\n"
"* If @array འདི་སྟོངམ་ཨིན་པ་ཅིན་, QUARTILE  དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @quart < 0 ཡང་ན་ @quart > 4ཨིན་པ་ཅིན་, QUARTILE དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* If @quart འདི་ཧྲིལ་གྲངས་མེན་པ་ཅིན་, འདི་ཆུང་ཀུ་བཟོཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་11.4, 17.3, 21.3, 25.9, དང་ 40.1 ཡོདཔ་སྦེ་ང་"
"བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  དེ་ལས་\n"
"QUARTILE(A1:A5,1) equals 17.3.\n"
"\n"
"@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,SMALL"

#: ../plugins/fn-stat/functions.c:3577
msgid ""
"@FUNCTION=FTEST\n"
"@SYNTAX=FTEST(array1,array2)\n"
"@DESCRIPTION=FTEST function returns the two-tailed probability that the "
"variances in the given two data sets are not significantly different.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"FTEST(A1:A5,B1:B5) equals 0.510815017.\n"
"\n"
"@SEEALSO=FDIST,FINV"
msgstr ""
"@FUNCTION=FTEST\n"
"@SYNTAX=FTEST(array1,array2)\n"
"@DESCRIPTION=FTEST ལས་འགན་འདི་གིས་  མཇུག་གཉིས་འབྱུང་སྲིད་པ་འདི་སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  "
"བྱིན་ཏེ་ཡོད་པའི་གནས་སྡུད་གཞི་སྒྲིག་གཉིསཔ་འདི་  གལ་ཅན་སྦེ་སོ་སོ་མེན་པའི་ནང་གི་འགྱུར་བ་ཚུ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་40.1,ཡོདཔ་ དང་ནང་"
"ཐིག་ B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, ཚུ་དང་ 42.7 ཡོདཔ་སྦེ་ང་བཅས་ཚུ་གིས་བཞག་"
"གེ། དེ་ལས་\n"
"FTEST(A1:A5,B1:B5) equals 0.510815017.\n"
"\n"
"@SEEALSO=FDIST,FINV"

#: ../plugins/fn-stat/functions.c:3642
msgid ""
"@FUNCTION=TTEST\n"
"@SYNTAX=TTEST(array1,array2,tails,type)\n"
"@DESCRIPTION=TTEST function returns the probability of a Student's t-Test. \n"
"@array1 is the first data set and @array2 is the second data set.  If @tails "
"is one, TTEST uses the one-tailed distribution and if @tails is two, TTEST "
"uses the two-tailed distribution.  @type determines the kind of the test:\n"
"\n"
"\t1  Paired test\n"
"\t2  Two-sample equal variance\n"
"\t3  Two-sample unequal variance\n"
"\n"
"* If the data sets contain a different number of data points and the test is "
"paired (@type one), TTEST returns the #N/A error.\n"
"* @tails and @type are truncated to integers.\n"
"* If @tails is not one or two, TTEST returns #NUM! error.\n"
"* If @type is any other than one, two, or three, TTEST returns #NUM! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.\n"
"TTEST(A1:A5,B1:B5,2,1) equals 0.006255239.\n"
"TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.\n"
"TTEST(A1:A5,B1:B5,1,3) equals 0.113821797.\n"
"\n"
"@SEEALSO=FDIST,FINV"
msgstr ""
"@FUNCTION=TTEST\n"
"@SYNTAX=TTEST(array1,array2,tails,type)\n"
"@DESCRIPTION=TTEST ལས་འགན་དེ་གིས་  སློབ་ཕྲུག་ཊི་-བརྟག་ཞིབ་གཅིག་གི་འབྱུང་སྲིད་པ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"@array1 འདི་  གནས་སྡུད་དང་པའི་གཞི་སྒྲིག་ཨིནམ་དང་ @array2 འདི་  གནས་སྡུད་གཉིས་པའི་གཞི་སྒྲིག་ཨིན། "
"@tails འདི་གཅིག་ཨིན་, TTEST དེ་གིས་  མཇུག་-གཅིག་བཀྲམ་སྤེལ་འདི་ལག་ལེན་འཐབ་ཨིནམ་དང་ @tails "
"འདི་གཉིས་ཨིན་པ་ཅིན་, TTEST དེ་གིས་མཇུག་-གཉིས་བཀྲམ་སྤེལ་འདི་ལག་ལེན་འཐབ་ཨིན།  @type དེ་གིས་  "
"བརྟག་ཞིབ་ཀྱི་དབྱེ་བ་གཏན་འབེབས་བཟོཝ་ཨིན།:\n"
"\n"
"\t1  བརྟག་ཞིབ་ཆ་བཟོ་ཡོདཔ\n"
"\t2  དཔེ་གཞི་གཉིས་མཉམ་པའི་འགྱུར་ཅན\n"
"\t3  དཔེ་གཞི་-གཉིས་པའི་མི་མཉམ་པའི་འགྱུར་ཅན\n"
"\n"
"* གནས་སྡུད་གཞི་སྒྲིག་དེ་གིས་   གནས་སྡུད་དོན་ཚན་སོ་སོ་ཅིག་ཡོད་པ་ཅིན་  ཡང་ན་  བརྟག་ཞིབ་འདི་ཆ་བཟོ་"
"ཡོད་པ་ཅིན་ (@type one), TTEST དེ་གིས་ #N/འཛོལ་བ་གཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"* @tails དང་ @type ཚུ་  ཧྲིལ་གྲངས་ལུ་ཆུང་ཀུ་བཟོ་ཡོདཔ།\n"
"* If @tails འདི་གཅིག་ཡང་ན་གཉིས་མེན་, TTEST དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @type འདི་ གཅིག་, གཉིས་, ཡང་ན་གསུམ་ལས་གང་རུང་ཅིག་ཨིན་པ་ཅིན་, TTEST དེ་གིས་ #NUM! "
"འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འག་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5 ཚུ་ལུ་  ཨང་གྲངས་11.4, 17.3, 21.3, 25.9, དང་40.1, དང་ནང་"
"ཐིག་ B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, དང་ 42.7ཚུ་ཡོདཔ་སྦེ་བཞག་གེ།  དེ་ལས་\n"
"TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.\n"
"TTEST(A1:A5,B1:B5,2,1) equals 0.006255239.\n"
"TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.\n"
"TTEST(A1:A5,B1:B5,1,3) equals 0.113821797.\n"
"\n"
"@SEEALSO=FDIST,FINV"

#: ../plugins/fn-stat/functions.c:3826
msgid ""
"@FUNCTION=FREQUENCY\n"
"@SYNTAX=FREQUENCY(data_array,bins_array)\n"
"@DESCRIPTION=FREQUENCY function counts how often given values occur within a "
"range of values.  The results are given as an array.\n"
"\n"
"@data_array is a data array for which you want to count the frequencies.  "
"@bin_array is an array containing the intervals into which you want to group "
"the values in data_array.  If the @bin_array is empty, FREQUENCY returns the "
"number of data points in @data_array.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=FREQUENCY\n"
"@SYNTAX=FREQUENCY(data_array,bins_array)\n"
"@DESCRIPTION=FREQUENCY ལས་འགན་འདི་གིས་གནས་གོང་ཚུ་གི་ཁྱབ་ཚད་གཅིག་གི་ནང་འཁོད་ལུ་  བྱིན་ཏེ་"
"ཡོད་པའི་གནས་གོང་དེ་གིས་ག་དེམ་ཅིག་བྱུངམ་ཨིན་ན་གྱངས་ཁ་བརྐྱབ་ཨིན།  གྲུབ་འབྲས་ཚུ་ཨེ་རེ་སྦེ་བྱིན་ཡོདཔ་ཨིན།\n"
"\n"
"@data_array འདི་  ཁྱོད་ཀྱིས་འབྱུང་ཐེངས་འདི་གྱངས་ཁ་བརྐྱབ་དགོ་མིའི་དོན་ལུ་  གནས་སྡུད་ཨེ་རེ་འདི་ཨིན།  "
"@bin_array འདི་  ཁྱོད་ཀྱིས་གནས་གོང་ཚུ་ data_array ནང་སྡེ་ཚན་བཟོ་དགོ་པའི་ནང་  བར་མཚམས་གནས་"
"ཡོད་པའི་ཨེ་རེ་ཅིག་ཨིན།   @bin_array འདི་སྟོངམ་ཨིན་པ་ཅིན་, FREQUENCY དེ་གིས་  གནས་སྡུད་དོན་ཚན་"
"ཚུ་གི་ཨང་གྲངས་འདི་ @data_array ནང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-stat/functions.c:3906
msgid ""
"@FUNCTION=LINEST\n"
"@SYNTAX=LINEST(known_y's[,known_x's[,const[,stat]]])\n"
"@DESCRIPTION=LINEST function calculates the ``least squares'' line that best "
"fit to your data in @known_y's.  @known_x's contains the corresponding x's "
"where y=mx+b.\n"
"\n"
"LINEST returns an array having two columns and one row.  The slope (m) of "
"the regression line y=mx+b is given in the first column and the y-intercept "
"(b) in the second.\n"
"\n"
"If @stat is TRUE, extra statistical information will be returned. Extra "
"statistical information is written below the regression line coefficients in "
"the result array.  Extra statistical information consists of four rows of "
"data.  In the first row the standard error values for the coefficients m1, "
"(m2, ...), b are represented.  The second row contains the square of R and "
"the standard error for the y estimate.  The third row contains the F-"
"observed value and the degrees of freedom.  The last row contains the "
"regression sum of squares and the residual sum of squares.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
"* If @known_y's and @known_x's have unequal number of data points, LINEST "
"returns #NUM! error.\n"
"* If @const is FALSE, the line will be forced to go through the origin, i."
"e., b will be zero. The default is TRUE.\n"
"* The default of @stat is FALSE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGEST,TREND"
msgstr ""
"@FUNCTION=LINEST\n"
"@SYNTAX=LINEST(known_y's[,known_x's[,const[,stat]]])\n"
"@DESCRIPTION=LINEST ལས་འགན་དེ་གིས་  ``least squares'' གྲལ་ཐིག་འདི་ཁྱོད་རའི་གནས་སྡུད་"
"@known_y's ནང་ཚུད་སྒྲིག་འབད་མི་སླར་ལོག་འབདཝ་ཨིན་ @known_x's དེ་གིས་  x's ཆ་མཉམ་པ་y=mx"
"+b ཨིན་མི་འདི་ཡོདཔ་ཨིན།\n"
"\n"
"LINEST དེ་གིས་  ཨེ་རེ་  ཀེར་ཐིག་གཉིས་དང་གྲལ་ཐིག་གཉིས་ཡོད་མི་ཅིག་སླར་ལོག་འབདཝ་ཨིན།  གཡོ་མི་ (m) "
"གི་  དེ་ཡང་  རི་གེ་རེ་ཤཱན་གྲལ་ཐིག་ y=mx+b འདི་ ཀེར་ཐིག་དང་པའི་ནང་བྱིན་ཡོད་མི་འདི་དང་  ཝའི་-འཇབ་"
"འཛིན་ (b) འདི་གཉིས་པའི་ནང་།\n"
"\n"
"If @stat འདི་ TRUE ཨིན་པ་ཅིན་, ཚད་རྩིས་བརྡ་དོན་ཧེང་བཀལ་འདི་སླར་ལོག་འབདཝ་ཨིན།  ཚད་རྩིས་ཧེང་"
"བཀལ་བརྡ་དོན་འདི་  གྲུབ་འབྲས་ཨེ་རེ་ནང་གི་རི་གེ་རེ་ཤཱན་གྲལ་ཐིག་ཕན་ཚུན་ནུས་ཅན་གྱི་འོག་ལུ་ འབྲི་སྟེ་ཡོདཔ་"
"ཨིན།  ཚད་རྩིས་ཧེང་བཞག་བརྡ་དོན་དེ་གིས་  གནས་སྡུད་ཀྱི་གྲལ་ཐིག་བཞི་ཡོདཔ་ཨིན།  གྲལ་ཐིག་དང་པའི་དོན་ལུ་  "
"ཚད་ལྡན་འཛོལ་བ་དེ་གིས་   ཕན་ཚུན་ནུས་ཅན་ m1, (m2, ...)གི་དོན་ལུ་གནས་གོང་འབདཝ་ཨིན་, བའི་ཚུ་"
"ཁྱད་ཚབ་འབད་ཡོདཔ་ཨིན།  གྲལ་ཐིག་གཉིས་པ་དེ་གིས་  ཨར་གྱི་གྲུ་བཞི་དང་  ཝའི་ཕོག་ཚད་ཀྱི་དོན་ལུ་ཚད་ལྡན་"
"འཛོལ་བ་གནས་ཡོདཔ་ཨིན།  གྲལ་ཐིག་གསུམ་པ་དེ་གིས་ ཨེཕ་-ལྟ་ཡོད་པའི་གནས་གོང་དང་  རང་དབང་གི་ཁུག་ཟུར་"
"ཚུ་ཡོདཔ་ཨིན།  མཇུག་གི་གྲལ་ཐིག་དེ་གིས་  གྲུ་བཞི་གི་རི་གེ་རེ་ཤཱན་བསྡོམ་དང་ གྲུ་བཞི་གི་ལྷག་ལུད་བསྡོམ་འདི་"
"ཡོདཔ་ཨིན།\n"
"\n"
"* If @known_x's འདི་སྐྱུར་བཞག་པ་ཅིན་, ཨེ་རེ་ {1, 2, 3, ...} འདི་ལག་ལེན་འཐབ་ཡོདཔ་ཨིན།\n"
"* If @known_y's དང་ @known_x's དེ་ལུ་མི་མཉམ་པའི་གནས་སྡུད་དོན་ཚན་གྱི་ཨང་གྲངས་ཡོདཔ་ཅིན་, "
"LINEST དེ་གིས་#NUM!འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @const འདི་ FALSE ཨིན་པ་ཅིན་, གྲལ་ཐིག་འདི་ངོ་མ་ལས་འགྱོ་ནི་ལུ་བང་བཙོང་འབདཝ་ཨིན་, i."
"e., བི་འདི་ཀླད་ཀོར་ཨིན།  སྔོན་སྒྲིག་འདི་ TRUE.\n"
"* @stat གི་སྔོན་སྒྲིག་འདི་FALSE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGEST,TREND"

#: ../plugins/fn-stat/functions.c:4169
msgid ""
"@FUNCTION=LOGREG\n"
"@SYNTAX=LOGREG(known_y's[,known_x's[,const[,stat]]])\n"
"@DESCRIPTION=LOGREG function transforms your x's to z=ln(x) and applies the "
"``least squares'' method to fit the linear equation\n"
"y = m * z + b \n"
"to your y's and z's --- equivalent to fitting the equation\n"
"y = m * ln(x) + b \n"
"to y's and x's. \n"
"\n"
"If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGREG returns an "
"array having two columns and one row. m is given in the first column and b "
"in the second. \n"
"\n"
"If @known_y's and @known_x's have unequal number of data points, LOGREG "
"returns #NUM! error.\n"
"\n"
"If @const is FALSE, the curve will be forced to go through [1; 0], i.e., b "
"will be zero. The default is TRUE.\n"
"\n"
"If @stat is TRUE, extra statistical information will be returned which "
"applies to the state AFTER transformation to z. Extra statistical "
"information is written below m and b in the result array.  Extra statistical "
"information consists of four rows of data.  In the first row the standard "
"error values for the coefficients m, b are represented.  The second row "
"contains the square of R and the standard error for the y estimate. The "
"third row contains the F-observed value and the degrees of freedom.  The "
"last row contains the regression sum of squares and the residual sum of "
"squares.The default of @stat is FALSE.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGFIT,LINEST,LOGEST"
msgstr ""
"@FUNCTION=LOGREG\n"
"@SYNTAX=LOGREG(known_y's[,known_x's[,const[,stat]]])\n"
"@DESCRIPTION=LOGREG ལས་འགན་འདི་གིས་ ཁྱོད་ཀྱི་ x's to z=ln(x) འདི་གཞི་བསྒྱུར་འབད་ནི་དང་  "
"``least squares''ཐབས་ལམ་འདི་  ཐིག་གི་སྙོམ་རྟགས་ཚུད་སྒྲིག་འབད་ནི་ལུ་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"y = m * z + b \n"
"ཁྱོད་རའི་ y's དང་ z'sལུ་--- སྙོམ་རྟགས་ལུ་ཚུད་སྒྲིག་འབད་ནི་ལུ་འདྲ་མཉམ།\n"
"y = m * ln(x) + b \n"
" y's དང་ x's ལུ། \n"
"\n"
"If @known_x's འདི་སྐྱུར་བཞག་པ་ཅིན་, ཨེ་རེ་ {1, 2, 3, ...} འདི་ལག་ལེན་འཐབ་སྟེ་ཡོད། LOGREG "
"དེ་གིས་  ཀེར་ཐིག་གཉིས་དང་གྲལ་ཐིག་གཅིག་ཡོད་མི་ཨེ་རེ་འདི་སླར་ལོག་འབདཝ་ཨིན།  ཨེམ་འདི་  ཀེར་ཐིག་དང་"
"པའི་ནང་བྱིན་ཡོདཔ་དང་བི་འདི་ གཉིས་པའི་ནང་ཨིན། \n"
"\n"
"If @known_y's དང་ @known_x's དེ་ལུ་  གནས་སྡུད་དོན་ཚན་ཚུ་གི་མི་མཉམ་པའི་ཨང་གྲངས་ཡོད་པ་"
"ཅིན་, LOGREG དེ་གིས་ #NUM!འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"If @const འདི་ FALSE ཨིན་པ་ཅིན་, གུག་གུགཔ་འདི་ [1; 0], i.e.ལས་རྒྱུད་དེ་འགྱོོ་ནི་ལུ་བང་བཙོངམ་"
"ཨིན་, བི་འདི་ཀླད་ཀོར་ཨིན། སྔོན་སྒྲིག་འདི་ TRUE.\n"
"\n"
"If @stat འདི་ TRUEཨིན་པ་ཅིན་, ཚད་རྩིས་བརྡ་དོན་ཧེང་བཀལ་འདི་  སླར་ལོག་འབདཝ་ཨིན་  དེ་ཡང་  "
"གནས་ལུགས་ལུ་འཇུག་སྤྱོད་འབད་མི་ AFTER ཛེརཌི་ལུ་གཞི་བསྒྱུར།  ཚད་རྩིས་བརྡ་དོན་ཧེང་བཀལ་འདི་  ཨེམ་གྱི་འོག་"
"ལུ་འབྲི་ཡོདཔ་དང་བི་འདི་གྲུབ་འབྲས་ཨེ་རེ་ནང་ཨིན།  ཚད་རྩིས་བརྡ་དོན་ཧེང་བཀལ་དེ་གིས་  གནས་སྡུད་ཀྱི་གྲལ་ཐིག་"
"བཞི་ཡོདཔ་ཨིན།  གྲལ་ཐིག་དང་པའི་ནང་  ཚད་ལྡན་འཛོལ་བ་དེ་གིས་ཕན་ཚུན་ནུས་ཅན་གྱི་དོན་ལུ་གནས་གོང་འབདཝ་"
"ཨིན་, བི་ཚུ་ཁྱད་ཚབ་འབད་དེ་ཡོདཔ་ཨིན།  གྲལ་ཐིག་གཉིས་པ་དེ་གིས་  ཨར་གྱི་གྲུ་བཞི་འདི་ཡོདཔ་དང་  ཝའི་ཕོག་"
"ཚད་ཀྱི་དོན་ལུ་ཚད་ལྡན་འཛོལ་བ།  གྲལ་ཐིག་གསུམ་པ་དེ་གིས་ ཨེཕ་ལྟ་ཡོད་པའི་གནས་གོང་དང་ རང་དབང་གི་ཁུག་"
"ཟུར་འདི་ཡོདཔ་ཨིན།  མཇུག་གི་གྲལ་ཐིག་དེ་གིས་  གྲུ་བཞི་གི་རི་གེ་རེ་ཤཱན་བསྡོམ་ཡོདཔ་དང་  གྲུ་བཞི་གི་ལྷག་ལུད་"
"བསྡོམ་ཡོདཔ་ཨིན། @stat གི་སྔོན་སྒྲིག་འདི་ FALSE.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGFIT,LINEST,LOGEST"

#: ../plugins/fn-stat/functions.c:4439
msgid ""
"@FUNCTION=LOGFIT\n"
"@SYNTAX=LOGFIT(known_y's,known_x's)\n"
"@DESCRIPTION=LOGFIT function applies the ``least squares'' method to fit the "
"logarithmic equation\n"
"y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 \n"
"to your data. The graph of the equation is a logarithmic curve moved "
"horizontally by c and possibly mirrored across the y-axis (if sign = -1).\n"
"\n"
"LOGFIT returns an array having five columns and one row. `Sign' is given in "
"the first column, `a', `b', and `c' are given in columns 2 to 4. Column 5 "
"holds the sum of squared residuals.\n"
"\n"
"An error is returned when there are less than 3 different x's or y's, or "
"when the shape of the point cloud is too different from a ``logarithmic'' "
"one.\n"
"\n"
"You can use the above formula \n"
"= a + b * ln(sign * (x - c)) \n"
"or rearrange it to \n"
"= (exp((y - a) / b)) / sign + c \n"
"to compute unknown y's or x's, respectively. \n"
"\n"
"Technically, this is non-linear fitting by trial-and-error. The accuracy of "
"`c' is: width of x-range -> rounded to the next smaller (10^integer), times "
"0.000001. There might be cases in which the returned fit is not the best "
"possible.\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGREG,LINEST,LOGEST"
msgstr ""
"@FUNCTION=LOGFIT\n"
"@SYNTAX=LOGFIT(known_y's,known_x's)\n"
"@DESCRIPTION=LOGFIT ལས་འགན་འདི་གིས་ the ``least squares'' ཐབས་ལམ་འདི་  མཉམ་གྲངས་"
"སྙོམ་རྟགས་ལུ་ཚུད་སྒརིག་འབད་ནི་ལུ་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 \n"
"ཁྱོད་རའི་གནས་སྡུད་ལུ།   སྙོམ་རྟགས་ཀྱི་ཚད་ཁྲམ་འདི་མཉམ་གྲངས་གུག་གུགཔ་  དེ་ཡང་  སི་གིས་ཐད་སྙོམས་སྦེ་སྤོ་"
"བཤུད་འབད་ཡོདཔ་དང་  y-axis (if sign = -1) ལུ་ངོ་འཆར་འབད་ཡོདཔ།\n"
"\n"
"LOGFIT དེ་གིས་  ཀེར་ཐིག་ལྔ་དང་གྲལ་ཐིག་གཅིག་ཡོད་མི་ཨེ་རེ་ཅིག་སླར་ལོག་འབདཝ་ཨིན། `Sign' འདི་ ཀེར་"
"ཐིག་དང་པའི་ནང་བྱིན་ཡོདཔ་ཨིན་ `a', `b', དང་`c' ཚུ་  2 ལས་ 4 ཚུན་བྱིན་ཡོདཔ་ཨིན།  ཀེར་ཐིག་༥་"
"གིས་  གྲུ་བཞི་བཟོ་ཡོདཔ་ལྷག་ལུད་ཚུ་གི་བསྡོམ་འདི་བཞག་བཟང་འབདཝ་ཨིན།\n"
"\n"
"འཛོལ་བ་འདི་ 3 སོ་སོ་ x's ཡང་ན་ y's ལས་ཉུངམ་སྦེ་ཡོདཔ་ད་སླར་ལོག་འབདཝ་ཨིན་, ཡང་ན་  དོན་ཚན་"
"སྤུང་ཡོད་པའི་དབྱིབས་ཡང་``logarithmic'' གཅིག་ལས་སོ་སོ་ཡོདཔ་ད་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"ཁྱོད་ཀྱིས་ལྟག་གི་མན་ངག་འདི་ལག་ལེན་འཐབ། \n"
"= a + b * ln(sign * (x - c)) \n"
"ཡང་ན་ལོག་བདེ་སྒྲིག་བཟོ་ \n"
"= (exp((y - a) / b)) / sign + c \n"
"མ་ཤེས་པའི་ y's ཡངན་ x's,རེ་རེ་སྦེ་རྩིས་བཏོན་ནི་ལུ། \n"
"\n"
"ཐབས་རིག་སྦེ་, འདི་ ཐིག་གི་མེན་པའི་  དོ་འགྲན་དང་འཛོལ་བ་གིས་ཚུད་པའི། `c' གི་འཁྲུལ་མེད་འདི་:  x-"
"range ->གི་རྒྱ་ཚད་ཤུལ་མའི་ཆུང་བ་(10^integer)ཚུ་བསྐོར་སྐྱོད་འབད་ཡོདཔ་, ཚར་ 0.000001. སླར་ལོག་"
"འབད་ཡོད་པའི་ཚུད་སྒྲིག་འདི་སྲིད་པ་ལེགས་ཤོམ་མེན་པའི་གནད་དོན་ཡང་བྱུངམ་ཨིན།\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGREG,LINEST,LOGEST"

#: ../plugins/fn-stat/functions.c:4542
msgid ""
"@FUNCTION=TREND\n"
"@SYNTAX=TREND(known_y's[,known_x's[,new_x's[,const]]])\n"
"@DESCRIPTION=TREND function estimates future values of a given data set "
"using the ``least squares'' line that best fit to your data. @known_y's is "
"the y-values where y=mx+b and @known_x's contains the corresponding x-"
"values.  @new_x's contains the x-values for which you want to estimate the y-"
"values. If @const is FALSE, the line will be forced to go through the "
"origin, i.e., b will be zero.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
"* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
"* If @const is omitted, it is assumed to be TRUE.\n"
"* If @known_y's and @known_x's have unequal number of data points, TREND "
"returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}.\n"
"\n"
"@SEEALSO=LINEST"
msgstr ""
"@FUNCTION=TREND\n"
"@SYNTAX=TREND(known_y's[,known_x's[,new_x's[,const]]])\n"
"@DESCRIPTION=TREND ལས་འགན་འདི་གིས་  ``least squares'' གྲལ་ཐིག་ལག་ལེན་འཐབ་སྟེ་  ཁྱོད་"
"རའི་གནས་སྡུད་ལུ་ལེགས་ཤོམསྦེ་ཚུད་སྒྲིག་འབད་ནི་ལུ་  བྱིན་ཏེ་ཡོད་པའི་གནས་སྡུད་གཞི་སྒྲིག་ཅིག་གི་མ་འོངས་པའི་"
"གནས་གོང་འདི་ཕོག་ཚན་དཔགཔ་ཨིན། @known_y's འདི་  ཝའི་-གནས་གོང་ཨིན་  དེ་ཡང་ y=mx+b དང་ "
"@known_x's ཆ་མཉམ་པའི་གནས་གོང་ཨེགསི་-གནས་གོང་འདི་གནས་ཡོདཔ་ཨིན།  @new_x's དེ་གིས་  ཨེགསི་-"
"གནས་གོང་ཡོདཔ་ཨིན་  དེ་ཡང་  ཁྱོད་ཀྱིས་ཝའི་-གནས་གོང་ཚུ་ཕོག་ཚད་དཔག་དགོ་མི་ཨིན། @const འདི་FALSE "
"ཨིན་པ་ཅིན་, གྲལ་ཐིག་འདི་ངོ་མ་ལས་འགྱོ་ནི་ལུ་བང་བཙོངམ་ཨིན།, i.e., b འདི་ཀླད་ཀོར་ཨིན།\n"
"\n"
"* If @known_x's འདི་སྐྱུར་བཞག་པ་ཅིན་, ཨེ་རེ་ {1, 2, 3, ...} འདི་ལག་ལེན་འཐབ་ཨིན།\n"
"* If @new_x's འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ @known_x's གཅིག་པ་ཨིན་ཟེར་བཞགཔ་ཨིན།\n"
"* If @const འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་ TRUE སྦེ་བཞགཔ་ཨིན།\n"
"* If @known_y's དང་ @known_x's དེ་ལུ་  གནས་སྡུད་དོན་ཚན་ཚུ་ལུ་ཨང་གྲངས་མི་མཉམ་པ་ཡོད་པ་"
"ཅིན་ TREND དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1, དང་ནང་"
"ཐིག་ B1, B2, ... B5 23.2, 25.8, 29.9, 33.5,དང་ 42.7 ཚུ་ཡོདཔ་སྦེ་བཞག་གེ།  དེ་ལས་\n"
"TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}.\n"
"\n"
"@SEEALSO=LINEST"

#: ../plugins/fn-stat/functions.c:4660
msgid ""
"@FUNCTION=LOGEST\n"
"@SYNTAX=LOGEST(known_y's[,known_x's,const,stat])\n"
"@DESCRIPTION=LOGEST function applies the ``least squares'' method to fit an "
"exponential curve of the form\n"
"\n"
"\ty = b * m{1}^x{1} * m{2}^x{2}... to your data.\n"
"\n"
"If @stat is TRUE, extra statistical information will be returned. Extra "
"statistical information is written below the regression line coefficients in "
"the result array.  Extra statistical information consists of four rows of "
"data.  In the first row the standard error values for the coefficients m1, "
"(m2, ...), b are represented.  The second row contains the square of R and "
"the standard error for the y estimate.  The third row contains the F-"
"observed value and the degrees of freedom.  The last row contains the "
"regression sum of squares and the residual sum of squares.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGEST returns "
"an array { m{n},m{n-1}, ...,m{1},b }.\n"
"* If @known_y's and @known_x's have unequal number of data points, LOGEST "
"returns #NUM! error.\n"
"* If @const is FALSE, the line will be forced to go through (0,1),i.e., b "
"will be one.  The default is TRUE.\n"
"* The default of @stat is FALSE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=GROWTH,TREND"
msgstr ""
"@FUNCTION=LOGEST\n"
"@SYNTAX=LOGEST(known_y's[,known_x's,const,stat])\n"
"@DESCRIPTION=LOGEST ལས་འགན་དེ་གིས་   ``least squares'' ཐབས་ལམ་འདི་ རྣམ་པའི་བསྒྱུར་"
"གྲངས་གུག་གུགཔ་ཅིག་ལུ་ཚུད་སྒྲགི་འབད་ནི་ལུ་འཇུག་སྤྱོད་འབདཝ་ཨིན།\n"
"\n"
"\ty = b * m{1}^x{1} * m{2}^x{2}... ཁྱོད་རའི་གནས་སྡུད་ལུ།\n"
"\n"
"If @stat འདི་ TRUE ཨིན་པ་ཅིན་, ཚད་རྩིས་ཀྱི་བརྡ་དོན་འདི་སླར་ལོག་འབདཝ་ཨིན།  ཚད་རྩིས་ཐེབ་ཀྱི་བརྡ་"
"དོན་འདི་  གྲུབ་འབྲས་ཨེ་རེ་ནང་གི་  རི་གེ་རེ་ཤཱན་གྲལ་ཐིག་ཕན་ཚུན་ནུས་ཤུགས་ཀྱི་འོག་ལུ་འབྲི་སྟེ་ཡོདཔ་ཨིན།  "
"ཚད་རྩིས་ཀྱི་བརྡ་དོན་ཐེབ་དེ་གིས་  གནས་སྡུད་ཀྱི་གྲལ་ཐིག་བཞིི་གནས་ཡོདཔ་ཨིན།  གྲལ་ཐིག་དང་པའི་ནང་  ཕན་"
"ཚུན་ནུས་ཤུགས་ m1, (m2, ...) བི་གི་དོན་ལུ་ཚད་ལྡན་འཛོལ་བའི་གནས་གོང་ཚུ་ ཁྱད་ཚབ་འབད་ཡོདཔ་ཨིན།  "
"གྲལ་ཐིག་གཉིས་པ་དེ་གིས་  ཨར་གྱི་གྲུ་བཞི་དང་  ཝའི་ཕོག་ཚད་ཀྱི་དོན་ལུ་ཚད་ལྡན་འཛོལ་བ་འདི་གནས་ཡོདཔ་"
"ཨིན།  གྲལ་ཐིག་གསུམ་པ་དེ་གིས་  ཨེཕ་-བརྟག་དཔྱད་འབད་ཡོད་པའི་གནས་གོང་དང་  རང་དབང་གི་ཁུག་ཟུར་འདི་"
"ཡོདཔ་ཨིན།   མཇུག་གི་གྲལ་ཐིག་དེ་གིས་  གྲུ་བཞི་གི་རི་གེ་རེ་ཤཱན་བསྡོམ་དང་ གྲུ་བཞི་གི་ལྷག་ལུད་ཚུ་གནས་ཏེ་"
"ཡོདཔ་ཨིན།\n"
"\n"
"* If @known_x's འདི་སྐྱུར་བཞག་པ་ཅིན་ ཨེ་རེ་ {1, 2, 3, ...} འདི་ལག་ལེན་འཐབ་ཨིན། LOGEST "
"དེ་གིས་ ཨེ་རེ་ { m{n},m{n-1}, ...,m{1},b }འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @known_y's དང་ @known_x's དེ་ལུ་  གནས་སྡེུད་དོན་ཚན་མི་མཉམ་པ་ཡོད་པ་ཅིན་, LOGEST དེ་"
"གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @const འདི་ FALSEཨིན་པ་ཅིན་,  གྲལ་ཐིག་འདི་ (0,1) ལས་རྒྱུད་དེ་འགྱོ་ནི་ལུ་བང་བཙོང་འབད་"
"འོང་,i.e., b འདི་གཅིག་ཨིནམ་འོང་།  སྔོན་སྒྲིག་འདི་ TRUE ཨིན།\n"
"* @statགི་སྔོན་སྒྲིག་འདི་ FALSEཨིན།\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=GROWTH,TREND"

#: ../plugins/fn-stat/functions.c:4905
msgid ""
"@FUNCTION=GROWTH\n"
"@SYNTAX=GROWTH(known_y's[,known_x's,new_x's,const])\n"
"@DESCRIPTION=GROWTH function applies the ``least squares'' method to fit an "
"exponential curve to your data and predicts the exponential growth by using "
"this curve. \n"
"GROWTH returns an array having one column and a row for each data point in "
"@new_x.\n"
"\n"
"* If @known_x's is omitted, an array {1, 2, 3, ...} is used.\n"
"* If @new_x's is omitted, it is assumed to be the same as @known_x's.\n"
"* If @known_y's and @known_x's have unequal number of data points, GROWTH "
"returns #NUM! error.\n"
"* If @const is FALSE, the line will be forced to go through the origin, i."
"e., b will be zero. The default is TRUE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGEST,GROWTH,TREND"
msgstr ""
"@FUNCTION=GROWTH\n"
"@SYNTAX=GROWTH(known_y's[,known_x's,new_x's,const])\n"
"@DESCRIPTION=GROWTH ལས་འགན་འདི་གིས་  ``least squares'' ཐབས་ལམ་འདི་  ཁྱོད་རའི་གནས་"
"སྡུད་ལུ་  བསྒྱུར་གྲངས་གུག་གུགཔ་ཅིག་ཚུད་སྒྲིག་འབད་ནི་དང་  བསྒྱུར་གྲངས་ཡར་སེང་འདི་གུག་གུགཔ་འདི་ལག་ལེན་"
"འཐབ་སྟེ་སྔོན་བཤད་འབད་ནི་ལུ་  འཇུག་སྤྱོད་འབདཝ་ཨིན། \n"
"GROWTH དེ་གིས་  ཨེ་རེ་ཀེར་ཐིག་གཅིག་ཡོད་མི་འདི་དང་  གྲལ་ཐིག་འདི་@new_xནང་གི་གནས་སྡུད་དོན་ཚན་རེ་"
"རེ་སྦེ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @known_x's འདི་སྐྱུར་བཞག་སྟེ་ཡོད་པ་ཅིན་  ཨེ་རེ་{1, 2, 3, ...} འདི་ལག་ལེན་འཐབ་ཨིན།\n"
"* If @new_x's འདི་སྐྱུར་བཞག་སྟེ་ཡོད་པ་ཅིན་  འདི་ @known_x's གཅིག་པ་སྦེ་བཞགཔ་ཨིན།\n"
"* If @known_y's དང་ @known_x's དེ་ལུ་  གནས་སྡུད་དོན་ཚན་མི་མཉམ་པ་ཡོད་པ་ཅིན་, GROWTH དེ་"
"གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @const འདི་ལུ་ FALSE ཡོད་པ་ཅིན་, གྲལ་ཐིག་འདི་ངོ་མ་ལས་འགྱོ་ནི་ལུ་བང་བཙོངམ་ཨིན།, i.e., "
"b འདི་ཀླད་ཀོར་ཨིན།  སྔོན་སྒྲིག་འདི་TRUE.\n"
"\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO=LOGEST,GROWTH,TREND"

#: ../plugins/fn-stat/functions.c:5020
msgid ""
"@FUNCTION=FORECAST\n"
"@SYNTAX=FORECAST(x,known_y's,known_x's)\n"
"@DESCRIPTION=FORECAST function estimates a future value according to "
"existing values using simple linear regression.  The estimated future value "
"is a y-value for a given x-value (@x).\n"
"\n"
"* If @known_x or @known_y contains no data entries or different number of "
"data entries, FORECAST returns #N/A error.\n"
"* If the variance of the @known_x is zero, FORECAST returns #DIV/0 error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"FORECAST(7,A1:A5,B1:B5) equals -10.859397661.\n"
"\n"
"@SEEALSO=INTERCEPT,TREND"
msgstr ""
"@FUNCTION=FORECAST\n"
"@SYNTAX=FORECAST(x,known_y's,known_x's)\n"
"@DESCRIPTION=FORECAST ལས་འགན་འདི་གིས་  འཇམ་སམ་ཐིག་གི་རི་གེ་རེ་ཤཱན་ལག་ལེན་འཐབ་སྟེ་  གནས་"
"ཡོད་པའི་གནས་གོང་དང་འཁྲིལ་མ་འོངས་པ་སྔོན་རྩིས་བཏོནམ་ཨིན།  སྔོན་རྩིས་བཏོན་ཡོད་པའི་གནས་གོང་འདི་  བྱིན་"
"ཡོད་པའི་ཨེགསི་གནས་གོང་(@x) གི་དོན་ལུ་མ་འོངས་པའི་ཝའི་གནས་གོང་འདི་ཨིན།\n"
"\n"
"* If @known_x or @known_y དེ་གིས་ གནས་སྡུད་འཛུལ་ཞུགས་མེདཔ་དང་ ཡང་ན་  གནས་སྡུད་འཛུལ་ཞུགས་"
"ཀྱི་ཨང་གྲངས་སོ་སོ་ཚུ་ཡོདཔ་ཨིན།FORECAST དེ་གིས་ #N/A འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"*  @known_x གི་མི་མཐུན་པ་འདི་ཀླད་ཀོར་ཨིན་པ་ཅིན་, FORECAST དེ་གིས་ #DIV/0 འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1,དང་ནང་ཐིག་ "
"B1, B2, ... B5 23.2, 25.8, 29.9, 33.5,དང་ 42.7 ཚུ་ཡོདཔ་སྦེ་ང་བཅས་ཚུ་གིས་བསམ་བཞག་"
"གེ།  དེ་ལས་\n"
"FORECAST(7,A1:A5,B1:B5) equals -10.859397661.\n"
"\n"
"@SEEALSO=INTERCEPT,TREND"

#: ../plugins/fn-stat/functions.c:5094
msgid ""
"@FUNCTION=INTERCEPT\n"
"@SYNTAX=INTERCEPT(known_y's,known_x's)\n"
"@DESCRIPTION=INTERCEPT function calculates the point where the linear "
"regression line intersects the y-axis.\n"
"\n"
"* If @known_x or @known_y contains no data entries or different number of "
"data entries, INTERCEPT returns #N/A error.\n"
"* If the variance of the @known_x is zero, INTERCEPT returns #DIV/0 error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"INTERCEPT(A1:A5,B1:B5) equals -20.785117212.\n"
"\n"
"@SEEALSO=FORECAST,TREND"
msgstr ""
"@FUNCTION=INTERCEPT\n"
"@SYNTAX=INTERCEPT(known_y's,known_x's)\n"
"@DESCRIPTION=INTERCEPT ལས་འགན་འདི་གིས་  ཐིག་གི་རིགི་རེ་ཤཱན་གྲལ་ཐིག་གིས་ ཝའི་-ཚད་ཐིག་གི་དོན་"
"ཚན་འདི་རྩིས་བཏོནམ་ཨིན།\n"
"\n"
"* If @known_x or @known_y དེ་གིས་  གནས་སྡུད་འཛུལ་ཞུགས་མེདཔ་དང་ གནས་སྡུད་འཛུལ་ཞུགས་ཀྱི་ཨང་"
"གྲངས་སོ་སོ་གནས་ཏེ་ཡོད་པ་ཅིན་, INTERCEPT དེ་གིས་ #N/A འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"*  @known_x གི་མི་མཐུན་པ་འདི་ཀླད་ཀོར་ཨིན་པ་ཅིན་, INTERCEPT དེ་གིས་#DIV/0 འཛོལ་བ་འདི་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་11.4, 17.3, 21.3, 25.9, དང་ 40.1, དང་ནང་ཐིག་ "
"B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, དང་42.7ཚུ་ཡོདཔ་སྦེ་ང་བཅས་ཚུ་གིས་བསམ་བཞག་གེ།  "
"དེ་ལས\n"
"INTERCEPT(A1:A5,B1:B5) equals -20.785117212.\n"
"\n"
"@SEEALSO=FORECAST,TREND"

#: ../plugins/fn-stat/functions.c:5148
msgid ""
"@FUNCTION=SLOPE\n"
"@SYNTAX=SLOPE(known_y's,known_x's)\n"
"@DESCRIPTION=SLOPE returns the slope of the linear regression line.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, "
"21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, "
"and 42.7.  Then\n"
"SLOPE(A1:A5,B1:B5) equals 1.417959936.\n"
"\n"
"@SEEALSO=STDEV,STDEVPA"
msgstr ""
"@FUNCTION=SLOPE\n"
"@SYNTAX=SLOPE(known_y's,known_x's)\n"
"@DESCRIPTION=SLOPE དེ་གིས་  ཐིག་གི་རི་གེ་རེ་ཤཱན་གྲལ་ཐིག་གི་གཡོ་གཡོཝ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་A1, A2, ..., A5 ཚུ་ལུ་ཨང་གྲངས་ 11.4, 17.3, 21.3, 25.9, དང་ 40.1,དང་ནང་ཐིག་ "
"B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, དང་ 42.7 ཚུ་ཡོདཔ་སྦེ་ང་བཅས་ཚུ་གིས་བསམ་བཞག་"
"གེ།  དེ་ལས་\n"
"SLOPE(A1:A5,B1:B5) equals 1.417959936.\n"
"\n"
"@SEEALSO=STDEV,STDEVPA"

#: ../plugins/fn-stat/functions.c:5196
msgid ""
"@FUNCTION=SUBTOTAL\n"
"@SYNTAX=SUBTOTAL(function_nbr,ref1,ref2,...)\n"
"@DESCRIPTION=SUBTOTAL function returns a subtotal of given list of "
"arguments. @function_nbr is the number that specifies which function to use "
"in calculating the subtotal.\n"
"\n"
"The following functions are available:\n"
"\n"
"\t1   AVERAGE\n"
"\t2   COUNT\n"
"\t3   COUNTA\n"
"\t4   MAX\n"
"\t5   MIN\n"
"\t6   PRODUCT\n"
"\t7   STDEV\n"
"\t8   STDEVP\n"
"\t9   SUM\n"
"\t10   VAR\n"
"\t11   VARP\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, "
"and 39.  Then\n"
"SUBTOTAL(1,A1:A5) equals 30.\n"
"SUBTOTAL(6,A1:A5) equals 22378356.\n"
"SUBTOTAL(7,A1:A5) equals 6.164414003.\n"
"SUBTOTAL(9,A1:A5) equals 150.\n"
"SUBTOTAL(11,A1:A5) equals 30.4.\n"
"\n"
"@SEEALSO=COUNT,SUM"
msgstr ""
"@FUNCTION=SUBTOTAL\n"
"@SYNTAX=SUBTOTAL(function_nbr,ref1,ref2,...)\n"
"@DESCRIPTION=SUBTOTAL ལས་འགན་འདི་གིས་  སྒྲུབ་རྟགས་ཀྱི་ཐོ་ཡིག་གི་ཡན་ལག་བསྡོམ་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིན།@function_nbr འདི་  ཡན་ལག་བསྡོམ་འདི་རྩིས་བཏོནམ་ད་ལས་འགན་ག་འདི་ལག་ལེན་འཐབ་ཨིན་ན་གསལ་"
"བཀོད་འབད་མི་ཨང་གྲངས་འདི་ཨིན།\n"
"\n"
"འོག་གི་ལས་འགན་ཚུ་ཐོབ་ཚུགསཔ་ཨིན:\n"
"\n"
"\t1   AVERAGE\n"
"\t2   COUNT\n"
"\t3   COUNTA\n"
"\t4   MAX\n"
"\t5   MIN\n"
"\t6   PRODUCT\n"
"\t7   STDEV\n"
"\t8   STDEVP\n"
"\t9   SUM\n"
"\t10   VAR\n"
"\t11   VARP\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ནང་ཐིག་ A1, A2, ..., A5ཚུ་ལུ་ཨང་གྲངས་ 23, 27, 28, 33, དང་ 39 ཡོདཔ་སྦེ་ང་བཅས་ཚུ་གིས་"
"བསམ་བཞག་གེ།  དེ་ལས་\n"
"SUBTOTAL(1,A1:A5) equals 30.\n"
"SUBTOTAL(6,A1:A5) equals 22378356.\n"
"SUBTOTAL(7,A1:A5) equals 6.164414003.\n"
"SUBTOTAL(9,A1:A5) equals 150.\n"
"SUBTOTAL(11,A1:A5) equals 30.4.\n"
"\n"
"@SEEALSO=COUNT,SUM"

#: ../plugins/fn-stat/functions.c:5302
msgid ""
"@FUNCTION=CRONBACH\n"
"@SYNTAX=CRONBACH(ref1,ref2,...)\n"
"@DESCRIPTION=CRONBACH returns Cronbach's alpha for the given cases.\n"
"@ref1 is a data set, @ref2 the second data set, etc..\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=CRONBACH\n"
"@SYNTAX=CRONBACH(ref1,ref2,...)\n"
"@DESCRIPTION=CRONBACH དེ་གིས་ བྱིན་ཡོད་པའི་གནད་དོན་གྱི་དོན་ལུ་  ཀོརོན་བེཆསི་ཨལ་ཕ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"@ref1 འདི་  གནས་སྡུད་གཞི་སྒྲིག་ཨིན་, @ref2 འདི་གནས་སྡུད་གཞི་སྒྲིག་གཉིས་པ་ཨིན།, etc..\n"
"@EXAMPLES=\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-stat/functions.c:5424
msgid ""
"@FUNCTION=GEOMDIST\n"
"@SYNTAX=GEOMDIST(k,p,cum)\n"
"@DESCRIPTION=GEOMDIST returns the probability p(k) of obtaining @k from a "
"geometric distribution with probability parameter @p.\n"
"\n"
"* If @k < 0 GEOMDIST returns #NUM! error.\n"
"* If @p < 0 or @p > 1 GEOMDIST returns #NUM! error.\n"
"* If @cum != TRUE and @cum != FALSE GEOMDIST returns #NUM! error.\n"
"\n"
"@EXAMPLES=\n"
"GEOMDIST(2,10.4,TRUE).\n"
"\n"
"@SEEALSO=RANDGEOM"
msgstr ""
"@FUNCTION=GEOMDIST\n"
"@SYNTAX=GEOMDIST(k,p,cum)\n"
"@DESCRIPTION=GEOMDIST དེ་གིས་ འབྱུང་སྲིད་པ་ p(k) འདི་  @k ཐོབ་ནི་ལུ་ འབྱུང་སྲིད་པའི་ཚད་བཟུང་ "
"@pདང་ཅིག་ཁར་  ཐིག་རྩིས་ཀྱི་བཀྲམ་སྤེལ་ཅིག་ལས་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @k < 0 ཨིན་པ་ཅིན་GEOMDIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
"* If @p < 0 ཡང་ན་ @p > 1ཨིན་པ་ཅིན་ GEOMDIST དེ་གིས་ #NUM! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"* If @cum != TRUE དང་ @cum != FALSE GEOMDIST དེ་གིས་ #NUM! འཛོལ་བ་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"GEOMDIST(2,10.4,TRUE).\n"
"\n"
"@SEEALSO=RANDGEOM"

#: ../plugins/fn-stat/functions.c:5463
msgid ""
"@FUNCTION=LOGISTIC\n"
"@SYNTAX=LOGISTIC(x,a)\n"
"@DESCRIPTION=LOGISTIC returns the probability density p(x) at @x for a "
"logistic distribution with scale parameter @a.\n"
"\n"
"@EXAMPLES=\n"
"LOGISTIC(0.4,1).\n"
"\n"
"@SEEALSO=RANDLOGISTIC"
msgstr ""
"@FUNCTION=LOGISTIC\n"
"@SYNTAX=LOGISTIC(x,a)\n"
"@DESCRIPTION=LOGISTIC དེ་གིས་  འབྱུང་སྲིད་པའི་ཤོང་ཚད་ p(x)འདི་ @x ལུ་  ཆ་ཚད་ཚད་བཟུང་@a "
"དང་ཅིག་ཁར་གཏན་ཚིག་གི་བཀྲམ་སྤེལ་གྱི་དོན་ལུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LOGISTIC(0.4,1).\n"
"\n"
"@SEEALSO=RANDLOGISTIC"

#: ../plugins/fn-stat/functions.c:5502
msgid ""
"@FUNCTION=PARETO\n"
"@SYNTAX=PARETO(x,a,b)\n"
"@DESCRIPTION=PARETO returns the probability density p(x) at @x for a Pareto "
"distribution with exponent @a and scale @b.\n"
"\n"
"@EXAMPLES=\n"
"PARETO(0.6,1,2).\n"
"\n"
"@SEEALSO=RANDPARETO"
msgstr ""
"@FUNCTION=PARETO\n"
"@SYNTAX=PARETO(x,a,b)\n"
"@DESCRIPTION=PARETO དེ་གིས་ འབྱུང་སྲིད་པའི་ཤོག་ཚད་p(x) འདི་ @x ལུ་ ཐབས་རིག་ཅན་ @a དང་ཆ་"
"ཚད་ @bདང་ཅིག་ཁར་  པ་རི་ཊོ་གི་དོན་ལུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"PARETO(0.6,1,2).\n"
"\n"
"@SEEALSO=RANDPARETO"

#: ../plugins/fn-stat/functions.c:5543
msgid ""
"@FUNCTION=RAYLEIGH\n"
"@SYNTAX=RAYLEIGH(x,sigma)\n"
"@DESCRIPTION=RAYLEIGH returns the probability density p(x) at @x for a "
"Rayleigh distribution with scale parameter @sigma.\n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGH(0.4,1).\n"
"\n"
"@SEEALSO=RANDRAYLEIGH"
msgstr ""
"@FUNCTION=RAYLEIGH\n"
"@SYNTAX=RAYLEIGH(x,sigma)\n"
"@DESCRIPTION=RAYLEIGH དེ་གིས་  འབྱུང་སྲིད་པའི་ཤོང་ཚད་ p(x) འདི་ @x ལུ་  ཆ་ཚད་ཚད་བཟུང་ "
"@sigma དང་ཅིག་ཁར་  རེ་ལིའི་བཀྲམ་སྤེལ་གྱི་དོན་ལུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGH(0.4,1).\n"
"\n"
"@SEEALSO=RANDRAYLEIGH"

#: ../plugins/fn-stat/functions.c:5586
msgid ""
"@FUNCTION=RAYLEIGHTAIL\n"
"@SYNTAX=RAYLEIGHTAIL(x,a,sigma)\n"
"@DESCRIPTION=RAYLEIGHTAIL returns the probability density p(x) at @x for a "
"Rayleigh tail distribution with scale parameter @sigma and lower limit @a.\n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGHTAIL(0.6,0.3,1).\n"
"\n"
"@SEEALSO=RANDRAYLEIGHTAIL"
msgstr ""
"@FUNCTION=RAYLEIGHTAIL\n"
"@SYNTAX=RAYLEIGHTAIL(x,a,sigma)\n"
"@DESCRIPTION=RAYLEIGHTAIL དེ་གིས་  འབྱུང་སྲིད་པའི་ ཤོང་ཚད་p(x)འདི་ @x ལུ་  ཆ་ཚད་ཚད་བཟུང་"
"@sigma དང་འོག་གི་ཚད་ @aདང་ཅིག་ཁར་  རི་ལིའི་མཇུག་བཀྲམ་སྤེལ་ཅིག་གི་དོན་ལུ་སླར་ལོག་འབདཝ་ཨིན། \n"
"\n"
"@EXAMPLES=\n"
"RAYLEIGHTAIL(0.6,0.3,1).\n"
"\n"
"@SEEALSO=RANDRAYLEIGHTAIL"

#: ../plugins/fn-stat/functions.c:5632
msgid ""
"@FUNCTION=EXPPOWDIST\n"
"@SYNTAX=EXPPOWDIST(x,a,b)\n"
"@DESCRIPTION=EXPPOWDIST returns the probability density p(x) at @x for "
"Exponential Power distribution with scale parameter @a and exponent @b.\n"
"This distribution has been recommended for lifetime analysis when a U-shaped "
"hazard function is desired. This corresponds to rapid failure once the "
"product starts to wear out after a period of steady or even improving "
"reliability.\n"
"@EXAMPLES=\n"
"EXPPOWDIST(0.4,1,2).\n"
"\n"
"@SEEALSO=RANDEXPPOW"
msgstr ""
"@FUNCTION=EXPPOWDIST\n"
"@SYNTAX=EXPPOWDIST(x,a,b)\n"
"@DESCRIPTION=EXPPOWDIST དེ་གིས་  འབྱུང་སྲིད་པའི་ཤོང་ཚད་ p(x)འདི་ @x ལུ་  ཆ་ཚད་ཚད་བཟུང་"
"@a དང་ ཐབས་རིག་ @b དང་ཅིག་ཁར་བསྒྱུར་གྲངས་ནུས་ཤུགས་བཀྲམ་སྤེལ་གྱི་དོན་ལུ་ སླར་ལོག་འབདཝ་ཨིན།\n"
"ཡུ་-དབྱིབས་ཉེན་ཁའི་ལས་འགན་འདི་དགོཔ་ད་  ཚེས་གང་དཔྱད་ཞིབ་ཀྱི་དོན་ལུ་བཀྲམ་སྤེལ་འདི་འོས་སྦྱོར་འབད་ཡོདཔ་"
"ཨིན།  ཐོན་སྐྱེད་དེ་གིས་རྒྱུན་བརྟན་གྱི་དུས་ཡུན་ཡང་ན་རྒྱུན་བརྟན་ཧིང་ལེགས་བཟོ་གི་ཤུལ་ལས་  མེདཔ་འགྱོ་ནི་"
"འགོབཙུགསཔ་ཨིན།\n"
"@EXAMPLES=\n"
"EXPPOWDIST(0.4,1,2).\n"
"\n"
"@SEEALSO=RANDEXPPOW"

#: ../plugins/fn-stat/functions.c:5671
msgid ""
"@FUNCTION=LAPLACE\n"
"@SYNTAX=LAPLACE(x,a)\n"
"@DESCRIPTION=LAPLACE returns the probability density p(x) at @x for Laplace "
"distribution with mean @a. \n"
"@EXAMPLES=\n"
"LAPLACE(0.4,1).\n"
"\n"
"@SEEALSO=RANDLAPLACE"
msgstr ""
"@FUNCTION=LAPLACE\n"
"@SYNTAX=LAPLACE(x,a)\n"
"@DESCRIPTION=LAPLACE དེ་གིས་  འབྱུང་སྲིད་པའི་ཤོང་ཚད་ p(x) འདི་ @x ལུ་  བར་མའི་ཆ་གྲངས་"
"@aདང་ཅིག་ཁར་ལེབ་པེལེསི་བཀྲམ་སྤེལ་གྱི་དོན་ལུ་སླར་ལོག་འབདཝ་ཨིན། \n"
"@EXAMPLES=\n"
"LAPLACE(0.4,1).\n"
"\n"
"@SEEALSO=RANDLAPLACE"

#: ../plugins/fn-string/functions.c:61
msgid ""
"@FUNCTION=CHAR\n"
"@SYNTAX=CHAR(x)\n"
"@DESCRIPTION=CHAR returns the ASCII character represented by the number @x.\n"
"\n"
"@EXAMPLES=\n"
"CHAR(65) equals A.\n"
"\n"
"@SEEALSO=CODE"
msgstr ""
"@FUNCTION=CHAR\n"
"@SYNTAX=CHAR(x)\n"
"@DESCRIPTION=CHAR དེ་གིས་  ཨང་གྲངས་@xགི་ཁྱད་ཚབ་འབད་ཡོད་པའི་ ASCII ཡིད་འབྲུ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CHAR(65) equals A.\n"
"\n"
"@SEEALSO=CODE"

#: ../plugins/fn-string/functions.c:107
msgid ""
"@FUNCTION=UNICHAR\n"
"@SYNTAX=UNICHAR(x)\n"
"@DESCRIPTION=UNICHAR returns the Unicode character represented by the number "
"@x.\n"
"\n"
"@EXAMPLES=\n"
"UNICHAR(65) equals A.\n"
"UNICHAR(960) equals a small Greek pi.\n"
"\n"
"@SEEALSO=CHAR,UNICODE,CODE"
msgstr ""
"@FUNCTION=UNICHAR\n"
"@SYNTAX=UNICHAR(x)\n"
"@DESCRIPTION=UNICHAR དེ་གིས་  ཨང་གྲངས་@xགིས་ཁྱད་ཚབ་འབད་བའི་ཡུ་ནི་ཀོཌི་ཡིག་འབྲུ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"UNICHAR(65) equals A.\n"
"UNICHAR(960) གིརིཀ་པི་ཨའི་ཆུང་ཀུ་ཅིག་ལུ་མཉམ་ཨིན།\n"
"\n"
"@SEEALSO=CHAR,UNICODE,CODE"

#: ../plugins/fn-string/functions.c:142
msgid ""
"@FUNCTION=CODE\n"
"@SYNTAX=CODE(char)\n"
"@DESCRIPTION=CODE returns the ASCII number for the character @char.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CODE(\"A\") equals 65.\n"
"\n"
"@SEEALSO=CHAR"
msgstr ""
"@FUNCTION=CODE\n"
"@SYNTAX=CODE(char)\n"
"@DESCRIPTION=CODE དེ་གིས་  ཡིག་འབྲུ་@charགི་དོན་ལུ་  ASCII ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུནའགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CODE(\"A\") equals 65.\n"
"\n"
"@SEEALSO=CHAR"

#: ../plugins/fn-string/functions.c:190
msgid ""
"@FUNCTION=UNICODE\n"
"@SYNTAX=UNICODE(char)\n"
"@DESCRIPTION=UNICODE returns the Unicode number for the character @char.\n"
"\n"
"\n"
"@EXAMPLES=\n"
"UNICODE(\"A\") equals 65.\n"
"\n"
"@SEEALSO=UNICHAR,CODE,CHAR"
msgstr ""
"@FUNCTION=UNICODE\n"
"@SYNTAX=UNICODE(char)\n"
"@DESCRIPTION=UNICODE དེ་གིས་  ཡིག་འབྲུ་ @char གི་དོན་ལུ་ཡུ་ནི་ཀོཌི་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"\n"
"@EXAMPLES=\n"
"UNICODE(\"A\") equals 65.\n"
"\n"
"@SEEALSO=UNICHAR,CODE,CHAR"

#: ../plugins/fn-string/functions.c:219
msgid ""
"@FUNCTION=EXACT\n"
"@SYNTAX=EXACT(string1, string2)\n"
"@DESCRIPTION=EXACT returns true if @string1 is exactly equal to @string2 "
"(this routine is case sensitive).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"EXACT(\"key\",\"key\") equals TRUE.\n"
"EXACT(\"key\",\"Key\") equals FALSE.\n"
"\n"
"@SEEALSO=LEN, SEARCH, DELTA"
msgstr ""
"@FUNCTION=EXACT\n"
"@SYNTAX=EXACT(string1, string2)\n"
"@DESCRIPTION=EXACT དེ་གིས་  བདེན་པ་སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་@string1 འདི་   "
"@string2 (རྒྱུན་ལམ་འདི་གནད་དོན་དྲན་ཚོར་ཨིན)ལུ་ངེས་ཏིག་སྦེ་རང་མཉམ་པ་ཡོད་པ་ཅིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"EXACT(\"key\",\"key\") equals TRUE.\n"
"EXACT(\"key\",\"Key\") equals FALSE.\n"
"\n"
"@SEEALSO=LEN, SEARCH, DELTA"

#: ../plugins/fn-string/functions.c:247
msgid ""
"@FUNCTION=LEN\n"
"@SYNTAX=LEN(string)\n"
"@DESCRIPTION=LEN returns the length in characters of the string @string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LEN(\"Helsinki\") equals 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LENB"
msgstr ""
"@FUNCTION=LEN\n"
"@SYNTAX=LEN(string)\n"
"@DESCRIPTION=LEN དེ་གིས་  ཡིག་རྒྱུན་ @string གི་ཡིག་འབྲུའི་ནང་གི་རིང་ཚད་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* ལས་འགན་འདིཨེགསི་སེལ་འཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LEN(\"Helsinki\") equals 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LENB"

#: ../plugins/fn-string/functions.c:271
msgid ""
"@FUNCTION=LENB\n"
"@SYNTAX=LENB(string)\n"
"@DESCRIPTION=LENB returns the length in bytes of the string @string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LENB(\"Helsinki\") equals 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LEN"
msgstr ""
"@FUNCTION=LENB\n"
"@SYNTAX=LENB(string)\n"
"@DESCRIPTION=LENB དེ་གིས་ ཡིག་རྒྱུན་ @string གི་བཱའིཊི་ནང་གི་རིང་ཚད་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LENB(\"Helsinki\") equals 8.\n"
"\n"
"@SEEALSO=CHAR, CODE, LEN"

#: ../plugins/fn-string/functions.c:296
msgid ""
"@FUNCTION=LEFT\n"
"@SYNTAX=LEFT(text[,num_chars])\n"
"@DESCRIPTION=LEFT returns the leftmost @num_chars characters or the left "
"character if @num_chars is not specified.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LEFT(\"Directory\",3) equals \"Dir\".\n"
"\n"
"@SEEALSO=MID, RIGHT"
msgstr ""
"@FUNCTION=LEFT\n"
"@SYNTAX=LEFT(text[,num_chars])\n"
"@DESCRIPTION=LEFT དེ་གིས་  གཡོན་པའི་@num_chars ཡིག་འབྲུ་ཚུ་ཡང་ན་ གཡོན་གྱི་ཡིག་འབྲུ་ཚུ་སླར་ལོག་"
"འབདཝ་ཨིན། @num_chars འདི་གསལ་བཀོད་མ་འབད་བམར་ཡོད་པ་ཅིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LEFT(\"Directory\",3) equals \"Dir\".\n"
"\n"
"@SEEALSO=MID, RIGHT"

#: ../plugins/fn-string/functions.c:333
msgid ""
"@FUNCTION=LOWER\n"
"@SYNTAX=LOWER(text)\n"
"@DESCRIPTION=LOWER returns a lower-case version of the string in @text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"LOWER(\"J. F. Kennedy\") equals \"j. f. kennedy\".\n"
"\n"
"@SEEALSO=UPPER"
msgstr ""
"@FUNCTION=LOWER\n"
"@SYNTAX=LOWER(text)\n"
"@DESCRIPTION=LOWER དེ་གིས་ @text ནང་གི་ཡིག་རྒྱུན་གྱི་མགྱོགས་ཡིག་ཐོན་རིམ་ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"LOWER(\"J. F. Kennedy\") equals \"j. f. kennedy\".\n"
"\n"
"@SEEALSO=UPPER"

#: ../plugins/fn-string/functions.c:358
msgid ""
"@FUNCTION=MID\n"
"@SYNTAX=MID(string, position, length)\n"
"@DESCRIPTION=MID returns a substring from @string starting at @position for "
"@length characters.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"MID(\"testing\",2,3) equals \"est\".\n"
"\n"
"@SEEALSO=LEFT, RIGHT"
msgstr ""
"@FUNCTION=MID\n"
"@SYNTAX=MID(string, position, length)\n"
"@DESCRIPTION=MID དེ་གིས་  @string འདོ་བཙུགས་ལས་ཡིག་རྒྱུན་ཡན་ལག་འདི་ @positionལུ་   "
"@lengthཡིག་འབྲུའི་དོན་ལུ་སླར་ལོག་འབདཝ་ཨིན། \n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"MID(\"testing\",2,3) equals \"est\".\n"
"\n"
"@SEEALSO=LEFT, RIGHT"

#: ../plugins/fn-string/functions.c:403
msgid ""
"@FUNCTION=RIGHT\n"
"@SYNTAX=RIGHT(text[,num_chars])\n"
"@DESCRIPTION=RIGHT returns the rightmost @num_chars characters or the right "
"character if @num_chars is not specified.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"RIGHT(\"end\") equals \"d\".\n"
"RIGHT(\"end\",2) equals \"nd\".\n"
"\n"
"@SEEALSO=MID, LEFT"
msgstr ""
"@FUNCTION=RIGHT\n"
"@SYNTAX=RIGHT(text[,num_chars])\n"
"@DESCRIPTION=RIGHT དེ་གིས་  བདེན་པའི་ @num_chars ཡིག་འབྲུ་ཚུ་ཡང་ན་ཨིན་པའི་ཡིག་འབྲུ་ཚུ་སླར་"
"ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ @num_chars འདི་གསལ་བཀོད་མ་འབད་བར་ཡོད་པ་ཅིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"RIGHT(\"end\") equals \"d\".\n"
"RIGHT(\"end\",2) equals \"nd\".\n"
"\n"
"@SEEALSO=MID, LEFT"

#: ../plugins/fn-string/functions.c:445
msgid ""
"@FUNCTION=UPPER\n"
"@SYNTAX=UPPER(text)\n"
"@DESCRIPTION=UPPER returns a upper-case version of the string in @text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"UPPER(\"cancelled\") equals \"CANCELLED\".\n"
"\n"
"@SEEALSO=LOWER"
msgstr ""
"@FUNCTION=UPPER\n"
"@SYNTAX=UPPER(text)\n"
"@DESCRIPTION=UPPER དེ་གིས་ @text ཚིག་ཡིག་ནང་ཡིག་རྒྱུན་གྱི་ཚུགས་ཡིག་ཐོན་རིམ་ཅིག་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"UPPER(\"cancelled\") equals \"CANCELLED\".\n"
"\n"
"@SEEALSO=LOWER"

#: ../plugins/fn-string/functions.c:470
msgid ""
"@FUNCTION=CONCATENATE\n"
"@SYNTAX=CONCATENATE(string1[,string2...])\n"
"@DESCRIPTION=CONCATENATE returns the string obtained by concatenation of the "
"given strings.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CONCATENATE(\"aa\",\"bb\") equals \"aabb\".\n"
"\n"
"@SEEALSO=LEFT, MID, RIGHT"
msgstr ""
"@FUNCTION=CONCATENATE\n"
"@SYNTAX=CONCATENATE(string1[,string2...])\n"
"@DESCRIPTION=CONCATENATE དེ་གིས་  བྱིན་ཡོད་པའི་ཡིག་རྒྱུན་ཚུ་གི་རིམ་པ་གིས་  ཐོབ་པའི་ཡིག་རྒྱུན་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CONCATENATE(\"aa\",\"bb\") equals \"aabb\".\n"
"\n"
"@SEEALSO=LEFT, MID, RIGHT"

#: ../plugins/fn-string/functions.c:498
msgid ""
"@FUNCTION=REPT\n"
"@SYNTAX=REPT(string,num)\n"
"@DESCRIPTION=REPT returns @num repetitions of @string.\n"
"\n"
"* This function is Excel compatible.\n"
" \n"
"@EXAMPLES=\n"
"REPT(\".\",3) equals \"...\".\n"
"\n"
"@SEEALSO=CONCATENATE"
msgstr ""
"@FUNCTION=REPT\n"
"@SYNTAX=REPT(string,num)\n"
"@DESCRIPTION=REPT དེ་གིས་ @stringགི་@num བསྐྱར་ཟློས་ཚུ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
" \n"
"@EXAMPLES=\n"
"REPT(\".\",3) equals \"...\".\n"
"\n"
"@SEEALSO=CONCATENATE"

#: ../plugins/fn-string/functions.c:548
msgid ""
"@FUNCTION=CLEAN\n"
"@SYNTAX=CLEAN(string)\n"
"@DESCRIPTION=CLEAN removes any non-printable characters from @string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"CLEAN(\"one\"\\&char(7)) equals \"one\".\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=CLEAN\n"
"@SYNTAX=CLEAN(string)\n"
"@DESCRIPTION=CLEAN དེ་གིས་  @string ལས་དཔར་བསྐྲུན་འབད་མ་བཏུབ་པའི་ཡིག་འབྲུ་གང་རུང་རྩ་བསྐྲད་"
"གཏངམ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CLEAN(\"one\"\\&char(7)) equals \"one\".\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-string/functions.c:584
msgid ""
"@FUNCTION=FIND\n"
"@SYNTAX=FIND(string1,string2[,start])\n"
"@DESCRIPTION=FIND returns position of @string1 in @string2 (case-sensitive), "
"searching only from character @start onwards (assuming 1 if omitted).\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FIND(\"ac\",\"Jack\") equals 2.\n"
"\n"
"@SEEALSO=EXACT, LEN, MID, SEARCH"
msgstr ""
"@FUNCTION=FIND\n"
"@SYNTAX=FIND(string1,string2[,start])\n"
"@DESCRIPTION=FIND དེ་གིས་  @string1 གནས་ས་འདི་ @string2 (གནད་དོན་-དྲན་ཚོར་ཅན་)ནང་"
"ལུ་, ཡིག་འབྲུ་ @startལས་འགོ་བཟུང་སྟེ་(སྐྱུར་བཞག་སྟེ་ཡོད་པ་ཅིན་ ༡་ སྦེ་བཞག་ཐོག་ལུ་) ལས་རྐྱངམ་ཅིག་"
"འཚོལ་ཞིབ་འབད་ཐོག་ལས་སླར་ལོག་འབདཝ་ཨིན། \n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FIND(\"ac\",\"Jack\") equals 2.\n"
"\n"
"@SEEALSO=EXACT, LEN, MID, SEARCH"

#: ../plugins/fn-string/functions.c:628
msgid ""
"@FUNCTION=FIXED\n"
"@SYNTAX=FIXED(num,[decimals, no_commas])\n"
"@DESCRIPTION=FIXED returns @num as a formatted string with @decimals numbers "
"after the decimal point, omitting commas if requested by @no_commas.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"FIXED(1234.567,2) equals \"1,234.57\".\n"
"\n"
"@SEEALSO=TEXT, VALUE, DOLLAR"
msgstr ""
"@FUNCTION=FIXED\n"
"@SYNTAX=FIXED(num,[decimals, no_commas])\n"
"@DESCRIPTION=FIXED དེ་གིས་  @num འདི་རྩ་སྒྲིག་འབད་ཡོད་པའི་ཡིག་རྒྱུན་ཅིག་སྦེ་ བཅུ་ཚག་དོན་ཚན་གྱི་"
"ཤུལ་ལས་ @decimals ཨང་གྲངས་ཚུ་དང་ཅིག་ཁར་ @no_commas  ཚུ་གིས་ཞུ་བ་འབད་དེ་ཡོད་པ་ཅིན་ལྷོད་"
"རྟགས་ཚུ་སྐྱུར་བཞག་སྟེ་ སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"FIXED(1234.567,2) equals \"1,234.57\".\n"
"\n"
"@SEEALSO=TEXT, VALUE, DOLLAR"

#: ../plugins/fn-string/functions.c:694
msgid ""
"@FUNCTION=PROPER\n"
"@SYNTAX=PROPER(string)\n"
"@DESCRIPTION=PROPER returns @string with initial of each word capitalised.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"PROPER(\"j. f. kennedy\") equals \"J. F. Kennedy\".\n"
"\n"
"@SEEALSO=LOWER, UPPER"
msgstr ""
"@FUNCTION=PROPER\n"
"@SYNTAX=PROPER(string)\n"
"@DESCRIPTION=PROPER དེ་གིས་ @string འདི་  མིང་ཚིག་རེ་རེ་ཚུགས་ཡིག་གི་འགོ་ཐོག་དང་ཅིག་ཁར་སླར་"
"ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"PROPER(\"j. f. kennedy\") equals \"J. F. Kennedy\".\n"
"\n"
"@SEEALSO=LOWER, UPPER"

#: ../plugins/fn-string/functions.c:749
msgid ""
"@FUNCTION=REPLACE\n"
"@SYNTAX=REPLACE(old,start,num,new)\n"
"@DESCRIPTION=REPLACE returns @old with @new replacing @num characters from "
"@start.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"REPLACE(\"testing\",2,3,\"*****\") equals \"t*****ing\".\n"
"\n"
"@SEEALSO=MID, SEARCH, SUBSTITUTE, TRIM"
msgstr ""
"@FUNCTION=REPLACE\n"
"@SYNTAX=REPLACE(old,start,num,new)\n"
"@DESCRIPTION=REPLACE དེ་གིས་ @old འདི་@new དང་ཅིག་ཁར་ @num ཡིག་འབྲུལ་ཚུ་@startལས་ཚབ་"
"བཙུགས་ཐོག་ལས་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"REPLACE(\"testing\",2,3,\"*****\") equals \"t*****ing\".\n"
"\n"
"@SEEALSO=MID, SEARCH, SUBSTITUTE, TRIM"

#: ../plugins/fn-string/functions.c:805
msgid ""
"@FUNCTION=T\n"
"@SYNTAX=T(value)\n"
"@DESCRIPTION=T returns @value if and only if it is text, otherwise a blank "
"string.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"T(\"text\") equals \"text\".\n"
"T(64) returns an empty cell.\n"
"\n"
"@SEEALSO=CELL, N, VALUE"
msgstr ""
"@FUNCTION=T\n"
"@SYNTAX=T(value)\n"
"@DESCRIPTION=T དེ་གིས་ @value འདི་སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ ཚིག་ཡིག་ཨིན་པ་ཅིན་རྐྱངམ་"
"ཅིག་  དེ་མེན་པ་ཅིན་ཡིག་རྒྱུན་སྟོངམ། \n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུ་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"T(\"text\") equals \"text\".\n"
"T(64) returns an empty cell.\n"
"\n"
"@SEEALSO=CELL, N, VALUE"

#: ../plugins/fn-string/functions.c:836
msgid ""
"@FUNCTION=TEXT\n"
"@SYNTAX=TEXT(value,format_text)\n"
"@DESCRIPTION=TEXT returns @value as a string with the specified format.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TEXT(3.223,\"$0.00\") equals \"$3.22\".\n"
"TEXT(date(1999,4,15),\"mmmm, dd, yy\") equals \"April, 15, 99\".\n"
"\n"
"@SEEALSO=DOLLAR, FIXED, VALUE"
msgstr ""
"@FUNCTION=TEXT\n"
"@SYNTAX=TEXT(value,format_text)\n"
"@DESCRIPTION=TEXT དེ་གིས་ @value འདི་གསལ་བཀོད་འབད་དེ་ཡོད་མི་རྩ་སྒྲིག་དང་ཅིག་ཁར་ཡིག་རྒྱུན་སྦེ་"
"སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TEXT(3.223,\"$0.00\") equals \"$3.22\".\n"
"TEXT(date(1999,4,15),\"mmmm, dd, yy\") equals \"April, 15, 99\".\n"
"\n"
"@SEEALSO=DOLLAR, FIXED, VALUE"

#: ../plugins/fn-string/functions.c:894
msgid ""
"@FUNCTION=TRIM\n"
"@SYNTAX=TRIM(text)\n"
"@DESCRIPTION=TRIM returns @text with only single spaces between words.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"TRIM(\"  a bbb  cc\") equals \"a bbb cc\".\n"
"\n"
"@SEEALSO=CLEAN, MID, REPLACE, SUBSTITUTE"
msgstr ""
"@FUNCTION=TRIM\n"
"@SYNTAX=TRIM(text)\n"
"@DESCRIPTION=TRIM དེ་གིས་ @text འདི་ མིང་ཚིག་ཚུ་གི་བར་ནའི་བར་སྟོང་རྐྱང་པ་ཚུ་དང་ཅིག་ཁར་རྐྱངམ་"
"ཅིག་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"TRIM(\"  a bbb  cc\") equals \"a bbb cc\".\n"
"\n"
"@SEEALSO=CLEAN, MID, REPLACE, SUBSTITUTE"

#: ../plugins/fn-string/functions.c:948
msgid ""
"@FUNCTION=VALUE\n"
"@SYNTAX=VALUE(text)\n"
"@DESCRIPTION=VALUE returns numeric value of @text.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"VALUE(\"$1,000\") equals 1000.\n"
"\n"
"@SEEALSO=DOLLAR, FIXED, TEXT"
msgstr ""
"@FUNCTION=VALUE\n"
"@SYNTAX=VALUE(text)\n"
"@DESCRIPTION=VALUE དེ་གིས་ @text གི་ཨང་གྲངས་ཀྱི་གནས་གོང་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"VALUE(\"$1,000\") equals 1000.\n"
"\n"
"@SEEALSO=DOLLAR, FIXED, TEXT"

#: ../plugins/fn-string/functions.c:988
msgid ""
"@FUNCTION=SUBSTITUTE\n"
"@SYNTAX=SUBSTITUTE(text, old, new [,num])\n"
"@DESCRIPTION=SUBSTITUTE replaces @old with @new in @text.  Substitutions are "
"only applied to instance @num of @old in @text, otherwise every one is "
"changed.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SUBSTITUTE(\"testing\",\"test\",\"wait\") equals \"waiting\".\n"
"\n"
"@SEEALSO=REPLACE, TRIM"
msgstr ""
"@FUNCTION=SUBSTITUTE\n"
"@SYNTAX=SUBSTITUTE(text, old, new [,num])\n"
"@DESCRIPTION=SUBSTITUTE དེ་གིས་ @old འདི་ @new དང་ཅིག་ཁར་ @text ནང་ལུ་ཚབ་བཙུགས་"
"འབདཝ་ཨིན།  ཚབ་མ་ཚུ་དུས་སྐབས་ @num འདི་ཡང་ @old གི་ @textནང་ལུ་རྐྱངམ་ཅིག་འཇུག་སྤྱོད་འབདཝ་"
"ཨིན་, དེ་མེན་པ་ཅིན་ག་ར་བསྒྱུར་བཅོས་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SUBSTITUTE(\"testing\",\"test\",\"wait\") equals \"waiting\".\n"
"\n"
"@SEEALSO=REPLACE, TRIM"

#: ../plugins/fn-string/functions.c:1066
msgid ""
"@FUNCTION=DOLLAR\n"
"@SYNTAX=DOLLAR(num[,decimals])\n"
"@DESCRIPTION=DOLLAR returns @num formatted as currency.\n"
"\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"DOLLAR(12345) equals \"$12,345.00\".\n"
"\n"
"@SEEALSO=FIXED, TEXT, VALUE"
msgstr ""
"@FUNCTION=DOLLAR\n"
"@SYNTAX=DOLLAR(num[,decimals])\n"
"@DESCRIPTION=DOLLAR དེ་གིས་ @num དངུལ་སྦེ་རྩ་སྒྲིག་འབད་ཡོད་མི་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགཡ྄ར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"DOLLAR(12345) equals \"$12,345.00\".\n"
"\n"
"@SEEALSO=FIXED, TEXT, VALUE"

#: ../plugins/fn-string/functions.c:1144
msgid ""
"@FUNCTION=SEARCH\n"
"@SYNTAX=SEARCH(search_string,text[,start_num])\n"
"@DESCRIPTION=SEARCH returns the location of the @search_ string within "
"@text. The search starts  with the @start_num character of text @text.  If "
"@start_num is omitted, it is assumed to be one.  The search is not case "
"sensitive.\n"
"\n"
"@search_string can contain wildcard characters (*) and question marks (?). A "
"question mark matches any character and a wildcard matches any string "
"including the empty string.  If you want the actual wildcard or question "
"mark to be found, use tilde (~) before the character.\n"
"\n"
"* If @search_string is not found, SEARCH returns #VALUE! error.\n"
"* If @start_num is less than one or it is greater than the length of @text, "
"SEARCH returns #VALUE! error.\n"
"* This function is Excel compatible.\n"
"\n"
"@EXAMPLES=\n"
"SEARCH(\"c\",\"Cancel\") equals 1.\n"
"SEARCH(\"c\",\"Cancel\",2) equals 4.\n"
"\n"
"@SEEALSO=FIND"
msgstr ""
"@FUNCTION=SEARCH\n"
"@SYNTAX=SEARCH(search_string,text[,start_num])\n"
"@DESCRIPTION=SEARCH དེ་གིས་ @search_ stringགི་གནས་ཁོངས་འདི་ @text གི་ནང་འཁོད་སླར་ལོག་"
"འབདཝ་ཨིན།  འཚོལ་ཞིབ་འདི་ ཡང་ཚིག་ཡིག་ @text གི་ @start_num ཡིག་འབྲུ་དང་ཅིག་ཁར་འགོ་བཙུགསཔ་"
"ཨིན།  @start_num འདི་སྐྱུར་བཞག་པ་ཅིན་, འདི་གཅིག་ཨིན་ཟེར་བཞགཔ་ཨིན།  འཚོལ་ཞིབ་འདི་གནད་དོན་དྲན་"
"ཚོར་ཅན་མེན།\n"
"\n"
"@search_string དེ་གིས་ ཝའིལ་ཀཌི་ཡིག་འབྲུ་ (*) གནས་ཚུགསཔ་དང་  དྲི་རྟགས་(?) ཚུ་གནས་ཚུགས།  དྲི་"
"རྟགས་དེ་གིས་ཡིག་འབྲུ་གང་རུང་མཐུན་ནི་དང་ ཝའིལ་ཀཌི་དེ་གིས་  ཡིག་རྒྱུན་སྟོངམ་བརྩི་སྟེ་ཡིག་རྒྱུན་གང་རུང་མཐུན་"
"ཚུགས།  ཁྱོད་ལུ་ཝིལ་ཀཌི་ངོ་མ་ཡང་ན་ཐོབ་ནི་ལུ་དྲི་རྟགས་དགོ་པ་ཅིན་  སྣ་སྒྲ་ཅན་གྱི་རྟགས་(~)འདི་ཡིག་འབྲུའི་ཧེ་"
"མ་ལག་ལེན་འཐབ།\n"
"\n"
"* If @search_string འདི་ཐོབ་མ་ཚུགས་པ་ཅིན་, SEARCH དེ་གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"* If @start_num འདི་གཅིག་ལས་ཉུང་མི་ཡང་ན་  @textགི་རིང་ཚད་ལས་སྦོམ་ཨིན་པ་ཅིན་, SEARCH དེ་"
"གིས་  #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"* ལས་འགན་འདི་ཨེགསི་སེལ་མཐུན་འགྱུར་ཅན་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"SEARCH(\"c\",\"Cancel\") equals 1.\n"
"SEARCH(\"c\",\"Cancel\",2) equals 4.\n"
"\n"
"@SEEALSO=FIND"

#: ../plugins/fn-string/functions.c:1221
msgid ""
"@FUNCTION=ASC\n"
"@SYNTAX=ASC(string)\n"
"@DESCRIPTION=ASC a compatibility function that is meaningless in Gnumeric.  "
"In MS Excel (tm) it converts 2 byte @string into single byte text.\n"
"\n"
"@EXAMPLES=\n"
"CHAR(\"Foo\") equals \"Foo\".\n"
"\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=ASC\n"
"@SYNTAX=ASC(string)\n"
"@DESCRIPTION=ASC ཇི་ནུ་མི་རིག་ནང་  དོན་མེད་པའི་མཐུན་འགྱུར་ཅན་ལས་འགན་ཅིག།  ཨེམ་ཨེསི་ཨེགསི་སེལ་"
"ནང་ (tm) བཱའིཊི་ ༢་ @stringའདི་བཱའིཊི་རྐྱང་པའི་ཚིག་ཡིག་ནང་གཞི་བསྒྱུར་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"CHAR(\"Foo\") equals \"Foo\".\n"
"\n"
"@SEEALSO="

#: ../plugins/fn-tsa/functions.c:321
msgid ""
"@FUNCTION=interpolation\n"
"@SYNTAX=interpolation(abscissas,ordinates,targets[,interpolation])\n"
"@DESCRIPTION= \n"
"interpolation returns interpolated values corresponding\n"
"to the given abscissa targets as a one column matrix.\n"
"\n"
"@abscissas are the absicssas of the data to interpolate.\n"
"@ordinates are the ordinates of the data to interpolate.\n"
"* Strings and empty cells in @abscissas and @ordinates are simply ignored.\n"
"@targets are the abscissas of the interpolated data. If several data\n"
"are provided, they must be in the same column, in consecutive cells\n"
"@interpolation is the method to be used for the interpolation;\n"
"possible values are:\n"
"- 0: linear;\n"
"- 1: linear with averaging;\n"
"- 2: staircase;\n"
"- 3: staircase with averaging;\n"
"- 4: natural cubic spline;\n"
"- 5: natural cubic spline with averaging.\n"
"\n"
"If an averaging method is used, the number of returned values\n"
"is one less than the number of targets since the evaluation is made by\n"
"averaging the interpolation over the interval between two consecutive data;\n"
"in that case, the targets values must be given in increasing order."
msgstr ""

#: ../plugins/fn-tsa/functions.c:607
msgid ""
"@FUNCTION=periodogram\n"
"@SYNTAX=periodogram(ordinates,[filter,[abscissas,[interpolation,"
"[number]]]])\n"
"@DESCRIPTION= \n"
"periodogram returns the periodogram of the data\n"
"as a one column matrix.\n"
"\n"
"@ordinates are the ordinates of the data to interpolate.\n"
"@filter gives the window function to  be used. Possible values are:\n"
"- 0: no filter (rectangular window);\n"
"- 1: Bartlett (triangular window);\n"
"- 2: Hahn (cosine window);\n"
"- 3: Welch (parabolic window);\n"
"@abscissas are the absicssas of the data to interpolate. If no\n"
"abscissa is given, it is supposed that the data absicssas are regularly\n"
"spaced. Otherwise, an interpolation method will be used to evaluate\n"
"regularly spaced data.\n"
"* Strings and empty cells in @abscissas and @ordinates are simply ignored.\n"
"@interpolation is the method to be used for the interpolation;\n"
"possible values are:\n"
"- 0: linear;\n"
"- 1: linear with averaging;\n"
"- 2: staircase;\n"
"- 3: staircase with averaging;\n"
"- 4: natural cubic spline;\n"
"- 5: natural cubic spline with averaging.\n"
"@number is the number of interpolated data to be used. If not given,\n"
"a default number is automatically evaluated.\n"
msgstr ""

#: ../plugins/gda/plugin-gda.c:319
msgid ""
"@FUNCTION=EXECSQL\n"
"@SYNTAX=EXECSQL(dsn,username,password,sql)\n"
"@DESCRIPTION=The EXECSQL function lets you execute a command in a database "
"server, and show the results returned in current sheet. It uses libgda as "
"the means for accessing the databases.\n"
"For using it, you need first to set up a libgda data source.\n"
"@EXAMPLES=\n"
"To get all the data from the table \"Customers\" present in the "
"\"mydatasource\" GDA data source, you would use:\n"
"EXECSQL(\"mydatasource\",\"username\",\"password\",\"SELECT * FROM customers"
"\")\n"
"@SEEALSO=READDBTABLE"
msgstr ""
"@FUNCTION=EXECSQL\n"
"@SYNTAX=EXECSQL(dsn,username,password,sql)\n"
"@DESCRIPTION=The EXECSQL ལས་འགན་འདི་གིས་  གནས་སྡུད་གཞི་རྟེན་སར་བར་ནང་ལུ་  ཁྱོད་ཀྱིས་བརྡ་"
"བཀོད་ཅིག་ལག་ལེན་འཐབ་བཅུགཔ་ཨིནམ་དང་  ད་ལྟོའི་ལེབ་ཤོག་ནང་སླར་ལོག་འབད་ཡོད་པའི་གྲུབ་འབྲས་འདི་སྟོན།  "
"དེ་གིས་  ལིབ་ཌ་འདི་གནས་སྡུད་གཞི་རྟེན་འཛུལ་སྤྱོད་འབད་ནིའི་དོན་ལུ་ལག་ལེན་འཐབ་ཨིན།\n"
"དེ་ལག་ལནེ་འཐབ་ནི་ལུ་   ཁྱོད་ཀྱིས་དང་པ་རང་ལིབ་ཌ་གནས་སྡུད་བྱུང་ཁུངས་འདི་གཞི་སྒྲིག་འབད་དགོ།\n"
"@EXAMPLES=\n"
"གནས་སྡུད་ཆ་མཉམ་ཐིག་ཁྲམ་ལས་ལེན་ནི་ལུ་ \"Customers\" present in the \"mydatasource\" "
"ཇི་ཌི་ཨེ་གནས་སྡུད་བྱུང་ཁུངས་ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོཔ:\n"
"EXECSQL(\"mydatasource\",\"username\",\"password\",\"SELECT * FROM customers"
"\")\n"
"@SEEALSO=READDBTABLE"

#: ../plugins/gda/plugin-gda.c:391
msgid ""
"@FUNCTION=READDBTABLE\n"
"@SYNTAX=READDBTABLE(dsn,username,password,table)\n"
"@DESCRIPTION=The READDBTABLE function lets you get the contents of a table, "
"as stored in a database. For using it, you need first to set up a libgda "
"data source.\n"
"Note that this function returns all the rows in the given table. If you want "
"to get data from more than one table or want a more precise selection "
"(conditions), use the EXECSQL function.\n"
"@EXAMPLES=\n"
"To get all the data from the table \"Customers\" present in the "
"\"mydatasource\" GDA data source, you would use:\n"
"READDBTABLE(\"mydatasource\",\"username\",\"password\",\"customers\")\n"
"@SEEALSO=EXECSQL"
msgstr ""
"@FUNCTION=READDBTABLE\n"
"@SYNTAX=READDBTABLE(dsn,username,password,table)\n"
"@DESCRIPTION=The READDBTABLE ལས་འགན་འདི་གིས་  གནས་སྡུད་གཞི་རྟེན་ནང་གསོག་འཇོག་འབད་ཡོདཔ་"
"བཟུམ་སྦེ་  ཁྱོད་ལུ་ཐིག་ཁྲམ་གྱི་ནང་དོན་ཚུ་ལེན་བཅུགཔ་ཨིན།  དེ་ལག་ལནེ་འཐབ་ནི་ལུ་, ཁྱོད་ཀྱིས་དངཔ་རང་ལུབ་"
"ཌ་གནས་སྡུད་བྱུང་ཁུངས་འདི་གཞི་སྒྲིག་འབད་དགོ།\n"
"ལས་འགན་འདི་གིས་བྱིན་ཡོད་པའི་ཐིག་ཁྲམ་ནང་གྲལ་ཐིག་ཚུ་ཆ་མཉམ་སླར་ལོག་འབདཝ་ཨིན་ཟེར་དྲན་འཛིན་འབད།  "
"ཁྱོད་ལུ་  གནས་སྡུད་འདི་ཐིག་ཁྲམ་གཅིག་ལས་ལྷག་སྟེ་དགོ་པ་ཅིན་  ཡང་ན་  སེལ་འཐུ་(conditions)ཀྲིག་ཀྲི་"
"དགོ་པ་ཅིན་, EXECSQLལས་འགན་འདི་ལག་ལེན་འཐབ།\n"
"@EXAMPLES=\n"
"གནས་སྡུད་ཆ་མཉམ་ཐིག་ཁྲམ་ལས་ལེན་ནི་ལུ་ \"Customers\" present in the \"mydatasource\" "
"GDA གནས་སྡུད་བྱུང་ཁུངས་ལེན་ནི་ལུ་,  ཁྱོད་ཀྱིས་ལག་ལེན་འཐབ་དགོཔ:\n"
"READDBTABLE(\"mydatasource\",\"username\",\"password\",\"customers\")\n"
"@SEEALSO=EXECSQL"

#: ../plugins/numtheory/numtheory.c:206
msgid ""
"@FUNCTION=NT_PHI\n"
"@SYNTAX=NT_PHI(n)\n"
"@DESCRIPTION=NT_PHI function calculates the number of integers less than or "
"equal to @n that are relatively prime to @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_SIGMA"
msgstr ""
"@FUNCTION=NT_PHI\n"
"@SYNTAX=NT_PHI(n)\n"
"@DESCRIPTION=NT_PHI ལས་འགན་འདི་གིས་  ཧྲིལ་གྲངས་ཀྱི་ཨང་གྲངས་ @n ལུ་མཉམ་པ་དང་ཡང་ན་ཉུང་མི་"
"ཚུ་  @n ལུ་འབྲེལ་ཐོག་ལས་གལ་ཅན་ཨིན་མི་འདི་རྩིས་བཏོནམ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_SIGMA"

#. xgettext: you can translate the funny character as an 'o' if unicode is not available.
#: ../plugins/numtheory/numtheory.c:244
msgid ""
"@FUNCTION=NT_MU\n"
"@SYNTAX=NT_MU(n)\n"
"@DESCRIPTION=NT_MU function (Möbius mu function) returns \n"
"0  if @n is divisible by the square of a prime .\n"
"Otherwise it returns: \n"
"\n"
"  -1 if @n has an odd  number of different prime factors .\n"
"   1  if @n has an even number of different prime factors .\n"
"\n"
"* If @n = 1 NT_MU returns 1.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_PHI"
msgstr ""
"@FUNCTION=NT_MU\n"
"@SYNTAX=NT_MU(n)\n"
"@DESCRIPTION=NT_MU ལས་འགན་ (Möbius mu function) སླར་ལོག་འབདཝ་ཨིན། \n"
"0 ཨིན་  ག་དེམ་ཅིག་སྦེ་ @n འདི་  ཧྲིལ་གྲངས་ལུ་བགོ་མ་བཏུབ་མི་གྲངས་ཅིག་གི་རང་བསྒྱུར་རྩ་གྲངས་ཀྱིས་བགོ་"
"ཚུགསཔ།\n"
"དེ་མེན་པ་ཅིན་དེ་གིས་ སླར་ལོག་འབད་ཡོདཔ: \n"
"\n"
"  -1 ཨིན་ག་དེམ་ཅིག་སྦེ་ @n དེ་ལུ་བགོ་གྲངས་གཙོ་བོ་སོ་སོ་གི་ཨང་གྲངས་ཡ་ཨང་ཅིག་ཡོདཔ་ཨིན།\n"
"   1  ཨིན་  ག་དེམ་ཅིག་སྦེ་ @n བགོ་གྲངས་གཙོ་བོ་སོ་སོ་ཚུ་གི་ཆ་ཅན་ཨང་ཅིག་ཡོད།\n"
"\n"
"* If @n = 1ཨིན་པ་ཅིན་ NT_MU དེ་གིས་1 སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_PHI"

#: ../plugins/numtheory/numtheory.c:286
msgid ""
"@FUNCTION=NT_D\n"
"@SYNTAX=NT_D(n)\n"
"@DESCRIPTION=NT_D function calculates the number of divisors of @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_PHI, NT_SIGMA"
msgstr ""
"@FUNCTION=NT_D\n"
"@SYNTAX=NT_D(n)\n"
"@DESCRIPTION=NT_D ལས་འགན་འདི་གིས་  @n གི་བགོ་བྱེད་ཀྱི་ཨང་གྲངས་འདི་རྩིས་བཏོནམ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_PHI, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:322
msgid ""
"@FUNCTION=NT_SIGMA\n"
"@SYNTAX=NT_SIGMA(n)\n"
"@DESCRIPTION=NT_SIGMA function calculates the sum of the divisors of @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_PHI"
msgstr ""
"@FUNCTION=NT_SIGMA\n"
"@SYNTAX=NT_SIGMA(n)\n"
"@DESCRIPTION=NT_SIGMA ལས་འགན་འདི་གིས་  @n གི་བགོ་བྱེད་ཀྱི་བསྡོམ་འདི་རྩིས་སྟོནམ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, ITHPRIME, NT_PHI"

#: ../plugins/numtheory/numtheory.c:359
msgid ""
"@FUNCTION=ITHPRIME\n"
"@SYNTAX=ITHPRIME(i)\n"
"@DESCRIPTION=ITHPRIME function returns the @ith prime.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, NT_SIGMA"
msgstr ""
"@FUNCTION=ITHPRIME\n"
"@SYNTAX=ITHPRIME(i)\n"
"@DESCRIPTION=ITHPRIME དེ་གིས་ @ith གཙོ་བོ་ཨང་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=NT_D, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:389
msgid ""
"@FUNCTION=ISPRIME\n"
"@SYNTAX=ISPRIME(i)\n"
"@DESCRIPTION=ISPRIME function returns TRUE if @i is prime and FALSE "
"otherwise.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_D, NT_SIGMA"
msgstr ""
"@FUNCTION=ISPRIME\n"
"@SYNTAX=ISPRIME(i)\n"
"@DESCRIPTION=ISPRIME དེ་གིས་ TRUE སླར་ལོག་འབདཝ་ཨིན་  ག་དེམ་ཅིག་སྦེ་ @i འདི་གཙོ་བོ་ཨང་ཨིན་"
"པ་ཅིན་དང་ དེ་མེན་པ་ཅིན་FALSEཨིན། \n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_D, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:447
msgid ""
"@FUNCTION=PFACTOR\n"
"@SYNTAX=PFACTOR(n)\n"
"@DESCRIPTION=PFACTOR function returns the smallest prime factor of its "
"argument.\n"
"\n"
"The argument must be at least 2, or else a #VALUE! error is returned.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME"
msgstr ""
"@FUNCTION=PFACTOR\n"
"@SYNTAX=PFACTOR(n)\n"
"@DESCRIPTION=PFACTOR ལས་འགན་འདི་གིས་ སྒྲུབ་རྟགས་དེ་གི་བགོ་གྲངས་གཙོ་བོ་ཆུང་ཀུ་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"སྒྲུབ་རྟགས་འདི་ཉུང་མཐའ་རང་༢་ འོང་དགོཔ་ཨིན་  ཡང་ན་  #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME"

#: ../plugins/numtheory/numtheory.c:483
msgid ""
"@FUNCTION=NT_PI\n"
"@SYNTAX=NT_PI(n)\n"
"@DESCRIPTION=NT_PI function returns the number of primes less than or equal "
"to @n.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_PHI, NT_D, NT_SIGMA"
msgstr ""
"@FUNCTION=NT_PI\n"
"@SYNTAX=NT_PI(n)\n"
"@DESCRIPTION=NT_PI ལས་འགན་དེ་གིས་  གཙོ་བོ་ཨང་འདི་ @n ལས་ཉུང་མི་ཡང་ན་མཉམ་པ་ཅིག་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=ITHPRIME, NT_PHI, NT_D, NT_SIGMA"

#: ../plugins/numtheory/numtheory.c:518
msgid ""
"@FUNCTION=BITOR\n"
"@SYNTAX=BITOR(a,b)\n"
"@DESCRIPTION=BITOR function returns bitwise or-ing of its arguments.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITXOR,BITAND"
msgstr ""
"@FUNCTION=BITOR\n"
"@SYNTAX=BITOR(a,b)\n"
"@DESCRIPTION=BITOR ལས་འགན་དེ་གིས་ བིཊི་དང་འཁྲིལ་ ཡང་ན་ དེའི་སྒྲུབ་རྟགས་ཀྱི་-ingའདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITXOR,BITAND"

#: ../plugins/numtheory/numtheory.c:545
msgid ""
"@FUNCTION=BITXOR\n"
"@SYNTAX=BITXOR(a,b)\n"
"@DESCRIPTION=BITXOR function returns bitwise exclusive or-ing of its "
"arguments.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITOR,BITAND"
msgstr ""
"@FUNCTION=BITXOR\n"
"@SYNTAX=BITXOR(a,b)\n"
"@DESCRIPTION=BITXOR ལས་འགན་འདི་གིས་ བིཊི་དང་འཁྲིལ་ ཡང་ན་དེའི་སྒྲུབ་རྟགས་ཀྱི་-ing གྲངས་སུ་བརྩི་"
"སྟེ་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITOR,BITAND"

#: ../plugins/numtheory/numtheory.c:573
msgid ""
"@FUNCTION=BITAND\n"
"@SYNTAX=BITAND(a,b)\n"
"@DESCRIPTION=BITAND function returns bitwise and-ing of its arguments.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITOR,BITXOR"
msgstr ""
"@FUNCTION=BITAND\n"
"@SYNTAX=BITAND(a,b)\n"
"@DESCRIPTION=BITAND ལས་འགན་འདི་གིས་  བིཊི་དང་འཁྲིལ་དང་  དེའི་སྒྲུབ་རྟགས་ཀྱི་-ing འདི་སླར་ལོག་"
"འབདཝ་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITOR,BITXOR"

#: ../plugins/numtheory/numtheory.c:601
msgid ""
"@FUNCTION=BITLSHIFT\n"
"@SYNTAX=BITLSHIFT(x,n)\n"
"@DESCRIPTION=BITLSHIFT function returns @x bit-shifted left by @n bits.\n"
"\n"
"* If @n is negative, a right shift will in effect be performed.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITRSHIFT"
msgstr ""
"@FUNCTION=BITLSHIFT\n"
"@SYNTAX=BITLSHIFT(x,n)\n"
"@DESCRIPTION=BITLSHIFT ལས་འགན་འདི་གིས་ @x བིཊི-སྤོ་བཤུད་@n བིཊིསི་གིས་གཡོན་ཁ་ཐུག་ལུ་སྤོ་བཤུད་"
"འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
"\n"
"* If @n མེད་ཆ་ཨིན་པ་ཅིན་, ནུས་ཅན་ནང་གི་གཡས་སྤོ་བཤུད་གཅིགཔ་འདི་ལཱའགན་འགྲུབ་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITRSHIFT"

#: ../plugins/numtheory/numtheory.c:634
msgid ""
"@FUNCTION=BITRSHIFT\n"
"@SYNTAX=BITRSHIFT(x,n)\n"
"@DESCRIPTION=BITRSHIFT function returns @x bit-shifted right by @n bits.\n"
"\n"
"* If @n is negative, a left shift will in effect be performed.\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITLSHIFT"
msgstr ""
"@FUNCTION=BITRSHIFT\n"
"@SYNTAX=BITRSHIFT(x,n)\n"
"@DESCRIPTION=BITRSHIFT ལས་འགན་འདི་གིས་ @n བིཊི་གིས་@xབིཊི་-སྤོ་བཤུད་གཡས་འདི་སླར་ལོག་འབདཝ་"
"ཨིན།\n"
"\n"
"* If @n འདི་མེད་ཆ་ཨིན་པ་ཅིན་, ནུས་པའི་ནང་གི་གཡོན་གྱི་སྤོ་བཤུད་གཅིག་ལཱ་འགན་འགྲུབ་ནི་ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"@SEEALSO=BITLSHIFT"

#: ../plugins/sample_datasource/sample_datasource.c:272
#, no-c-format
msgid ""
"@FUNCTION=atl_last\n"
"@SYNTAX=ATL_LAST (tag)\n"
"@DESCRIPTION=ATL_LAST is a sample implemention of a real time data source. "
"It takes a string tag and monitors the named pipe /tmp/atl for changes to "
"the value of that tag.\n"
"\n"
"* This is not intended to be generally enabled and is OFF by default.\n"
"\n"
"@EXAMPLES=\n"
"ATL_LAST(\"IBM\")\n"
"@SEEALSO="
msgstr ""
"@FUNCTION=atl_last\n"
"@SYNTAX=ATL_LAST (tag)\n"
"@DESCRIPTION=ATL_LAST འདི་ཆུ་ཚོད་ངོ་མའི་གནས་སྡུད་གཅིག་གི་བསྟར་སྤྱོད་དཔེ་གཞི་ཅིག་ཨིན།  དེ་གིས་ཡིག་"
"རྒྱུན་ངོ་རྟགས་དང་ མིང་བཏགས་པའི་རྒྱུད་དུང་ /tmp/atl ཚུ་  ཨང་རྟགས་དེ་གི་གནས་གོང་ལུ་བསྒྱུར་བཅོས་ཀྱི་དོན་"
"ལུ་ལྟ་རྟོག་འབདཝ་ཨིན།\n"
"\n"
"* འདི་ སྤྱིར་གཏང་ལུ་ལྕོགས་ཅན་བཟོ་ལུ་དམིགས་པ་མེདཔ་དང་  འདི་སྔོན་སྒྲིག་གིས་སྦེ་OFF ཨིན།\n"
"\n"
"@EXAMPLES=\n"
"ATL_LAST(\"IBM\")\n"
"@SEEALSO="

#~ msgid ""
#~ "@FUNCTION=COLUMN\n"
#~ "@SYNTAX=COLUMN([reference])\n"
#~ "@DESCRIPTION=COLUMN function returns the column number of the current "
#~ "cell unless @reference is given. In that case, it returns an array of the "
#~ "column numbers of all cells in @reference. \n"
#~ "* If @reference is neither an array nor a reference nor a range, COLUMN "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMN() in E1 equals 5.\n"
#~ "\n"
#~ "@SEEALSO=COLUMNS,ROW,ROWS"
#~ msgstr ""
#~ "@FUNCTION=COLUMN\n"
#~ "@SYNTAX=COLUMN([reference])\n"
#~ "@DESCRIPTION=COLUMN དེ་གིས་  ད་ལྟོའི་ནང་ཐིག་གི་ཀེར་ཐིག་ཨང་གྲངས་འདི་སླར་ལོག་འབདཝ་ཨིནམ་"
#~ "དང་  དེ་ཡང་ @reference འདི་མ་བྱིན་ཚུན་ཚོད་ཨིན།  གནད་དོན་དེ་ནང་,  དེ་གིས་ཀེར་ཐིག་ཨང་གྲངས་"
#~ "ཚུ་གི་ཨེ་རེ་ཅིག་@referenceནང་གི་ནང་ཐིག་ཆ་མཉམ་ནང་སླར་ལོག་འབདཝ་ཨིན། \n"
#~ "* If @reference འདི་ཨེ་རེ་མེན་ཡང་ན་གཞི་བསྟུན་མེན་ཡང་ན་ཁྱབ་ཚད་མེན་པ་ཅིན་, COLUMN དེ་"
#~ "གིས་ #VALUE! འཛོལ་བ་སླར་ལོག་འབདཝ་ཨིན།\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "COLUMN() in E1 equals 5.\n"
#~ "\n"
#~ "@SEEALSO=COLUMNS,ROW,ROWS"

#~ msgid ""
#~ "@FUNCTION=ROW\n"
#~ "@SYNTAX=ROW([reference])\n"
#~ "@DESCRIPTION=ROW function returns an array of the row numbers taking a "
#~ "default argument of the containing cell position.\n"
#~ "\n"
#~ "* If @reference is neither an array nor a reference nor a range, ROW "
#~ "returns #VALUE! error.\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROW() in G13 equals 13.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROWS"
#~ msgstr ""
#~ "@FUNCTION=ROW\n"
#~ "@SYNTAX=ROW([reference])\n"
#~ "@DESCRIPTION=ROW ལཱ་འགན་དེ་གིས་  ནང་ཐིག་སྒྲིག་སྟངས་ཡོད་པའི་སྔོན་སྒྲིག་སྒྲུབ་རྟགས་ཅིག་འབག་སྟེ་  "
#~ "གྲལ་ཐིག་ཨང་གྲངས་ཀྱི་ཨེ་རེ་སླར་ལོག་འབདཝ་ཨིན།\n"
#~ "\n"
#~ "* If @reference འདི་ཨེ་རེ་ཡང་མེན་གཞི་བསྟུན་ཡང་མེན་ ཡང་ན་ཁྱབ་ཚད་ཡང་མེན་པ་ཅིན་, ROW དེ་"
#~ "གིས་ #VALUE! འཛོལ་བ་འདི་སླར་ལོག་འབདཝ་ཨིན།\n"
#~ "\n"
#~ "@EXAMPLES=\n"
#~ "ROW() in G13 equals 13.\n"
#~ "\n"
#~ "@SEEALSO=COLUMN,COLUMNS,ROWS"
