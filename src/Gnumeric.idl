
#include <gnome-factory.idl>
#include <GnomeObject.idl> 

module GNOME {
	module Gnumeric {
		struct CellRange {
			string cell_a;
			string cell_b;
		};

		const short VALUE_STRING    = 0;
		const short VALUE_INTEGER   = 1;
		const short VALUE_FLOAT     = 2;
		const short VALUE_CELLRANGE = 3;
		const short VALUE_ARRAY     = 4;
		
		union Value switch(short) {
		case VALUE_FLOAT:   double v_float;
		case VALUE_INTEGER: long v_int;
		case VALUE_STRING:  string str;
		case VALUE_ARRAY:   string array;
		case VALUE_CELLRANGE: CellRange cell_range;
		};
	
		interface Sheet {
			exception OutOfRange {};
			exception ParseError {};
			exception InvalidValue {};

			void cursor_set  (in long base_col, in long base_row,
					  in long start_col, in long start_row,
					  in long end_col, in long end_row)
				raises (OutOfRange);
			void cursor_move (in long col, in long row) 
				raises (OutOfRange);

			void make_cell_visible (in long col, in long row)
				raises (OutOfRange);

			// 
			// Selection
			//
			void    select_all ();
			boolean is_all_selected ();
			void    selection_reset ();
			void    selection_append (in long col, in long row) 
				raises (OutOfRange);
			void    selection_append_range (in long start_col,
							in long start_row,
							in long end_col, 
							in long end_row)
				raises (OutOfRange);
			void    selection_copy ();
			void    selection_cut ();
			void    selection_paste (in long dest_col, in long dest_row, 
						 in long paste_flags)
				raises (OutOfRange);

			//
			// Operations on the region
			//
			void    clear_region (in long start_col, in long start_row,
					      in long end_col, in long end_row)
				raises (OutOfRange);
			void    clear_region_content (in long start_col, in long start_row,
						      in long end_col, in long end_row)
				raises (OutOfRange);
			void    clear_region_comments (in long start_col, in long start_row,
						       in long end_col, in long end_row)
				raises (OutOfRange);
			void    clear_region_formats (in long start_col, in long start_row,
						      in long end_col, in long end_row)
				raises (OutOfRange);


			//
			// Cell management
			//
			void    cell_set_value (in long col, in long row, in Value value)
				raises (OutOfRange);
			Value   cell_get_value (in long col, in long row) 
				raises (OutOfRange);

			void    cell_set_text (in long col, in long row, in string text)
				raises (OutOfRange);
			string  cell_get_text (in long col, in long row)
				raises (OutOfRange);

			void    cell_set_formula (in long col, in long row, in string formula)
				raises (OutOfRange, ParseError);

			void    cell_set_format (in long col, in long row, in string format)
				raises (OutOfRange);
			string  cell_get_format (in long col, in long row)
				raises (OutOfRange);

			void    cell_set_font (in long col, in long row, in string font, in short points)
				raises (OutOfRange);
			string  cell_get_font (in long col, in long row)
				raises (OutOfRange);

			void    cell_set_comment (in long col, in long row, in string comment)
				raises (OutOfRange);
			string  cell_get_comment (in long col, in long row)
				raises (OutOfRange);

			void    cell_set_foreground (in long col, in long row, in string color)
				raises (OutOfRange);
			string  cell_get_foreground (in long col, in long row)
				raises (OutOfRange);

			void    cell_set_background (in long col, in long row, in string color)
				raises (OutOfRange);
			string  cell_get_background (in long col, in long row)
				raises (OutOfRange);

			void    cell_set_pattern (in long col, in long row, in long pattern)
				raises (OutOfRange);
			long    cell_get_pattern (in long col, in long row)
				raises (OutOfRange);

			const short HALIGN_GENERAL = 1;
			const short HALIGN_LEFT    = 2;
			const short HALIGN_RIGHT   = 4;
			const short HALIGN_CENTER  = 8;
			const short HALIGN_FILL    = 16;
			const short HALIGN_JUSTIFY = 32;
			
			const short VALIGN_TOP     = 1;
			const short VALIGN_BOTTOM  = 2;
			const short VALIGN_CENTER  = 4;
			const short VALIGN_JUSTIFY = 8;

			void    cell_set_alignment (in long col, in long row, 
						    in long halign, in long valign,
						    in long orientation, in boolean auto_return)
				raises (OutOfRange);
			void    cell_get_alignment (in long col, in long row,
						    out long halign, out long valign,
						    out long orientation, out boolean auto_return)
				raises (OutOfRange);

			// 
			// Cell regions
			//
			typedef sequence<Value> ValueVector;

			ValueVector range_get_values (in string range)
				raises (OutOfRange);
			void    range_set_text (in string range, in string text)
				raises (OutOfRange);
			void    range_set_formula (in string range, in string formula)
				raises (OutOfRange);
			void    range_set_format (in string range, in string format)
				raises (OutOfRange);
			void    range_set_font (in string range, in string font, in short points)
				raises (OutOfRange);
			void    range_set_foreground (in string range, in string color)
				raises (OutOfRange);
			void    range_set_background (in string range, in string color)
				raises (OutOfRange);
			void    range_set_pattern (in string range, in long pattern)
				raises (OutOfRange);
			void    range_set_alignment (in string range, 
						    in long halign, in long valign,
						    in long orientation, in boolean auto_return)
				raises (OutOfRange);
			
			//
			// Sheet administrivia
			//
			void    set_dirty (in boolean is_dirty);

			//
			// Sheet manipulation
			//
			void    insert_col (in long col, in long count);
			void    delete_col (in long col, in long count);
			void    insert_row (in long row, in long count);
			void    delete_row (in long row, in long count);
			void    shift_rows (in long col, 
					    in long start_row, in long end_row,
					    in long count);
			void    shift_cols (in long col, 
					    in long start_row, in long end_row,
					    in long count);
			
		};

		interface Workbook : GNOME::obj {
			exception NameExists {};

			Sheet sheet_new    (in string name) raises (NameExists);
			Sheet sheet_lookup (in string name);

			void  set_filename (in string name);

			void  save_to (in string filename);

			Sheet sheet_current ();
			Sheet sheet_nth (in long n);
			long  sheet_count ();

			//
			// Workbook administrivia
			//
			void set_dirty (in boolean is_dirty);

			boolean sheet_rename (in string old_name, in string new_name);

			//
			// Recomputation
			//
			void recalc ();
			void recalc_all ();

			//
			// Cell reference parsing
			//
			void parse (in string cellref, out Sheet sheet, out long col, out long row);
		};

		interface WorkbookFactory : GNOME::GenericFactory {
			Workbook read (in string filename);
		};
	};
};
