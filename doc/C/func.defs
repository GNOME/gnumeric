@CATEGORY=Bitwise Operations
@FUNCTION=BITAND
@SHORTDESC=bitwise and
@SYNTAX=BITAND(a,b)
@ARGUMENTDESCRIPTION=@{a}: non-negative integer
@{b}: non-negative integer
@DESCRIPTION=BITAND returns the bitwise and of the binary representations of its arguments.
@SEEALSO=BITOR,BITXOR

@CATEGORY=Bitwise Operations
@FUNCTION=BITLSHIFT
@SHORTDESC=bit-shift to the left
@SYNTAX=BITLSHIFT(a,n)
@ARGUMENTDESCRIPTION=@{a}: non-negative integer
@{n}: integer
@DESCRIPTION=BITLSHIFT returns the binary representations of @{a} shifted @{n} positions to the left.
@NOTE=If @{n} is negative, BITLSHIFT shifts the bits to the right by ABS(@{n}) positions.
@SEEALSO=BITRSHIFT

@CATEGORY=Bitwise Operations
@FUNCTION=BITOR
@SHORTDESC=bitwise or
@SYNTAX=BITOR(a,b)
@ARGUMENTDESCRIPTION=@{a}: non-negative integer
@{b}: non-negative integer
@DESCRIPTION=BITOR returns the bitwise or of the binary representations of its arguments.
@SEEALSO=BITXOR,BITAND

@CATEGORY=Bitwise Operations
@FUNCTION=BITRSHIFT
@SHORTDESC=bit-shift to the right
@SYNTAX=BITRSHIFT(a,n)
@ARGUMENTDESCRIPTION=@{a}: non-negative integer
@{n}: integer
@DESCRIPTION=BITRSHIFT returns the binary representations of @{a} shifted @{n} positions to the right.
@NOTE=If @{n} is negative, BITRSHIFT shifts the bits to the left by ABS(@{n}) positions.
@SEEALSO=BITLSHIFT

@CATEGORY=Bitwise Operations
@FUNCTION=BITXOR
@SHORTDESC=bitwise exclusive or
@SYNTAX=BITXOR(a,b)
@ARGUMENTDESCRIPTION=@{a}: non-negative integer
@{b}: non-negative integer
@DESCRIPTION=BITXOR returns the bitwise exclusive or of the binary representations of its arguments.
@SEEALSO=BITOR,BITAND

@CATEGORY=Complex
@FUNCTION=COMPLEX
@SHORTDESC=a complex number of the form @{x} + @{y}@{i}
@SYNTAX=COMPLEX(x,y,i)
@ARGUMENTDESCRIPTION=@{x}: real part
@{y}: imaginary part
@{i}: the suffix for the complex number, either "i" or "j"; defaults to "i"
@NOTE=If @{i} is neither "i" nor "j", COMPLEX returns #VALUE!
@EXCEL=This function is Excel compatible.

@CATEGORY=Complex
@FUNCTION=IMABS
@SHORTDESC=the absolute value of the complex number @{z}
@SYNTAX=IMABS(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMAGINARY,IMREAL

@CATEGORY=Complex
@FUNCTION=IMAGINARY
@SHORTDESC=the imaginary part of the complex number @{z}
@SYNTAX=IMAGINARY(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMREAL

@CATEGORY=Complex
@FUNCTION=IMARCCOS
@SHORTDESC=the complex arccosine of the complex number 
@SYNTAX=IMARCCOS(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMARCCOS returns the complex arccosine of the complex number @{z}. The branch cuts are on the real axis, less than -1 and greater than 1.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSIN,IMARCTAN

@CATEGORY=Complex
@FUNCTION=IMARCCOSH
@SHORTDESC=the complex hyperbolic arccosine of the complex number @{z}
@SYNTAX=IMARCCOSH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMARCCOSH returns the complex hyperbolic arccosine of the complex number @{z}. The branch cut is on the real axis, less than 1.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSINH,IMARCTANH

@CATEGORY=Complex
@FUNCTION=IMARCCOT
@SHORTDESC=the complex arccotangent of the complex number @{z}
@SYNTAX=IMARCCOT(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSEC,IMARCCSC

@CATEGORY=Complex
@FUNCTION=IMARCCOTH
@SHORTDESC=the complex hyperbolic arccotangent of the complex number @{z}
@SYNTAX=IMARCCOTH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSECH,IMARCCSCH

@CATEGORY=Complex
@FUNCTION=IMARCCSC
@SHORTDESC=the complex arccosecant of the complex number @{z}
@SYNTAX=IMARCCSC(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSEC,IMARCCOT

@CATEGORY=Complex
@FUNCTION=IMARCCSCH
@SHORTDESC=the complex hyperbolic arccosecant of the complex number @{z}
@SYNTAX=IMARCCSCH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSECH,IMARCCOTH

@CATEGORY=Complex
@FUNCTION=IMARCSEC
@SHORTDESC=the complex arcsecant of the complex number @{z}
@SYNTAX=IMARCSEC(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCCSC,IMARCCOT

@CATEGORY=Complex
@FUNCTION=IMARCSECH
@SHORTDESC=the complex hyperbolic arcsecant of the complex number @{z}
@SYNTAX=IMARCSECH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCCSCH,IMARCCOTH

@CATEGORY=Complex
@FUNCTION=IMARCSIN
@SHORTDESC=the complex arcsine of the complex number @{z}
@SYNTAX=IMARCSIN(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMARCSIN returns the complex arcsine of the complex number @{z}. The branch cuts are on the real axis, less than -1 and greater than 1.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCCOS,IMARCTAN

@CATEGORY=Complex
@FUNCTION=IMARCSINH
@SHORTDESC=the complex hyperbolic arcsine of the complex number @{z}
@SYNTAX=IMARCSINH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMARCSINH returns the complex hyperbolic arcsine of the complex number @{z}.  The branch cuts are on the imaginary axis, below -i and above i.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCCOSH,IMARCTANH

@CATEGORY=Complex
@FUNCTION=IMARCTAN
@SHORTDESC=the complex arctangent of the complex number 
@SYNTAX=IMARCTAN(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMARCTAN returns the complex arctangent of the complex number @{z}. The branch cuts are on the imaginary axis, below -i and above i.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSIN,IMARCCOS

@CATEGORY=Complex
@FUNCTION=IMARCTANH
@SHORTDESC=the complex hyperbolic arctangent of the complex number @{z}
@SYNTAX=IMARCTANH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMARCTANH returns the complex hyperbolic arctangent of the complex number @{z}. The branch cuts are on the real axis, less than -1 and greater than 1.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMARCSINH,IMARCCOSH

@CATEGORY=Complex
@FUNCTION=IMARGUMENT
@SHORTDESC=the argument theta of the complex number @{z} 
@SYNTAX=IMARGUMENT(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=The argument theta of a complex number is its angle in radians from the real axis.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.

@CATEGORY=Complex
@FUNCTION=IMCONJUGATE
@SHORTDESC=the complex conjugate of the complex number @{z}
@SYNTAX=IMCONJUGATE(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMAGINARY,IMREAL

@CATEGORY=Complex
@FUNCTION=IMCOS
@SHORTDESC=the cosine of the complex number @{z}
@SYNTAX=IMCOS(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMSIN,IMTAN

@CATEGORY=Complex
@FUNCTION=IMCOSH
@SHORTDESC=the hyperbolic cosine of the complex number @{z}
@SYNTAX=IMCOSH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMSINH,IMTANH

@CATEGORY=Complex
@FUNCTION=IMCOT
@SHORTDESC=the cotangent of the complex number @{z}
@SYNTAX=IMCOT(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMCOT(@{z}) = IMCOS(@{z})/IMSIN(@{z}).
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMSEC,IMCSC

@CATEGORY=Complex
@FUNCTION=IMCOTH
@SHORTDESC=the hyperbolic cotangent of the complex number @{z}
@SYNTAX=IMCOTH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMSECH,IMCSCH

@CATEGORY=Complex
@FUNCTION=IMCSC
@SHORTDESC=the cosecant of the complex number @{z}
@SYNTAX=IMCSC(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMCSC(@{z}) = 1/IMSIN(@{z}).
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMSEC,IMCOT

@CATEGORY=Complex
@FUNCTION=IMCSCH
@SHORTDESC=the hyperbolic cosecant of the complex number @{z}
@SYNTAX=IMCSCH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMSECH,IMCOTH

@CATEGORY=Complex
@FUNCTION=IMDIV
@SHORTDESC=the quotient of two complex numbers @{z1}/@{z2}
@SYNTAX=IMDIV(z1,z2)
@ARGUMENTDESCRIPTION=@{z1}: a complex number
@{z2}: a complex number
@NOTE=If @{z1} or @{z2} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMPRODUCT

@CATEGORY=Complex
@FUNCTION=IMEXP
@SHORTDESC=the exponential of the complex number @{z}
@SYNTAX=IMEXP(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMLN

@CATEGORY=Complex
@FUNCTION=IMFACT
@SHORTDESC=the factorial of the complex number @{z}
@SYNTAX=IMFACT(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMGAMMA

@CATEGORY=Complex
@FUNCTION=IMGAMMA
@SHORTDESC=the gamma function of the complex number @{z}
@SYNTAX=IMGAMMA(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMGAMMA

@CATEGORY=Complex
@FUNCTION=IMIGAMMA
@SHORTDESC=the incomplete Gamma function
@SYNTAX=IMIGAMMA(a,z,lower,regularize)
@ARGUMENTDESCRIPTION=@{a}: a complex number
@{z}: a complex number
@{lower}: if true (the default), the lower incomplete gamma function, otherwise the upper incomplete gamma function
@{regularize}: if true (the default), the regularized version of the incomplete gamma function
@NOTE=The regularized incomplete gamma function is the unregularized incomplete gamma function divided by gamma(@{a})
@SEEALSO=GAMMA,IMIGAMMA

@CATEGORY=Complex
@FUNCTION=IMINV
@SHORTDESC=the reciprocal, or inverse, of the complex number @{z}
@SYNTAX=IMINV(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.

@CATEGORY=Complex
@FUNCTION=IMLN
@SHORTDESC=the natural logarithm of the complex number @{z}
@SYNTAX=IMLN(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=The result will have an imaginary part between -π and +π.
The natural logarithm is not uniquely defined on complex numbers. You may need to add or subtract an even multiple of π to the imaginary part.
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMEXP,IMLOG2,IMLOG10

@CATEGORY=Complex
@FUNCTION=IMLOG10
@SHORTDESC=the base-10 logarithm of the complex number @{z}
@SYNTAX=IMLOG10(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMLN,IMLOG2

@CATEGORY=Complex
@FUNCTION=IMLOG2
@SHORTDESC=the base-2 logarithm of the complex number @{z}
@SYNTAX=IMLOG2(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMLN,IMLOG10

@CATEGORY=Complex
@FUNCTION=IMNEG
@SHORTDESC=the negative of the complex number @{z}
@SYNTAX=IMNEG(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.

@CATEGORY=Complex
@FUNCTION=IMPOWER
@SHORTDESC=the complex number @{z1} raised to the @{z2}th power
@SYNTAX=IMPOWER(z1,z2)
@ARGUMENTDESCRIPTION=@{z1}: a complex number
@{z2}: a complex number
@NOTE=If @{z1} or @{z2} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMSQRT

@CATEGORY=Complex
@FUNCTION=IMPRODUCT
@SHORTDESC=the product of the given complex numbers
@SYNTAX=IMPRODUCT(z1,z2,…)
@ARGUMENTDESCRIPTION=@{z1}: a complex number
@{z2}: a complex number
@NOTE=If any of @{z1}, @{z2},... is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMDIV

@CATEGORY=Complex
@FUNCTION=IMREAL
@SHORTDESC=the real part of the complex number @{z}
@SYNTAX=IMREAL(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMAGINARY

@CATEGORY=Complex
@FUNCTION=IMSEC
@SHORTDESC=the secant of the complex number @{z}
@SYNTAX=IMSEC(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@DESCRIPTION=IMSEC(@{z}) = 1/IMCOS(@{z}).
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMCSC,IMCOT

@CATEGORY=Complex
@FUNCTION=IMSECH
@SHORTDESC=the hyperbolic secant of the complex number @{z}
@SYNTAX=IMSECH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMCSCH,IMCOTH

@CATEGORY=Complex
@FUNCTION=IMSIN
@SHORTDESC=the sine of the complex number @{z}
@SYNTAX=IMSIN(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMCOS,IMTAN

@CATEGORY=Complex
@FUNCTION=IMSINH
@SHORTDESC=the hyperbolic sine of the complex number @{z}
@SYNTAX=IMSINH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMCOSH,IMTANH

@CATEGORY=Complex
@FUNCTION=IMSQRT
@SHORTDESC=the square root of the complex number @{z}
@SYNTAX=IMSQRT(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMPOWER

@CATEGORY=Complex
@FUNCTION=IMSUB
@SHORTDESC=the difference of two complex numbers
@SYNTAX=IMSUB(z1,z2)
@ARGUMENTDESCRIPTION=@{z1}: a complex number
@{z2}: a complex number
@NOTE=If @{z1} or @{z2} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMSUM

@CATEGORY=Complex
@FUNCTION=IMSUM
@SHORTDESC=the sum of the given complex numbers
@SYNTAX=IMSUM(z1,z2,…)
@ARGUMENTDESCRIPTION=@{z1}: a complex number
@{z2}: a complex number
@NOTE=If any of @{z1}, @{z2},... is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMSUB

@CATEGORY=Complex
@FUNCTION=IMTAN
@SHORTDESC=the tangent of the complex number @{z}
@SYNTAX=IMTAN(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=IMSIN,IMCOS

@CATEGORY=Complex
@FUNCTION=IMTANH
@SHORTDESC=the hyperbolic tangent of the complex number @{z}
@SYNTAX=IMTANH(z)
@ARGUMENTDESCRIPTION=@{z}: a complex number
@NOTE=If @{z} is not a valid complex number, #VALUE! is returned.
@SEEALSO=IMSINH,IMCOSH

@CATEGORY=Database
@FUNCTION=DAVERAGE
@SHORTDESC=average of the values in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DAVERAGE(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DCOUNT

@CATEGORY=Database
@FUNCTION=DCOUNT
@SHORTDESC=count of numbers in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DCOUNT(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DAVERAGE,DCOUNTA

@CATEGORY=Database
@FUNCTION=DCOUNTA
@SHORTDESC=count of cells with data in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DCOUNTA(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DCOUNT

@CATEGORY=Database
@FUNCTION=DGET
@SHORTDESC=a value from @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DGET(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@NOTE=If none of the records match the conditions, DGET returns #VALUE! If more than one record match the conditions, DGET returns #NUM!
@SEEALSO=DCOUNT

@CATEGORY=Database
@FUNCTION=DMAX
@SHORTDESC=largest number in @{field} in @{database} belonging to a record that match @{criteria}
@SYNTAX=DMAX(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DMIN

@CATEGORY=Database
@FUNCTION=DMIN
@SHORTDESC=smallest number in @{field} in @{database} belonging to a record that match @{criteria}
@SYNTAX=DMIN(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DCOUNT

@CATEGORY=Database
@FUNCTION=DPRODUCT
@SHORTDESC=product of all values in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DPRODUCT(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DSUM

@CATEGORY=Database
@FUNCTION=DSTDEV
@SHORTDESC=sample standard deviation of the values in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DSTDEV(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DSTDEVP

@CATEGORY=Database
@FUNCTION=DSTDEVP
@SHORTDESC=standard deviation of the population of values in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DSTDEVP(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DSTDEV

@CATEGORY=Database
@FUNCTION=DSUM
@SHORTDESC=sum of the values in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DSUM(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DPRODUCT

@CATEGORY=Database
@FUNCTION=DVAR
@SHORTDESC=sample variance of the values in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DVAR(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DVARP

@CATEGORY=Database
@FUNCTION=DVARP
@SHORTDESC=variance of the population of values in @{field} in @{database} belonging to records that match @{criteria}
@SYNTAX=DVARP(database,field,criteria)
@ARGUMENTDESCRIPTION=@{database}: a range in which rows of related information are records and columns of data are fields
@{field}: a string or integer specifying which field is to be used
@{criteria}: a range containing conditions
@DESCRIPTION=@{database} is a range in which rows of related information are records and columns of data are fields. The first row of a database contains labels for each column.
@{field} is a string or integer specifying which field is to be used. If @{field} is an integer n then the nth column will be used. If @{field} is a string, then the column with the matching label will be used.
@{criteria} is a range containing conditions. The first row of a @{criteria} should contain labels. Each label specifies to which field the conditions given in that column apply. Each cell below the label specifies a condition such as ">3" or "<9". An equality condition can be given by simply specifying a value, e. g. "3" or "Jody". For a record to be considered it must satisfy all conditions in at least one of the rows of @{criteria}.
@SEEALSO=DVAR

@CATEGORY=Database
@FUNCTION=GETPIVOTDATA
@SHORTDESC=summary data from a pivot table
@SYNTAX=GETPIVOTDATA(pivot_table,field_name)
@ARGUMENTDESCRIPTION=@{pivot_table}: cell range containing the pivot table
@{field_name}: name of the field for which the summary data is requested
@NOTE=If the summary data is unavailable, GETPIVOTDATA returns #REF!

@CATEGORY=Date/Time
@FUNCTION=ASCENSIONTHURSDAY
@SHORTDESC=Ascension Thursday in the Gregorian calendar according to the Roman rite of the Christian Church
@SYNTAX=ASCENSIONTHURSDAY(year)
@ARGUMENTDESCRIPTION=@{year}: year between 1582 and 9956, defaults to the year of the next Ascension Thursday
@NOTE=Two digit years are adjusted as elsewhere in Gnumeric. Dates before 1904 may also be prohibited.
@SEEALSO=EASTERSUNDAY

@CATEGORY=Date/Time
@FUNCTION=ASHWEDNESDAY
@SHORTDESC=Ash Wednesday in the Gregorian calendar according to the Roman rite of the Christian Church
@SYNTAX=ASHWEDNESDAY(year)
@ARGUMENTDESCRIPTION=@{year}: year between 1582 and 9956, defaults to the year of the next Ash Wednesday
@NOTE=Two digit years are adjusted as elsewhere in Gnumeric. Dates before 1904 may also be prohibited.
@SEEALSO=EASTERSUNDAY

@CATEGORY=Date/Time
@FUNCTION=DATE
@SHORTDESC=create a date serial value
@SYNTAX=DATE(year,month,day)
@ARGUMENTDESCRIPTION=@{year}: year of date
@{month}: month of year
@{day}: day of month
@DESCRIPTION=The DATE function creates date serial values.  1-Jan-1900 is serial value 1, 2-Jan-1900 is serial value 2, and so on.  For compatibility reasons, a serial value is reserved for the non-existing date 29-Feb-1900.
@NOTE=If @{month} or @{day} is less than 1 or too big, then the year and/or month will be adjusted. For spreadsheets created with the Mac version of Excel, serial 1 is 1-Jan-1904.
@EXCEL=This function is Excel compatible.
@SEEALSO=TODAY,YEAR,MONTH,DAY

@CATEGORY=Date/Time
@FUNCTION=DATE2HDATE
@SHORTDESC=Hebrew date
@SYNTAX=DATE2HDATE(date)
@ARGUMENTDESCRIPTION=@{date}: Gregorian date, defaults to today
@SEEALSO=HDATE,DATE2HDATE_HEB

@CATEGORY=Date/Time
@FUNCTION=DATE2HDATE_HEB
@SHORTDESC=Hebrew date in Hebrew
@SYNTAX=DATE2HDATE_HEB(date)
@ARGUMENTDESCRIPTION=@{date}: Gregorian date, defaults to today
@SEEALSO=DATE2HDATE,HDATE_HEB

@CATEGORY=Date/Time
@FUNCTION=DATE2JULIAN
@SHORTDESC=Julian day number for given Gregorian date
@SYNTAX=DATE2JULIAN(date)
@ARGUMENTDESCRIPTION=@{date}: Gregorian date, defaults to today
@SEEALSO=HDATE_JULIAN

@CATEGORY=Date/Time
@FUNCTION=DATE2UNIX
@SHORTDESC=the Unix timestamp corresponding to a date @{d}
@SYNTAX=DATE2UNIX(d)
@ARGUMENTDESCRIPTION=@{d}: date
@DESCRIPTION=The DATE2UNIX function translates a date into a Unix timestamp. A Unix timestamp is the number of seconds since midnight (0:00) of January 1st, 1970 GMT.
@SEEALSO=UNIX2DATE,DATE

@CATEGORY=Date/Time
@FUNCTION=DATEDIF
@SHORTDESC=difference between dates
@SYNTAX=DATEDIF(start_date,end_date,interval)
@ARGUMENTDESCRIPTION=@{start_date}: starting date serial value
@{end_date}: ending date serial value
@{interval}: counting unit
@DESCRIPTION=DATEDIF returns the distance from @{start_date} to @{end_date} according to the unit specified by @{interval}.
@NOTE=If @{interval} is "y", "m", or "d" then the distance is measured in complete years, months, or days respectively. If @{interval} is "ym" or "yd" then the distance is measured in complete months or days, respectively, but excluding any difference in years. If @{interval} is "md" then the distance is measured in complete days but excluding any difference in months.
@EXCEL=This function is Excel compatible.
@SEEALSO=DAYS360

@CATEGORY=Date/Time
@FUNCTION=DATEVALUE
@SHORTDESC=the date part of a date and time serial value
@SYNTAX=DATEVALUE(serial)
@ARGUMENTDESCRIPTION=@{serial}: date and time serial value
@DESCRIPTION=DATEVALUE returns the date serial value part of a date and time serial value.
@EXCEL=This function is Excel compatible.
@SEEALSO=TIMEVALUE,DATE

@CATEGORY=Date/Time
@FUNCTION=DAY
@SHORTDESC=the day-of-month part of a date serial value
@SYNTAX=DAY(date)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@DESCRIPTION=The DAY function returns the day-of-month part of @{date}.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATE,YEAR,MONTH

@CATEGORY=Date/Time
@FUNCTION=DAYS
@SHORTDESC=difference between dates in days
@SYNTAX=DAYS(end_date,start_date)
@ARGUMENTDESCRIPTION=@{end_date}: ending date serial value
@{start_date}: starting date serial value
@DESCRIPTION=DAYS returns the positive or negative number of days from @{start_date} to @{end_date}.
@ODF=This function is OpenFormula compatible.
@SEEALSO=DATEDIF

@CATEGORY=Date/Time
@FUNCTION=DAYS360
@SHORTDESC=days between dates
@SYNTAX=DAYS360(start_date,end_date,method)
@ARGUMENTDESCRIPTION=@{start_date}: starting date serial value
@{end_date}: ending date serial value
@{method}: counting method
@DESCRIPTION=DAYS360 returns the number of days from @{start_date} to @{end_date}.
@NOTE=If @{method} is 0, the default, the MS Excel (tm) US method will be used. This is a somewhat complicated industry standard method where the last day of February is considered to be the 30th day of the month, but only for @{start_date}. If @{method} is 1, the European method will be used.  In this case, if the day of the month is 31 it will be considered as 30 If @{method} is 2, a saner version of the US method is used in which both dates get the same February treatment.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATEDIF

@CATEGORY=Date/Time
@FUNCTION=EASTERSUNDAY
@SHORTDESC=Easter Sunday in the Gregorian calendar according to the Roman rite of the Christian Church
@SYNTAX=EASTERSUNDAY(year)
@ARGUMENTDESCRIPTION=@{year}: year between 1582 and 9956, defaults to the year of the next Easter Sunday
@NOTE=Two digit years are adjusted as elsewhere in Gnumeric. Dates before 1904 may also be prohibited.
@ODF=The 1-argument version of EASTERSUNDAY is compatible with OpenOffice for years after 1904. This function is not specified in ODF/OpenFormula.
@SEEALSO=ASHWEDNESDAY

@CATEGORY=Date/Time
@FUNCTION=EDATE
@SHORTDESC=adjust a date by a number of months
@SYNTAX=EDATE(date,months)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@{months}: signed number of months
@DESCRIPTION=EDATE returns @{date} moved forward or backward the number of months specified by @{months}.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATE

@CATEGORY=Date/Time
@FUNCTION=EOMONTH
@SHORTDESC=end of month
@SYNTAX=EOMONTH(date,months)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@{months}: signed number of months
@DESCRIPTION=EOMONTH returns the date serial value of the end of the month specified by @{date} adjusted forward or backward the number of months specified by @{months}.
@EXCEL=This function is Excel compatible.
@SEEALSO=EDATE

@CATEGORY=Date/Time
@FUNCTION=GOODFRIDAY
@SHORTDESC=Good Friday in the Gregorian calendar according to the Roman rite of the Christian Church
@SYNTAX=GOODFRIDAY(year)
@ARGUMENTDESCRIPTION=@{year}: year between 1582 and 9956, defaults to the year of the next Good Friday
@NOTE=Two digit years are adjusted as elsewhere in Gnumeric. Dates before 1904 may also be prohibited.
@SEEALSO=EASTERSUNDAY

@CATEGORY=Date/Time
@FUNCTION=HDATE
@SHORTDESC=Hebrew date
@SYNTAX=HDATE(year,month,day)
@ARGUMENTDESCRIPTION=@{year}: Gregorian year of date, defaults to the current year
@{month}: Gregorian month of year, defaults to the current month
@{day}: Gregorian day of month, defaults to the current day
@SEEALSO=HDATE_HEB,DATE

@CATEGORY=Date/Time
@FUNCTION=HDATE_DAY
@SHORTDESC=Hebrew day of Gregorian date
@SYNTAX=HDATE_DAY(year,month,day)
@ARGUMENTDESCRIPTION=@{year}: Gregorian year of date, defaults to the current year
@{month}: Gregorian month of year, defaults to the current month
@{day}: Gregorian day of month, defaults to the current day
@SEEALSO=HDATE_JULIAN

@CATEGORY=Date/Time
@FUNCTION=HDATE_HEB
@SHORTDESC=Hebrew date in Hebrew
@SYNTAX=HDATE_HEB(year,month,day)
@ARGUMENTDESCRIPTION=@{year}: Gregorian year of date, defaults to the current year
@{month}: Gregorian month of year, defaults to the current month
@{day}: Gregorian day of month, defaults to the current day
@SEEALSO=HDATE,DATE

@CATEGORY=Date/Time
@FUNCTION=HDATE_JULIAN
@SHORTDESC=Julian day number for given Gregorian date
@SYNTAX=HDATE_JULIAN(year,month,day)
@ARGUMENTDESCRIPTION=@{year}: Gregorian year of date, defaults to the current year
@{month}: Gregorian month of year, defaults to the current month
@{day}: Gregorian day of month, defaults to the current day
@SEEALSO=HDATE

@CATEGORY=Date/Time
@FUNCTION=HDATE_MONTH
@SHORTDESC=Hebrew month of Gregorian date
@SYNTAX=HDATE_MONTH(year,month,day)
@ARGUMENTDESCRIPTION=@{year}: Gregorian year of date, defaults to the current year
@{month}: Gregorian month of year, defaults to the current month
@{day}: Gregorian day of month, defaults to the current day
@SEEALSO=HDATE_JULIAN

@CATEGORY=Date/Time
@FUNCTION=HDATE_YEAR
@SHORTDESC=Hebrew year of Gregorian date
@SYNTAX=HDATE_YEAR(year,month,day)
@ARGUMENTDESCRIPTION=@{year}: Gregorian year of date, defaults to the current year
@{month}: Gregorian month of year, defaults to the current month
@{day}: Gregorian day of month, defaults to the current day
@SEEALSO=HDATE_JULIAN

@CATEGORY=Date/Time
@FUNCTION=HOUR
@SHORTDESC=compute hour part of fractional day
@SYNTAX=HOUR(time)
@ARGUMENTDESCRIPTION=@{time}: time of day as fractional day
@DESCRIPTION=The HOUR function computes the hour part of the fractional day given by @{time}.
@EXCEL=This function is Excel compatible.
@SEEALSO=TIME,MINUTE,SECOND

@CATEGORY=Date/Time
@FUNCTION=ISOWEEKNUM
@SHORTDESC=ISO week number
@SYNTAX=ISOWEEKNUM(date)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@DESCRIPTION=ISOWEEKNUM calculates the week number according to the ISO 8601 standard.  Weeks start on Mondays and week 1 contains the first Thursday of the year.
@NOTE=January 1 of a year is sometimes in week 52 or 53 of the previous year.  Similarly, December 31 is sometimes in week 1 of the following year.
@SEEALSO=ISOYEAR,WEEKNUM

@CATEGORY=Date/Time
@FUNCTION=ISOYEAR
@SHORTDESC=year corresponding to the ISO week number
@SYNTAX=ISOYEAR(date)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@DESCRIPTION=ISOYEAR calculates the year to go with week number according to the ISO 8601 standard.
@NOTE=January 1 of a year is sometimes in week 52 or 53 of the previous year.  Similarly, December 31 is sometimes in week 1 of the following year.
@SEEALSO=ISOWEEKNUM,YEAR

@CATEGORY=Date/Time
@FUNCTION=MINUTE
@SHORTDESC=compute minute part of fractional day
@SYNTAX=MINUTE(time)
@ARGUMENTDESCRIPTION=@{time}: time of day as fractional day
@DESCRIPTION=The MINUTE function computes the minute part of the fractional day given by @{time}.
@EXCEL=This function is Excel compatible.
@SEEALSO=TIME,HOUR,SECOND

@CATEGORY=Date/Time
@FUNCTION=MONTH
@SHORTDESC=the month part of a date serial value
@SYNTAX=MONTH(date)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@DESCRIPTION=The MONTH function returns the month part of @{date}.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATE,YEAR,DAY

@CATEGORY=Date/Time
@FUNCTION=NETWORKDAYS
@SHORTDESC=number of workdays in range
@SYNTAX=NETWORKDAYS(start_date,end_date,holidays,weekend)
@ARGUMENTDESCRIPTION=@{start_date}: starting date serial value
@{end_date}: ending date serial value
@{holidays}: array of holidays
@{weekend}: array of 0s and 1s, indicating whether a weekday (S, M, T, W, T, F, S) is on the weekend, defaults to {1,0,0,0,0,0,1}
@DESCRIPTION=NETWORKDAYS calculates the number of days from @{start_date} to @{end_date} skipping weekends and @{holidays} in the process.
@NOTE=If an entry of @{weekend} is non-zero, the corresponding weekday is not a work day.
@EXCEL=This function is Excel compatible if the last argument is omitted.
@ODF=This function is OpenFormula compatible.
@SEEALSO=WORKDAY

@CATEGORY=Date/Time
@FUNCTION=NOW
@SHORTDESC=the date and time serial value of the current time
@SYNTAX=NOW()
@DESCRIPTION=The NOW function returns the date and time serial value of the moment it is computed.  Recomputing later will produce a different value.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATE

@CATEGORY=Date/Time
@FUNCTION=ODF.TIME
@SHORTDESC=create a time serial value
@SYNTAX=ODF.TIME(hour,minute,second)
@ARGUMENTDESCRIPTION=@{hour}: hour
@{minute}: minute
@{second}: second
@DESCRIPTION=The ODF.TIME function computes the time given by @{hour}, @{minute}, and @{second} as a fraction of a day.
@NOTE=While the return value is automatically formatted to look like a time between 0:00 and 24:00, the underlying serial time value can be any number.
@ODF=This function is OpenFormula compatible.
@SEEALSO=TIME,HOUR,MINUTE,SECOND

@CATEGORY=Date/Time
@FUNCTION=PENTECOSTSUNDAY
@SHORTDESC=Pentecost Sunday in the Gregorian calendar according to the Roman rite of the Christian Church
@SYNTAX=PENTECOSTSUNDAY(year)
@ARGUMENTDESCRIPTION=@{year}: year between 1582 and 9956, defaults to the year of the next Pentecost Sunday
@NOTE=Two digit years are adjusted as elsewhere in Gnumeric. Dates before 1904 may also be prohibited.
@SEEALSO=EASTERSUNDAY

@CATEGORY=Date/Time
@FUNCTION=SECOND
@SHORTDESC=compute seconds part of fractional day
@SYNTAX=SECOND(time)
@ARGUMENTDESCRIPTION=@{time}: time of day as fractional day
@DESCRIPTION=The SECOND function computes the seconds part of the fractional day given by @{time}.
@EXCEL=This function is Excel compatible.
@SEEALSO=TIME,HOUR,MINUTE

@CATEGORY=Date/Time
@FUNCTION=TIME
@SHORTDESC=create a time serial value
@SYNTAX=TIME(hour,minute,second)
@ARGUMENTDESCRIPTION=@{hour}: hour of the day
@{minute}: minute within the hour
@{second}: second within the minute
@DESCRIPTION=The TIME function computes the fractional day after midnight at the time given by @{hour}, @{minute}, and @{second}.
@NOTE=While the return value is automatically formatted to look like a time between 0:00 and 24:00, the underlying serial time value is a number between 0 and 1. If any of @{hour}, @{minute}, and @{second} is negative, #NUM! is returned
@EXCEL=This function is Excel compatible.
@SEEALSO=ODF.TIME,HOUR,MINUTE,SECOND

@CATEGORY=Date/Time
@FUNCTION=TIMEVALUE
@SHORTDESC=the time part of a date and time serial value
@SYNTAX=TIMEVALUE(serial)
@ARGUMENTDESCRIPTION=@{serial}: date and time serial value
@DESCRIPTION=TIMEVALUE returns the time-of-day part of a date and time serial value.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATEVALUE,TIME

@CATEGORY=Date/Time
@FUNCTION=TODAY
@SHORTDESC=the date serial value of today
@SYNTAX=TODAY()
@DESCRIPTION=The TODAY function returns the date serial value of the day it is computed.  Recomputing on a later date will produce a different value.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATE

@CATEGORY=Date/Time
@FUNCTION=UNIX2DATE
@SHORTDESC=date value corresponding to the Unix timestamp @{t}
@SYNTAX=UNIX2DATE(t)
@ARGUMENTDESCRIPTION=@{t}: Unix time stamp
@DESCRIPTION=The UNIX2DATE function translates Unix timestamps into the corresponding date.  A Unix timestamp is the number of seconds since midnight (0:00) of January 1st, 1970 GMT.
@SEEALSO=DATE2UNIX,DATE

@CATEGORY=Date/Time
@FUNCTION=WEEKDAY
@SHORTDESC=day-of-week
@SYNTAX=WEEKDAY(date,method)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@{method}: numbering system, defaults to 1
@DESCRIPTION=The WEEKDAY function returns the day-of-week of @{date}.  The value of @{method} determines how days are numbered; it defaults to 1. 
@NOTE=If @{method} is 1, then Sunday is 1, Monday is 2, etc. If @{method} is 2, then Monday is 1, Tuesday is 2, etc. If @{method} is 3, then Monday is 0, Tuesday is 1, etc. If @{method} is 11, then Monday is 1, Tuesday is 2, etc. If @{method} is 12, then Tuesday is 1, Wednesday is 2, etc. If @{method} is 13, then Wednesday is 1, Thursday is 2, etc. If @{method} is 14, then Thursday is 1, Friday is 2, etc. If @{method} is 15, then Friday is 1, Saturday is 2, etc. If @{method} is 16, then Saturday is 1, Sunday is 2, etc. If @{method} is 17, then Sunday is 1, Monday is 2, etc.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATE,ISOWEEKNUM

@CATEGORY=Date/Time
@FUNCTION=WEEKNUM
@SHORTDESC=week number
@SYNTAX=WEEKNUM(date,method)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@{method}: numbering system, defaults to 1
@DESCRIPTION=WEEKNUM calculates the week number according to @{method} which defaults to 1.
@NOTE=If @{method} is 1, then weeks start on Sundays and January 1 is in week 1. If @{method} is 2, then weeks start on Mondays and January 1 is in week 1. If @{method} is 150, then the ISO 8601 numbering is used.
@SEEALSO=ISOWEEKNUM

@CATEGORY=Date/Time
@FUNCTION=WORKDAY
@SHORTDESC=add working days
@SYNTAX=WORKDAY(date,days,holidays,weekend)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@{days}: number of days to add
@{holidays}: array of holidays
@{weekend}: array of 0s and 1s, indicating whether a weekday (S, M, T, W, T, F, S) is on the weekend, defaults to {1,0,0,0,0,0,1}
@DESCRIPTION=WORKDAY adjusts @{date} by @{days} skipping over weekends and @{holidays} in the process.
@NOTE=@{days} may be negative. If an entry of @{weekend} is non-zero, the corresponding weekday is not a work day.
@EXCEL=This function is Excel compatible if the last argument is omitted.
@ODF=This function is OpenFormula compatible.
@SEEALSO=NETWORKDAYS

@CATEGORY=Date/Time
@FUNCTION=YEAR
@SHORTDESC=the year part of a date serial value
@SYNTAX=YEAR(date)
@ARGUMENTDESCRIPTION=@{date}: date serial value
@DESCRIPTION=The YEAR function returns the year part of @{date}.
@EXCEL=This function is Excel compatible.
@SEEALSO=DATE,MONTH,DAY

@CATEGORY=Date/Time
@FUNCTION=YEARFRAC
@SHORTDESC=fractional number of years between dates
@SYNTAX=YEARFRAC(start_date,end_date,basis)
@ARGUMENTDESCRIPTION=@{start_date}: starting date serial value
@{end_date}: ending date serial value
@{basis}: calendar basis
@DESCRIPTION=YEARFRAC calculates the number of days from @{start_date} to @{end_date} according to the calendar specified by @{basis}, which defaults to 0, and expresses the result as a fractional number of years.
@NOTE=If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=DATE

@CATEGORY=Engineering
@FUNCTION=BASE
@SHORTDESC=string of digits representing the number @{n} in base @{b}
@SYNTAX=BASE(n,b,length)
@ARGUMENTDESCRIPTION=@{n}: integer
@{b}: base (2 ≤ @{b} ≤ 36)
@{length}: minimum length of the resulting string
@DESCRIPTION=BASE converts @{n} to its string representation in base @{b}. Leading zeroes will be added to reach the minimum length given by @{length}.
@ODF=This function is OpenFormula compatible.
@SEEALSO=DECIMAL

@CATEGORY=Engineering
@FUNCTION=BESSELI
@SHORTDESC=Modified Bessel function of the first kind of order @{α} at @{x}
@SYNTAX=BESSELI(X,α)
@ARGUMENTDESCRIPTION=@{X}: number
@{α}: order (any non-negative number)
@NOTE=If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is returned.
@EXCEL=This function is Excel compatible if only integer orders @{α} are used.
@SEEALSO=BESSELJ,BESSELK,BESSELY

@CATEGORY=Engineering
@FUNCTION=BESSELJ
@SHORTDESC=Bessel function of the first kind of order @{α} at @{x}
@SYNTAX=BESSELJ(X,α)
@ARGUMENTDESCRIPTION=@{X}: number
@{α}: order (any non-negative integer)
@NOTE=If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is returned.
@EXCEL=This function is Excel compatible if only integer orders @{α} are used.
@SEEALSO=BESSELI,BESSELK,BESSELY

@CATEGORY=Engineering
@FUNCTION=BESSELK
@SHORTDESC=Modified Bessel function of the second kind of order @{α} at @{x}
@SYNTAX=BESSELK(X,α)
@ARGUMENTDESCRIPTION=@{X}: number
@{α}: order (any non-negative number)
@NOTE=If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is returned.
@EXCEL=This function is Excel compatible if only integer orders @{α} are used.
@SEEALSO=BESSELI,BESSELJ,BESSELY

@CATEGORY=Engineering
@FUNCTION=BESSELY
@SHORTDESC=Bessel function of the second kind of order @{α} at @{x}
@SYNTAX=BESSELY(X,α)
@ARGUMENTDESCRIPTION=@{X}: number
@{α}: order (any non-negative integer)
@NOTE=If @{x} or @{α} are not numeric, #VALUE! is returned. If @{α} < 0, #NUM! is returned.
@EXCEL=This function is Excel compatible if only integer orders @{α} are used.
@SEEALSO=BESSELI,BESSELJ,BESSELK

@CATEGORY=Engineering
@FUNCTION=BIN2DEC
@SHORTDESC=decimal representation of the binary number @{x}
@SYNTAX=BIN2DEC(x)
@ARGUMENTDESCRIPTION=@{x}: a binary number, either as a string or as a number involving only the digits 0 and 1
@EXCEL=This function is Excel compatible.
@SEEALSO=DEC2BIN,BIN2OCT,BIN2HEX

@CATEGORY=Engineering
@FUNCTION=BIN2HEX
@SHORTDESC=hexadecimal representation of the binary number @{x}
@SYNTAX=BIN2HEX(x,places)
@ARGUMENTDESCRIPTION=@{x}: a binary number, either as a string or as a number involving only the digits 0 and 1
@{places}: number of digits
@DESCRIPTION=If @{places} is given, BIN2HEX pads the result with zeros to achieve exactly @{places} digits. If this is not possible, BIN2HEX returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=HEX2BIN,BIN2OCT,BIN2DEC

@CATEGORY=Engineering
@FUNCTION=BIN2OCT
@SHORTDESC=octal representation of the binary number @{x}
@SYNTAX=BIN2OCT(x,places)
@ARGUMENTDESCRIPTION=@{x}: a binary number, either as a string or as a number involving only the digits 0 and 1
@{places}: number of digits
@DESCRIPTION=If @{places} is given, BIN2OCT pads the result with zeros to achieve exactly @{places} digits. If this is not possible, BIN2OCT returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=OCT2BIN,BIN2DEC,BIN2HEX

@CATEGORY=Engineering
@FUNCTION=CONVERT
@SHORTDESC=a converted measurement
@SYNTAX=CONVERT(x,from,to)
@ARGUMENTDESCRIPTION=@{x}: number
@{from}: unit (string)
@{to}: unit (string)
@DESCRIPTION=CONVERT returns a conversion from one measurement system to another. @{x} is a value in @{from} units that is to be converted into @{to} units.
@{from} and @{to} can be any of the following:

Weight and mass:
	'g'  			Gram
	'sg' 			Slug
	'lbm'		Pound
	'u'  			U (atomic mass)
	'ozm'		Ounce

Distance:
	'm'   		Meter
	'mi'  		Statute mile
	'Nmi' 		Nautical mile
	'in'  			Inch
	'ft'  			Foot
	'yd'  		Yard
	'ang' 		Angstrom
	'Pica'		Pica Points
	'picapt'		Pica Points
	'pica'		Pica

Time:
	'yr'  			Year
	'day' 		Day
	'hr'  			Hour
	'mn'  		Minute
	'sec' 		Second

Pressure:
	'Pa'  		Pascal
	'atm' 		Atmosphere
	'mmHg'		mm of Mercury

Force:
	'N'   			Newton
	'dyn' 		Dyne
	'lbf' 			Pound force

Energy:
	'J'    			Joule
	'e'    		Erg
	'c'    		Thermodynamic calorie
	'cal'  		IT calorie
	'eV'   		Electron volt
	'HPh'  		Horsepower-hour
	'Wh'   		Watt-hour
	'flb'  		Foot-pound
	'BTU'  		BTU

Power:
	'HP'   		Horsepower
	'W'    		Watt

Magnetism:
	'T'    		Tesla
	'ga'   		Gauss

Temperature:
	'C'    		Degree Celsius
	'F'    		Degree Fahrenheit
	'K'    		Degree Kelvin

Liquid measure:
	'tsp'  		Teaspoon
	'tbs'  		Tablespoon
	'oz'   		Fluid ounce
	'cup'  		Cup
	'pt'   		Pint
	'qt'   		Quart
	'gal'  		Gallon
	'l'    			Liter

For metric units any of the following prefixes can be used:
	'Y'  	yotta 		1E+24
	'Z'  	zetta 		1E+21
	'E'  	exa   		1E+18
	'P'  	peta  		1E+15
	'T'  	tera  		1E+12
	'G'  	giga  		1E+09
	'M'  	mega  		1E+06
	'k'  	kilo  		1E+03
	'h'  	hecto 		1E+02
	'e'  	deca (deka)	1E+01
	'd'  	deci  		1E-01
	'c'  	centi 		1E-02
	'm'  	milli 		1E-03
	'u'  	micro 		1E-06
	'n'  	nano  		1E-09
	'p'  	pico  		1E-12
	'f'  	femto 		1E-15
	'a'  	atto  		1E-18
	'z'  	zepto 		1E-21
	'y'  	yocto 		1E-24
@NOTE=If @{from} and @{to} are different types, CONVERT returns #N/A!
@EXCEL=This function is Excel compatible (except "picapt").
@ODF=This function is OpenFormula compatible.

@CATEGORY=Engineering
@FUNCTION=DEC2BIN
@SHORTDESC=binary representation of the decimal number @{x}
@SYNTAX=DEC2BIN(x,places)
@ARGUMENTDESCRIPTION=@{x}: integer (− 513 < @{x} < 512)
@{places}: number of digits
@DESCRIPTION=If @{places} is given and @{x} is non-negative, DEC2BIN pads the result with zeros to achieve exactly @{places} digits. If this is not possible, DEC2BIN returns #NUM!
If @{places} is given and @{x} is negative, @{places} is ignored.
@NOTE=If @{x} < − 512 or @{x} > 511, DEC2BIN returns #NUM!
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=BIN2DEC,DEC2OCT,DEC2HEX

@CATEGORY=Engineering
@FUNCTION=DEC2HEX
@SHORTDESC=hexadecimal representation of the decimal number @{x}
@SYNTAX=DEC2HEX(x,places)
@ARGUMENTDESCRIPTION=@{x}: integer
@{places}: number of digits
@DESCRIPTION=If @{places} is given, DEC2HEX pads the result with zeros to achieve exactly @{places} digits. If this is not possible, DEC2HEX returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=HEX2DEC,DEC2BIN,DEC2OCT

@CATEGORY=Engineering
@FUNCTION=DEC2OCT
@SHORTDESC=octal representation of the decimal number @{x}
@SYNTAX=DEC2OCT(x,places)
@ARGUMENTDESCRIPTION=@{x}: integer
@{places}: number of digits
@DESCRIPTION=If @{places} is given, DEC2OCT pads the result with zeros to achieve exactly @{places} digits. If this is not possible, DEC2OCT returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=OCT2DEC,DEC2BIN,DEC2HEX

@CATEGORY=Engineering
@FUNCTION=DECIMAL
@SHORTDESC=decimal representation of @{x}
@SYNTAX=DECIMAL(x,base)
@ARGUMENTDESCRIPTION=@{x}: number in base @{base}
@{base}: base of @{x}, (2 ≤ @{base} ≤ 36)
@ODF=This function is OpenFormula compatible.
@SEEALSO=BASE

@CATEGORY=Engineering
@FUNCTION=DELTA
@SHORTDESC=Kronecker delta function
@SYNTAX=DELTA(x0,x1)
@ARGUMENTDESCRIPTION=@{x0}: number
@{x1}: number, defaults to 0
@DESCRIPTION=DELTA  returns 1 if  @{x1} = @{x0} and 0 otherwise.
@NOTE=If either argument is non-numeric, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=EXACT,GESTEP

@CATEGORY=Engineering
@FUNCTION=ERF
@SHORTDESC=Gauss error function
@SYNTAX=ERF(lower,upper)
@ARGUMENTDESCRIPTION=@{lower}: lower limit of the integral, defaults to 0
@{upper}: upper limit of the integral
@DESCRIPTION=ERF returns 2/sqrt(π)* integral from @{lower} to @{upper} of exp(-t*t) dt
@EXCEL=This function is Excel compatible if two arguments are supplied and neither is negative.
@SEEALSO=ERFC

@CATEGORY=Engineering
@FUNCTION=ERFC
@SHORTDESC=Complementary Gauss error function
@SYNTAX=ERFC(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=ERFC returns 2/sqrt(π)* integral from @{x} to ∞ of exp(-t*t) dt
@SEEALSO=ERF

@CATEGORY=Engineering
@FUNCTION=GESTEP
@SHORTDESC=step function with step at @{x1} evaluated at @{x0}
@SYNTAX=GESTEP(x0,x1)
@ARGUMENTDESCRIPTION=@{x0}: number
@{x1}: number, defaults to 0
@DESCRIPTION=GESTEP returns 1 if  @{x1} ≤ @{x0} and 0 otherwise.
@NOTE=If either argument is non-numeric, #VALUE! is returned.
@EXCEL=This function is Excel compatible.
@SEEALSO=DELTA

@CATEGORY=Engineering
@FUNCTION=HEX2BIN
@SHORTDESC=binary representation of the hexadecimal number @{x}
@SYNTAX=HEX2BIN(x,places)
@ARGUMENTDESCRIPTION=@{x}: a hexadecimal number, either as a string or as a number if no A to F are needed
@{places}: number of digits
@DESCRIPTION=If @{places} is given, HEX2BIN pads the result with zeros to achieve exactly @{places} digits. If this is not possible, HEX2BIN returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=BIN2HEX,HEX2OCT,HEX2DEC

@CATEGORY=Engineering
@FUNCTION=HEX2DEC
@SHORTDESC=decimal representation of the hexadecimal number @{x}
@SYNTAX=HEX2DEC(x)
@ARGUMENTDESCRIPTION=@{x}: a hexadecimal number, either as a string or as a number if no A to F are needed
@EXCEL=This function is Excel compatible.
@SEEALSO=DEC2HEX,HEX2BIN,HEX2OCT

@CATEGORY=Engineering
@FUNCTION=HEX2OCT
@SHORTDESC=octal representation of the hexadecimal number @{x}
@SYNTAX=HEX2OCT(x,places)
@ARGUMENTDESCRIPTION=@{x}: a hexadecimal number, either as a string or as a number if no A to F are needed
@{places}: number of digits
@DESCRIPTION=If @{places} is given, HEX2OCT pads the result with zeros to achieve exactly @{places} digits. If this is not possible, HEX2OCT returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=OCT2HEX,HEX2BIN,HEX2DEC

@CATEGORY=Engineering
@FUNCTION=HEXREP
@SHORTDESC=hexadecimal representation of numeric value
@SYNTAX=HEXREP(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=HEXREP returns a hexadecimal string representation of @{x}.
@NOTE=This is a function meant for debugging.  The layout of the result may change and even depend on how Gnumeric was compiled.

@CATEGORY=Engineering
@FUNCTION=INVSUMINV
@SHORTDESC=the reciprocal of the sum of reciprocals of the arguments
@SYNTAX=INVSUMINV(x0,x1,…)
@ARGUMENTDESCRIPTION=@{x0}: non-negative number
@{x1}: non-negative number
@DESCRIPTION=INVSUMINV sum calculates the reciprocal (the inverse) of the sum of reciprocals (inverses) of all its arguments.
@NOTE=If any of the arguments is negative, #VALUE! is returned.
If any argument is zero, the result is zero.
@SEEALSO=HARMEAN

@CATEGORY=Engineering
@FUNCTION=OCT2BIN
@SHORTDESC=binary representation of the octal number @{x}
@SYNTAX=OCT2BIN(x,places)
@ARGUMENTDESCRIPTION=@{x}: a octal number, either as a string or as a number
@{places}: number of digits
@DESCRIPTION=If @{places} is given, OCT2BIN pads the result with zeros to achieve exactly @{places} digits. If this is not possible, OCT2BIN returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=BIN2OCT,OCT2DEC,OCT2HEX

@CATEGORY=Engineering
@FUNCTION=OCT2DEC
@SHORTDESC=decimal representation of the octal number @{x}
@SYNTAX=OCT2DEC(x)
@ARGUMENTDESCRIPTION=@{x}: a octal number, either as a string or as a number
@EXCEL=This function is Excel compatible.
@SEEALSO=DEC2OCT,OCT2BIN,OCT2HEX

@CATEGORY=Engineering
@FUNCTION=OCT2HEX
@SHORTDESC=hexadecimal representation of the octal number @{x}
@SYNTAX=OCT2HEX(x,places)
@ARGUMENTDESCRIPTION=@{x}: a octal number, either as a string or as a number
@{places}: number of digits
@DESCRIPTION=If @{places} is given, OCT2HEX pads the result with zeros to achieve exactly @{places} digits. If this is not possible, OCT2HEX returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=HEX2OCT,OCT2BIN,OCT2DEC

@CATEGORY=Erlang
@FUNCTION=DIMCIRC
@SHORTDESC=number of circuits required
@SYNTAX=DIMCIRC(traffic,gos)
@ARGUMENTDESCRIPTION=@{traffic}: number of calls
@{gos}: grade of service
@DESCRIPTION=DIMCIRC returns the number of circuits required given @{traffic} calls with grade of service @{gos}.
@SEEALSO=OFFCAP,OFFTRAF,PROBBLOCK

@CATEGORY=Erlang
@FUNCTION=OFFCAP
@SHORTDESC=traffic capacity
@SYNTAX=OFFCAP(circuits,gos)
@ARGUMENTDESCRIPTION=@{circuits}: number of circuits
@{gos}: grade of service
@DESCRIPTION=OFFCAP returns the traffic capacity given @{circuits} circuits with grade of service @{gos}.
@SEEALSO=DIMCIRC,OFFTRAF,PROBBLOCK

@CATEGORY=Erlang
@FUNCTION=OFFTRAF
@SHORTDESC=predicted number of offered calls
@SYNTAX=OFFTRAF(traffic,circuits)
@ARGUMENTDESCRIPTION=@{traffic}: number of carried calls
@{circuits}: number of circuits
@DESCRIPTION=OFFTRAF returns the predicted number of offered calls given @{traffic} carried calls (taken from measurements) on @{circuits} circuits.
@NOTE=@{traffic} cannot exceed @{circuits}.
@SEEALSO=PROBBLOCK,DIMCIRC,OFFCAP

@CATEGORY=Erlang
@FUNCTION=PROBBLOCK
@SHORTDESC=probability of blocking
@SYNTAX=PROBBLOCK(traffic,circuits)
@ARGUMENTDESCRIPTION=@{traffic}: number of calls
@{circuits}: number of circuits
@DESCRIPTION=PROBBLOCK returns probability of blocking when @{traffic} calls load into @{circuits} circuits.
@NOTE=@{traffic} cannot exceed @{circuits}.
@SEEALSO=OFFTRAF,DIMCIRC,OFFCAP

@CATEGORY=Finance
@FUNCTION=ACCRINT
@SHORTDESC=accrued interest
@SYNTAX=ACCRINT(issue,first_interest,settlement,rate,par,frequency,basis,calc_method)
@ARGUMENTDESCRIPTION=@{issue}: date of issue
@{first_interest}: date of first interest payment
@{settlement}: settlement date
@{rate}: nominal annual interest rate
@{par}: par value, defaults to $1000
@{frequency}: number of interest payments per year
@{basis}: calendar basis, defaults to 0
@{calc_method}: calculation method, defaults to TRUE
@DESCRIPTION=If @{first_interest} < @{settlement} and @{calc_method} is TRUE, then ACCRINT returns the sum of the interest accrued in all coupon periods from @{issue}  date until @{settlement} date.
If @{first_interest} < @{settlement} and @{calc_method} is FALSE, then ACCRINT returns the sum of the interest accrued in all coupon periods from @{first_interest}  date until @{settlement} date.
Otherwise ACCRINT returns the sum of the interest accrued in all coupon periods from @{issue}  date until @{settlement} date.
@NOTE=@{frequency} must be one of 1, 2 or 4, but the exact value does not affect the result. @{issue} must precede both @{first_interest} and @{settlement}. @{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=ACCRINTM

@CATEGORY=Finance
@FUNCTION=ACCRINTM
@SHORTDESC=accrued interest
@SYNTAX=ACCRINTM(issue,maturity,rate,par,basis)
@ARGUMENTDESCRIPTION=@{issue}: date of issue
@{maturity}: maturity date
@{rate}: nominal annual interest rate
@{par}: par value
@{basis}: calendar basis
@DESCRIPTION=ACCRINTM calculates the accrued interest from @{issue} to @{maturity}.
@NOTE=@{par} defaults to $1000. If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=ACCRINT

@CATEGORY=Finance
@FUNCTION=AMORDEGRC
@SHORTDESC=depreciation of an asset using French accounting conventions
@SYNTAX=AMORDEGRC(cost,purchase_date,first_period,salvage,period,rate,basis)
@ARGUMENTDESCRIPTION=@{cost}: initial cost of asset
@{purchase_date}: date of purchase
@{first_period}: end of first period
@{salvage}: value after depreciation
@{period}: subject period
@{rate}: depreciation rate
@{basis}: calendar basis
@DESCRIPTION=AMORDEGRC calculates the depreciation of an asset using French accounting conventions. Assets purchased in the middle of a period take prorated depreciation into account. This is similar to AMORLINC, except that a depreciation coefficient is applied in the calculation depending on the life of the assets.
The depreciation coefficient used is:
1.0 for an expected lifetime less than 3 years,
1.5 for an expected lifetime of at least 3 years but less than 5 years,
2.0 for an expected lifetime of at least 5 years but at most 6 years,
2.5 for an expected lifetime of more than 6 years.
@NOTE=Special depreciation rules are applied for the last two periods resulting in a possible total depreciation exceeding the difference of @{cost} - @{salvage}. Named for AMORtissement DEGRessif Comptabilite. If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=AMORLINC

@CATEGORY=Finance
@FUNCTION=AMORLINC
@SHORTDESC=depreciation of an asset using French accounting conventions
@SYNTAX=AMORLINC(cost,purchase_date,first_period,salvage,period,rate,basis)
@ARGUMENTDESCRIPTION=@{cost}: initial cost of asset
@{purchase_date}: date of purchase
@{first_period}: end of first period
@{salvage}: value after depreciation
@{period}: subject period
@{rate}: depreciation rate
@{basis}: calendar basis
@DESCRIPTION=AMORLINC calculates the depreciation of an asset using French accounting conventions. Assets purchased in the middle of a period take prorated depreciation into account. 
@NOTE=Named for AMORtissement LINeaire Comptabilite. If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=AMORDEGRC

@CATEGORY=Finance
@FUNCTION=COUPDAYBS
@SHORTDESC=number of days from coupon period to settlement
@SYNTAX=COUPDAYBS(settlement,maturity,frequency,basis,eom)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@{eom}: end-of-month flag
@DESCRIPTION=COUPDAYBS calculates the number of days from the beginning of the coupon period to the settlement date.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=COUPDAYS

@CATEGORY=Finance
@FUNCTION=COUPDAYS
@SHORTDESC=number of days in the coupon period of the settlement date
@SYNTAX=COUPDAYS(settlement,maturity,frequency,basis,eom)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@{eom}: end-of-month flag
@DESCRIPTION=COUPDAYS calculates the number of days in the coupon period of the settlement date.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=COUPDAYBS,COUPDAYSNC

@CATEGORY=Finance
@FUNCTION=COUPDAYSNC
@SHORTDESC=number of days from the settlement date to the next coupon period
@SYNTAX=COUPDAYSNC(settlement,maturity,frequency,basis,eom)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@{eom}: end-of-month flag
@DESCRIPTION=COUPDAYSNC calculates number of days from the settlement date to the next coupon period.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=COUPDAYS,COUPDAYBS

@CATEGORY=Finance
@FUNCTION=COUPNCD
@SHORTDESC=the next coupon date after settlement
@SYNTAX=COUPNCD(settlement,maturity,frequency,basis,eom)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@{eom}: end-of-month flag
@DESCRIPTION=COUPNCD calculates the coupon date following settlement.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=COUPPCD,COUPDAYS,COUPDAYBS

@CATEGORY=Finance
@FUNCTION=COUPNUM
@SHORTDESC=number of coupons
@SYNTAX=COUPNUM(settlement,maturity,frequency,basis,eom)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@{eom}: end-of-month flag
@DESCRIPTION=COUPNUM calculates the number of coupons to be paid between the settlement and maturity dates, rounded up.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=COUPNCD,COUPPCD

@CATEGORY=Finance
@FUNCTION=COUPPCD
@SHORTDESC=the last coupon date before settlement
@SYNTAX=COUPPCD(settlement,maturity,frequency,basis,eom)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@{eom}: end-of-month flag
@DESCRIPTION=COUPPCD calculates the coupon date preceding settlement.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=COUPNCD,COUPDAYS,COUPDAYBS

@CATEGORY=Finance
@FUNCTION=CUM_BIV_NORM_DIST
@SHORTDESC=cumulative bivariate normal distribution
@SYNTAX=CUM_BIV_NORM_DIST(a,b,rho)
@ARGUMENTDESCRIPTION=@{a}: limit for first random variable
@{b}: limit for second random variable
@{rho}: correlation of the two random variables
@DESCRIPTION=CUM_BIV_NORM_DIST calculates the probability that two standard normal distributed random variables with correlation @{rho} are respectively each less than @{a} and @{b}.

@CATEGORY=Finance
@FUNCTION=CUMIPMT
@SHORTDESC=cumulative interest payment
@SYNTAX=CUMIPMT(rate,nper,pv,start_period,end_period,type)
@ARGUMENTDESCRIPTION=@{rate}: interest rate per period
@{nper}: number of periods
@{pv}: present value
@{start_period}: first period to accumulate for
@{end_period}: last period to accumulate for
@{type}: payment type
@DESCRIPTION=CUMIPMT calculates the cumulative interest paid on a loan from @{start_period} to @{end_period}.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=IPMT

@CATEGORY=Finance
@FUNCTION=CUMPRINC
@SHORTDESC=cumulative principal
@SYNTAX=CUMPRINC(rate,nper,pv,start_period,end_period,type)
@ARGUMENTDESCRIPTION=@{rate}: interest rate per period
@{nper}: number of periods
@{pv}: present value
@{start_period}: first period to accumulate for
@{end_period}: last period to accumulate for
@{type}: payment type
@DESCRIPTION=CUMPRINC calculates the cumulative principal paid on a loan from @{start_period} to @{end_period}.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=PPMT

@CATEGORY=Finance
@FUNCTION=DB
@SHORTDESC=depreciation of an asset
@SYNTAX=DB(cost,salvage,life,period,month)
@ARGUMENTDESCRIPTION=@{cost}: initial cost of asset
@{salvage}: value after depreciation
@{life}: number of periods
@{period}: subject period
@{month}: number of months in first year of depreciation
@DESCRIPTION=DB calculates the depreciation of an asset for a given period using the fixed-declining balance method.
@SEEALSO=DDB,SLN,SYD

@CATEGORY=Finance
@FUNCTION=DDB
@SHORTDESC=depreciation of an asset
@SYNTAX=DDB(cost,salvage,life,period,factor)
@ARGUMENTDESCRIPTION=@{cost}: initial cost of asset
@{salvage}: value after depreciation
@{life}: number of periods
@{period}: subject period
@{factor}: factor at which the balance declines
@DESCRIPTION=DDB calculates the depreciation of an asset for a given period using the double-declining balance method.
@SEEALSO=DB,SLN,SYD

@CATEGORY=Finance
@FUNCTION=DISC
@SHORTDESC=discount rate
@SYNTAX=DISC(settlement,maturity,par,redemption,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{par}: price per $100 face value
@{redemption}: amount received at maturity
@{basis}: calendar basis
@DESCRIPTION=DISC calculates the discount rate for a security.
@NOTE=@{redemption} is the redemption value per $100 face value. If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=PRICEMAT

@CATEGORY=Finance
@FUNCTION=DOLLARDE
@SHORTDESC=convert to decimal dollar amount
@SYNTAX=DOLLARDE(fractional_dollar,fraction)
@ARGUMENTDESCRIPTION=@{fractional_dollar}: amount to convert
@{fraction}: denominator
@DESCRIPTION=DOLLARDE converts a fractional dollar amount into a decimal amount.  This is the inverse of the DOLLARFR function.
@SEEALSO=DOLLARFR

@CATEGORY=Finance
@FUNCTION=DOLLARFR
@SHORTDESC=convert to dollar fraction
@SYNTAX=DOLLARFR(decimal_dollar,fraction)
@ARGUMENTDESCRIPTION=@{decimal_dollar}: amount to convert
@{fraction}: denominator
@DESCRIPTION=DOLLARFR converts a decimal dollar amount into a fractional amount which is represented as the digits after the decimal point.  For example, 2/8 would be represented as .2 while 3/16 would be represented as .03. This is the inverse of the DOLLARDE function.
@SEEALSO=DOLLARDE

@CATEGORY=Finance
@FUNCTION=DURATION
@SHORTDESC=the (Macaulay) duration of a security
@SYNTAX=DURATION(settlement,maturity,coupon,yield,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{coupon}: annual coupon rate
@{yield}: annual yield of security
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=DURATION calculates the (Macaulay) duration of a security.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=MDURATION, G_DURATION

@CATEGORY=Finance
@FUNCTION=EFFECT
@SHORTDESC=effective interest rate
@SYNTAX=EFFECT(rate,nper)
@ARGUMENTDESCRIPTION=@{rate}: nominal annual interest rate
@{nper}: number of periods used for compounding
@DESCRIPTION=EFFECT calculates the effective interest rate using the formula (1+@{rate}/@{nper})^@{nper}-1.
@SEEALSO=NOMINAL

@CATEGORY=Finance
@FUNCTION=EURO
@SHORTDESC=equivalent of 1 EUR
@SYNTAX=EURO(currency)
@ARGUMENTDESCRIPTION=@{currency}: three-letter currency code
@DESCRIPTION=EURO calculates the national currency amount corresponding to 1 EUR for any of the national currencies that were replaced by the Euro on its introduction.
@NOTE=@{currency} must be one of ATS (Austria), BEF (Belgium), CYP (Cyprus), DEM (Germany), EEK (Estonia), ESP (Spain), EUR (Euro), FIM (Finland), FRF (France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), MTL (Malta), NLG (The Netherlands), PTE (Portugal), SIT (Slovenia), or SKK (Slovakia). This function is not likely to be useful anymore.
@SEEALSO=EUROCONVERT

@CATEGORY=Finance
@FUNCTION=EUROCONVERT
@SHORTDESC=pre-Euro amount from one currency to another
@SYNTAX=EUROCONVERT(n,source,target,full_precision,triangulation_precision)
@ARGUMENTDESCRIPTION=@{n}: amount
@{source}: three-letter source currency code
@{target}: three-letter target currency code
@{full_precision}: whether to provide the full precision; defaults to false
@{triangulation_precision}: number of digits (at least 3) to be rounded to after conversion of the source currency to euro; defaults to no rounding
@DESCRIPTION=EUROCONVERT converts @{n} units of currency @{source} to currency @{target}.  The rates used are the official ones used on the introduction of the Euro.
@NOTE=If @{full_precision} is true, the result is not rounded; if it false the result is rounded to 0 or 2 decimals depending on the target currency; defaults to false. @{source} and @{target} must be one of the currencies listed for the EURO function. This function is not likely to be useful anymore.
@SEEALSO=EURO

@CATEGORY=Finance
@FUNCTION=FV
@SHORTDESC=future value
@SYNTAX=FV(rate,nper,pmt,pv,type)
@ARGUMENTDESCRIPTION=@{rate}: effective interest rate per period
@{nper}: number of periods
@{pmt}: payment at each period
@{pv}: present value
@{type}: payment type
@DESCRIPTION=FV calculates the future value of @{pv} moved @{nper} periods into the future, assuming a periodic payment of @{pmt} and an interest rate of @{rate} per period.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=PV

@CATEGORY=Finance
@FUNCTION=FVSCHEDULE
@SHORTDESC=future value
@SYNTAX=FVSCHEDULE(principal,schedule)
@ARGUMENTDESCRIPTION=@{principal}: initial value
@{schedule}: range of interest rates
@DESCRIPTION=FVSCHEDULE calculates the future value of @{principal} after applying a range of interest rates with compounding.
@SEEALSO=FV

@CATEGORY=Finance
@FUNCTION=G_DURATION
@SHORTDESC=the duration of a investment
@SYNTAX=G_DURATION(rate,pv,fv)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{pv}: present value
@{fv}: future value
@DESCRIPTION=G_DURATION calculates the number of periods needed for an investment to attain a desired value.
@ODF=G_DURATION is the OpenFormula function PDURATION.
@SEEALSO=FV,PV,DURATION,MDURATION

@CATEGORY=Finance
@FUNCTION=INTRATE
@SHORTDESC=interest rate
@SYNTAX=INTRATE(settlement,maturity,investment,redemption,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{investment}: amount paid on settlement
@{redemption}: amount received at maturity
@{basis}: calendar basis
@DESCRIPTION=INTRATE calculates the interest of a fully vested security.
@NOTE=If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=RECEIVED

@CATEGORY=Finance
@FUNCTION=IPMT
@SHORTDESC=interest payment for period
@SYNTAX=IPMT(rate,per,nper,pv,fv,type)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{per}: period number
@{nper}: number of periods
@{pv}: present value
@{fv}: future value
@{type}: payment type
@DESCRIPTION=IPMT calculates the interest part of an annuity's payment for period number @{per}.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=PPMT

@CATEGORY=Finance
@FUNCTION=IRR
@SHORTDESC=internal rate of return
@SYNTAX=IRR(values,guess)
@ARGUMENTDESCRIPTION=@{values}: cash flow
@{guess}: an estimate of what the result should be
@DESCRIPTION=IRR calculates the internal rate of return of a cash flow with periodic payments.  @{values} lists the payments (negative values) and receipts (positive values) for each period.
@NOTE=The optional @{guess} is needed because there can be more than one valid result.  It defaults to 10%.
@SEEALSO=XIRR

@CATEGORY=Finance
@FUNCTION=ISPMT
@SHORTDESC=interest payment for period
@SYNTAX=ISPMT(rate,per,nper,pv)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{per}: period number
@{nper}: number of periods
@{pv}: present value
@DESCRIPTION=ISPMT calculates the interest payment for period number @{per}.
@SEEALSO=PV

@CATEGORY=Finance
@FUNCTION=MDURATION
@SHORTDESC=the modified (Macaulay) duration of a security
@SYNTAX=MDURATION(settlement,maturity,coupon,yield,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{coupon}: annual coupon rate
@{yield}: annual yield of security
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=MDURATION calculates the modified (Macaulay) duration of a security.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=DURATION,G_DURATION

@CATEGORY=Finance
@FUNCTION=MIRR
@SHORTDESC=modified internal rate of return
@SYNTAX=MIRR(values,finance_rate,reinvest_rate)
@ARGUMENTDESCRIPTION=@{values}: cash flow
@{finance_rate}: interest rate for financing cost
@{reinvest_rate}: interest rate for reinvestments
@DESCRIPTION=MIRR calculates the modified internal rate of return of a periodic cash flow.
@SEEALSO=IRR,XIRR

@CATEGORY=Finance
@FUNCTION=NOMINAL
@SHORTDESC=nominal interest rate
@SYNTAX=NOMINAL(rate,nper)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{nper}: number of periods used for compounding
@DESCRIPTION=NOMINAL calculates the nominal interest rate from the effective rate.
@SEEALSO=EFFECT

@CATEGORY=Finance
@FUNCTION=NPER
@SHORTDESC=number of periods
@SYNTAX=NPER(rate,pmt,pv,fv,type)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{pmt}: payment at each period
@{pv}: present value
@{fv}: future value
@{type}: payment type
@DESCRIPTION=NPER calculates the number of periods of an investment based on periodic constant payments and a constant interest rate.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=PV,FV

@CATEGORY=Finance
@FUNCTION=NPV
@SHORTDESC=net present value
@SYNTAX=NPV(rate,value1,value2,…)
@ARGUMENTDESCRIPTION=@{rate}: effective interest rate per period
@{value1}: cash flow for period 1
@{value2}: cash flow for period 2
@DESCRIPTION=NPV calculates the net present value of a cash flow.
@SEEALSO=PV

@CATEGORY=Finance
@FUNCTION=ODDFPRICE
@SHORTDESC=price of a security that has an odd first period
@SYNTAX=ODDFPRICE(settlement,maturity,issue,first_interest,rate,yield,redemption,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{issue}: date of issue
@{first_interest}: first interest date
@{rate}: nominal annual interest rate
@{yield}: annual yield of security
@{redemption}: amount received at maturity
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=ODDFPRICE calculates the price per $100 face value of a security that pays periodic interest, but has an odd first period.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=ODDLPRICE,ODDFYIELD

@CATEGORY=Finance
@FUNCTION=ODDFYIELD
@SHORTDESC=yield of a security that has an odd first period
@SYNTAX=ODDFYIELD(settlement,maturity,issue,first_interest,rate,price,redemption,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{issue}: date of issue
@{first_interest}: first interest date
@{rate}: nominal annual interest rate
@{price}: price of security
@{redemption}: amount received at maturity
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=ODDFYIELD calculates the yield of a security that pays periodic interest, but has an odd first period.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=ODDFPRICE,ODDLYIELD

@CATEGORY=Finance
@FUNCTION=ODDLPRICE
@SHORTDESC=price of a security that has an odd last period
@SYNTAX=ODDLPRICE(settlement,maturity,last_interest,rate,yield,redemption,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{last_interest}: last interest date
@{rate}: nominal annual interest rate
@{yield}: annual yield of security
@{redemption}: amount received at maturity
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=ODDLPRICE calculates the price per $100 face value of a security that pays periodic interest, but has an odd last period.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=YIELD,DURATION

@CATEGORY=Finance
@FUNCTION=ODDLYIELD
@SHORTDESC=yield of a security that has an odd last period
@SYNTAX=ODDLYIELD(settlement,maturity,last_interest,rate,price,redemption,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{last_interest}: last interest date
@{rate}: nominal annual interest rate
@{price}: price of security
@{redemption}: amount received at maturity
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=ODDLYIELD calculates the yield of a security that pays periodic interest, but has an odd last period.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=YIELD,DURATION

@CATEGORY=Finance
@FUNCTION=OPT_2_ASSET_CORRELATION
@SHORTDESC=theoretical price of options on 2 assets with correlation @{rho}
@SYNTAX=OPT_2_ASSET_CORRELATION(call_put_flag,spot1,spot2,strike1,strike2,time,cost_of_carry1,cost_of_carry2,rate,volatility1,volatility2,rho)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot1}: spot price of the underlying asset of the first option
@{spot2}: spot price of the underlying asset of the second option
@{strike1}: strike prices of the first option
@{strike2}: strike prices of the second option
@{time}: time to maturity in years
@{cost_of_carry1}: net cost of holding the underlying asset of the first option (for common stocks, the risk free rate less the dividend yield)
@{cost_of_carry2}: net cost of holding the underlying asset of the second option (for common stocks, the risk free rate less the dividend yield)
@{rate}: annualized risk-free interest rate
@{volatility1}: annualized volatility in price of the underlying asset of the first option
@{volatility2}: annualized volatility in price of the underlying asset of the second option
@{rho}: correlation between the two underlying assets
@DESCRIPTION=OPT_2_ASSET_CORRELATION models the theoretical price of options on 2 assets with correlation @{rho}. The payoff for a call is max(@{spot2} - @{strike2},0) if @{spot1} > @{strike1} or 0 otherwise. The payoff for a put is max (@{strike2} - @{spot2}, 0) if @{spot1} < @{strike1} or 0 otherwise.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_AMER_EXCHANGE
@SHORTDESC=theoretical price of an American option to exchange assets
@SYNTAX=OPT_AMER_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,cost_of_carry2,volatility1,volatility2,rho)
@ARGUMENTDESCRIPTION=@{spot1}: spot price of asset 1
@{spot2}: spot price of asset 2
@{qty1}: quantity of asset 1
@{qty2}: quantity of asset 2
@{time}: time to maturity in years
@{rate}: annualized risk-free interest rate
@{cost_of_carry1}: net cost of holding asset 1 (for common stocks, the risk free rate less the dividend yield)
@{cost_of_carry2}: net cost of holding asset 2 (for common stocks, the risk free rate less the dividend yield)
@{volatility1}: annualized volatility in price of asset 1
@{volatility2}: annualized volatility in price of asset 2
@{rho}: correlation between the prices of the two assets
@DESCRIPTION=OPT_AMER_EXCHANGE models the theoretical price of an American option to exchange one asset with quantity @{qty2} and spot price @{spot2} for another with quantity @{qty1} and spot price @{spot1}.
@SEEALSO=OPT_EURO_EXCHANGE,OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BAW_AMER
@SHORTDESC=theoretical price of an option according to the Barone Adesie & Whaley approximation
@SYNTAX=OPT_BAW_AMER(call_put_flag,spot,strike,time,rate,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in days
@{rate}: annualized risk-free interest rate
@{cost_of_carry}: net cost of holding the underlying asset
@{volatility}: annualized volatility of the asset
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BINOMIAL
@SHORTDESC=theoretical price of either an American or European style option using a binomial tree
@SYNTAX=OPT_BINOMIAL(amer_euro_flag,call_put_flag,num_time_steps,spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{amer_euro_flag}: 'a' for an American style option or 'e' for a European style option
@{call_put_flag}: 'c' for a call and 'p' for a put
@{num_time_steps}: number of time steps used in the valuation
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: annualized risk-free interest rate
@{volatility}: annualized volatility of the asset
@{cost_of_carry}: net cost of holding the underlying asset
@NOTE=A larger @{num_time_steps} yields greater accuracy but  OPT_BINOMIAL is slower to calculate.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BJER_STENS
@SHORTDESC=theoretical price of American options according to the Bjerksund & Stensland approximation technique
@SYNTAX=OPT_BJER_STENS(call_put_flag,spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in days
@{rate}: annualized risk-free interest rate
@{volatility}: annualized volatility of the asset
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BS
@SHORTDESC=price of a European option
@SYNTAX=OPT_BS(call_put_flag,spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_BS uses the Black-Scholes model to calculate the price of a European option struck at @{strike} on an asset with spot price @{spot}.
@NOTE=The returned value will be expressed in the same units as @{strike} and @{spot}.
@SEEALSO=OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_VEGA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BS_CARRYCOST
@SHORTDESC=elasticity of a European option
@SYNTAX=OPT_BS_CARRYCOST(call_put_flag,spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_BS_CARRYCOST uses the Black-Scholes model to calculate the 'elasticity' of a European option struck at @{strike} on an asset with spot price @{spot}. The elasticity of an option is the rate of change of its price with respect to its @{cost_of_carry}.
@NOTE=Elasticity is expressed as the rate of change of the option value, per 100% volatility.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BS_DELTA
@SHORTDESC=delta of a European option
@SYNTAX=OPT_BS_DELTA(call_put_flag,spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_BS_DELTA uses the Black-Scholes model to calculate the 'delta' of a European option struck at @{strike} on an asset with spot price @{spot}.
@NOTE=The returned value will be expressed in the same units as @{strike} and @{spot}.
@SEEALSO=OPT_BS,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_VEGA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BS_GAMMA
@SHORTDESC=gamma of a European option
@SYNTAX=OPT_BS_GAMMA(spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_BS_GAMMA uses the Black-Scholes model to calculate the 'gamma' of a European option struck at @{strike} on an asset with spot price @{spot}. The gamma of an option is the second derivative of its price with respect to the price of the underlying asset.
@NOTE=Gamma is expressed as the rate of change of delta per unit change in @{spot}. Gamma is the same for calls and puts.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_VEGA

@CATEGORY=Finance
@FUNCTION=OPT_BS_RHO
@SHORTDESC=rho of a European option
@SYNTAX=OPT_BS_RHO(call_put_flag,spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_BS_RHO uses the Black-Scholes model to calculate the 'rho' of a European option struck at @{strike} on an asset with spot price @{spot}. The rho of an option is the rate of change of its price with respect to the risk free interest rate.
@NOTE=Rho is expressed as the rate of change of the option value, per 100% change in @{rate}.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_THETA,OPT_BS_VEGA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BS_THETA
@SHORTDESC=theta of a European option
@SYNTAX=OPT_BS_THETA(call_put_flag,spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_BS_THETA uses the Black-Scholes model to calculate the 'theta' of a European option struck at @{strike} on an asset with spot price @{spot}. The theta of an option is the rate of change of its price with respect to time to expiry.
@NOTE=Theta is expressed as the negative of the rate of change of the option value, per 365.25 days.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_VEGA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_BS_VEGA
@SHORTDESC=vega of a European option
@SYNTAX=OPT_BS_VEGA(spot,strike,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_BS_VEGA uses the Black-Scholes model to calculate the 'vega' of a European option struck at @{strike} on an asset with spot price @{spot}. The vega of an option is the rate of change of its price with respect to volatility.
@NOTE=Vega is the same for calls and puts. Vega is expressed as the rate of change of option value, per 100% volatility.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_COMPLEX_CHOOSER
@SHORTDESC=theoretical price of a complex chooser option
@SYNTAX=OPT_COMPLEX_CHOOSER(spot,strike_call,strike_put,time,time_call,time_put,rate,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{spot}: spot price
@{strike_call}: strike price, if exercised as a call option
@{strike_put}: strike price, if exercised as a put option
@{time}: time in years until the holder chooses a put or a call option
@{time_call}: time in years to maturity of the call option if chosen
@{time_put}: time in years  to maturity of the put option if chosen
@{rate}: annualized risk-free interest rate
@{cost_of_carry}: net cost of holding the underlying asset
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_EURO_EXCHANGE
@SHORTDESC=theoretical price of a European option to exchange assets
@SYNTAX=OPT_EURO_EXCHANGE(spot1,spot2,qty1,qty2,time,rate,cost_of_carry1,cost_of_carry2,volatility1,volatility2,rho)
@ARGUMENTDESCRIPTION=@{spot1}: spot price of asset 1
@{spot2}: spot price of asset 2
@{qty1}: quantity of asset 1
@{qty2}: quantity of asset 2
@{time}: time to maturity in years
@{rate}: annualized risk-free interest rate
@{cost_of_carry1}: net cost of holding asset 1 (for common stocks, the risk free rate less the dividend yield)
@{cost_of_carry2}: net cost of holding asset 2 (for common stocks, the risk free rate less the dividend yield)
@{volatility1}: annualized volatility in price of asset 1
@{volatility2}: annualized volatility in price of asset 2
@{rho}: correlation between the prices of the two assets
@DESCRIPTION=OPT_EURO_EXCHANGE models the theoretical price of a European option to exchange one asset with quantity @{qty2} and spot price @{spot2} for another with quantity @{qty1} and spot price @{spot1}.
@SEEALSO=OPT_AMER_EXCHANGE,OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_EXEC
@SHORTDESC=theoretical price of executive stock options
@SYNTAX=OPT_EXEC(call_put_flag,spot,strike,time,rate,volatility,cost_of_carry,lambda)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in days
@{rate}: annualized risk-free interest rate
@{volatility}: annualized volatility of the asset
@{cost_of_carry}: net cost of holding the underlying asset
@{lambda}: jump rate for executives
@NOTE=The model assumes executives forfeit their options if they leave the company.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_EXTENDIBLE_WRITER
@SHORTDESC=theoretical price of extendible writer options
@SYNTAX=OPT_EXTENDIBLE_WRITER(call_put_flag,spot,strike1,strike2,time1,time2,rate,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike1}: strike price at which the option is struck
@{strike2}: strike price at which the option is re-struck if out of the money at @{time1}
@{time1}: initial maturity of the option in years
@{time2}: extended maturity in years if chosen
@{rate}: annualized risk-free interest rate
@{cost_of_carry}: net cost of holding the underlying asset
@{volatility}: annualized volatility of the asset
@DESCRIPTION=OPT_EXTENDIBLE_WRITER models the theoretical price of extendible writer options. These are options that have their maturity extended to @{time2} if the option is out of the money at @{time1}.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_FIXED_STRK_LKBK
@SHORTDESC=theoretical price of a fixed-strike lookback option
@SYNTAX=OPT_FIXED_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,strike,time,rate,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{spot_min}: minimum spot price of the underlying asset so far observed
@{spot_max}: maximum spot price of the underlying asset so far observed
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: annualized risk-free interest rate
@{cost_of_carry}: net cost of holding the underlying asset
@{volatility}: annualized volatility of the asset
@DESCRIPTION=OPT_FIXED_STRK_LKBK determines the theoretical price of a fixed-strike lookback option where the holder of the option may exercise on expiry at the most favourable price observed during the options life of the underlying asset.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_FLOAT_STRK_LKBK
@SHORTDESC=theoretical price of floating-strike lookback option
@SYNTAX=OPT_FLOAT_STRK_LKBK(call_put_flag,spot,spot_min,spot_max,time,rate,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{spot_min}: minimum spot price of the underlying asset so far observed
@{spot_max}: maximum spot price of the underlying asset so far observed
@{time}: time to maturity in years
@{rate}: annualized risk-free interest rate
@{cost_of_carry}: net cost of holding the underlying asset
@{volatility}: annualized volatility of the asset
@DESCRIPTION=OPT_FLOAT_STRK_LKBK determines the theoretical price of a floating-strike lookback option where the holder of the option may exercise on expiry at the most favourable price observed during the options life of the underlying asset.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_FORWARD_START
@SHORTDESC=theoretical price of forward start options
@SYNTAX=OPT_FORWARD_START(call_put_flag,spot,alpha,time_start,time,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{alpha}: fraction setting the strike price at the future date @{time_start}
@{time_start}: time until the option starts in days
@{time}: time to maturity in days
@{rate}: annualized risk-free interest rate
@{volatility}: annualized volatility of the asset
@{cost_of_carry}: net cost of holding the underlying asset
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_FRENCH
@SHORTDESC=theoretical price of a European option adjusted for trading day volatility
@SYNTAX=OPT_FRENCH(call_put_flag,spot,strike,time,ttime,rate,volatility,cost_of_carry)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: ratio of the number of calendar days to exercise and the number of calendar days in the year
@{ttime}: ratio of the number of trading days to exercise and the number of trading days in the year
@{rate}: risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{cost_of_carry}: net cost of holding the underlying asset (for common stocks, the risk free rate less the dividend yield), defaults to 0
@DESCRIPTION=OPT_FRENCH values the theoretical price of a European option adjusted for trading day volatility, struck at @{strike} on an asset with spot price @{spot}.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_GARMAN_KOHLHAGEN
@SHORTDESC=theoretical price of a European currency option
@SYNTAX=OPT_GARMAN_KOHLHAGEN(call_put_flag,spot,strike,time,domestic_rate,foreign_rate,volatility)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: number of days to exercise
@{domestic_rate}: domestic risk-free interest rate to the exercise date in percent
@{foreign_rate}: foreign risk-free interest rate to the exercise date in percent
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@DESCRIPTION=OPT_GARMAN_KOHLHAGEN values the theoretical price of a European currency option struck at @{strike} on an asset with spot price @{spot}.
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_JUMP_DIFF
@SHORTDESC=theoretical price of an option according to the Jump Diffusion process
@SYNTAX=OPT_JUMP_DIFF(call_put_flag,spot,strike,time,rate,volatility,lambda,gamma)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: the annualized rate of interest
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@{lambda}: expected number of 'jumps' per year
@{gamma}: proportion of volatility explained by the 'jumps'
@DESCRIPTION=OPT_JUMP_DIFF models the theoretical price of an option according to the Jump Diffusion process (Merton).
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_MILTERSEN_SCHWARTZ
@SHORTDESC=theoretical price of options on commodities futures according to Miltersen & Schwartz
@SYNTAX=OPT_MILTERSEN_SCHWARTZ(call_put_flag,p_t,f_t,strike,t1,t2,v_s,v_e,v_f,rho_se,rho_sf,rho_ef,kappa_e,kappa_f)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{p_t}: zero coupon bond with expiry at option maturity
@{f_t}: futures price
@{strike}: strike price
@{t1}: time to maturity of the option
@{t2}: time to maturity of the underlying commodity futures contract
@{v_s}: volatility of the spot commodity price
@{v_e}: volatility of the future convenience yield
@{v_f}: volatility of the forward rate of interest
@{rho_se}: correlation between the spot commodity price and the convenience yield
@{rho_sf}: correlation between the spot commodity price and the forward interest rate
@{rho_ef}: correlation between the forward interest rate and the convenience yield
@{kappa_e}: speed of mean reversion of the convenience yield
@{kappa_f}: speed of mean reversion of the forward interest rate
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_ON_OPTIONS
@SHORTDESC=theoretical price of options on options
@SYNTAX=OPT_ON_OPTIONS(type_flag,spot,strike1,strike2,time1,time2,rate,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{type_flag}: 'cc' for calls on calls, 'cp' for calls on puts, and so on for 'pc', and 'pp'
@{spot}: spot price
@{strike1}: strike price at which the option being valued is struck
@{strike2}: strike price at which the underlying option is struck
@{time1}: time in years to maturity of the option
@{time2}: time in years to the maturity of the underlying option
@{rate}: annualized risk-free interest rate
@{cost_of_carry}: net cost of holding the underlying asset of the underlying option
@{volatility}: annualized volatility in price of the underlying asset of the underlying option
@NOTE=For common stocks, @{cost_of_carry} is the risk free rate less the dividend yield. @{time2} ≥ @{time1}
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_RGW
@SHORTDESC=theoretical price of an American option according to the Roll-Geske-Whaley approximation
@SYNTAX=OPT_RGW(spot,strike,time_payout,time_exp,rate,d,volatility)
@ARGUMENTDESCRIPTION=@{spot}: spot price
@{strike}: strike price
@{time_payout}: time to dividend payout
@{time_exp}: time to expiration
@{rate}: annualized interest rate
@{d}: amount of the dividend to be paid expressed in currency
@{volatility}: annualized volatility of the asset in percent for the period through to the exercise date
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_SIMPLE_CHOOSER
@SHORTDESC=theoretical price of a simple chooser option
@SYNTAX=OPT_SIMPLE_CHOOSER(call_put_flag,spot,strike,time1,time2,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{time1}: time in years until the holder chooses a put or a call option
@{time2}: time in years until the chosen option expires
@{cost_of_carry}: net cost of holding the underlying asset
@{volatility}: annualized volatility of the asset
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_SPREAD_APPROX
@SHORTDESC=theoretical price of a European option on the spread between two futures contracts
@SYNTAX=OPT_SPREAD_APPROX(call_put_flag,fut_price1,fut_price2,strike,time,rate,volatility1,volatility2,rho)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{fut_price1}: price of the first futures contract
@{fut_price2}: price of the second futures contract
@{strike}: strike price
@{time}: time to maturity in years
@{rate}: annualized risk-free interest rate
@{volatility1}: annualized volatility in price of the first underlying futures contract
@{volatility2}: annualized volatility in price of the second underlying futures contract
@{rho}: correlation between the two futures contracts
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=OPT_TIME_SWITCH
@SHORTDESC=theoretical price of time switch options
@SYNTAX=OPT_TIME_SWITCH(call_put_flag,spot,strike,a,time,m,dt,rate,cost_of_carry,volatility)
@ARGUMENTDESCRIPTION=@{call_put_flag}: 'c' for a call and 'p' for a put
@{spot}: spot price
@{strike}: strike price
@{a}: amount received for each time period
@{time}: time to maturity in years
@{m}: number of time units the option has already met the condition
@{dt}: agreed upon discrete time period expressed as a fraction of a year
@{rate}: annualized risk-free interest rate
@{cost_of_carry}: net cost of holding the underlying asset
@{volatility}: annualized volatility of the asset
@DESCRIPTION=OPT_TIME_SWITCH models the theoretical price of time switch options. (Pechtl 1995). The holder receives @{a} * @{dt} for each period that the asset price was greater than @{strike} (for a call) or below it (for a put).
@SEEALSO=OPT_BS,OPT_BS_DELTA,OPT_BS_RHO,OPT_BS_THETA,OPT_BS_GAMMA

@CATEGORY=Finance
@FUNCTION=PMT
@SHORTDESC=payment for annuity
@SYNTAX=PMT(rate,nper,pv,fv,type)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{nper}: number of periods
@{pv}: present value
@{fv}: future value
@{type}: payment type
@DESCRIPTION=PMT calculates the payment amount for an annuity.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=PV,FV,RATE,ISPMT

@CATEGORY=Finance
@FUNCTION=PPMT
@SHORTDESC=interest payment for period
@SYNTAX=PPMT(rate,per,nper,pv,fv,type)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{per}: period number
@{nper}: number of periods
@{pv}: present value
@{fv}: future value
@{type}: payment type
@DESCRIPTION=PPMT calculates the principal part of an annuity's payment for period number @{per}.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=IPMT

@CATEGORY=Finance
@FUNCTION=PRICE
@SHORTDESC=price of a security
@SYNTAX=PRICE(settlement,maturity,rate,yield,redemption,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{rate}: nominal annual interest rate
@{yield}: annual yield of security
@{redemption}: amount received at maturity
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=PRICE calculates the price per $100 face value of a security that pays periodic interest.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=YIELD,DURATION

@CATEGORY=Finance
@FUNCTION=PRICEDISC
@SHORTDESC=discounted price
@SYNTAX=PRICEDISC(settlement,maturity,discount,redemption,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{discount}: annual rate at which to discount
@{redemption}: amount received at maturity
@{basis}: calendar basis
@DESCRIPTION=PRICEDISC calculates the price per $100 face value of a bond that does not pay interest at maturity.
@NOTE=If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=PRICEMAT

@CATEGORY=Finance
@FUNCTION=PRICEMAT
@SHORTDESC=price at maturity
@SYNTAX=PRICEMAT(settlement,maturity,issue,discount,yield,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{issue}: date of issue
@{discount}: annual rate at which to discount
@{yield}: annual yield of security
@{basis}: calendar basis
@DESCRIPTION=PRICEMAT calculates the price per $100 face value of a bond that pays interest at maturity.
@NOTE=If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=PRICEDISC

@CATEGORY=Finance
@FUNCTION=PV
@SHORTDESC=present value
@SYNTAX=PV(rate,nper,pmt,fv,type)
@ARGUMENTDESCRIPTION=@{rate}: effective interest rate per period
@{nper}: number of periods
@{pmt}: payment at each period
@{fv}: future value
@{type}: payment type
@DESCRIPTION=PV calculates the present value of @{fv} which is @{nper} periods into the future, assuming a periodic payment of @{pmt} and an interest rate of @{rate} per period.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=FV

@CATEGORY=Finance
@FUNCTION=RATE
@SHORTDESC=rate of investment
@SYNTAX=RATE(nper,pmt,pv,fv,type,guess)
@ARGUMENTDESCRIPTION=@{nper}: number of periods
@{pmt}: payment at each period
@{pv}: present value
@{fv}: future value
@{type}: payment type
@{guess}: an estimate of what the result should be
@DESCRIPTION=RATE calculates the rate of return.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period. The optional @{guess} is needed because there can be more than one valid result.  It defaults to 10%.
@SEEALSO=PV,FV

@CATEGORY=Finance
@FUNCTION=RECEIVED
@SHORTDESC=amount to be received at maturity
@SYNTAX=RECEIVED(settlement,maturity,investment,rate,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{investment}: amount paid on settlement
@{rate}: nominal annual interest rate
@{basis}: calendar basis
@DESCRIPTION=RECEIVED calculates the amount to be received when a security matures.
@NOTE=If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=INTRATE

@CATEGORY=Finance
@FUNCTION=RRI
@SHORTDESC=equivalent interest rate for an investment increasing in value
@SYNTAX=RRI(p,pv,fv)
@ARGUMENTDESCRIPTION=@{p}: number of periods
@{pv}: present value
@{fv}: future value
@DESCRIPTION=RRI determines an equivalent interest rate for an investment that increases in value. The interest is compounded after each complete period.
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period. Note that @{p} need not be an integer but for fractional value the calculated rate is only approximate.
@ODF=This function is OpenFormula compatible.
@SEEALSO=PV,FV,RATE

@CATEGORY=Finance
@FUNCTION=SLN
@SHORTDESC=depreciation of an asset
@SYNTAX=SLN(cost,salvage,life)
@ARGUMENTDESCRIPTION=@{cost}: initial cost of asset
@{salvage}: value after depreciation
@{life}: number of periods
@DESCRIPTION=SLN calculates the depreciation of an asset using the straight-line method.
@SEEALSO=DB,DDB,SYD

@CATEGORY=Finance
@FUNCTION=SYD
@SHORTDESC=sum-of-years depreciation
@SYNTAX=SYD(cost,salvage,life,period)
@ARGUMENTDESCRIPTION=@{cost}: initial cost of asset
@{salvage}: value after depreciation
@{life}: number of periods
@{period}: subject period
@DESCRIPTION=SYD calculates the depreciation of an asset using the sum-of-years method.
@SEEALSO=DB,DDB,SLN

@CATEGORY=Finance
@FUNCTION=TBILLEQ
@SHORTDESC=bond-equivalent yield for a treasury bill
@SYNTAX=TBILLEQ(settlement,maturity,discount)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{discount}: annual rate at which to discount
@DESCRIPTION=TBILLEQ calculates the bond-equivalent yield for a treasury bill.
@SEEALSO=TBILLPRICE,TBILLYIELD

@CATEGORY=Finance
@FUNCTION=TBILLPRICE
@SHORTDESC=price of a treasury bill
@SYNTAX=TBILLPRICE(settlement,maturity,discount)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{discount}: annual rate at which to discount
@DESCRIPTION=TBILLPRICE calculates the price per $100 face value for a treasury bill.
@SEEALSO=TBILLEQ,TBILLYIELD

@CATEGORY=Finance
@FUNCTION=TBILLYIELD
@SHORTDESC=yield of a treasury bill
@SYNTAX=TBILLYIELD(settlement,maturity,price)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{price}: price
@DESCRIPTION=TBILLYIELD calculates the yield of a treasury bill.
@SEEALSO=TBILLEQ,TBILLPRICE

@CATEGORY=Finance
@FUNCTION=VDB
@SHORTDESC=depreciation of an asset
@SYNTAX=VDB(cost,salvage,life,start_period,end_period,factor,no_switch)
@ARGUMENTDESCRIPTION=@{cost}: initial cost of asset
@{salvage}: value after depreciation
@{life}: number of periods
@{start_period}: first period to accumulate for
@{end_period}: last period to accumulate for
@{factor}: factor at which the balance declines
@{no_switch}: do not switch to straight-line depreciation
@DESCRIPTION=VDB calculates the depreciation of an asset for a given period range using the variable-rate declining balance method.
@NOTE=If @{no_switch} is FALSE, the calculation switches to straight-line depreciation when depreciation is greater than the declining balance calculation.
@SEEALSO=DB,DDB

@CATEGORY=Finance
@FUNCTION=XIRR
@SHORTDESC=internal rate of return
@SYNTAX=XIRR(values,dates,guess)
@ARGUMENTDESCRIPTION=@{values}: cash flow
@{dates}: dates of cash flow
@{guess}: an estimate of what the result should be
@DESCRIPTION=XIRR calculates the annualized internal rate of return of a cash flow at arbitrary points in time.  @{values} lists the payments (negative values) and receipts (positive values) with one value for each entry in @{dates}.
@NOTE=The optional @{guess} is needed because there can be more than one valid result.  It defaults to 10%.
@SEEALSO=IRR

@CATEGORY=Finance
@FUNCTION=XNPV
@SHORTDESC=net present value
@SYNTAX=XNPV(rate,values,dates)
@ARGUMENTDESCRIPTION=@{rate}: effective annual interest rate
@{values}: cash flow
@{dates}: dates of cash flow
@DESCRIPTION=XNPV calculates the net present value of a cash flow at irregular times
@NOTE=If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
@SEEALSO=NPV

@CATEGORY=Finance
@FUNCTION=YIELD
@SHORTDESC=yield of a security
@SYNTAX=YIELD(settlement,maturity,rate,price,redemption,frequency,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{rate}: nominal annual interest rate
@{price}: price of security
@{redemption}: amount received at maturity
@{frequency}: number of interest payments per year
@{basis}: calendar basis
@DESCRIPTION=YIELD calculates the yield of a security that pays periodic interest.
@NOTE=@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly). If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=PRICE,DURATION

@CATEGORY=Finance
@FUNCTION=YIELDDISC
@SHORTDESC=yield of a discounted security
@SYNTAX=YIELDDISC(settlement,maturity,price,redemption,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{price}: price of security
@{redemption}: amount received at maturity
@{basis}: calendar basis
@DESCRIPTION=YIELDDISC calculates the yield of a discounted security.
@NOTE=If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=PRICE,DURATION

@CATEGORY=Finance
@FUNCTION=YIELDMAT
@SHORTDESC=yield of a security
@SYNTAX=YIELDMAT(settlement,maturity,issue,rate,price,basis)
@ARGUMENTDESCRIPTION=@{settlement}: settlement date
@{maturity}: maturity date
@{issue}: date of issue
@{rate}: nominal annual interest rate
@{price}: price of security
@{basis}: calendar basis
@DESCRIPTION=YIELDMAT calculates the yield of a security for which the interest is paid at maturity date.
@NOTE=If @{basis} is 0, then the US 30/360 method is used. If @{basis} is 1, then actual number of days is used. If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days. If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days. If @{basis} is 4, then the European 30/360 method is used.
@SEEALSO=YIELDDISC,YIELD

@CATEGORY=Gnumeric
@FUNCTION=GNUMERIC_VERSION
@SHORTDESC=the current version of Gnumeric
@SYNTAX=GNUMERIC_VERSION()
@DESCRIPTION=GNUMERIC_VERSION returns the version of gnumeric as a string.

@CATEGORY=Information
@FUNCTION=CELL
@SHORTDESC=information of @{type} about @{cell}
@SYNTAX=CELL(type,cell)
@ARGUMENTDESCRIPTION=@{type}: string specifying the type of information requested
@{cell}: cell reference
@DESCRIPTION=@{type} specifies the type of information you want to obtain:
  address        		Returns the given cell reference as text.
  col            		Returns the number of the column in @{cell}.
  color          		Returns 0.
  contents       		Returns the contents of the cell in @{cell}.
  column         		Returns the number of the column in @{cell}.
  columnwidth    	Returns the column width.
  coord          		Returns the absolute address of @{cell}.
  datatype       	same as type
  filename       		Returns the name of the file of @{cell}.
  format         		Returns the code of the format of the cell.
  formulatype    	same as type
  locked         		Returns 1 if @{cell} is locked.
  parentheses    	Returns 1 if @{cell} contains a negative value
                 		and its format displays it with parentheses.
  prefix         		Returns a character indicating the horizontal
                 		alignment of @{cell}.
  prefixcharacter  	same as prefix
  protect        		Returns 1 if @{cell} is locked.
  row            		Returns the number of the row in @{cell}.
  sheetname      	Returns the name of the sheet of @{cell}.
  type           		Returns "l" if @{cell} contains a string, 
                 		"v" if it contains some other value, and 
                 		"b" if @{cell} is blank.
  value          		Returns the contents of the cell in @{cell}.
  width          		Returns the column width.
@EXCEL=This function is Excel compatible.
@SEEALSO=INDIRECT

@CATEGORY=Information
@FUNCTION=COUNTBLANK
@SHORTDESC=the number of blank cells in @{range}
@SYNTAX=COUNTBLANK(range)
@ARGUMENTDESCRIPTION=@{range}: a cell range
@EXCEL=This function is Excel compatible.
@SEEALSO=COUNT

@CATEGORY=Information
@FUNCTION=ERROR
@SHORTDESC=the error with the given @{name}
@SYNTAX=ERROR(name)
@ARGUMENTDESCRIPTION=@{name}: string
@SEEALSO=ISERROR

@CATEGORY=Information
@FUNCTION=ERROR.TYPE
@SHORTDESC=the type of @{error}
@SYNTAX=ERROR.TYPE(error)
@ARGUMENTDESCRIPTION=@{error}: an error
@DESCRIPTION=ERROR.TYPE returns an error number corresponding to the given error value.  The error numbers for error values are:

	#DIV/0!  		2
	#VALUE!  	3
	#REF!    		4
	#NAME?   	5
	#NUM!    	6
	#N/A     		7
@EXCEL=This function is Excel compatible.
@SEEALSO=ISERROR

@CATEGORY=Information
@FUNCTION=EXPRESSION
@SHORTDESC=expression in @{cell} as a string
@SYNTAX=EXPRESSION(cell)
@ARGUMENTDESCRIPTION=@{cell}: a cell reference
@NOTE=If @{cell} contains no expression, EXPRESSION returns empty.
@SEEALSO=TEXT

@CATEGORY=Information
@FUNCTION=GET.FORMULA
@SHORTDESC=the formula in @{cell} as a string
@SYNTAX=GET.FORMULA(cell)
@ARGUMENTDESCRIPTION=@{cell}: the referenced cell
@ODF=GET.FORMULA is the OpenFormula function FORMULA.
@SEEALSO=EXPRESSION,ISFORMULA

@CATEGORY=Information
@FUNCTION=GET.LINK
@SHORTDESC=the target of the hyperlink attached to @{cell} as a string
@SYNTAX=GET.LINK(cell)
@ARGUMENTDESCRIPTION=@{cell}: the referenced cell
@NOTE=The value return is not updated automatically when the link attached to @{cell} changes but requires a recalculation.
@SEEALSO=HYPERLINK

@CATEGORY=Information
@FUNCTION=GETENV
@SHORTDESC=the value of execution environment variable @{name}
@SYNTAX=GETENV(name)
@ARGUMENTDESCRIPTION=@{name}: the name of the environment variable
@NOTE=If a variable called @{name} does not exist, #N/A! will be returned. Variable names are case sensitive.

@CATEGORY=Information
@FUNCTION=INFO
@SHORTDESC=information about the current operating environment according to @{type}
@SYNTAX=INFO(type)
@ARGUMENTDESCRIPTION=@{type}: string giving the type of information requested
@DESCRIPTION=INFO returns information about the current operating environment according to @{type}:
  memavail     		Returns the amount of memory available, bytes.
  memused      	Returns the amount of memory used (bytes).
  numfile      		Returns the number of active worksheets.
  osversion    		Returns the operating system version.
  recalc       		Returns the recalculation mode (automatic).
  release      		Returns the version of Gnumeric as text.
  system       		Returns the name of the environment.
  totmem       		Returns the amount of total memory available.
@EXCEL=This function is Excel compatible.
@SEEALSO=CELL

@CATEGORY=Information
@FUNCTION=ISBLANK
@SHORTDESC=TRUE if @{value} is blank
@SYNTAX=ISBLANK(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@DESCRIPTION=This function checks if a value is blank.  Empty cells are blank, but empty strings are not.
@EXCEL=This function is Excel compatible.

@CATEGORY=Information
@FUNCTION=ISERR
@SHORTDESC=TRUE if @{value} is any error value except #N/A
@SYNTAX=ISERR(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@EXCEL=This function is Excel compatible.
@SEEALSO=ISERROR

@CATEGORY=Information
@FUNCTION=ISERROR
@SHORTDESC=TRUE if @{value} is any error value
@SYNTAX=ISERROR(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@EXCEL=This function is Excel compatible.
@SEEALSO=ISERR,ISNA

@CATEGORY=Information
@FUNCTION=ISEVEN
@SHORTDESC=TRUE if @{n} is even
@SYNTAX=ISEVEN(n)
@ARGUMENTDESCRIPTION=@{n}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=ISODD

@CATEGORY=Information
@FUNCTION=ISFORMULA
@SHORTDESC=TRUE if @{cell} contains a formula
@SYNTAX=ISFORMULA(cell)
@ARGUMENTDESCRIPTION=@{cell}: the referenced cell
@ODF=ISFORMULA is OpenFormula compatible.
@SEEALSO=GET.FORMULA

@CATEGORY=Information
@FUNCTION=ISLOGICAL
@SHORTDESC=TRUE if @{value} is a logical value
@SYNTAX=ISLOGICAL(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@DESCRIPTION=This function checks if a value is either TRUE or FALSE.
@EXCEL=This function is Excel compatible.

@CATEGORY=Information
@FUNCTION=ISNA
@SHORTDESC=TRUE if @{value} is the #N/A error value
@SYNTAX=ISNA(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@EXCEL=This function is Excel compatible.
@SEEALSO=NA

@CATEGORY=Information
@FUNCTION=ISNONTEXT
@SHORTDESC=TRUE if @{value} is not text
@SYNTAX=ISNONTEXT(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@EXCEL=This function is Excel compatible.
@SEEALSO=ISTEXT

@CATEGORY=Information
@FUNCTION=ISNUMBER
@SHORTDESC=TRUE if @{value} is a number
@SYNTAX=ISNUMBER(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@DESCRIPTION=This function checks if a value is a number.  Neither TRUE nor FALSE are numbers for this purpose.
@EXCEL=This function is Excel compatible.

@CATEGORY=Information
@FUNCTION=ISODD
@SHORTDESC=TRUE if @{n} is odd
@SYNTAX=ISODD(n)
@ARGUMENTDESCRIPTION=@{n}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=ISEVEN

@CATEGORY=Information
@FUNCTION=ISREF
@SHORTDESC=TRUE if @{value} is a reference
@SYNTAX=ISREF(value,…)
@ARGUMENTDESCRIPTION=@{value}: a value
@DESCRIPTION=This function checks if a value is a cell reference.
@EXCEL=This function is Excel compatible.

@CATEGORY=Information
@FUNCTION=ISTEXT
@SHORTDESC=TRUE if @{value} is text
@SYNTAX=ISTEXT(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@EXCEL=This function is Excel compatible.
@SEEALSO=ISNONTEXT

@CATEGORY=Information
@FUNCTION=N
@SHORTDESC=@{text} converted to a number
@SYNTAX=N(text)
@ARGUMENTDESCRIPTION=@{text}: string
@NOTE=If @{text} contains non-numerical text, 0 is returned.
@EXCEL=This function is Excel compatible.

@CATEGORY=Information
@FUNCTION=NA
@SHORTDESC=the error value #N/A
@SYNTAX=NA()
@EXCEL=This function is Excel compatible.
@SEEALSO=ISNA

@CATEGORY=Information
@FUNCTION=TYPE
@SHORTDESC=a number indicating the data type of @{value}
@SYNTAX=TYPE(value)
@ARGUMENTDESCRIPTION=@{value}: a value
@DESCRIPTION=TYPE returns a number indicating the data type of @{value}:
1  	= number
2  	= text
4  	= boolean
16 	= error
64 	= array
@EXCEL=This function is Excel compatible.

@CATEGORY=Logic
@FUNCTION=AND
@SHORTDESC=logical conjunction
@SYNTAX=AND(b0,b1,…)
@ARGUMENTDESCRIPTION=@{b0}: logical value
@{b1}: logical value
@DESCRIPTION=AND calculates the logical conjunction of its arguments @{b0},@{b1},...
@NOTE=If an argument is numerical, zero is considered FALSE and anything else TRUE. Strings and empty values are ignored. If no logical values are provided, then the error #VALUE! is returned. This function is strict: if any argument is an error, the result will be the first such error.
@EXCEL=This function is Excel compatible.
@SEEALSO=OR,NOT,IF

@CATEGORY=Logic
@FUNCTION=FALSE
@SHORTDESC=the value FALSE
@SYNTAX=FALSE()
@DESCRIPTION=FALSE returns the value FALSE.
@EXCEL=This function is Excel compatible.
@SEEALSO=TRUE,IF

@CATEGORY=Logic
@FUNCTION=IF
@SHORTDESC=conditional expression
@SYNTAX=IF(cond,trueval,falseval)
@ARGUMENTDESCRIPTION=@{cond}: condition
@{trueval}: value to use if condition is true
@{falseval}: value to use if condition is false
@DESCRIPTION=This function first evaluates the condition.  If the result is true, it will then evaluate and return the second argument.  Otherwise, it will evaluate and return the last argument.
@SEEALSO=AND,OR,XOR,NOT,IFERROR

@CATEGORY=Logic
@FUNCTION=IFERROR
@SHORTDESC=test for error
@SYNTAX=IFERROR(x,y)
@ARGUMENTDESCRIPTION=@{x}: value to test for error
@{y}: alternate value
@DESCRIPTION=This function returns the first value, unless that is an error, in which case it returns the second.
@SEEALSO=IF,ISERROR

@CATEGORY=Logic
@FUNCTION=IFNA
@SHORTDESC=test for #NA! error
@SYNTAX=IFNA(x,y)
@ARGUMENTDESCRIPTION=@{x}: value to test for #NA! error
@{y}: alternate value
@DESCRIPTION=This function returns the first value, unless that is #NA!, in which case it returns the second.
@SEEALSO=IF,ISERROR

@CATEGORY=Logic
@FUNCTION=NOT
@SHORTDESC=logical negation
@SYNTAX=NOT(b)
@ARGUMENTDESCRIPTION=@{b}: logical value
@DESCRIPTION=NOT calculates the logical negation of its argument.
@NOTE=If the argument is numerical, zero is considered FALSE and anything else TRUE. Strings and empty values are ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=AND,OR,IF

@CATEGORY=Logic
@FUNCTION=OR
@SHORTDESC=logical disjunction
@SYNTAX=OR(b0,b1,…)
@ARGUMENTDESCRIPTION=@{b0}: logical value
@{b1}: logical value
@DESCRIPTION=OR calculates the logical disjunction of its arguments @{b0},@{b1},...
@NOTE=If an argument is numerical, zero is considered FALSE and anything else TRUE. Strings and empty values are ignored. If no logical values are provided, then the error #VALUE! is returned. This function is strict: if any argument is an error, the result will be the first such error.
@EXCEL=This function is Excel compatible.
@SEEALSO=AND,XOR,NOT,IF

@CATEGORY=Logic
@FUNCTION=TRUE
@SHORTDESC=the value TRUE
@SYNTAX=TRUE()
@DESCRIPTION=TRUE returns the value TRUE.
@EXCEL=This function is Excel compatible.
@SEEALSO=FALSE,IF

@CATEGORY=Logic
@FUNCTION=XOR
@SHORTDESC=logical exclusive disjunction
@SYNTAX=XOR(b0,b1,…)
@ARGUMENTDESCRIPTION=@{b0}: logical value
@{b1}: logical value
@DESCRIPTION=XOR calculates the logical exclusive disjunction of its arguments @{b0},@{b1},...
@NOTE=If an argument is numerical, zero is considered FALSE and anything else TRUE. Strings and empty values are ignored. If no logical values are provided, then the error #VALUE! is returned. This function is strict: if any argument is an error, the result will be the first such error.
@SEEALSO=OR,AND,NOT,IF

@CATEGORY=Lookup
@FUNCTION=ADDRESS
@SHORTDESC=cell address as text
@SYNTAX=ADDRESS(row_num,col_num,abs_num,a1,text)
@ARGUMENTDESCRIPTION=@{row_num}: row number
@{col_num}: column number
@{abs_num}: 1 for an absolute, 2 for a row absolute and column relative, 3 for a row relative and column absolute, and 4 for a relative reference; defaults to 1
@{a1}: if TRUE, an A1-style reference is provided, otherwise an R1C1-style reference; defaults to TRUE
@{text}: name of the worksheet, defaults to no sheet
@NOTE=If @{row_num} or @{col_num} is less than one, ADDRESS returns #VALUE! If @{abs_num} is greater than 4 ADDRESS returns #VALUE!
@SEEALSO=COLUMNNUMBER

@CATEGORY=Lookup
@FUNCTION=AREAS
@SHORTDESC=number of areas in @{reference}
@SYNTAX=AREAS(reference,…)
@ARGUMENTDESCRIPTION=@{reference}: range
@SEEALSO=ADDRESS,INDEX,INDIRECT,OFFSET

@CATEGORY=Lookup
@FUNCTION=ARRAY
@SHORTDESC=vertical array of the arguments
@SYNTAX=ARRAY(v,…)
@ARGUMENTDESCRIPTION=@{v}: value
@SEEALSO=TRANSPOSE

@CATEGORY=Lookup
@FUNCTION=CHOOSE
@SHORTDESC=the (@{index}+1)th argument
@SYNTAX=CHOOSE(index,value1,value2,…)
@ARGUMENTDESCRIPTION=@{index}: positive number
@{value1}: first value
@{value2}: second value
@DESCRIPTION=CHOOSE returns its (@{index}+1)th argument.
@NOTE=@{index} is truncated to an integer. If @{index} < 1 or the truncated @{index} > number of values, CHOOSE returns #VALUE!
@SEEALSO=IF

@CATEGORY=Lookup
@FUNCTION=COLUMN
@SHORTDESC=vector of column numbers
@SYNTAX=COLUMN(x)
@ARGUMENTDESCRIPTION=@{x}: reference, defaults to the position of the current expression
@DESCRIPTION=COLUMN function returns a Nx1 array containing the sequence of integers from the first column to the last column of @{x}.
@NOTE=If @{x} is neither an array nor a reference nor a range, returns #VALUE!
@SEEALSO=COLUMNS,ROW,ROWS

@CATEGORY=Lookup
@FUNCTION=COLUMNNUMBER
@SHORTDESC=column number for the given column called @{name}
@SYNTAX=COLUMNNUMBER(name)
@ARGUMENTDESCRIPTION=@{name}: column name such as "IV"
@NOTE=If @{name} is invalid, COLUMNNUMBER returns #VALUE!
@SEEALSO=ADDRESS

@CATEGORY=Lookup
@FUNCTION=COLUMNS
@SHORTDESC=number of columns in @{reference}
@SYNTAX=COLUMNS(reference)
@ARGUMENTDESCRIPTION=@{reference}: array or area
@NOTE=If @{reference} is neither an array nor a reference nor a range, COLUMNS returns #VALUE!
@SEEALSO=COLUMN,ROW,ROWS

@CATEGORY=Lookup
@FUNCTION=FLIP
@SHORTDESC=@{matrix} flipped
@SYNTAX=FLIP(matrix,vertical)
@ARGUMENTDESCRIPTION=@{matrix}: range
@{vertical}: if true, @{matrix} is flipped vertically, otherwise horizontally; defaults to TRUE
@SEEALSO=TRANSPOSE

@CATEGORY=Lookup
@FUNCTION=HLOOKUP
@SHORTDESC=search the first row of @{range} for @{value}
@SYNTAX=HLOOKUP(value,range,row,approximate,as_index)
@ARGUMENTDESCRIPTION=@{value}: search value
@{range}: range to search
@{row}: 1-based row offset indicating the return values 
@{approximate}: if false, an exact match of @{value} must be found; defaults to TRUE
@{as_index}: if true, the 0-based column offset is returned; defaults to FALSE
@DESCRIPTION=HLOOKUP function finds the row in @{range} that has a first cell similar to @{value}.  If @{approximate} is not true it finds the column with an exact equality. If @{approximate} is true, it finds the last column with first value less than or equal to @{value}. If @{as_index} is true the 0-based column offset is returned.
@NOTE=If @{approximate} is true, then the values must be sorted in order of ascending value. HLOOKUP returns #REF! if @{row} falls outside @{range}.
@SEEALSO=VLOOKUP

@CATEGORY=Lookup
@FUNCTION=HYPERLINK
@SHORTDESC=second or first arguments
@SYNTAX=HYPERLINK(link_location,label)
@ARGUMENTDESCRIPTION=@{link_location}: string
@{label}: string, optional
@DESCRIPTION=HYPERLINK function currently returns its 2nd argument, or if that is omitted the 1st argument.

@CATEGORY=Lookup
@FUNCTION=INDEX
@SHORTDESC=reference to a cell in the given @{array}
@SYNTAX=INDEX(array,row,col,area)
@ARGUMENTDESCRIPTION=@{array}: cell or inline array
@{row}: desired row, defaults to 1
@{col}: desired column, defaults to 1
@{area}: from which area to select a cell, defaults to 1
@DESCRIPTION=INDEX gives a reference to a cell in the given @{array}. The cell is selected by @{row} and @{col}, which count the rows and columns in the array.
@NOTE=If the reference falls outside the range of @{array}, INDEX returns #REF!

@CATEGORY=Lookup
@FUNCTION=INDIRECT
@SHORTDESC=contents of the cell pointed to by the @{ref_text} string
@SYNTAX=INDIRECT(ref_text,format)
@ARGUMENTDESCRIPTION=@{ref_text}: textual reference
@{format}: if true, @{ref_text} is given in A1-style, otherwise it is given in R1C1 style; defaults to true
@NOTE=If @{ref_text} is not a valid reference in the style determined by @{format}, INDIRECT returns #REF!
@SEEALSO=AREAS,INDEX,CELL

@CATEGORY=Lookup
@FUNCTION=LOOKUP
@SHORTDESC=contents of @{vector2} at the corresponding location to @{value} in @{vector1}
@SYNTAX=LOOKUP(value,vector1,vector2)
@ARGUMENTDESCRIPTION=@{value}: value to look up
@{vector1}: range to search:
@{vector2}: range of return values
@DESCRIPTION=If  @{vector1} has more rows than columns, LOOKUP searches the first row of @{vector1}, otherwise the first column. If @{vector2} is omitted the return value is taken from the last row or column of @{vector1}.
@NOTE=If LOOKUP can't find @{value} it uses the largest value less than @{value}. The data must be sorted. If @{value} is smaller than the first value it returns #N/A. If the corresponding location does not exist in @{vector2}, it returns #N/A.
@SEEALSO=VLOOKUP,HLOOKUP

@CATEGORY=Lookup
@FUNCTION=MATCH
@SHORTDESC=the index of @{seek} in @{vector}
@SYNTAX=MATCH(seek,vector,type)
@ARGUMENTDESCRIPTION=@{seek}: value to find
@{vector}: n by 1 or 1 by n range to be searched
@{type}: +1 (the default) to find the largest value ≤ @{seek}, 0 to find the first value = @{seek}, or-1 to find the smallest value ≥ @{seek}
@DESCRIPTION=MATCH searches @{vector} for @{seek} and returns the 1-based index.
@NOTE= For @{type} = -1 the data must be sorted in descending order; for @{type} = +1 the data must be sorted in ascending order. If @{seek} could not be found, #N/A is returned. If @{vector} is neither n by 1 nor 1 by n, #N/A is returned.
@SEEALSO=LOOKUP

@CATEGORY=Lookup
@FUNCTION=OFFSET
@SHORTDESC=an offset cell range
@SYNTAX=OFFSET(range,row,col,height,width)
@ARGUMENTDESCRIPTION=@{range}: reference or range
@{row}: number of rows to offset @{range}
@{col}: number of columns to offset @{range}
@{height}: height of the offset range, defaults to height of @{range}
@{width}: width of the offset range, defaults to width of @{range}
@DESCRIPTION=OFFSET returns the cell range starting at offset (@{row},@{col}) from @{range} of height @{height} and width @{width}.
@NOTE=If @{range} is neither a reference nor a range, OFFSET returns #VALUE!
@SEEALSO=COLUMN,COLUMNS,ROWS,INDEX,INDIRECT,ADDRESS

@CATEGORY=Lookup
@FUNCTION=ROW
@SHORTDESC=vector of row numbers
@SYNTAX=ROW(x)
@ARGUMENTDESCRIPTION=@{x}: reference, defaults to the position of the current expression
@DESCRIPTION=ROW function returns a 1xN array containing the sequence of integers from the first row to the last row of @{x}.
@NOTE=If @{x} is neither an array nor a reference nor a range, returns #VALUE!
@SEEALSO=COLUMN,COLUMNS,ROWS

@CATEGORY=Lookup
@FUNCTION=ROWS
@SHORTDESC=number of rows in @{reference}
@SYNTAX=ROWS(reference)
@ARGUMENTDESCRIPTION=@{reference}: array, reference, or range
@NOTE=If @{reference} is neither an array nor a reference nor a range, ROWS returns #VALUE!
@SEEALSO=COLUMN,COLUMNS,ROW

@CATEGORY=Lookup
@FUNCTION=SHEET
@SHORTDESC=sheet number of @{reference}
@SYNTAX=SHEET(reference)
@ARGUMENTDESCRIPTION=@{reference}: reference or literal sheet name, defaults to the current sheet
@NOTE=If @{reference} is neither a reference nor a literal sheet name, SHEET returns #VALUE!
@SEEALSO=SHEETS,ROW,COLUMNNUMBER

@CATEGORY=Lookup
@FUNCTION=SHEETS
@SHORTDESC=number of sheets in @{reference}
@SYNTAX=SHEETS(reference)
@ARGUMENTDESCRIPTION=@{reference}: array, reference, or range, defaults to the maximum range
@NOTE=If @{reference} is neither an array nor a reference nor a range, SHEETS returns #VALUE!
@SEEALSO=COLUMNS,ROWS

@CATEGORY=Lookup
@FUNCTION=SORT
@SHORTDESC=sorted list of numbers as vertical array
@SYNTAX=SORT(ref,order)
@ARGUMENTDESCRIPTION=@{ref}: list of numbers
@{order}: 0 (descending order) or 1 (ascending order); defaults to 0
@NOTE=Strings, booleans, and empty cells are ignored.
@SEEALSO=ARRAY

@CATEGORY=Lookup
@FUNCTION=TRANSPOSE
@SHORTDESC=the transpose of @{matrix}
@SYNTAX=TRANSPOSE(matrix)
@ARGUMENTDESCRIPTION=@{matrix}: range
@SEEALSO=FLIP,MMULT

@CATEGORY=Lookup
@FUNCTION=VLOOKUP
@SHORTDESC=search the first column of @{range} for @{value}
@SYNTAX=VLOOKUP(value,range,column,approximate,as_index)
@ARGUMENTDESCRIPTION=@{value}: search value
@{range}: range to search
@{column}: 1-based column offset indicating the return values
@{approximate}: if false, an exact match of @{value} must be found; defaults to TRUE
@{as_index}: if true, the 0-based row offset is returned; defaults to FALSE
@DESCRIPTION=VLOOKUP function finds the row in @{range} that has a first cell similar to @{value}.  If @{approximate} is not true it finds the row with an exact equality. If @{approximate} is true, it finds the last row with first value less than or equal to @{value}. If @{as_index} is true the 0-based row offset is returned.
@NOTE=If @{approximate} is true, then the values must be sorted in order of ascending value. VLOOKUP returns #REF! if @{column} falls outside @{range}.
@SEEALSO=HLOOKUP

@CATEGORY=Mathematics
@FUNCTION=ABS
@SHORTDESC=absolute value
@SYNTAX=ABS(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=ABS gives the absolute value of @{x}, i.e. the non-negative number of the same magnitude as @{x}.
@EXCEL=This function is Excel compatible.
@SEEALSO=CEIL,CEILING,FLOOR,INT,MOD

@CATEGORY=Mathematics
@FUNCTION=ACOS
@SHORTDESC=the arc cosine of @{x}
@SYNTAX=ACOS(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=COS,SIN,DEGREES,RADIANS

@CATEGORY=Mathematics
@FUNCTION=ACOSH
@SHORTDESC=the hyperbolic arc cosine of @{x}
@SYNTAX=ACOSH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=ACOS,ASINH

@CATEGORY=Mathematics
@FUNCTION=ACOT
@SHORTDESC=inverse cotangent of @{x}
@SYNTAX=ACOT(x)
@ARGUMENTDESCRIPTION=@{x}: value
@SEEALSO=COT,TAN

@CATEGORY=Mathematics
@FUNCTION=ACOTH
@SHORTDESC=the inverse hyperbolic cotangent of @{x}
@SYNTAX=ACOTH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@SEEALSO=COTH,TANH

@CATEGORY=Mathematics
@FUNCTION=ARABIC
@SHORTDESC=the Roman numeral @{roman} as number
@SYNTAX=ARABIC(roman)
@ARGUMENTDESCRIPTION=@{roman}: Roman numeral
@DESCRIPTION=Any Roman symbol to the left of a larger symbol (directly or indirectly) reduces the final value by the symbol amount, otherwise, it increases the final amount by the symbol's amount.
@ODF=This function is OpenFormula compatible.
@SEEALSO=ROMAN

@CATEGORY=Mathematics
@FUNCTION=ASIN
@SHORTDESC=the arc sine of @{x}
@SYNTAX=ASIN(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=ASIN calculates the arc sine of @{x}; that is the value whose sine is @{x}.
@NOTE=If @{x} falls outside the range -1 to 1, ASIN returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=SIN,COS,ASINH,DEGREES,RADIANS

@CATEGORY=Mathematics
@FUNCTION=ASINH
@SHORTDESC=the inverse hyperbolic sine of @{x}
@SYNTAX=ASINH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=ASINH calculates the inverse hyperbolic sine of @{x}; that is the value whose hyperbolic sine is @{x}.
@EXCEL=This function is Excel compatible.
@SEEALSO=ASIN,ACOSH,SIN,COS

@CATEGORY=Mathematics
@FUNCTION=ATAN
@SHORTDESC=the arc tangent of @{x}
@SYNTAX=ATAN(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=ATAN calculates the arc tangent of @{x}; that is the value whose tangent is @{x}.
@NOTE=The result will be between −π/2 and +π/2.
@EXCEL=This function is Excel compatible.
@SEEALSO=TAN,COS,SIN,DEGREES,RADIANS

@CATEGORY=Mathematics
@FUNCTION=ATAN2
@SHORTDESC=the arc tangent of the ratio @{y}/@{x}
@SYNTAX=ATAN2(x,y)
@ARGUMENTDESCRIPTION=@{x}: x-coordinate
@{y}: y-coordinate
@DESCRIPTION=ATAN2 calculates the direction from the origin to the point (@{x},@{y}) as an angle from the x-axis in radians.
@NOTE=The result will be between −π and +π. The order of the arguments may be unexpected.
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=ATAN,ATANH,COS,SIN

@CATEGORY=Mathematics
@FUNCTION=ATANH
@SHORTDESC=the inverse hyperbolic tangent of @{x}
@SYNTAX=ATANH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=ATANH calculates the inverse hyperbolic tangent of @{x}; that is the value whose hyperbolic tangent is @{x}.
@NOTE=If the absolute value of @{x} is greater than 1.0, ATANH returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=ATAN,COS,SIN

@CATEGORY=Mathematics
@FUNCTION=AVERAGEIF
@SHORTDESC=average of the cells in @{actual range} for which the corresponding cells in the range meet the given @{criteria}
@SYNTAX=AVERAGEIF(range,criteria,actual_range)
@ARGUMENTDESCRIPTION=@{range}: cell area
@{criteria}: condition for a cell to be included
@{actual_range}: cell area, defaults to @{range}
@EXCEL=This function is Excel compatible.
@SEEALSO=SUMIF,COUNTIF

@CATEGORY=Mathematics
@FUNCTION=BETA
@SHORTDESC=Euler beta function
@SYNTAX=BETA(x,y)
@ARGUMENTDESCRIPTION=@{x}: number
@{y}: number
@DESCRIPTION=BETA function returns the value of the Euler beta function extended to all real numbers except 0 and negative integers.
@NOTE=If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETA returns #NUM!
@SEEALSO=BETALN,GAMMALN

@CATEGORY=Mathematics
@FUNCTION=BETALN
@SHORTDESC=natural logarithm of the absolute value of the Euler beta function
@SYNTAX=BETALN(x,y)
@ARGUMENTDESCRIPTION=@{x}: number
@{y}: number
@DESCRIPTION=BETALN function returns the natural logarithm of the absolute value of the Euler beta function extended to all real numbers except 0 and negative integers.
@NOTE=If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETALN returns #NUM!
@SEEALSO=BETA,GAMMALN

@CATEGORY=Mathematics
@FUNCTION=CEIL
@SHORTDESC=smallest integer larger than or equal to @{x}
@SYNTAX=CEIL(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=CEIL(@{x}) is the smallest integer that is at least as large as @{x}.
@ODF=This function is the OpenFormula function CEILING(@{x}).
@SEEALSO=CEILING,FLOOR,ABS,INT,MOD

@CATEGORY=Mathematics
@FUNCTION=CEILING
@SHORTDESC=nearest multiple of @{significance} whose absolute value is at least ABS(@{x})
@SYNTAX=CEILING(x,significance)
@ARGUMENTDESCRIPTION=@{x}: number
@{significance}: base multiple (defaults to 1 for @{x} > 0 and -1 for @{x} <0)
@DESCRIPTION=CEILING(@{x},@{significance}) is the nearest multiple of @{significance} whose absolute value is at least ABS(@{x}).
@NOTE=If @{x} or @{significance} is non-numeric, CEILING returns a #VALUE! error. If @{x} and @{significance} have different signs, CEILING returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@ODF=CEILING(@{x}) is exported to ODF as CEILING(@{x},SIGN(@{x}),1). CEILING(@{x},@{significance}) is the OpenFormula function CEILING(@{x},@{significance},1).
@SEEALSO=CEIL,FLOOR,ABS,INT,MOD

@CATEGORY=Mathematics
@FUNCTION=CHOLESKY
@SHORTDESC=the Cholesky decomposition of the symmetric positive-definite @{matrix}
@SYNTAX=CHOLESKY(matrix)
@ARGUMENTDESCRIPTION=@{matrix}: a symmetric positive definite matrix
@NOTE=If the Cholesky-Banachiewicz algorithm applied to @{matrix} fails, Cholesky returns #NUM! If @{matrix} does not contain an equal number of columns and rows, CHOLESKY returns #VALUE!
@SEEALSO=MINVERSE,MMULT,MDETERM

@CATEGORY=Mathematics
@FUNCTION=COMBIN
@SHORTDESC=binomial coefficient
@SYNTAX=COMBIN(n,k)
@ARGUMENTDESCRIPTION=@{n}: non-negative integer
@{k}: non-negative integer
@DESCRIPTION=COMBIN returns the binomial coefficient "@{n} choose @{k}", the number of @{k}-combinations of an @{n}-element set without repetition.
@NOTE=If @{n} is less than @{k} COMBIN returns #NUM!
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.

@CATEGORY=Mathematics
@FUNCTION=COMBINA
@SHORTDESC=the number of @{k}-combinations of an @{n}-element set with repetition
@SYNTAX=COMBINA(n,k)
@ARGUMENTDESCRIPTION=@{n}: non-negative integer
@{k}: non-negative integer
@ODF=This function is OpenFormula compatible.
@SEEALSO=COMBIN

@CATEGORY=Mathematics
@FUNCTION=COS
@SHORTDESC=the cosine of @{x}
@SYNTAX=COS(x)
@ARGUMENTDESCRIPTION=@{x}: angle in radians
@DESCRIPTION=This function is Excel compatible.
@SEEALSO=SIN,TAN,SINH,COSH,TANH,RADIANS,DEGREES

@CATEGORY=Mathematics
@FUNCTION=COSH
@SHORTDESC=the hyperbolic cosine of @{x}
@SYNTAX=COSH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=SIN,TAN,SINH,COSH,TANH

@CATEGORY=Mathematics
@FUNCTION=COSPI
@SHORTDESC=the cosine of Pi*@{x}
@SYNTAX=COSPI(x)
@ARGUMENTDESCRIPTION=@{x}: number of half turns
@SEEALSO=COS

@CATEGORY=Mathematics
@FUNCTION=COT
@SHORTDESC=the cotangent of @{x}
@SYNTAX=COT(x)
@ARGUMENTDESCRIPTION=@{x}: number
@SEEALSO=TAN,ACOT

@CATEGORY=Mathematics
@FUNCTION=COTH
@SHORTDESC=the hyperbolic cotangent of @{x}
@SYNTAX=COTH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@SEEALSO=TANH,ACOTH

@CATEGORY=Mathematics
@FUNCTION=COUNTIF
@SHORTDESC=count of the cells meeting the given @{criteria}
@SYNTAX=COUNTIF(range,criteria)
@ARGUMENTDESCRIPTION=@{range}: cell area
@{criteria}: condition for a cell to be counted
@EXCEL=This function is Excel compatible.
@SEEALSO=COUNT,SUMIF

@CATEGORY=Mathematics
@FUNCTION=CSC
@SHORTDESC=the cosecant of @{x}
@SYNTAX=CSC(x)
@ARGUMENTDESCRIPTION=@{x}: angle in radians
@EXCEL=This function is not Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=SIN,COS,TAN,SEC,SINH,COSH,TANH,RADIANS,DEGREES

@CATEGORY=Mathematics
@FUNCTION=CSCH
@SHORTDESC=the hyperbolic cosecant of @{x}
@SYNTAX=CSCH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is not Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=SIN,COS,TAN,CSC,SEC,SINH,COSH,TANH

@CATEGORY=Mathematics
@FUNCTION=DEGREES
@SHORTDESC=equivalent degrees to @{x} radians
@SYNTAX=DEGREES(x)
@ARGUMENTDESCRIPTION=@{x}: angle in radians
@EXCEL=This function is Excel compatible.
@SEEALSO=RADIANS,PI

@CATEGORY=Mathematics
@FUNCTION=EIGEN
@SHORTDESC=eigenvalues and eigenvectors of the symmetric @{matrix}
@SYNTAX=EIGEN(matrix)
@ARGUMENTDESCRIPTION=@{matrix}: a symmetric matrix
@NOTE=If @{matrix} is not symmetric, EIGEN returns #NUM! If @{matrix} does not contain an equal number of columns and rows, EIGEN returns #VALUE!

@CATEGORY=Mathematics
@FUNCTION=EVEN
@SHORTDESC=@{x} rounded away from 0 to the next even integer
@SYNTAX=EVEN(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=ODD

@CATEGORY=Mathematics
@FUNCTION=EXP
@SHORTDESC=e raised to the power of @{x}
@SYNTAX=EXP(x)
@ARGUMENTDESCRIPTION=@{x}: number
@NOTE=e is the base of the natural logarithm.
@EXCEL=This function is Excel compatible.
@SEEALSO=LOG,LOG2,LOG10

@CATEGORY=Mathematics
@FUNCTION=EXPM1
@SHORTDESC=EXP(@{x})-1
@SYNTAX=EXPM1(x)
@ARGUMENTDESCRIPTION=@{x}: number
@NOTE=This function has a higher resulting precision than evaluating EXP(@{x})-1.
@SEEALSO=EXP,LN1P

@CATEGORY=Mathematics
@FUNCTION=FACT
@SHORTDESC=the factorial of @{x}, i.e. @{x}!
@SYNTAX=FACT(x)
@ARGUMENTDESCRIPTION=@{x}: number
@NOTE=The domain of this function has been extended using the GAMMA function.
@EXCEL=This function is Excel compatible.

@CATEGORY=Mathematics
@FUNCTION=FACTDOUBLE
@SHORTDESC=double factorial
@SYNTAX=FACTDOUBLE(x)
@ARGUMENTDESCRIPTION=@{x}: non-negative integer
@DESCRIPTION=FACTDOUBLE function returns the double factorial @{x}!!
@NOTE=If @{x} is not an integer, it is truncated. If @{x} is negative, FACTDOUBLE returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=FACT

@CATEGORY=Mathematics
@FUNCTION=FIB
@SHORTDESC=Fibonacci numbers
@SYNTAX=FIB(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@DESCRIPTION=FIB(@{n}) is the @{n}th Fibonacci number.
@NOTE=If @{n} is not an integer, it is truncated. If it is negative or zero FIB returns #NUM!

@CATEGORY=Mathematics
@FUNCTION=FLOOR
@SHORTDESC=nearest multiple of @{significance} whose absolute value is at most ABS(@{x})
@SYNTAX=FLOOR(x,significance)
@ARGUMENTDESCRIPTION=@{x}: number
@{significance}: base multiple (defaults to 1 for @{x} > 0 and -1 for @{x} <0)
@DESCRIPTION=FLOOR(@{x},@{significance}) is the nearest multiple of @{significance} whose absolute value is at most ABS(@{x})
@EXCEL=This function is Excel compatible.
@ODF=FLOOR(@{x}) is exported to ODF as FLOOR(@{x},SIGN(@{x}),1). FLOOR(@{x},@{significance}) is the OpenFormula function FLOOR(@{x},@{significance},1).
@SEEALSO=CEIL,CEILING,ABS,INT,MOD

@CATEGORY=Mathematics
@FUNCTION=G_PRODUCT
@SHORTDESC=product of all the values and cells referenced
@SYNTAX=G_PRODUCT(x1,x2,…)
@ARGUMENTDESCRIPTION=@{x1}: number
@{x2}: number
@NOTE=Empty cells are ignored and the empty product is 1.
@SEEALSO=SUM,COUNT

@CATEGORY=Mathematics
@FUNCTION=GAMMA
@SHORTDESC=the Gamma function
@SYNTAX=GAMMA(x)
@ARGUMENTDESCRIPTION=@{x}: number
@SEEALSO=GAMMALN

@CATEGORY=Mathematics
@FUNCTION=GAMMALN
@SHORTDESC=natural logarithm of the Gamma function
@SYNTAX=GAMMALN(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=GAMMA

@CATEGORY=Mathematics
@FUNCTION=GCD
@SHORTDESC=the greatest common divisor
@SYNTAX=GCD(n0,n1,…)
@ARGUMENTDESCRIPTION=@{n0}: positive integer
@{n1}: positive integer
@DESCRIPTION=GCD calculates the greatest common divisor of the given numbers @{n0},@{n1},..., the greatest integer that is a divisor of each argument.
@NOTE=If any of the arguments is not an integer, it is truncated.
@EXCEL=This function is Excel compatible.
@SEEALSO=LCM

@CATEGORY=Mathematics
@FUNCTION=GD
@SHORTDESC=Gudermannian function
@SYNTAX=GD(x)
@ARGUMENTDESCRIPTION=@{x}: value
@SEEALSO=TAN,TANH

@CATEGORY=Mathematics
@FUNCTION=HYPOT
@SHORTDESC=the square root of the sum of the squares of the arguments
@SYNTAX=HYPOT(n0,n1,…)
@ARGUMENTDESCRIPTION=@{n0}: number
@{n1}: number
@SEEALSO=MIN,MAX

@CATEGORY=Mathematics
@FUNCTION=IGAMMA
@SHORTDESC=the incomplete Gamma function
@SYNTAX=IGAMMA(a,x,lower,regularize,real)
@ARGUMENTDESCRIPTION=@{a}: number
@{x}: number
@{lower}: if true (the default), the lower incomplete gamma function, otherwise the upper incomplete gamma function
@{regularize}: if true (the default), the regularized version of the incomplete gamma function
@{real}: if true (the default), the real part of the result, otherwise the imaginary part
@NOTE=The regularized incomplete gamma function is the unregularized incomplete gamma function divided by gamma(@{a}) This is a real valued function as long as neither @{a} nor @{z} are negative.
@SEEALSO=GAMMA,IMIGAMMA

@CATEGORY=Mathematics
@FUNCTION=INT
@SHORTDESC=largest integer not larger than @{x}
@SYNTAX=INT(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=CEIL,CEILING,FLOOR,ABS,MOD

@CATEGORY=Mathematics
@FUNCTION=LCM
@SHORTDESC=the least common multiple
@SYNTAX=LCM(n0,n1,…)
@ARGUMENTDESCRIPTION=@{n0}: positive integer
@{n1}: positive integer
@DESCRIPTION=LCM calculates the least common multiple of the given numbers @{n0},@{n1},..., the smallest integer that is a multiple of each argument.
@NOTE=If any of the arguments is not an integer, it is truncated.
@EXCEL=This function is Excel compatible.
@SEEALSO=GCD

@CATEGORY=Mathematics
@FUNCTION=LINSOLVE
@SHORTDESC=solve linear equation
@SYNTAX=LINSOLVE(A,B)
@ARGUMENTDESCRIPTION=@{A}: a matrix
@{B}: a matrix
@DESCRIPTION=Solves the equation @{A}*X=@{B} and returns X.
@NOTE=If the matrix @{A} is singular, #VALUE! is returned.
@SEEALSO=MINVERSE

@CATEGORY=Mathematics
@FUNCTION=LN
@SHORTDESC=the natural logarithm of @{x}
@SYNTAX=LN(x)
@ARGUMENTDESCRIPTION=@{x}: positive number
@NOTE=If @{x} ≤ 0, LN returns #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=EXP,LOG2,LOG10

@CATEGORY=Mathematics
@FUNCTION=LN1P
@SHORTDESC=LN(1+@{x})
@SYNTAX=LN1P(x)
@ARGUMENTDESCRIPTION=@{x}: positive number
@DESCRIPTION=LN1P calculates LN(1+@{x}) but yielding a higher precision than evaluating LN(1+@{x}).
@NOTE=If @{x} ≤ -1, LN returns #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=EXP,LN,EXPM1

@CATEGORY=Mathematics
@FUNCTION=LOG
@SHORTDESC=logarithm of @{x} with base @{base}
@SYNTAX=LOG(x,base)
@ARGUMENTDESCRIPTION=@{x}: positive number
@{base}: base of the logarithm, defaults to 10
@NOTE=@{base} must be positive and not equal to 1. If @{x} ≤ 0, LOG returns #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=LN,LOG2,LOG10

@CATEGORY=Mathematics
@FUNCTION=LOG10
@SHORTDESC=the base-10 logarithm of @{x}
@SYNTAX=LOG10(x)
@ARGUMENTDESCRIPTION=@{x}: positive number
@NOTE=If @{x} ≤ 0, LOG10 returns #NUM!
@SEEALSO=EXP,LOG2,LOG

@CATEGORY=Mathematics
@FUNCTION=LOG2
@SHORTDESC=the base-2 logarithm of @{x}
@SYNTAX=LOG2(x)
@ARGUMENTDESCRIPTION=@{x}: positive number
@NOTE=If @{x} ≤ 0, LOG2 returns #NUM!
@SEEALSO=EXP,LOG10,LOG

@CATEGORY=Mathematics
@FUNCTION=MDETERM
@SHORTDESC=the determinant of the matrix @{matrix}
@SYNTAX=MDETERM(matrix)
@ARGUMENTDESCRIPTION=@{matrix}: a square matrix
@EXCEL=This function is Excel compatible.
@SEEALSO=MMULT,MINVERSE

@CATEGORY=Mathematics
@FUNCTION=MINVERSE
@SHORTDESC=the inverse matrix of @{matrix}
@SYNTAX=MINVERSE(matrix)
@ARGUMENTDESCRIPTION=@{matrix}: a square matrix
@NOTE=If @{matrix} is not invertible, MINVERSE returns #NUM! If @{matrix} does not contain an equal number of columns and rows, MINVERSE returns #VALUE!
@EXCEL=This function is Excel compatible.
@SEEALSO=MMULT,MDETERM,LINSOLVE

@CATEGORY=Mathematics
@FUNCTION=MMULT
@SHORTDESC=the matrix product of @{mat1} and @{mat2}
@SYNTAX=MMULT(mat1,mat2)
@ARGUMENTDESCRIPTION=@{mat1}: a matrix
@{mat2}: a matrix
@EXCEL=This function is Excel compatible.
@SEEALSO=TRANSPOSE,MINVERSE

@CATEGORY=Mathematics
@FUNCTION=MOD
@SHORTDESC=the remainder of @{x} under division by @{n}
@SYNTAX=MOD(x,n)
@ARGUMENTDESCRIPTION=@{x}: integer
@{n}: integer
@DESCRIPTION=MOD function returns the remainder when @{x} is divided by @{n}.
@NOTE=If @{n} is 0, MOD returns #DIV/0!
@EXCEL=This function is Excel compatible.
@SEEALSO=CEIL,CEILING,FLOOR,ABS,INT,ABS

@CATEGORY=Mathematics
@FUNCTION=MPSEUDOINVERSE
@SHORTDESC=the pseudo-inverse matrix of @{matrix}
@SYNTAX=MPSEUDOINVERSE(matrix,threshold)
@ARGUMENTDESCRIPTION=@{matrix}: a matrix
@{threshold}: a relative size threshold for discarding eigenvalues
@SEEALSO=MINVERSE

@CATEGORY=Mathematics
@FUNCTION=MROUND
@SHORTDESC=@{x} rounded to a multiple of @{m}
@SYNTAX=MROUND(x,m)
@ARGUMENTDESCRIPTION=@{x}: number
@{m}: number
@NOTE=If @{x} and @{m} have different sign, MROUND returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=ROUNDDOWN,ROUND,ROUNDUP

@CATEGORY=Mathematics
@FUNCTION=MULTINOMIAL
@SHORTDESC=multinomial coefficient (@{x1}+⋯+@{xn}) choose (@{x1},…,@{xn})
@SYNTAX=MULTINOMIAL(x1,x2,xn,…)
@ARGUMENTDESCRIPTION=@{x1}: first number
@{x2}: second number
@{xn}: nth number
@EXCEL=This function is Excel compatible.
@SEEALSO=COMBIN,SUM

@CATEGORY=Mathematics
@FUNCTION=MUNIT
@SHORTDESC=the @{n} by @{n} identity matrix
@SYNTAX=MUNIT(n)
@ARGUMENTDESCRIPTION=@{n}: size of the matrix
@ODF=This function is OpenFormula compatible.
@SEEALSO=MMULT,MDETERM,MINVERSE

@CATEGORY=Mathematics
@FUNCTION=ODD
@SHORTDESC=@{x} rounded away from 0 to the next odd integer
@SYNTAX=ODD(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=EVEN

@CATEGORY=Mathematics
@FUNCTION=ODF.SUMPRODUCT
@SHORTDESC=multiplies components and adds the results
@SYNTAX=ODF.SUMPRODUCT(,…)
@DESCRIPTION=Multiplies corresponding data entries in the given arrays or ranges, and then returns the sum of those products.
@NOTE=If an entry is not numeric or logical, the value zero is used instead. If arrays or range arguments do not have the same dimensions, return #VALUE! error. This function differs from SUMPRODUCT by considering booleans.
@EXCEL=This function is not Excel compatible. Use SUMPRODUCT instead.
@ODF=This function is OpenFormula compatible.
@SEEALSO=SUMPRODUCT,SUM,PRODUCT,G_PRODUCT

@CATEGORY=Mathematics
@FUNCTION=PI
@SHORTDESC=the constant 𝜋
@SYNTAX=PI()
@EXCEL=This function is Excel compatible, but it returns 𝜋 with a better precision.
@SEEALSO=SQRTPI

@CATEGORY=Mathematics
@FUNCTION=POCHHAMMER
@SHORTDESC=the value of GAMMA(@{x}+@{n})/GAMMA(@{x})
@SYNTAX=POCHHAMMER(x,n)
@ARGUMENTDESCRIPTION=@{x}: number
@{n}: number
@SEEALSO=GAMMA

@CATEGORY=Mathematics
@FUNCTION=POWER
@SHORTDESC=the value of @{x} raised to the power @{y} raised to the power of 1/@{z}
@SYNTAX=POWER(x,y,z)
@ARGUMENTDESCRIPTION=@{x}: number
@{y}: number
@{z}: number
@NOTE=If both @{x} and @{y} equal 0, POWER returns #NUM! If @{x} = 0 and @{y} < 0, POWER returns #DIV/0! If @{x} < 0 and @{y} is not an integer, POWER returns #NUM! @{z} defaults to 1 If @{z} is not a positive integer, POWER returns #NUM! If @{x} < 0, @{y} is odd, and @{z} is even, POWER returns #NUM!
@SEEALSO=EXP

@CATEGORY=Mathematics
@FUNCTION=PRODUCT
@SHORTDESC=product of the given values
@SYNTAX=PRODUCT(values,…)
@ARGUMENTDESCRIPTION=@{values}: a list of values to multiply
@DESCRIPTION=PRODUCT computes the product of all the values and cells referenced in the argument list.
@NOTE=If all cells are empty, the result will be 0.
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=SUM,COUNT,G_PRODUCT

@CATEGORY=Mathematics
@FUNCTION=QUOTIENT
@SHORTDESC=integer portion of a division
@SYNTAX=QUOTIENT(numerator,denominator)
@ARGUMENTDESCRIPTION=@{numerator}: integer
@{denominator}: non-zero integer
@DESCRIPTION=QUOTIENT yields the integer portion of the division @{numerator}/@{denominator}.
QUOTIENT (@{numerator},@{denominator})⨉@{denominator}+MOD(@{numerator},@{denominator})=@{numerator}
@EXCEL=This function is Excel compatible.
@SEEALSO=MOD

@CATEGORY=Mathematics
@FUNCTION=RADIANS
@SHORTDESC=the number of radians equivalent to @{x} degrees
@SYNTAX=RADIANS(x)
@ARGUMENTDESCRIPTION=@{x}: angle in degrees
@EXCEL=This function is Excel compatible.
@SEEALSO=PI,DEGREES

@CATEGORY=Mathematics
@FUNCTION=ROMAN
@SHORTDESC=@{n} as a roman numeral text
@SYNTAX=ROMAN(n,type)
@ARGUMENTDESCRIPTION=@{n}: non-negative integer
@{type}: 0,1,2,3,or 4, defaults to 0
@DESCRIPTION=ROMAN returns the arabic number @{n} as a roman numeral text.
If @{type} is 0 or it is omitted, ROMAN returns classic roman numbers.
Type 1 is more concise than classic type, type 2 is more concise than type 1, and type 3 is more concise than type 2. Type 4 is a simplified type.
@EXCEL=This function is Excel compatible.

@CATEGORY=Mathematics
@FUNCTION=ROUND
@SHORTDESC=rounded @{x}
@SYNTAX=ROUND(x,d)
@ARGUMENTDESCRIPTION=@{x}: number
@{d}: integer, defaults to 0
@DESCRIPTION=If @{d} is greater than zero, @{x} is rounded to the given number of digits.
If @{d} is zero, @{x} is rounded to the next integer.
If @{d} is less than zero, @{x} is rounded to the left of the decimal point
@EXCEL=This function is Excel compatible.
@SEEALSO=ROUNDDOWN,ROUNDUP

@CATEGORY=Mathematics
@FUNCTION=ROUNDDOWN
@SHORTDESC=@{x} rounded towards 0
@SYNTAX=ROUNDDOWN(x,d)
@ARGUMENTDESCRIPTION=@{x}: number
@{d}: integer, defaults to 0
@DESCRIPTION=If @{d} is greater than zero, @{x} is rounded toward 0 to the given number of digits.
If @{d} is zero, @{x} is rounded toward 0 to the next integer.
If @{d} is less than zero, @{x} is rounded toward 0 to the left of the decimal point
@EXCEL=This function is Excel compatible.
@SEEALSO=ROUND,ROUNDUP

@CATEGORY=Mathematics
@FUNCTION=ROUNDUP
@SHORTDESC=@{x} rounded away from 0
@SYNTAX=ROUNDUP(x,d)
@ARGUMENTDESCRIPTION=@{x}: number
@{d}: integer, defaults to 0
@DESCRIPTION=If @{d} is greater than zero, @{x} is rounded away from 0 to the given number of digits.
If @{d} is zero, @{x} is rounded away from 0 to the next integer.
If @{d} is less than zero, @{x} is rounded away from 0 to the left of the decimal point
@EXCEL=This function is Excel compatible.
@SEEALSO=ROUND,ROUNDDOWN,INT

@CATEGORY=Mathematics
@FUNCTION=SEC
@SHORTDESC=Secant
@SYNTAX=SEC(x)
@ARGUMENTDESCRIPTION=@{x}: angle in radians
@EXCEL=This function is not Excel compatible.
@ODF=SEC(@{x}) is exported to OpenFormula as 1/COS(@{x}).
@SEEALSO=SIN,COS,TAN,CSC,SINH,COSH,TANH,RADIANS,DEGREES

@CATEGORY=Mathematics
@FUNCTION=SECH
@SHORTDESC=the hyperbolic secant of @{x}
@SYNTAX=SECH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is not Excel compatible.
@ODF=SECH(@{x}) is exported to OpenFormula as 1/COSH(@{x}).
@SEEALSO=SIN,COS,TAN,CSC,SEC,SINH,COSH,TANH

@CATEGORY=Mathematics
@FUNCTION=SERIESSUM
@SHORTDESC=sum of a power series at @{x}
@SYNTAX=SERIESSUM(x,n,m,coeff)
@ARGUMENTDESCRIPTION=@{x}: number where to evaluate the power series
@{n}: non-negative integer, exponent of the lowest term of the series
@{m}: increment to each exponent
@{coeff}: coefficients of the power series
@EXCEL=This function is Excel compatible.
@SEEALSO=COUNT,SUM

@CATEGORY=Mathematics
@FUNCTION=SIGN
@SHORTDESC=sign of @{x}
@SYNTAX=SIGN(x)
@ARGUMENTDESCRIPTION=@{x}: number
@DESCRIPTION=SIGN returns 1 if the @{x} is positive and it returns -1 if @{x} is negative.
@EXCEL=This function is Excel compatible.
@SEEALSO=ABS

@CATEGORY=Mathematics
@FUNCTION=SIN
@SHORTDESC=the sine of @{x}
@SYNTAX=SIN(x)
@ARGUMENTDESCRIPTION=@{x}: angle in radians
@EXCEL=This function is Excel compatible.
@SEEALSO=COS,TAN,CSC,SEC,SINH,COSH,TANH,RADIANS,DEGREES

@CATEGORY=Mathematics
@FUNCTION=SINH
@SHORTDESC=the hyperbolic sine of @{x}
@SYNTAX=SINH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=SIN,COSH,ASINH

@CATEGORY=Mathematics
@FUNCTION=SINPI
@SHORTDESC=the sine of Pi*@{x}
@SYNTAX=SINPI(x)
@ARGUMENTDESCRIPTION=@{x}: number of half turns
@SEEALSO=SIN

@CATEGORY=Mathematics
@FUNCTION=SQRT
@SHORTDESC=square root of @{x}
@SYNTAX=SQRT(x)
@ARGUMENTDESCRIPTION=@{x}: non-negative number
@NOTE=If @{x} is negative, SQRT returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=POWER

@CATEGORY=Mathematics
@FUNCTION=SQRTPI
@SHORTDESC=the square root of @{x} times 𝜋
@SYNTAX=SQRTPI(x)
@ARGUMENTDESCRIPTION=@{x}: non-negative number
@EXCEL=This function is Excel compatible.
@SEEALSO=PI

@CATEGORY=Mathematics
@FUNCTION=SUM
@SHORTDESC=sum of the given values
@SYNTAX=SUM(values,…)
@ARGUMENTDESCRIPTION=@{values}: a list of values to add
@DESCRIPTION=SUM computes the sum of all the values and cells referenced in the argument list.
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=AVERAGE,COUNT

@CATEGORY=Mathematics
@FUNCTION=SUMA
@SHORTDESC=sum of all values and cells referenced
@SYNTAX=SUMA(area0,area1,…)
@ARGUMENTDESCRIPTION=@{area0}: first cell area
@{area1}: second cell area
@DESCRIPTION=Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1).
@SEEALSO=AVERAGE,SUM,COUNT

@CATEGORY=Mathematics
@FUNCTION=SUMIF
@SHORTDESC=sum of the cells in @{actual_range} for which the corresponding cells in the range meet the given @{criteria}
@SYNTAX=SUMIF(range,criteria,actual_range)
@ARGUMENTDESCRIPTION=@{range}: cell area
@{criteria}: condition for a cell to be summed
@{actual_range}: cell area, defaults to @{range}
@NOTE=If the @{actual_range} has a size that differs from the size of @{range}, @{actual_range} is resized (retaining the top-left corner) to match the size of @{range}.
@EXCEL=This function is Excel compatible.
@SEEALSO=SUM,COUNTIF

@CATEGORY=Mathematics
@FUNCTION=SUMPRODUCT
@SHORTDESC=multiplies components and adds the results
@SYNTAX=SUMPRODUCT(,…)
@DESCRIPTION=Multiplies corresponding data entries in the given arrays or ranges, and then returns the sum of those products.
@NOTE=If an entry is not numeric, the value zero is used instead. If arrays or range arguments do not have the same dimensions, return #VALUE! error. This function ignores logicals, so using SUMPRODUCT(A1:A5>0) will not work.  Instead use SUMPRODUCT(--(A1:A5>0))
@EXCEL=This function is Excel compatible.
@ODF=This function is not OpenFormula compatible. Use ODF.SUMPRODUCT instead.
@SEEALSO=SUM,PRODUCT,G_PRODUCT,ODF.SUMPRODUCT

@CATEGORY=Mathematics
@FUNCTION=SUMSQ
@SHORTDESC=sum of the squares of all values and cells referenced
@SYNTAX=SUMSQ(area0,area1,…)
@ARGUMENTDESCRIPTION=@{area0}: first cell area
@{area1}: second cell area
@EXCEL=This function is Excel compatible.
@SEEALSO=SUM,COUNT

@CATEGORY=Mathematics
@FUNCTION=SUMX2MY2
@SHORTDESC=sum of the difference of squares
@SYNTAX=SUMX2MY2(array0,array1)
@ARGUMENTDESCRIPTION=@{array0}: first cell area
@{array1}: second cell area
@DESCRIPTION=SUMX2MY2 function returns the sum of the difference of squares of corresponding values in two arrays. The equation of SUMX2MY2 is SUM(x^2-y^2).
@EXCEL=This function is Excel compatible.
@SEEALSO=SUMSQ,SUMX2PY2

@CATEGORY=Mathematics
@FUNCTION=SUMX2PY2
@SHORTDESC=sum of the sum of squares
@SYNTAX=SUMX2PY2(array0,array1)
@ARGUMENTDESCRIPTION=@{array0}: first cell area
@{array1}: second cell area
@DESCRIPTION=SUMX2PY2 function returns the sum of the sum of squares of corresponding values in two arrays. The equation of SUMX2PY2 is SUM(x^2+y^2).
@NOTE=If @{array0} and @{array1} have different number of data points, SUMX2PY2 returns #N/A.
Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=SUMSQ,SUMX2MY2

@CATEGORY=Mathematics
@FUNCTION=SUMXMY2
@SHORTDESC=sum of the squares of differences
@SYNTAX=SUMXMY2(array0,array1)
@ARGUMENTDESCRIPTION=@{array0}: first cell area
@{array1}: second cell area
@DESCRIPTION=SUMXMY2 function returns the sum of the squares of the differences of corresponding values in two arrays. The equation of SUMXMY2 is SUM((x-y)^2).
@NOTE=If @{array0} and @{array1} have different number of data points, SUMXMY2 returns #N/A.
Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=SUMSQ,SUMX2MY2,SUMX2PY2

@CATEGORY=Mathematics
@FUNCTION=TAN
@SHORTDESC=the tangent of @{x}
@SYNTAX=TAN(x)
@ARGUMENTDESCRIPTION=@{x}: angle in radians
@EXCEL=This function is Excel compatible.
@SEEALSO=TANH,COS,COSH,SIN,SINH,DEGREES,RADIANS

@CATEGORY=Mathematics
@FUNCTION=TANH
@SHORTDESC=the hyperbolic tangent of @{x}
@SYNTAX=TANH(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@SEEALSO=TAN,SIN,SINH,COS,COSH

@CATEGORY=Mathematics
@FUNCTION=TRUNC
@SHORTDESC=@{x} truncated to @{d} digits
@SYNTAX=TRUNC(x,d)
@ARGUMENTDESCRIPTION=@{x}: number
@{d}: non-negative integer, defaults to 0
@NOTE=If @{d} is omitted or negative then it defaults to zero. If it is not an integer then it is truncated to an integer.
@EXCEL=This function is Excel compatible.
@SEEALSO=INT

@CATEGORY=Number Theory
@FUNCTION=ISPRIME
@SHORTDESC=whether @{n} is prime
@SYNTAX=ISPRIME(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@DESCRIPTION=ISPRIME returns TRUE if @{n} is prime and FALSE otherwise.
@SEEALSO=NT_D, NT_SIGMA

@CATEGORY=Number Theory
@FUNCTION=ITHPRIME
@SHORTDESC=@{i}th prime
@SYNTAX=ITHPRIME(i)
@ARGUMENTDESCRIPTION=@{i}: positive integer
@DESCRIPTION=ITHPRIME finds the @{i}th prime.
@SEEALSO=NT_D,NT_SIGMA

@CATEGORY=Number Theory
@FUNCTION=NT_D
@SHORTDESC=number of divisors
@SYNTAX=NT_D(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@DESCRIPTION=NT_D calculates the number of divisors of @{n}.
@SEEALSO=ITHPRIME,NT_PHI,NT_SIGMA

@CATEGORY=Number Theory
@FUNCTION=NT_MU
@SHORTDESC=Möbius mu function
@SYNTAX=NT_MU(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@DESCRIPTION=NT_MU function (Möbius mu function) returns 0  if @{n} is divisible by the square of a prime. Otherwise, if @{n} has an odd  number of different prime factors, NT_MU returns -1, and if @{n} has an even number of different prime factors, it returns 1. If @{n} = 1, NT_MU returns 1.
@SEEALSO=ITHPRIME,NT_PHI,NT_SIGMA,NT_D

@CATEGORY=Number Theory
@FUNCTION=NT_OMEGA
@SHORTDESC=Number of distinct prime factors
@SYNTAX=NT_OMEGA(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@NOTE=Returns the number of distinct prime factors without multiplicity.
@SEEALSO=NT_D,ITHPRIME,NT_SIGMA

@CATEGORY=Number Theory
@FUNCTION=NT_PHI
@SHORTDESC=Euler's totient function
@SYNTAX=NT_PHI(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@NOTE=Euler's totient function gives the number of integers less than or equal to @{n} that are relatively prime (coprime) to @{n}.
@SEEALSO=NT_D,ITHPRIME,NT_SIGMA

@CATEGORY=Number Theory
@FUNCTION=NT_PI
@SHORTDESC=number of primes upto @{n}
@SYNTAX=NT_PI(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@DESCRIPTION=NT_PI returns the number of primes less than or equal to @{n}.
@SEEALSO=ITHPRIME,NT_PHI,NT_D,NT_SIGMA

@CATEGORY=Number Theory
@FUNCTION=NT_SIGMA
@SHORTDESC=sigma function
@SYNTAX=NT_SIGMA(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@DESCRIPTION=NT_SIGMA calculates the sum of the divisors of @{n}.
@SEEALSO=NT_D,ITHPRIME,NT_PHI

@CATEGORY=Number Theory
@FUNCTION=PFACTOR
@SHORTDESC=smallest prime factor
@SYNTAX=PFACTOR(n)
@ARGUMENTDESCRIPTION=@{n}: positive integer
@DESCRIPTION=PFACTOR finds the smallest prime factor of its argument.
@NOTE=The argument @{n} must be at least 2. Otherwise a #VALUE! error is returned.
@SEEALSO=ITHPRIME

@CATEGORY=Random Numbers
@FUNCTION=RAND
@SHORTDESC=a random number between zero and one
@SYNTAX=RAND()
@EXCEL=This function is Excel compatible.
@SEEALSO=RANDBETWEEN

@CATEGORY=Random Numbers
@FUNCTION=RANDBERNOULLI
@SHORTDESC=random variate from a Bernoulli distribution
@SYNTAX=RANDBERNOULLI(p)
@ARGUMENTDESCRIPTION=@{p}: probability of success
@NOTE=If @{p} < 0 or @{p} > 1 RANDBERNOULLI returns #NUM!
@SEEALSO=RAND,RANDBETWEEN

@CATEGORY=Random Numbers
@FUNCTION=RANDBETA
@SHORTDESC=random variate from a Beta distribution
@SYNTAX=RANDBETA(a,b)
@ARGUMENTDESCRIPTION=@{a}: parameter of the Beta distribution
@{b}: parameter of the Beta distribution
@SEEALSO=RAND,RANDGAMMA

@CATEGORY=Random Numbers
@FUNCTION=RANDBETWEEN
@SHORTDESC=a random integer number between and including @{bottom} and @{top}
@SYNTAX=RANDBETWEEN(bottom,top)
@ARGUMENTDESCRIPTION=@{bottom}: lower limit
@{top}: upper limit
@NOTE=If @{bottom} > @{top}, RANDBETWEEN returns #NUM!
@EXCEL=This function is Excel compatible.
@SEEALSO=RAND,RANDUNIFORM

@CATEGORY=Random Numbers
@FUNCTION=RANDBINOM
@SHORTDESC=random variate from a binomial distribution
@SYNTAX=RANDBINOM(p,n)
@ARGUMENTDESCRIPTION=@{p}: probability of success in a single trial
@{n}: number of trials
@NOTE=If @{p} < 0 or @{p} > 1 RANDBINOM returns #NUM! If @{n} < 0 RANDBINOM returns #NUM!
@SEEALSO=RAND,RANDBETWEEN

@CATEGORY=Random Numbers
@FUNCTION=RANDCAUCHY
@SHORTDESC=random variate from a Cauchy or Lorentz distribution
@SYNTAX=RANDCAUCHY(a)
@ARGUMENTDESCRIPTION=@{a}: scale parameter of the distribution
@NOTE=If @{a} < 0 RANDCAUCHY returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDCHISQ
@SHORTDESC=random variate from a Chi-square distribution
@SYNTAX=RANDCHISQ(df)
@ARGUMENTDESCRIPTION=@{df}: degrees of freedom
@SEEALSO=RAND,RANDGAMMA

@CATEGORY=Random Numbers
@FUNCTION=RANDDISCRETE
@SHORTDESC=random variate from a finite discrete distribution
@SYNTAX=RANDDISCRETE(val_range,prob_range)
@ARGUMENTDESCRIPTION=@{val_range}: possible values of the random variable
@{prob_range}: probabilities of the corresponding values in @{val_range}, defaults to equal probabilities
@DESCRIPTION=RANDDISCRETE returns one of the values in the @{val_range}. The probabilities for each value are given in the @{prob_range}.
@NOTE=If the sum of all values in @{prob_range} is not one, RANDDISCRETE returns #NUM! If @{val_range} and @{prob_range} are not the same size, RANDDISCRETE returns #NUM! If @{val_range} or @{prob_range} is not a range, RANDDISCRETE returns #VALUE!
@SEEALSO=RANDBETWEEN,RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDEXP
@SHORTDESC=random variate from an exponential distribution
@SYNTAX=RANDEXP(b)
@ARGUMENTDESCRIPTION=@{b}: parameter of the exponential distribution
@SEEALSO=RAND,RANDBETWEEN

@CATEGORY=Random Numbers
@FUNCTION=RANDEXPPOW
@SHORTDESC=random variate from an exponential power distribution
@SYNTAX=RANDEXPPOW(a,b)
@ARGUMENTDESCRIPTION=@{a}: scale parameter of the exponential power distribution
@{b}: exponent of the exponential power distribution
@DESCRIPTION=For @{b} = 1 the exponential power distribution reduces to the Laplace distribution.
For @{b} = 2 the exponential power distribution reduces to the normal distribution with σ = a/sqrt(2)
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDFDIST
@SHORTDESC=random variate from an F distribution
@SYNTAX=RANDFDIST(df1,df2)
@ARGUMENTDESCRIPTION=@{df1}: numerator degrees of freedom
@{df2}: denominator degrees of freedom
@SEEALSO=RAND,RANDGAMMA

@CATEGORY=Random Numbers
@FUNCTION=RANDGAMMA
@SHORTDESC=random variate from a Gamma distribution
@SYNTAX=RANDGAMMA(a,b)
@ARGUMENTDESCRIPTION=@{a}: parameter of the Gamma distribution
@{b}: parameter of the Gamma distribution
@NOTE=If @{a} ≤ 0, RANDGAMMA returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDGEOM
@SHORTDESC=random variate from a geometric distribution
@SYNTAX=RANDGEOM(p)
@ARGUMENTDESCRIPTION=@{p}: probability of success in a single trial
@NOTE=If @{p} < 0 or @{p} > 1 RANDGEOM returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDGUMBEL
@SHORTDESC=random variate from a Gumbel distribution
@SYNTAX=RANDGUMBEL(a,b,type)
@ARGUMENTDESCRIPTION=@{a}: parameter of the Gumbel distribution
@{b}: parameter of the Gumbel distribution
@{type}: type of the Gumbel distribution, defaults to 1
@NOTE=If @{type} is neither 1 nor 2, RANDGUMBEL returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDHYPERG
@SHORTDESC=random variate from a hypergeometric distribution
@SYNTAX=RANDHYPERG(n1,n2,t)
@ARGUMENTDESCRIPTION=@{n1}: number of objects of type 1
@{n2}: number of objects of type 2
@{t}: total number of objects selected
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDLANDAU
@SHORTDESC=random variate from the Landau distribution
@SYNTAX=RANDLANDAU()
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDLAPLACE
@SHORTDESC=random variate from a Laplace distribution
@SYNTAX=RANDLAPLACE(a)
@ARGUMENTDESCRIPTION=@{a}: parameter of the Laplace distribution
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDLEVY
@SHORTDESC=random variate from a Lévy distribution
@SYNTAX=RANDLEVY(c,α,β)
@ARGUMENTDESCRIPTION=@{c}: parameter of the Lévy distribution
@{α}: parameter of the Lévy distribution
@{β}: parameter of the Lévy distribution, defaults to 0
@DESCRIPTION=For @{α} = 1, @{β}=0, the Lévy distribution reduces to the Cauchy (or Lorentzian) distribution.
For @{α} = 2, @{β}=0, the Lévy distribution reduces to the normal distribution.
@NOTE=If @{α} ≤ 0 or @{α} > 2, RANDLEVY returns #NUM! If @{β} < -1 or @{β} > 1, RANDLEVY returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDLOG
@SHORTDESC=random variate from a logarithmic distribution
@SYNTAX=RANDLOG(p)
@ARGUMENTDESCRIPTION=@{p}: probability
@NOTE=If @{p} < 0 or @{p} > 1 RANDLOG returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDLOGISTIC
@SHORTDESC=random variate from a logistic distribution
@SYNTAX=RANDLOGISTIC(a)
@ARGUMENTDESCRIPTION=@{a}: parameter of the logistic distribution
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDLOGNORM
@SHORTDESC=random variate from a lognormal distribution
@SYNTAX=RANDLOGNORM(ζ,σ)
@ARGUMENTDESCRIPTION=@{ζ}: parameter of the lognormal distribution
@{σ}: standard deviation of the distribution
@NOTE=If @{σ} < 0, RANDLOGNORM returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDNEGBINOM
@SHORTDESC=random variate from a negative binomial distribution
@SYNTAX=RANDNEGBINOM(p,n)
@ARGUMENTDESCRIPTION=@{p}: probability of success in a single trial
@{n}: number of failures
@NOTE=If @{p} < 0 or @{p} > 1 RANDNEGBINOM returns #NUM! If @{n} < 1 RANDNEGBINOM returns #NUM!
@SEEALSO=RAND,RANDBETWEEN

@CATEGORY=Random Numbers
@FUNCTION=RANDNORM
@SHORTDESC=random variate from a normal distribution
@SYNTAX=RANDNORM(μ,σ)
@ARGUMENTDESCRIPTION=@{μ}: mean of the distribution
@{σ}: standard deviation of the distribution
@NOTE=If @{σ} < 0, RANDNORM returns #NUM!
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDNORMTAIL
@SHORTDESC=random variate from the upper tail of a normal distribution with mean 0
@SYNTAX=RANDNORMTAIL(a,σ)
@ARGUMENTDESCRIPTION=@{a}: lower limit of the tail
@{σ}: standard deviation of the normal distribution
@NOTE=The method is based on Marsaglia's famous rectangle-wedge-tail algorithm (Ann Math Stat 32, 894-899 (1961)), with this aspect explained in Knuth, v2, 3rd ed, p139, 586 (exercise 11).
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDPARETO
@SHORTDESC=random variate from a Pareto distribution
@SYNTAX=RANDPARETO(a,b)
@ARGUMENTDESCRIPTION=@{a}: parameter of the Pareto distribution
@{b}: parameter of the Pareto distribution
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDPOISSON
@SHORTDESC=random variate from a Poisson distribution
@SYNTAX=RANDPOISSON(λ)
@ARGUMENTDESCRIPTION=@{λ}: parameter of the Poisson distribution
@NOTE=If @{λ} < 0 RANDPOISSON returns #NUM!
@SEEALSO=RAND,RANDBETWEEN

@CATEGORY=Random Numbers
@FUNCTION=RANDRAYLEIGH
@SHORTDESC=random variate from a Rayleigh distribution
@SYNTAX=RANDRAYLEIGH(σ)
@ARGUMENTDESCRIPTION=@{σ}: scale parameter of the Rayleigh distribution
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDRAYLEIGHTAIL
@SHORTDESC=random variate from the tail of a Rayleigh distribution
@SYNTAX=RANDRAYLEIGHTAIL(a,σ)
@ARGUMENTDESCRIPTION=@{a}: lower limit of the tail
@{σ}: scale parameter of the Rayleigh distribution
@SEEALSO=RAND,RANDRAYLEIGH

@CATEGORY=Random Numbers
@FUNCTION=RANDSNORM
@SHORTDESC=random variate from a skew-normal distribution
@SYNTAX=RANDSNORM(𝛼,𝜉,𝜔)
@ARGUMENTDESCRIPTION=@{𝛼}: shape parameter of the skew-normal distribution, defaults to 0
@{𝜉}: location parameter of the skew-normal distribution, defaults to 0
@{𝜔}: scale parameter of the skew-normal distribution, defaults to 1
@DESCRIPTION=The random variates are drawn from a skew-normal distribution with shape parameter @{𝛼}. When @{𝛼}=0, the skewness vanishes, and we obtain the standard normal density; as 𝛼 increases (in absolute value), the skewness of the distribution increases; when @{𝛼} approaches infinity  the density converges to the so-called half-normal (or folded normal) density function; if the sign of @{𝛼} changes, the density is reflected on the opposite side of the vertical axis.
@NOTE=The mean of a skew-normal distribution with location parameter @{𝜉}=0 is not 0. The standard deviation of a skew-normal distribution with scale parameter @{𝜔}=1 is not 1. The skewness of a skew-normal distribution is in general not @{𝛼}. If @{𝜔} < 0, RANDSNORM returns #NUM!
@SEEALSO=RANDNORM,RANDSTDIST

@CATEGORY=Random Numbers
@FUNCTION=RANDSTDIST
@SHORTDESC=random variate from a skew-t distribution
@SYNTAX=RANDSTDIST(df,𝛼)
@ARGUMENTDESCRIPTION=@{df}: degrees of freedom
@{𝛼}: shape parameter of the skew-t distribution, defaults to 0
@NOTE=The mean of a skew-t distribution is not 0. The standard deviation of a skew-t distribution is not 1. The skewness of a skew-t distribution is in general not @{𝛼}.
@SEEALSO=RANDTDIST,RANDSNORM

@CATEGORY=Random Numbers
@FUNCTION=RANDTDIST
@SHORTDESC=random variate from a Student t distribution
@SYNTAX=RANDTDIST(df)
@ARGUMENTDESCRIPTION=@{df}: degrees of freedom
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDUNIFORM
@SHORTDESC=random variate from the uniform distribution from @{a} to @{b}
@SYNTAX=RANDUNIFORM(a,b)
@ARGUMENTDESCRIPTION=@{a}: lower limit of the uniform distribution
@{b}: upper limit of the uniform distribution
@NOTE=If @{a} > @{b} RANDUNIFORM returns #NUM!
@SEEALSO=RANDBETWEEN,RAND

@CATEGORY=Random Numbers
@FUNCTION=RANDWEIBULL
@SHORTDESC=random variate from a Weibull distribution
@SYNTAX=RANDWEIBULL(a,b)
@ARGUMENTDESCRIPTION=@{a}: parameter of the Weibull distribution
@{b}: parameter of the Weibull distribution
@SEEALSO=RAND

@CATEGORY=Random Numbers
@FUNCTION=SIMTABLE
@SHORTDESC=one of the values in the given argument list depending on the round number of the simulation tool
@SYNTAX=SIMTABLE(d1,d2,…)
@ARGUMENTDESCRIPTION=@{d1}: first value
@{d2}: second value
@DESCRIPTION=SIMTABLE returns one of the values in the given argument list depending on the round number of the simulation tool. When the simulation tool is not activated, SIMTABLE returns @{d1}.
With the simulation tool and the SIMTABLE function you can test given decision variables. Each SIMTABLE function contains the possible values of a simulation variable. In most valid simulation models you should have the same number of values @{dN} for all decision variables.  If the simulation is run more rounds than there are values defined, SIMTABLE returns #N/A! error (e.g. if A1 contains `=SIMTABLE(1)' and A2 `=SIMTABLE(1,2)', A1 yields #N/A! error on the second round).
The successive use of the simulation tool also requires that you give to the tool at least one input variable having RAND() or any other RAND<distribution name>() function in it. On each round, the simulation tool iterates for the given number of rounds over all the input variables to reevaluate them. On each iteration, the values of the output variables are stored, and when the round is completed, descriptive statistical information is created according to the values.

@CATEGORY=Statistics
@FUNCTION=ADTEST
@SHORTDESC=Anderson-Darling Test of Normality
@SYNTAX=ADTEST(x)
@ARGUMENTDESCRIPTION=@{x}: array of sample values
@DESCRIPTION=This function returns an array with the first row giving the p-value of the Anderson-Darling Test, the second row the test statistic of the test, and the third the number of observations in the sample.
@NOTE=If there are less than 8 sample values, ADTEST returns #VALUE!
@SEEALSO=CHITEST,CVMTEST,LKSTEST,SFTEST

@CATEGORY=Statistics
@FUNCTION=AVEDEV
@SHORTDESC=average of the absolute deviations of a data set
@SYNTAX=AVEDEV(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@EXCEL=This function is Excel compatible.
@SEEALSO=STDEV

@CATEGORY=Statistics
@FUNCTION=AVERAGE
@SHORTDESC=average of all the numeric values and cells
@SYNTAX=AVERAGE(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@EXCEL=This function is Excel compatible.
@SEEALSO=SUM, COUNT

@CATEGORY=Statistics
@FUNCTION=AVERAGEA
@SHORTDESC=average of all the values and cells
@SYNTAX=AVERAGEA(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE

@CATEGORY=Statistics
@FUNCTION=BERNOULLI
@SHORTDESC=probability mass function of a Bernoulli distribution
@SYNTAX=BERNOULLI(k,p)
@ARGUMENTDESCRIPTION=@{k}: integer
@{p}: probability of success
@NOTE=If @{k} != 0 and @{k} != 1 this function returns a #NUM! error. If @{p} < 0 or @{p} > 1 this function returns a #NUM! error.
@SEEALSO=RANDBERNOULLI

@CATEGORY=Statistics
@FUNCTION=BETA.DIST
@SHORTDESC=cumulative distribution function of the beta distribution
@SYNTAX=BETA.DIST(x,alpha,beta,cumulative,a,b)
@ARGUMENTDESCRIPTION=@{x}: number
@{alpha}: scale parameter
@{beta}: scale parameter
@{cumulative}: whether to evaluate the density function or the cumulative distribution function
@{a}: optional lower bound, defaults to 0
@{b}: optional upper bound, defaults to 1
@NOTE=If @{x} < @{a} or @{x} > @{b} this function returns a #NUM! error. If @{alpha} <= 0 or @{beta} <= 0, this function returns a #NUM! error. If @{a} >= @{b} this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=BETAINV,BETADIST

@CATEGORY=Statistics
@FUNCTION=BETADIST
@SHORTDESC=cumulative distribution function of the beta distribution
@SYNTAX=BETADIST(x,alpha,beta,a,b)
@ARGUMENTDESCRIPTION=@{x}: number
@{alpha}: scale parameter
@{beta}: scale parameter
@{a}: optional lower bound, defaults to 0
@{b}: optional upper bound, defaults to 1
@NOTE=If @{x} < @{a} or @{x} > @{b} this function returns a #NUM! error. If @{alpha} <= 0 or @{beta} <= 0, this function returns a #NUM! error. If @{a} >= @{b} this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=BETAINV, BETA.DIST

@CATEGORY=Statistics
@FUNCTION=BETAINV
@SHORTDESC=inverse of the cumulative distribution function of the beta distribution
@SYNTAX=BETAINV(p,alpha,beta,a,b)
@ARGUMENTDESCRIPTION=@{p}: probability
@{alpha}: scale parameter
@{beta}: scale parameter
@{a}: optional lower bound, defaults to 0
@{b}: optional upper bound, defaults to 1
@NOTE=If @{p} < 0 or @{p} > 1 this function returns a #NUM! error. If @{alpha} <= 0 or @{beta} <= 0, this function returns a #NUM! error. If @{a} >= @{b} this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=BETADIST,BETA.DIST

@CATEGORY=Statistics
@FUNCTION=BINOM.DIST.RANGE
@SHORTDESC=probability of the binomial distribution over an interval
@SYNTAX=BINOM.DIST.RANGE(trials,p,start,end)
@ARGUMENTDESCRIPTION=@{trials}: number of trials
@{p}: probability of success in each trial
@{start}: start of the interval
@{end}: end of the interval, defaults to @{start}
@NOTE=If @{start}, @{end} or @{trials} are non-integer they are truncated. If @{trials} < 0 this function returns a #NUM! error. If @{p} < 0 or @{p} > 1 this function returns a #NUM! error. If @{start} > @{end} this function returns 0.
@ODF=This function is OpenFormula compatible.
@SEEALSO=BINOMDIST,R.PBINOM

@CATEGORY=Statistics
@FUNCTION=BINOMDIST
@SHORTDESC=probability mass or cumulative distribution function of the binomial distribution
@SYNTAX=BINOMDIST(n,trials,p,cumulative)
@ARGUMENTDESCRIPTION=@{n}: number of successes
@{trials}: number of trials
@{p}: probability of success in each trial
@{cumulative}: whether to evaluate the mass function or the cumulative distribution function
@NOTE=If @{n} or @{trials} are non-integer they are truncated. If @{n} < 0 or @{trials} < 0 this function returns a #NUM! error. If @{n} > @{trials} this function returns a #NUM! error. If @{p} < 0 or @{p} > 1 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=POISSON

@CATEGORY=Statistics
@FUNCTION=CAUCHY
@SHORTDESC=probability density or cumulative distribution function of the Cauchy, Lorentz or Breit-Wigner distribution
@SYNTAX=CAUCHY(x,a,cumulative)
@ARGUMENTDESCRIPTION=@{x}: number
@{a}: scale parameter
@{cumulative}: whether to evaluate the density function or the cumulative distribution function
@NOTE=If @{a} < 0 this function returns a #NUM! error. If @{cumulative} is neither TRUE nor FALSE this function returns a #VALUE! error.
@SEEALSO=RANDCAUCHY

@CATEGORY=Statistics
@FUNCTION=CHIDIST
@SHORTDESC=survival function of the chi-squared distribution
@SYNTAX=CHIDIST(x,dof)
@ARGUMENTDESCRIPTION=@{x}: number
@{dof}: number of degrees of freedom
@DESCRIPTION=The survival function is 1 minus the cumulative distribution function.
@NOTE=If @{dof} is non-integer it is truncated. If @{dof} < 1 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@ODF=CHIDIST(@{x},@{dof}) is the OpenFormula function LEGACY.CHIDIST(@{x},@{dof}).
@SEEALSO=CHIINV,CHITEST

@CATEGORY=Statistics
@FUNCTION=CHIINV
@SHORTDESC=inverse of the survival function of the chi-squared distribution
@SYNTAX=CHIINV(p,dof)
@ARGUMENTDESCRIPTION=@{p}: probability
@{dof}: number of degrees of freedom
@DESCRIPTION=The survival function is 1 minus the cumulative distribution function.
@NOTE=If @{p} < 0 or @{p} > 1 or @{dof} < 1 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@ODF=CHIINV(@{p},@{dof}) is the OpenFormula function LEGACY.CHIDIST(@{p},@{dof}).
@SEEALSO=CHIDIST,CHITEST

@CATEGORY=Statistics
@FUNCTION=CHITEST
@SHORTDESC=p value of the Goodness of Fit Test
@SYNTAX=CHITEST(actual_range,theoretical_range)
@ARGUMENTDESCRIPTION=@{actual_range}: observed data
@{theoretical_range}: expected values
@NOTE=If the actual range is not an n by 1 or 1 by n range, but an n by m range, then CHITEST uses (n-1) times (m-1) as degrees of freedom. This is useful if the expected values were calculated from the observed value in a test of independence or test of homogeneity.
@EXCEL=This function is Excel compatible.
@ODF=CHITEST is the OpenFormula function LEGACY.CHITEST.
@SEEALSO=CHIDIST,CHIINV

@CATEGORY=Statistics
@FUNCTION=CONFIDENCE
@SHORTDESC=margin of error of a confidence interval for the population mean
@SYNTAX=CONFIDENCE(alpha,stddev,size)
@ARGUMENTDESCRIPTION=@{alpha}: significance level
@{stddev}: population standard deviation
@{size}: sample size
@NOTE=This function requires the usually unknown population standard deviation. If @{size} is non-integer it is truncated. If @{size} < 0 this function returns a #NUM! error. If @{size} is 0 this function returns a #DIV/0! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE

@CATEGORY=Statistics
@FUNCTION=CORREL
@SHORTDESC=Pearson correlation coefficient of two data sets
@SYNTAX=CORREL(array1,array2)
@ARGUMENTDESCRIPTION=@{array1}: first data set
@{array2}: second data set
@DESCRIPTION=Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=COVAR,FISHER,FISHERINV

@CATEGORY=Statistics
@FUNCTION=COUNT
@SHORTDESC=total number of integer or floating point arguments passed
@SYNTAX=COUNT(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE

@CATEGORY=Statistics
@FUNCTION=COUNTA
@SHORTDESC=number of arguments passed not including empty cells
@SYNTAX=COUNTA(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,COUNT,DCOUNT,DCOUNTA,PRODUCT,SUM

@CATEGORY=Statistics
@FUNCTION=COVAR
@SHORTDESC=covariance of two data sets
@SYNTAX=COVAR(array1,array2)
@ARGUMENTDESCRIPTION=@{array1}: first data set
@{array2}: set data set
@DESCRIPTION=Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=CORREL,FISHER,FISHERINV

@CATEGORY=Statistics
@FUNCTION=COVARIANCE.S
@SHORTDESC=sample covariance of two data sets
@SYNTAX=COVARIANCE.S(array1,array2)
@ARGUMENTDESCRIPTION=@{array1}: first data set
@{array2}: set data set
@DESCRIPTION=Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=COVAR,CORREL

@CATEGORY=Statistics
@FUNCTION=CRITBINOM
@SHORTDESC=right-tailed critical value of the binomial distribution
@SYNTAX=CRITBINOM(trials,p,alpha)
@ARGUMENTDESCRIPTION=@{trials}: number of trials
@{p}: probability of success in each trial
@{alpha}: significance level (area of the tail)
@NOTE=If @{trials} is a non-integer it is truncated. If @{trials} < 0 this function returns a #NUM! error. If @{p} < 0 or @{p} > 1 this function returns a #NUM! error. If @{alpha} < 0 or @{alpha} > 1 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=BINOMDIST

@CATEGORY=Statistics
@FUNCTION=CRONBACH
@SHORTDESC=Cronbach's alpha
@SYNTAX=CRONBACH(ref1,ref2,…)
@ARGUMENTDESCRIPTION=@{ref1}: first data set
@{ref2}: second data set
@SEEALSO=VAR

@CATEGORY=Statistics
@FUNCTION=CVMTEST
@SHORTDESC=Cramér-von Mises Test of Normality
@SYNTAX=CVMTEST(x)
@ARGUMENTDESCRIPTION=@{x}: array of sample values
@DESCRIPTION=This function returns an array with the first row giving the p-value of the Cramér-von Mises Test, the second row the test statistic of the test, and the third the number of observations in the sample.
@NOTE=If there are less than 8 sample values, CVMTEST returns #VALUE!
@SEEALSO=CHITEST,ADTEST,LKSTEST,SFTEST

@CATEGORY=Statistics
@FUNCTION=DEVSQ
@SHORTDESC=sum of squares of deviations of a data set
@SYNTAX=DEVSQ(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=STDEV

@CATEGORY=Statistics
@FUNCTION=EXPONDIST
@SHORTDESC=probability density or cumulative distribution function of the exponential distribution
@SYNTAX=EXPONDIST(x,y,cumulative)
@ARGUMENTDESCRIPTION=@{x}: number
@{y}: scale parameter
@{cumulative}: whether to evaluate the density function or the cumulative distribution function
@DESCRIPTION=If @{cumulative} is false it will return:	@{y} * exp (-@{y}*@{x}),otherwise it will return	1 - exp (-@{y}*@{x}).
@NOTE=If @{x} < 0 or @{y} <= 0 this will return an error.
@EXCEL=This function is Excel compatible.
@SEEALSO=POISSON

@CATEGORY=Statistics
@FUNCTION=EXPPOWDIST
@SHORTDESC=the probability density function of the Exponential Power distribution
@SYNTAX=EXPPOWDIST(x,a,b)
@ARGUMENTDESCRIPTION=@{x}: number
@{a}: scale parameter
@{b}: scale parameter
@DESCRIPTION=This distribution has been recommended for lifetime analysis when a U-shaped hazard function is desired. This corresponds to rapid failure once the product starts to wear out after a period of steady or even improving reliability.
@SEEALSO=RANDEXPPOW

@CATEGORY=Statistics
@FUNCTION=FDIST
@SHORTDESC=survival function of the F distribution
@SYNTAX=FDIST(x,dof_of_num,dof_of_denom)
@ARGUMENTDESCRIPTION=@{x}: number
@{dof_of_num}: numerator degrees of freedom
@{dof_of_denom}: denominator degrees of freedom
@DESCRIPTION=The survival function is 1 minus the cumulative distribution function.
@NOTE=If @{x} < 0 this function returns a #NUM! error. If @{dof_of_num} < 1 or @{dof_of_denom} < 1, this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@ODF=FDIST is the OpenFormula function LEGACY.FDIST.
@SEEALSO=FINV

@CATEGORY=Statistics
@FUNCTION=FINV
@SHORTDESC=inverse of the survival function of the F distribution
@SYNTAX=FINV(p,dof_of_num,dof_of_denom)
@ARGUMENTDESCRIPTION=@{p}: probability
@{dof_of_num}: numerator degrees of freedom
@{dof_of_denom}: denominator degrees of freedom
@DESCRIPTION=The survival function is 1 minus the cumulative distribution function.
@NOTE=If @{p} < 0 or @{p} > 1 this function returns a #NUM! error. If @{dof_of_num} < 1 or @{dof_of_denom} < 1 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@ODF=FINV is the OpenFormula function LEGACY.FINV.
@SEEALSO=FDIST

@CATEGORY=Statistics
@FUNCTION=FISHER
@SHORTDESC=Fisher transformation
@SYNTAX=FISHER(x)
@ARGUMENTDESCRIPTION=@{x}: number
@NOTE=If @{x} is not a number, this function returns a #VALUE! error. If @{x} <= -1 or @{x} >= 1, this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=FISHERINV,ATANH

@CATEGORY=Statistics
@FUNCTION=FISHERINV
@SHORTDESC=inverse of the Fisher transformation
@SYNTAX=FISHERINV(x)
@ARGUMENTDESCRIPTION=@{x}: number
@NOTE=If @{x} is a non-number this function returns a #VALUE! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=FISHER,TANH

@CATEGORY=Statistics
@FUNCTION=FORECAST
@SHORTDESC=estimates a future value according to existing values using simple linear regression
@SYNTAX=FORECAST(x,known_ys,known_xs)
@ARGUMENTDESCRIPTION=@{x}: x-value whose matching y-value should be forecast
@{known_ys}: known y-values
@{known_xs}: known x-values
@DESCRIPTION=This function estimates a future value according to existing values using simple linear regression.
@NOTE=If @{known_xs} or @{known_ys} contains no data entries or different number of data entries, this function returns a #N/A error. If the variance of the @{known_xs} is zero, this function returns a #DIV/0 error.
@EXCEL=This function is Excel compatible.
@SEEALSO=INTERCEPT,TREND

@CATEGORY=Statistics
@FUNCTION=FREQUENCY
@SHORTDESC=frequency table
@SYNTAX=FREQUENCY(data_array,bins_array)
@ARGUMENTDESCRIPTION=@{data_array}: data values
@{bins_array}: array of cutoff values
@DESCRIPTION=The results are given as an array.
If the @{bins_array} is empty, this function returns the number of data points in @{data_array}.
@EXCEL=This function is Excel compatible.

@CATEGORY=Statistics
@FUNCTION=FTEST
@SHORTDESC=p-value for the two-tailed hypothesis test comparing the variances of two populations
@SYNTAX=FTEST(array1,array2)
@ARGUMENTDESCRIPTION=@{array1}: sample from the first population
@{array2}: sample from the second population
@EXCEL=This function is Excel compatible.
@SEEALSO=FDIST,FINV

@CATEGORY=Statistics
@FUNCTION=GAMMADIST
@SHORTDESC=probability density or cumulative distribution function of the gamma distribution
@SYNTAX=GAMMADIST(x,alpha,beta,cumulative)
@ARGUMENTDESCRIPTION=@{x}: number
@{alpha}: scale parameter
@{beta}: scale parameter
@{cumulative}: whether to evaluate the density function or the cumulative distribution function
@NOTE=If @{x} < 0 this function returns a #NUM! error. If @{alpha} <= 0 or @{beta} <= 0, this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=GAMMAINV

@CATEGORY=Statistics
@FUNCTION=GAMMAINV
@SHORTDESC=inverse of the cumulative gamma distribution
@SYNTAX=GAMMAINV(p,alpha,beta)
@ARGUMENTDESCRIPTION=@{p}: probability
@{alpha}: scale parameter
@{beta}: scale parameter
@NOTE=If @{p} < 0 or @{p} > 1 this function returns a #NUM! error. If @{alpha} <= 0 or @{beta} <= 0 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=GAMMADIST

@CATEGORY=Statistics
@FUNCTION=GEOMDIST
@SHORTDESC=probability mass or cumulative distribution function of the geometric distribution
@SYNTAX=GEOMDIST(k,p,cumulative)
@ARGUMENTDESCRIPTION=@{k}: number of trials
@{p}: probability of success in any trial
@{cumulative}: whether to evaluate the mass function or the cumulative distribution function
@NOTE=If @{k} < 0 this function returns a #NUM! error. If @{p} < 0 or @{p} > 1 this function returns a #NUM! error. If @{cumulative} is neither TRUE nor FALSE this function returns a #VALUE! error.
@SEEALSO=RANDGEOM

@CATEGORY=Statistics
@FUNCTION=GEOMEAN
@SHORTDESC=geometric mean
@SYNTAX=GEOMEAN(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=The geometric mean is equal to the Nth root of the product of the N values.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,HARMEAN,MEDIAN,MODE,TRIMMEAN

@CATEGORY=Statistics
@FUNCTION=GROWTH
@SHORTDESC=exponential growth prediction
@SYNTAX=GROWTH(known_ys,known_xs,new_xs,affine)
@ARGUMENTDESCRIPTION=@{known_ys}: known y-values
@{known_xs}: known x-values; defaults to the array {1, 2, 3, …}
@{new_xs}: x-values for which to estimate the y-values; defaults to @{known_xs}
@{affine}: if true, the model contains a constant term, defaults to true
@DESCRIPTION=GROWTH function applies the “least squares” method to fit an exponential curve to your data and predicts the exponential growth by using this curve.
GROWTH returns an array having one column and a row for each data point in @{new_xs}.
@NOTE=If @{known_ys} and @{known_xs} have unequal number of data points, this function returns a #NUM! error.
@SEEALSO=LOGEST,GROWTH,TREND

@CATEGORY=Statistics
@FUNCTION=HARMEAN
@SHORTDESC=harmonic mean
@SYNTAX=HARMEAN(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=The harmonic mean of N data points is  N divided by the sum of the reciprocals of the data points).
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,GEOMEAN,MEDIAN,MODE,TRIMMEAN

@CATEGORY=Statistics
@FUNCTION=HYPGEOMDIST
@SHORTDESC=probability mass or cumulative distribution function of the hypergeometric distribution
@SYNTAX=HYPGEOMDIST(x,n,M,N,cumulative)
@ARGUMENTDESCRIPTION=@{x}: number of successes
@{n}: sample size
@{M}: number of possible successes in the population
@{N}: population size
@{cumulative}: whether to evaluate the mass function or the cumulative distribution function
@NOTE=If @{x},@{n},@{M} or @{N} is a non-integer it is truncated. If @{x},@{n},@{M} or @{N} < 0 this function returns a #NUM! error. If @{x} > @{M} or @{n} > @{N} this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=BINOMDIST,POISSON

@CATEGORY=Statistics
@FUNCTION=INTERCEPT
@SHORTDESC=the intercept of a linear regression line
@SYNTAX=INTERCEPT(known_ys,known_xs)
@ARGUMENTDESCRIPTION=@{known_ys}: known y-values
@{known_xs}: known x-values
@NOTE=If @{known_xs} or @{known_ys} contains no data entries or different number of data entries, this function returns a #N/A error. If the variance of the @{known_xs} is zero, this function returns #DIV/0 error.
@EXCEL=This function is Excel compatible.
@SEEALSO=FORECAST,TREND

@CATEGORY=Statistics
@FUNCTION=KURT
@SHORTDESC=unbiased estimate of the kurtosis of a data set
@SYNTAX=KURT(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Strings and empty cells are simply ignored.
@NOTE=This is only meaningful if the underlying distribution really has a fourth moment.  The kurtosis is offset by three such that a normal distribution will have zero kurtosis. If fewer than four numbers are given or all of them are equal this function returns a #DIV/0! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,VAR,SKEW,KURTP

@CATEGORY=Statistics
@FUNCTION=KURTP
@SHORTDESC=population kurtosis of a data set
@SYNTAX=KURTP(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Strings and empty cells are simply ignored.
@NOTE=If fewer than two numbers are given or all of them are equal this function returns a #DIV/0! error.
@SEEALSO=AVERAGE,VARP,SKEWP,KURT

@CATEGORY=Statistics
@FUNCTION=LANDAU
@SHORTDESC=approximate probability density function of the Landau distribution
@SYNTAX=LANDAU(x)
@ARGUMENTDESCRIPTION=@{x}: number
@SEEALSO=RANDLANDAU

@CATEGORY=Statistics
@FUNCTION=LAPLACE
@SHORTDESC=probability density function of the Laplace distribution
@SYNTAX=LAPLACE(x,a)
@ARGUMENTDESCRIPTION=@{x}: number
@{a}: mean
@SEEALSO=RANDLAPLACE

@CATEGORY=Statistics
@FUNCTION=LARGE
@SHORTDESC=@{k}-th largest value in a data set
@SYNTAX=LARGE(data,k)
@ARGUMENTDESCRIPTION=@{data}: data set
@{k}: which value to find
@NOTE=If data set is empty this function returns a #NUM! error. If @{k} <= 0 or @{k} is greater than the number of data items given this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,SMALL

@CATEGORY=Statistics
@FUNCTION=LEVERAGE
@SHORTDESC=calculate regression leverage
@SYNTAX=LEVERAGE(A)
@ARGUMENTDESCRIPTION=@{A}: a matrix
@DESCRIPTION=Returns the diagonal of @{A} (@{A}^T @{A})^-1 @{A}^T as a column vector.
@NOTE=If the matrix is singular, #VALUE! is returned.

@CATEGORY=Statistics
@FUNCTION=LINEST
@SHORTDESC=multiple linear regression coefficients and statistics
@SYNTAX=LINEST(known_ys,known_xs,affine,stats)
@ARGUMENTDESCRIPTION=@{known_ys}: vector of values of dependent variable
@{known_xs}: array of values of independent variables, defaults to a single vector {1,…,n}
@{affine}: if true, the model contains a constant term, defaults to true
@{stats}: if true, some additional statistics are provided, defaults to false
@DESCRIPTION=This function returns an array with the first row giving the regression coefficients for the independent variables x_m, x_(m-1),…,x_2, x_1 followed by the y-intercept if @{affine} is true.
If @{stats} is true, the second row contains the corresponding standard errors of the regression coefficients.In this case, the third row contains the R^2 value and the standard error for the predicted value. The fourth row contains the observed F value and its degrees of freedom. Finally, the fifth row contains the regression sum of squares and the residual sum of squares.
If @{affine} is false, R^2 is the uncentered version of the coefficient of determination; that is the proportion of the sum of squares explained by the model.
@NOTE=If the length of @{known_ys} does not match the corresponding length of @{known_xs}, this function returns a #NUM! error.
@SEEALSO=LOGEST,TREND

@CATEGORY=Statistics
@FUNCTION=LKSTEST
@SHORTDESC=Lilliefors (Kolmogorov-Smirnov) Test of Normality
@SYNTAX=LKSTEST(x)
@ARGUMENTDESCRIPTION=@{x}: array of sample values
@DESCRIPTION=This function returns an array with the first row giving the p-value of the Lilliefors (Kolmogorov-Smirnov) Test, the second row the test statistic of the test, and the third the number of observations in the sample.
@NOTE=If there are less than 5 sample values, LKSTEST returns #VALUE!
@SEEALSO=CHITEST,ADTEST,SFTEST,CVMTEST

@CATEGORY=Statistics
@FUNCTION=LOGEST
@SHORTDESC=exponential least square fit
@SYNTAX=LOGEST(known_ys,known_xs,affine,stat)
@ARGUMENTDESCRIPTION=@{known_ys}: known y-values
@{known_xs}: known x-values; default to an array {1, 2, 3, …}
@{affine}: if true, the model contains a constant term, defaults to true
@{stat}: if true, extra statistical information will be returned; defaults to FALSE
@DESCRIPTION=LOGEST function applies the “least squares” method to fit an exponential curve of the form	y = b * m{1}^x{1} * m{2}^x{2}... to your data.
LOGEST returns an array { m{n},m{n-1}, ...,m{1},b }.
@NOTE=Extra statistical information is written below the regression line coefficients in the result array.  Extra statistical information consists of four rows of data.  In the first row the standard error values for the coefficients m1, (m2, ...), b are represented.  The second row contains the square of R and the standard error for the y estimate.  The third row contains the F-observed value and the degrees of freedom.  The last row contains the regression sum of squares and the residual sum of squares. If @{known_ys} and @{known_xs} have unequal number of data points, this function returns a #NUM! error.
@SEEALSO=GROWTH,TREND

@CATEGORY=Statistics
@FUNCTION=LOGFIT
@SHORTDESC=logarithmic least square fit (using a trial and error method)
@SYNTAX=LOGFIT(known_ys,known_xs)
@ARGUMENTDESCRIPTION=@{known_ys}: known y-values
@{known_xs}: known x-values
@DESCRIPTION=LOGFIT function applies the “least squares” method to fit the logarithmic equation y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 to your data. The graph of the equation is a logarithmic curve moved horizontally by c and possibly mirrored across the y-axis (if sign = -1).
LOGFIT returns an array having five columns and one row. `Sign' is given in the first column, `a', `b', and `c' are given in columns 2 to 4. Column 5 holds the sum of squared residuals.
@NOTE=An error is returned when there are less than 3 different x's or y's, or when the shape of the point cloud is too different from a ``logarithmic'' one. You can use the above formula = a + b * ln(sign * (x - c)) or rearrange it to = (exp((y - a) / b)) / sign + c to compute unknown y's or x's, respectively.  This is non-linear fitting by trial-and-error. The accuracy of `c' is: width of x-range -> rounded to the next smaller (10^integer), times 0.000001. There might be cases in which the returned fit is not the best possible.
@SEEALSO=LOGREG,LINEST,LOGEST

@CATEGORY=Statistics
@FUNCTION=LOGINV
@SHORTDESC=inverse of the cumulative distribution function of the lognormal distribution
@SYNTAX=LOGINV(p,mean,stddev)
@ARGUMENTDESCRIPTION=@{p}: probability
@{mean}: mean
@{stddev}: standard deviation
@NOTE=If @{p} < 0 or @{p} > 1 or @{stddev} <= 0 this function returns #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMDIST

@CATEGORY=Statistics
@FUNCTION=LOGISTIC
@SHORTDESC=probability density function of the logistic distribution
@SYNTAX=LOGISTIC(x,a)
@ARGUMENTDESCRIPTION=@{x}: number
@{a}: scale parameter
@SEEALSO=RANDLOGISTIC

@CATEGORY=Statistics
@FUNCTION=LOGNORMDIST
@SHORTDESC=cumulative distribution function of the lognormal distribution
@SYNTAX=LOGNORMDIST(x,mean,stddev)
@ARGUMENTDESCRIPTION=@{x}: number
@{mean}: mean
@{stddev}: standard deviation
@NOTE=If @{stddev} = 0 LOGNORMDIST returns a #DIV/0! error. If @{x} <= 0, @{mean} < 0 or @{stddev} <= 0 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=NORMDIST

@CATEGORY=Statistics
@FUNCTION=LOGREG
@SHORTDESC=the logarithmic regression
@SYNTAX=LOGREG(known_ys,known_xs,affine,stat)
@ARGUMENTDESCRIPTION=@{known_ys}: known y-values
@{known_xs}: known x-values; defaults to the array {1, 2, 3, …}
@{affine}: if true, the model contains a constant term, defaults to true
@{stat}: if true, extra statistical information will be returned; defaults to FALSE
@DESCRIPTION=LOGREG function transforms your x's to z=ln(x) and applies the “least squares” method to fit the linear equation y = m * z + b to your y's and z's --- equivalent to fitting the equation y = m * ln(x) + b to y's and x's. LOGREG returns an array having two columns and one row. m is given in the first column and b in the second. 
Any extra statistical information is written below m and b in the result array.  This extra statistical information consists of four rows of data:  In the first row the standard error values for the coefficients m, b are given.  The second row contains the square of R and the standard error for the y estimate. The third row contains the F-observed value and the degrees of freedom.  The last row contains the regression sum of squares and the residual sum of squares.The default of @{stat} is FALSE.
@NOTE=If @{known_ys} and @{known_xs} have unequal number of data points, this function returns a #NUM! error.
@SEEALSO=LOGFIT,LINEST,LOGEST

@CATEGORY=Statistics
@FUNCTION=MAX
@SHORTDESC=largest value, with negative numbers considered smaller than positive numbers
@SYNTAX=MAX(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@EXCEL=This function is Excel compatible.
@SEEALSO=MIN,ABS

@CATEGORY=Statistics
@FUNCTION=MAXA
@SHORTDESC=largest value, with negative numbers considered smaller than positive numbers
@SYNTAX=MAXA(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
@EXCEL=This function is Excel compatible.
@SEEALSO=MAX,MINA

@CATEGORY=Statistics
@FUNCTION=MEDIAN
@SHORTDESC=median of a data set
@SYNTAX=MEDIAN(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Strings and empty cells are simply ignored.
@NOTE=If even numbers are given MEDIAN returns the average of the two numbers in the center.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,COUNT,COUNTA,DAVERAGE,MODE,SSMEDIAN,SUM

@CATEGORY=Statistics
@FUNCTION=MIN
@SHORTDESC=smallest value, with negative numbers considered smaller than positive numbers
@SYNTAX=MIN(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@EXCEL=This function is Excel compatible.
@SEEALSO=MAX,ABS

@CATEGORY=Statistics
@FUNCTION=MINA
@SHORTDESC=smallest value, with negative numbers considered smaller than positive numbers
@SYNTAX=MINA(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
@EXCEL=This function is Excel compatible.
@SEEALSO=MIN,MAXA

@CATEGORY=Statistics
@FUNCTION=MODE
@SHORTDESC=first most common number in the dataset
@SYNTAX=MODE(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Strings and empty cells are simply ignored.
If the data set does not contain any duplicates this function returns a #N/A error.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,MEDIAN

@CATEGORY=Statistics
@FUNCTION=NEGBINOMDIST
@SHORTDESC=probability mass function of the negative binomial distribution
@SYNTAX=NEGBINOMDIST(f,t,p)
@ARGUMENTDESCRIPTION=@{f}: number of failures
@{t}: threshold number of successes
@{p}: probability of a success
@NOTE=If @{f} or @{t} is a non-integer it is truncated. If (@{f} + @{t} -1) <= 0 this function returns a #NUM! error. If @{p} < 0 or @{p} > 1 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=BINOMDIST,COMBIN,FACT,HYPGEOMDIST,PERMUT

@CATEGORY=Statistics
@FUNCTION=NORMDIST
@SHORTDESC=probability density or cumulative distribution function of a normal distribution
@SYNTAX=NORMDIST(x,mean,stddev,cumulative)
@ARGUMENTDESCRIPTION=@{x}: number
@{mean}: mean of the distribution
@{stddev}: standard deviation of the distribution
@{cumulative}: whether to evaluate the density function or the cumulative distribution function
@NOTE=If @{stddev} is 0 this function returns a #DIV/0! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=POISSON

@CATEGORY=Statistics
@FUNCTION=NORMINV
@SHORTDESC=inverse of the cumulative distribution function of a normal distribution
@SYNTAX=NORMINV(p,mean,stddev)
@ARGUMENTDESCRIPTION=@{p}: probability
@{mean}: mean of the distribution
@{stddev}: standard deviation of the distribution
@NOTE=If @{p} < 0 or @{p} > 1 or @{stddev} <= 0 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=NORMDIST,NORMSDIST,NORMSINV,STANDARDIZE,ZTEST

@CATEGORY=Statistics
@FUNCTION=NORMSDIST
@SHORTDESC=cumulative distribution function of the standard normal distribution
@SYNTAX=NORMSDIST(x)
@ARGUMENTDESCRIPTION=@{x}: number
@EXCEL=This function is Excel compatible.
@ODF=NORMSDIST is the OpenFormula function LEGACY.NORMSDIST.
@SEEALSO=NORMDIST

@CATEGORY=Statistics
@FUNCTION=NORMSINV
@SHORTDESC=inverse of the cumulative distribution function of the standard normal distribution
@SYNTAX=NORMSINV(p)
@ARGUMENTDESCRIPTION=@{p}: given probability
@NOTE=If @{p} < 0 or @{p} > 1 this function returns #NUM! error.
@EXCEL=This function is Excel compatible.
@ODF=NORMSINV is the OpenFormula function LEGACY.NORMSINV.
@SEEALSO=NORMDIST,NORMINV,NORMSDIST,STANDARDIZE,ZTEST

@CATEGORY=Statistics
@FUNCTION=OWENT
@SHORTDESC=Owen's T function
@SYNTAX=OWENT(h,a)
@ARGUMENTDESCRIPTION=@{h}: number
@{a}: number
@SEEALSO=R.PSNORM,R.PST

@CATEGORY=Statistics
@FUNCTION=PARETO
@SHORTDESC=probability density function of the Pareto distribution
@SYNTAX=PARETO(x,a,b)
@ARGUMENTDESCRIPTION=@{x}: number
@{a}: exponent
@{b}: scale parameter
@SEEALSO=RANDPARETO

@CATEGORY=Statistics
@FUNCTION=PEARSON
@SHORTDESC=Pearson correlation coefficient of the paired set of data
@SYNTAX=PEARSON(array1,array2)
@ARGUMENTDESCRIPTION=@{array1}: first component values
@{array2}: second component values
@DESCRIPTION=Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=INTERCEPT,LINEST,RSQ,SLOPE,STEYX

@CATEGORY=Statistics
@FUNCTION=PERCENTILE
@SHORTDESC=determines the  100*@{k}-th percentile of the given data points
@SYNTAX=PERCENTILE(array,k)
@ARGUMENTDESCRIPTION=@{array}: data points
@{k}: which percentile to calculate
@NOTE=If @{array} is empty, this function returns a #NUM! error. If @{k} < 0 or @{k} > 1, this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=QUARTILE

@CATEGORY=Statistics
@FUNCTION=PERCENTRANK
@SHORTDESC=rank of a data point in a data set
@SYNTAX=PERCENTRANK(array,x,significance)
@ARGUMENTDESCRIPTION=@{array}: range of numeric values
@{x}: data point to be ranked
@{significance}: number of significant digits, defaults to 3
@NOTE=If @{array} contains no data points, this function returns a #NUM! error. If @{significance} is less than one, this function returns a #NUM! error. If @{x} exceeds the largest value or is less than the smallest value in @{array}, this function returns a #NUM! error. If @{x} does not match any of the values in @{array} or @{x} matches more than once, this function interpolates the returned value.
@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,QUARTILE,SMALL

@CATEGORY=Statistics
@FUNCTION=PERMUT
@SHORTDESC=number of @{k}-permutations of a @{n}-set
@SYNTAX=PERMUT(n,k)
@ARGUMENTDESCRIPTION=@{n}: size of the base set
@{k}: number of elements in each permutation
@NOTE=If @{n} = 0 this function returns a #NUM! error. If @{n} < @{k} this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=COMBIN

@CATEGORY=Statistics
@FUNCTION=PERMUTATIONA
@SHORTDESC=the number of permutations of @{y} objects chosen from @{x} objects with repetition allowed
@SYNTAX=PERMUTATIONA(x,y)
@ARGUMENTDESCRIPTION=@{x}: total number of objects
@{y}: number of selected objects
@NOTE=If both @{x} and @{y} equal 0, PERMUTATIONA returns 1. If @{x} < 0 or @{y} < 0, PERMUTATIONA returns #NUM! If @{x} or @{y} are not integers, they are truncated
@ODF=This function is OpenFormula compatible.
@SEEALSO=POWER

@CATEGORY=Statistics
@FUNCTION=POISSON
@SHORTDESC=probability mass or cumulative distribution function of the Poisson distribution
@SYNTAX=POISSON(x,mean,cumulative)
@ARGUMENTDESCRIPTION=@{x}: number of events
@{mean}: mean of the distribution
@{cumulative}: whether to evaluate the mass function or the cumulative distribution function
@NOTE=If @{x} is a non-integer it is truncated. If @{x} < 0 this function returns a #NUM! error. If @{mean} <= 0 POISSON returns the #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=NORMDIST,WEIBULL

@CATEGORY=Statistics
@FUNCTION=PROB
@SHORTDESC=probability of an interval for a discrete (and finite) probability distribution
@SYNTAX=PROB(x_range,prob_range,lower_limit,upper_limit)
@ARGUMENTDESCRIPTION=@{x_range}: possible values
@{prob_range}: probabilities of the corresponding values
@{lower_limit}: lower interval limit
@{upper_limit}: upper interval limit, defaults to @{lower_limit}
@NOTE=If the sum of the probabilities in @{prob_range} is not equal to 1 this function returns a #NUM! error. If any value in @{prob_range} is <=0 or > 1, this function returns a #NUM! error. If @{x_range} and @{prob_range} contain a different number of data entries, this function returns a #N/A error.
@EXCEL=This function is Excel compatible.
@SEEALSO=BINOMDIST,CRITBINOM

@CATEGORY=Statistics
@FUNCTION=QUARTILE
@SHORTDESC=the @{k}-th quartile of the data points
@SYNTAX=QUARTILE(array,quart)
@ARGUMENTDESCRIPTION=@{array}: data points
@{quart}: a number from 0 to 4, indicating which quartile to calculate
@NOTE=If @{array} is empty, this function returns a #NUM! error. If @{quart} < 0 or @{quart} > 4, this function returns a #NUM! error. If @{quart} = 0, the smallest value of @{array} to be returned. If @{quart} is not an integer, it is truncated.
@EXCEL=This function is Excel compatible.
@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,SMALL

@CATEGORY=Statistics
@FUNCTION=R.DBETA
@SHORTDESC=probability density function of the beta distribution
@SYNTAX=R.DBETA(x,a,b,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{a}: the first shape parameter of the distribution
@{b}: the second scale parameter of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the beta distribution.
@SEEALSO=R.PBETA,R.QBETA

@CATEGORY=Statistics
@FUNCTION=R.DBINOM
@SHORTDESC=probability density function of the binomial distribution
@SYNTAX=R.DBINOM(x,n,psuc,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n}: the number of trials
@{psuc}: the probability of success in each trial
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the binomial distribution.
@SEEALSO=R.PBINOM,R.QBINOM

@CATEGORY=Statistics
@FUNCTION=R.DCAUCHY
@SHORTDESC=probability density function of the Cauchy distribution
@SYNTAX=R.DCAUCHY(x,location,scale,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{location}: the center of the distribution
@{scale}: the scale parameter of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the Cauchy distribution.
@SEEALSO=R.PCAUCHY,R.QCAUCHY

@CATEGORY=Statistics
@FUNCTION=R.DCHISQ
@SHORTDESC=probability density function of the chi-square distribution
@SYNTAX=R.DCHISQ(x,df,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{df}: the number of degrees of freedom of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the chi-square distribution.
@ODF=A two argument invocation R.DCHISQ(@{x},@{df}) is exported to OpenFormula as CHISQDIST(@{x},@{df},FALSE()).
@SEEALSO=R.PCHISQ,R.QCHISQ

@CATEGORY=Statistics
@FUNCTION=R.DEXP
@SHORTDESC=probability density function of the exponential distribution
@SYNTAX=R.DEXP(x,scale,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{scale}: the scale parameter of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the exponential distribution.
@SEEALSO=R.PEXP,R.QEXP

@CATEGORY=Statistics
@FUNCTION=R.DF
@SHORTDESC=probability density function of the F distribution
@SYNTAX=R.DF(x,n1,n2,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n1}: the first number of degrees of freedom of the distribution
@{n2}: the second number of degrees of freedom of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the F distribution.
@SEEALSO=R.PF,R.QF

@CATEGORY=Statistics
@FUNCTION=R.DGAMMA
@SHORTDESC=probability density function of the gamma distribution
@SYNTAX=R.DGAMMA(x,shape,scale,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{shape}: the shape parameter of the distribution
@{scale}: the scale parameter of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the gamma distribution.
@SEEALSO=R.PGAMMA,R.QGAMMA

@CATEGORY=Statistics
@FUNCTION=R.DGEOM
@SHORTDESC=probability density function of the geometric distribution
@SYNTAX=R.DGEOM(x,psuc,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{psuc}: the probability of success in each trial
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the geometric distribution.
@SEEALSO=R.PGEOM,R.QGEOM

@CATEGORY=Statistics
@FUNCTION=R.DHYPER
@SHORTDESC=probability density function of the hypergeometric distribution
@SYNTAX=R.DHYPER(x,r,b,n,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{r}: the number of red balls
@{b}: the number of black balls
@{n}: the number of balls drawn
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the hypergeometric distribution.
@SEEALSO=R.PHYPER,R.QHYPER

@CATEGORY=Statistics
@FUNCTION=R.DLNORM
@SHORTDESC=probability density function of the log-normal distribution
@SYNTAX=R.DLNORM(x,logmean,logsd,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{logmean}: mean of the underlying normal distribution
@{logsd}: standard deviation of the underlying normal distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the log-normal distribution.
@SEEALSO=R.PLNORM,R.QLNORM

@CATEGORY=Statistics
@FUNCTION=R.DNBINOM
@SHORTDESC=probability density function of the negative binomial distribution
@SYNTAX=R.DNBINOM(x,n,psuc,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation (number of failures)
@{n}: required number of successes
@{psuc}: the probability of success in each trial
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the negative binomial distribution.
@SEEALSO=R.PNBINOM,R.QNBINOM

@CATEGORY=Statistics
@FUNCTION=R.DNORM
@SHORTDESC=probability density function of the normal distribution
@SYNTAX=R.DNORM(x,mu,sigma,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{mu}: mean of the distribution
@{sigma}: standard deviation of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the normal distribution.
@SEEALSO=R.PNORM,R.QNORM

@CATEGORY=Statistics
@FUNCTION=R.DPOIS
@SHORTDESC=probability density function of the Poisson distribution
@SYNTAX=R.DPOIS(x,lambda,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{lambda}: the mean of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the Poisson distribution.
@SEEALSO=R.PPOIS,R.QPOIS

@CATEGORY=Statistics
@FUNCTION=R.DSNORM
@SHORTDESC=probability density function of the skew-normal distribution
@SYNTAX=R.DSNORM(x,shape,location,scale,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{shape}: the shape parameter of the distribution
@{location}: the location parameter of the distribution
@{scale}: the scale parameter of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the skew-normal distribution.
@SEEALSO=R.PSNORM,R.QSNORM

@CATEGORY=Statistics
@FUNCTION=R.DST
@SHORTDESC=probability density function of the skew-t distribution
@SYNTAX=R.DST(x,n,shape,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n}: the number of degrees of freedom of the distribution
@{shape}: the shape parameter of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the skew-t distribution.
@SEEALSO=R.PST,R.QST

@CATEGORY=Statistics
@FUNCTION=R.DT
@SHORTDESC=probability density function of the Student t distribution
@SYNTAX=R.DT(x,n,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n}: the number of degrees of freedom of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the Student t distribution.
@SEEALSO=R.PT,R.QT

@CATEGORY=Statistics
@FUNCTION=R.DWEIBULL
@SHORTDESC=probability density function of the Weibull distribution
@SYNTAX=R.DWEIBULL(x,shape,scale,give_log)
@ARGUMENTDESCRIPTION=@{x}: observation
@{shape}: the shape parameter of the distribution
@{scale}: the scale parameter of the distribution
@{give_log}: if true, log of the result will be returned instead
@DESCRIPTION=This function returns the probability density function of the Weibull distribution.
@SEEALSO=R.PWEIBULL,R.QWEIBULL

@CATEGORY=Statistics
@FUNCTION=R.PBETA
@SHORTDESC=cumulative distribution function of the beta distribution
@SYNTAX=R.PBETA(x,a,b,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{a}: the first shape parameter of the distribution
@{b}: the second scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the beta distribution.
@SEEALSO=R.DBETA,R.QBETA

@CATEGORY=Statistics
@FUNCTION=R.PBINOM
@SHORTDESC=cumulative distribution function of the binomial distribution
@SYNTAX=R.PBINOM(x,n,psuc,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n}: the number of trials
@{psuc}: the probability of success in each trial
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the binomial distribution.
@SEEALSO=R.DBINOM,R.QBINOM

@CATEGORY=Statistics
@FUNCTION=R.PCAUCHY
@SHORTDESC=cumulative distribution function of the Cauchy distribution
@SYNTAX=R.PCAUCHY(x,location,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{location}: the center of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the Cauchy distribution.
@SEEALSO=R.DCAUCHY,R.QCAUCHY

@CATEGORY=Statistics
@FUNCTION=R.PCHISQ
@SHORTDESC=cumulative distribution function of the chi-square distribution
@SYNTAX=R.PCHISQ(x,df,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{df}: the number of degrees of freedom of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the chi-square distribution.
@ODF=A two argument invocation R.PCHISQ(@{x},@{df}) is exported to OpenFormula as CHISQDIST(@{x},@{df}).
@SEEALSO=R.DCHISQ,R.QCHISQ

@CATEGORY=Statistics
@FUNCTION=R.PEXP
@SHORTDESC=cumulative distribution function of the exponential distribution
@SYNTAX=R.PEXP(x,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the exponential distribution.
@SEEALSO=R.DEXP,R.QEXP

@CATEGORY=Statistics
@FUNCTION=R.PF
@SHORTDESC=cumulative distribution function of the F distribution
@SYNTAX=R.PF(x,n1,n2,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n1}: the first number of degrees of freedom of the distribution
@{n2}: the second number of degrees of freedom of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the F distribution.
@SEEALSO=R.DF,R.QF

@CATEGORY=Statistics
@FUNCTION=R.PGAMMA
@SHORTDESC=cumulative distribution function of the gamma distribution
@SYNTAX=R.PGAMMA(x,shape,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{shape}: the shape parameter of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the gamma distribution.
@SEEALSO=R.DGAMMA,R.QGAMMA

@CATEGORY=Statistics
@FUNCTION=R.PGEOM
@SHORTDESC=cumulative distribution function of the geometric distribution
@SYNTAX=R.PGEOM(x,psuc,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{psuc}: the probability of success in each trial
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the geometric distribution.
@SEEALSO=R.DGEOM,R.QGEOM

@CATEGORY=Statistics
@FUNCTION=R.PHYPER
@SHORTDESC=cumulative distribution function of the hypergeometric distribution
@SYNTAX=R.PHYPER(x,r,b,n,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{r}: the number of red balls
@{b}: the number of black balls
@{n}: the number of balls drawn
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the hypergeometric distribution.
@SEEALSO=R.DHYPER,R.QHYPER

@CATEGORY=Statistics
@FUNCTION=R.PLNORM
@SHORTDESC=cumulative distribution function of the log-normal distribution
@SYNTAX=R.PLNORM(x,logmean,logsd,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{logmean}: mean of the underlying normal distribution
@{logsd}: standard deviation of the underlying normal distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the log-normal distribution.
@SEEALSO=R.DLNORM,R.QLNORM

@CATEGORY=Statistics
@FUNCTION=R.PNBINOM
@SHORTDESC=cumulative distribution function of the negative binomial distribution
@SYNTAX=R.PNBINOM(x,n,psuc,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation (number of failures)
@{n}: required number of successes
@{psuc}: the probability of success in each trial
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the negative binomial distribution.
@SEEALSO=R.DNBINOM,R.QNBINOM

@CATEGORY=Statistics
@FUNCTION=R.PNORM
@SHORTDESC=cumulative distribution function of the normal distribution
@SYNTAX=R.PNORM(x,mu,sigma,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{mu}: mean of the distribution
@{sigma}: standard deviation of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the normal distribution.
@SEEALSO=R.DNORM,R.QNORM

@CATEGORY=Statistics
@FUNCTION=R.PPOIS
@SHORTDESC=cumulative distribution function of the Poisson distribution
@SYNTAX=R.PPOIS(x,lambda,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{lambda}: the mean of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the Poisson distribution.
@SEEALSO=R.DPOIS,R.QPOIS

@CATEGORY=Statistics
@FUNCTION=R.PSNORM
@SHORTDESC=cumulative distribution function of the skew-normal distribution
@SYNTAX=R.PSNORM(x,shape,location,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{shape}: the shape parameter of the distribution
@{location}: the location parameter of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the skew-normal distribution.
@SEEALSO=R.DSNORM,R.QSNORM

@CATEGORY=Statistics
@FUNCTION=R.PST
@SHORTDESC=cumulative distribution function of the skew-t distribution
@SYNTAX=R.PST(x,n,shape,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n}: the number of degrees of freedom of the distribution
@{shape}: the shape parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the skew-t distribution.
@SEEALSO=R.DST,R.QST

@CATEGORY=Statistics
@FUNCTION=R.PT
@SHORTDESC=cumulative distribution function of the Student t distribution
@SYNTAX=R.PT(x,n,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{n}: the number of degrees of freedom of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the Student t distribution.
@SEEALSO=R.DT,R.QT

@CATEGORY=Statistics
@FUNCTION=R.PTUKEY
@SHORTDESC=cumulative distribution function of the Studentized range distribution
@SYNTAX=R.PTUKEY(x,nmeans,df,nranges,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{nmeans}: the number of means
@{df}: the number of degrees of freedom of the distribution
@{nranges}: the number of ranges; default is 1
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the Studentized range distribution.
@SEEALSO=R.QTUKEY

@CATEGORY=Statistics
@FUNCTION=R.PWEIBULL
@SHORTDESC=cumulative distribution function of the Weibull distribution
@SYNTAX=R.PWEIBULL(x,shape,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{x}: observation
@{shape}: the shape parameter of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the cumulative distribution function of the Weibull distribution.
@SEEALSO=R.DWEIBULL,R.QWEIBULL

@CATEGORY=Statistics
@FUNCTION=R.QBETA
@SHORTDESC=probability quantile function of the beta distribution
@SYNTAX=R.QBETA(p,a,b,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{a}: the first shape parameter of the distribution
@{b}: the second scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the beta distribution.
@SEEALSO=R.DBETA,R.PBETA

@CATEGORY=Statistics
@FUNCTION=R.QBINOM
@SHORTDESC=probability quantile function of the binomial distribution
@SYNTAX=R.QBINOM(p,n,psuc,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{n}: the number of trials
@{psuc}: the probability of success in each trial
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the binomial distribution.
@SEEALSO=R.DBINOM,R.PBINOM

@CATEGORY=Statistics
@FUNCTION=R.QCAUCHY
@SHORTDESC=probability quantile function of the Cauchy distribution
@SYNTAX=R.QCAUCHY(p,location,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{location}: the center of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the Cauchy distribution.
@SEEALSO=R.DCAUCHY,R.PCAUCHY

@CATEGORY=Statistics
@FUNCTION=R.QCHISQ
@SHORTDESC=probability quantile function of the chi-square distribution
@SYNTAX=R.QCHISQ(p,df,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{df}: the number of degrees of freedom of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the chi-square distribution.
@ODF=A two argument invocation R.QCHISQ(@{p},@{df}) is exported to OpenFormula as CHISQINV(@{p},@{df}).
@SEEALSO=R.DCHISQ,R.PCHISQ

@CATEGORY=Statistics
@FUNCTION=R.QEXP
@SHORTDESC=probability quantile function of the exponential distribution
@SYNTAX=R.QEXP(p,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the exponential distribution.
@SEEALSO=R.DEXP,R.PEXP

@CATEGORY=Statistics
@FUNCTION=R.QF
@SHORTDESC=probability quantile function of the F distribution
@SYNTAX=R.QF(p,n1,n2,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{n1}: the first number of degrees of freedom of the distribution
@{n2}: the second number of degrees of freedom of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the F distribution.
@SEEALSO=R.DF,R.PF

@CATEGORY=Statistics
@FUNCTION=R.QGAMMA
@SHORTDESC=probability quantile function of the gamma distribution
@SYNTAX=R.QGAMMA(p,shape,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{shape}: the shape parameter of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the gamma distribution.
@SEEALSO=R.DGAMMA,R.PGAMMA

@CATEGORY=Statistics
@FUNCTION=R.QGEOM
@SHORTDESC=probability quantile function of the geometric distribution
@SYNTAX=R.QGEOM(p,psuc,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{psuc}: the probability of success in each trial
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the geometric distribution.
@SEEALSO=R.DGEOM,R.PGEOM

@CATEGORY=Statistics
@FUNCTION=R.QHYPER
@SHORTDESC=probability quantile function of the hypergeometric distribution
@SYNTAX=R.QHYPER(p,r,b,n,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{r}: the number of red balls
@{b}: the number of black balls
@{n}: the number of balls drawn
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the hypergeometric distribution.
@SEEALSO=R.DHYPER,R.PHYPER

@CATEGORY=Statistics
@FUNCTION=R.QLNORM
@SHORTDESC=probability quantile function of the log-normal distribution
@SYNTAX=R.QLNORM(p,logmean,logsd,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{logmean}: mean of the underlying normal distribution
@{logsd}: standard deviation of the underlying normal distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the log-normal distribution.
@SEEALSO=R.DLNORM,R.PLNORM

@CATEGORY=Statistics
@FUNCTION=R.QNBINOM
@SHORTDESC=probability quantile function of the negative binomial distribution
@SYNTAX=R.QNBINOM(p,n,psuc,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{n}: required number of successes
@{psuc}: the probability of success in each trial
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the negative binomial distribution.
@SEEALSO=R.DNBINOM,R.PNBINOM

@CATEGORY=Statistics
@FUNCTION=R.QNORM
@SHORTDESC=probability quantile function of the normal distribution
@SYNTAX=R.QNORM(p,mu,sigma,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{mu}: mean of the distribution
@{sigma}: standard deviation of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the normal distribution.
@SEEALSO=R.DNORM,R.PNORM

@CATEGORY=Statistics
@FUNCTION=R.QPOIS
@SHORTDESC=probability quantile function of the Poisson distribution
@SYNTAX=R.QPOIS(p,lambda,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{lambda}: the mean of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the Poisson distribution.
@SEEALSO=R.DPOIS,R.PPOIS

@CATEGORY=Statistics
@FUNCTION=R.QSNORM
@SHORTDESC=probability quantile function of the skew-normal distribution
@SYNTAX=R.QSNORM(p,shape,location,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{shape}: the shape parameter of the distribution
@{location}: the location parameter of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the skew-normal distribution.
@SEEALSO=R.DSNORM,R.PSNORM

@CATEGORY=Statistics
@FUNCTION=R.QST
@SHORTDESC=probability quantile function of the skew-t distribution
@SYNTAX=R.QST(p,n,shape,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{n}: the number of degrees of freedom of the distribution
@{shape}: the shape parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the skew-t distribution.
@SEEALSO=R.DST,R.PST

@CATEGORY=Statistics
@FUNCTION=R.QT
@SHORTDESC=probability quantile function of the Student t distribution
@SYNTAX=R.QT(p,n,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{n}: the number of degrees of freedom of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the Student t distribution.
@SEEALSO=R.DT,R.PT

@CATEGORY=Statistics
@FUNCTION=R.QTUKEY
@SHORTDESC=probability quantile function of the Studentized range distribution
@SYNTAX=R.QTUKEY(p,nmeans,df,nranges,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{nmeans}: the number of means
@{df}: the number of degrees of freedom of the distribution
@{nranges}: the number of ranges; default is 1
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the Studentized range distribution.
@SEEALSO=R.PTUKEY

@CATEGORY=Statistics
@FUNCTION=R.QWEIBULL
@SHORTDESC=probability quantile function of the Weibull distribution
@SYNTAX=R.QWEIBULL(p,shape,scale,lower_tail,log_p)
@ARGUMENTDESCRIPTION=@{p}: probability or natural logarithm of the probability
@{shape}: the shape parameter of the distribution
@{scale}: the scale parameter of the distribution
@{lower_tail}: if true (the default), the lower tail of the distribution is considered
@{log_p}: if true, the natural logarithm of the probability is given or returned; defaults to false
@DESCRIPTION=This function returns the probability quantile function, i.e., the inverse of the cumulative distribution function, of the Weibull distribution.
@SEEALSO=R.DWEIBULL,R.PWEIBULL

@CATEGORY=Statistics
@FUNCTION=RANK
@SHORTDESC=rank of a number in a list of numbers
@SYNTAX=RANK(x,ref,order)
@ARGUMENTDESCRIPTION=@{x}: number whose rank you want to find
@{ref}: list of numbers
@{order}: 0 (descending order) or non-zero (ascending order); defaults to 0
@NOTE=In case of a tie, RANK returns the largest possible rank.
@EXCEL=This function is Excel compatible.
@SEEALSO=PERCENTRANK,RANK.AVG

@CATEGORY=Statistics
@FUNCTION=RANK.AVG
@SHORTDESC=rank of a number in a list of numbers
@SYNTAX=RANK.AVG(x,ref,order)
@ARGUMENTDESCRIPTION=@{x}: number whose rank you want to find
@{ref}: list of numbers
@{order}: 0 (descending order) or non-zero (ascending order); defaults to 0
@NOTE=In case of a tie, RANK returns the average rank.
@EXCEL=This function is Excel 2010 compatible.
@SEEALSO=PERCENTRANK,RANK

@CATEGORY=Statistics
@FUNCTION=RAYLEIGH
@SHORTDESC=probability density function of the Rayleigh distribution
@SYNTAX=RAYLEIGH(x,sigma)
@ARGUMENTDESCRIPTION=@{x}: number
@{sigma}: scale parameter
@SEEALSO=RANDRAYLEIGH

@CATEGORY=Statistics
@FUNCTION=RAYLEIGHTAIL
@SHORTDESC=probability density function of the Rayleigh tail distribution
@SYNTAX=RAYLEIGHTAIL(x,a,sigma)
@ARGUMENTDESCRIPTION=@{x}: number
@{a}: lower limit
@{sigma}: scale parameter
@SEEALSO=RANDRAYLEIGHTAIL

@CATEGORY=Statistics
@FUNCTION=RSQ
@SHORTDESC=square of the Pearson correlation coefficient of the paired set of data
@SYNTAX=RSQ(array1,array2)
@ARGUMENTDESCRIPTION=@{array1}: first component values
@{array2}: second component values
@DESCRIPTION=Strings and empty cells are simply ignored.
@EXCEL=This function is Excel compatible.
@SEEALSO=CORREL,COVAR,INTERCEPT,LINEST,LOGEST,PEARSON,SLOPE,STEYX,TREND

@CATEGORY=Statistics
@FUNCTION=SFTEST
@SHORTDESC=Shapiro-Francia Test of Normality
@SYNTAX=SFTEST(x)
@ARGUMENTDESCRIPTION=@{x}: array of sample values
@DESCRIPTION=This function returns an array with the first row giving the p-value of the Shapiro-Francia Test, the second row the test statistic of the test, and the third the number of observations in the sample.
@NOTE=If there are less than 5 or more than 5000 sample values, SFTEST returns #VALUE!
@SEEALSO=CHITEST,ADTEST,LKSTEST,CVMTEST

@CATEGORY=Statistics
@FUNCTION=SKEW
@SHORTDESC=unbiased estimate for skewness of a distribution
@SYNTAX=SKEW(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Strings and empty cells are simply ignored.
@NOTE=This is only meaningful if the underlying distribution really has a third moment.  The skewness of a symmetric (e.g., normal) distribution is zero. If less than three numbers are given, this function returns a #DIV/0! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,VAR,SKEWP,KURT

@CATEGORY=Statistics
@FUNCTION=SKEWP
@SHORTDESC=population skewness of a data set
@SYNTAX=SKEWP(number1,number2,…)
@ARGUMENTDESCRIPTION=@{number1}: first value
@{number2}: second value
@DESCRIPTION=Strings and empty cells are simply ignored.
@NOTE=If less than two numbers are given, SKEWP returns a #DIV/0! error.
@SEEALSO=AVERAGE,VARP,SKEW,KURTP

@CATEGORY=Statistics
@FUNCTION=SLOPE
@SHORTDESC=the slope of a linear regression line
@SYNTAX=SLOPE(known_ys,known_xs)
@ARGUMENTDESCRIPTION=@{known_ys}: known y-values
@{known_xs}: known x-values
@NOTE=If @{known_xs} or @{known_ys} contains no data entries or different number of data entries, this function returns a #N/A error. If the variance of the @{known_xs} is zero, this function returns #DIV/0 error.
@EXCEL=This function is Excel compatible.
@SEEALSO=STDEV,STDEVPA

@CATEGORY=Statistics
@FUNCTION=SMALL
@SHORTDESC=@{k}-th smallest value in a data set
@SYNTAX=SMALL(data,k)
@ARGUMENTDESCRIPTION=@{data}: data set
@{k}: which value to find
@NOTE=If data set is empty this function returns a #NUM! error. If @{k} <= 0 or @{k} is greater than the number of data items given this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,LARGE

@CATEGORY=Statistics
@FUNCTION=SNORM.DIST.RANGE
@SHORTDESC=probability of the standard normal distribution over an interval
@SYNTAX=SNORM.DIST.RANGE(x1,x2)
@ARGUMENTDESCRIPTION=@{x1}: start of the interval
@{x2}: end of the interval
@DESCRIPTION=This function returns the cumulative probability over a range of the standard normal distribution; that is the integral over the probability density function from @{x1} to @{x2}.
@NOTE=If @{x1}>@{x2}, this function returns a negative value.
@SEEALSO=NORMSDIST,R.PNORM,R.QNORM,R.DNORM

@CATEGORY=Statistics
@FUNCTION=SSMEDIAN
@SHORTDESC=median for grouped data
@SYNTAX=SSMEDIAN(array,interval)
@ARGUMENTDESCRIPTION=@{array}: data set
@{interval}: length of each grouping interval, defaults to 1
@DESCRIPTION=The data are assumed to be grouped into intervals of width @{interval}. Each data point in @{array} is the midpoint of the interval containing the true value. The median is calculated by interpolation within the median interval (the interval containing the median value), assuming that the true values within that interval are distributed uniformly:
median = L + @{interval}*(N/2 - CF)/F
where:
L = the lower limit of the median interval
N = the total number of data points
CF = the number of data points below the median interval
F = the number of data points in the median interval
@NOTE=If @{array} is empty, this function returns a #NUM! error. If @{interval} <= 0, this function returns a #NUM! error. SSMEDIAN does not check whether the data points are at least @{interval} apart.
@SEEALSO=MEDIAN

@CATEGORY=Statistics
@FUNCTION=STANDARDIZE
@SHORTDESC=z-score of a value
@SYNTAX=STANDARDIZE(x,mean,stddev)
@ARGUMENTDESCRIPTION=@{x}: value
@{mean}: mean of the original distribution
@{stddev}: standard deviation of the original distribution
@NOTE=If @{stddev} is 0 this function returns a #DIV/0! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE

@CATEGORY=Statistics
@FUNCTION=STDEV
@SHORTDESC=sample standard deviation of the given sample
@SYNTAX=STDEV(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=STDEV is also known as the N-1-standard deviation.
To obtain the population standard deviation of a whole population use STDEVP.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,DSTDEV,DSTDEVP,STDEVA,STDEVPA,VAR

@CATEGORY=Statistics
@FUNCTION=STDEVA
@SHORTDESC=sample standard deviation of the given sample
@SYNTAX=STDEVA(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=STDEVA is also known as the N-1-standard deviation.
To obtain the population standard deviation of a whole population use STDEVPA.
Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
@EXCEL=This function is Excel compatible.
@SEEALSO=STDEV,STDEVPA

@CATEGORY=Statistics
@FUNCTION=STDEVP
@SHORTDESC=population standard deviation of the given population
@SYNTAX=STDEVP(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=This is also known as the N-standard deviation
@EXCEL=This function is Excel compatible.
@SEEALSO=STDEV,STDEVA,STDEVPA

@CATEGORY=Statistics
@FUNCTION=STDEVPA
@SHORTDESC=population standard deviation of an entire population
@SYNTAX=STDEVPA(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=This is also known as the N-standard deviation
Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
@EXCEL=This function is Excel compatible.
@SEEALSO=STDEVA,STDEVP

@CATEGORY=Statistics
@FUNCTION=STEYX
@SHORTDESC=standard error of the predicted y-value in the regression
@SYNTAX=STEYX(known_ys,known_xs)
@ARGUMENTDESCRIPTION=@{known_ys}: known y-values
@{known_xs}: known x-values
@NOTE=If @{known_ys} and @{known_xs} are empty or have a different number of arguments then this function returns a #N/A error.
@EXCEL=This function is Excel compatible.
@SEEALSO=PEARSON,RSQ,SLOPE

@CATEGORY=Statistics
@FUNCTION=SUBTOTAL
@SHORTDESC=the subtotal of the given list of arguments
@SYNTAX=SUBTOTAL(function_nbr,ref1,ref2,…)
@ARGUMENTDESCRIPTION=@{function_nbr}: determines which function to use according to the following table:
	1   AVERAGE
	2   COUNT
	3   COUNTA
	4   MAX
	5   MIN
	6   PRODUCT
	7   STDEV
	8   STDEVP
	9   SUM
	10   VAR
	11   VARP
@{ref1}: first value
@{ref2}: second value
@EXCEL=This function is Excel compatible.
@SEEALSO=COUNT,SUM

@CATEGORY=Statistics
@FUNCTION=TDIST
@SHORTDESC=survival function of the Student t-distribution
@SYNTAX=TDIST(x,dof,tails)
@ARGUMENTDESCRIPTION=@{x}: number
@{dof}: number of degrees of freedom
@{tails}: 1 or 2
@DESCRIPTION=The survival function is 1 minus the cumulative distribution function.
This function is Excel compatible for non-negative @{x}.
@NOTE=If @{dof} < 1 this function returns a #NUM! error. If @{tails} is neither 1 or 2 this function returns a #NUM! error. The parameterization of this function is different from what is used for, e.g., NORMSDIST.  This is a common source of mistakes, but necessary for compatibility.
@SEEALSO=TINV,TTEST

@CATEGORY=Statistics
@FUNCTION=TINV
@SHORTDESC=two tailed inverse of the Student t-distribution
@SYNTAX=TINV(p,dof)
@ARGUMENTDESCRIPTION=@{p}: probability in both tails
@{dof}: number of degrees of freedom
@DESCRIPTION=This function returns the non-negative value x such that the area under the Student t density with @{dof} degrees of freedom to the right of x is @{p}/2.
@NOTE=If @{p} < 0 or @{p} > 1 or @{dof} < 1 this function returns a #NUM! error. The parameterization of this function is different from what is used for, e.g., NORMSINV.  This is a common source of mistakes, but necessary for compatibility.
@EXCEL=This function is Excel compatible.
@SEEALSO=TDIST,TTEST

@CATEGORY=Statistics
@FUNCTION=TREND
@SHORTDESC=estimates future values of a given data set using a least squares approximation
@SYNTAX=TREND(known_ys,known_xs,new_xs,affine)
@ARGUMENTDESCRIPTION=@{known_ys}: vector of values of dependent variable
@{known_xs}: array of values of independent variables, defaults to a single vector {1,…,n}
@{new_xs}: array of x-values for which to estimate the y-values; defaults to @{known_xs}
@{affine}: if true, the model contains a constant term, defaults to true
@NOTE=If the length of @{known_ys} does not match the corresponding length of @{known_xs}, this function returns a #NUM! error.
@SEEALSO=LINEST

@CATEGORY=Statistics
@FUNCTION=TRIMMEAN
@SHORTDESC=mean of the interior of a data set
@SYNTAX=TRIMMEAN(ref,fraction)
@ARGUMENTDESCRIPTION=@{ref}: list of numbers whose mean you want to calculate
@{fraction}: fraction of the data set excluded from the mean
@DESCRIPTION=If @{fraction}=0.2 and the data set contains 40 numbers, 8 numbers are trimmed from the data set (40 x 0.2): the 4 largest and the 4 smallest. To avoid a bias, the number of points to be excluded is always rounded down to the nearest even number.
@EXCEL=This function is Excel compatible.
@SEEALSO=AVERAGE,GEOMEAN,HARMEAN,MEDIAN,MODE

@CATEGORY=Statistics
@FUNCTION=TTEST
@SHORTDESC=p-value for a hypothesis test comparing the means of two populations using the Student t-distribution
@SYNTAX=TTEST(array1,array2,tails,type)
@ARGUMENTDESCRIPTION=@{array1}: sample from the first population
@{array2}: sample from the second population
@{tails}: number of tails to consider
@{type}: Type of test to perform. 1 indicates a test for paired variables, 2 a test of unpaired variables with equal variances, and 3 a test of unpaired variables with unequal variances
@NOTE=If the data sets contain a different number of data points and the test is paired (@{type} one), TTEST returns the #N/A error. @{tails} and @{type} are truncated to integers. If @{tails} is not one or two, this function returns a #NUM! error. If @{type} is any other than one, two, or three, this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=FDIST,FINV

@CATEGORY=Statistics
@FUNCTION=VAR
@SHORTDESC=sample variance of the given sample
@SYNTAX=VAR(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=VAR is also known as the N-1-variance.
@NOTE=Since the N-1-variance includes Bessel's correction, whereas the N-variance calculated by VARPA or VARP does not, under reasonable conditions the N-1-variance is an unbiased estimator of the variance of the population from which the sample is drawn.
@EXCEL=This function is Excel compatible.
@SEEALSO=VARP,STDEV,VARA

@CATEGORY=Statistics
@FUNCTION=VARA
@SHORTDESC=sample variance of the given sample
@SYNTAX=VARA(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=VARA is also known as the N-1-variance.
To get the true variance of a complete population use VARPA.
Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
@NOTE=Since the N-1-variance includes Bessel's correction, whereas the N-variance calculated by VARPA or VARP does not, under reasonable conditions the N-1-variance is an unbiased estimator of the variance of the population from which the sample is drawn.
@EXCEL=This function is Excel compatible.
@SEEALSO=VAR,VARPA

@CATEGORY=Statistics
@FUNCTION=VARP
@SHORTDESC=variance of an entire population
@SYNTAX=VARP(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=VARP is also known as the N-variance.
@SEEALSO=AVERAGE,DVAR,DVARP,STDEV,VAR

@CATEGORY=Statistics
@FUNCTION=VARPA
@SHORTDESC=variance of an entire population
@SYNTAX=VARPA(area1,area2,…)
@ARGUMENTDESCRIPTION=@{area1}: first cell area
@{area2}: second cell area
@DESCRIPTION=VARPA is also known as the N-variance.
Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
@EXCEL=This function is Excel compatible.
@SEEALSO=VARA,VARP

@CATEGORY=Statistics
@FUNCTION=WEIBULL
@SHORTDESC=probability density or cumulative distribution function of the Weibull distribution
@SYNTAX=WEIBULL(x,alpha,beta,cumulative)
@ARGUMENTDESCRIPTION=@{x}: number
@{alpha}: scale parameter
@{beta}: scale parameter
@{cumulative}: whether to evaluate the density function or the cumulative distribution function
@DESCRIPTION=If the @{cumulative} boolean is true it will return: 1 - exp (-(@{x}/@{beta})^@{alpha}),otherwise it will return (@{alpha}/@{beta}^@{alpha}) * @{x}^(@{alpha}-1) * exp(-(@{x}/@{beta}^@{alpha})).
@NOTE=If @{x} < 0 this function returns a #NUM! error. If @{alpha} <= 0 or @{beta} <= 0 this function returns a #NUM! error.
@EXCEL=This function is Excel compatible.
@SEEALSO=POISSON

@CATEGORY=Statistics
@FUNCTION=ZTEST
@SHORTDESC=the probability of observing a sample mean as large as or larger than the mean of the given sample
@SYNTAX=ZTEST(ref,x,stddev)
@ARGUMENTDESCRIPTION=@{ref}: data set (sample)
@{x}: population mean
@{stddev}: population standard deviation, defaults to the sample standard deviation
@DESCRIPTION=ZTEST calculates the probability of observing a sample mean as large as or larger than the mean of the given sample for samples drawn from a normal distribution with mean @{x} and standard deviation @{stddev}.
@NOTE=If @{ref} contains less than two data items ZTEST returns #DIV/0! error.
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=CONFIDENCE,NORMDIST,NORMINV,NORMSDIST,NORMSINV,STANDARDIZE

@CATEGORY=String
@FUNCTION=ASC
@SHORTDESC=text with full-width katakana and ASCII characters converted to half-width
@SYNTAX=ASC(text)
@ARGUMENTDESCRIPTION=@{text}: string
@DESCRIPTION=ASC converts full-width katakana and ASCII characters to half-width equivalent characters, copying all others. 
The distinction between half-width and full-width characters is described in http://www.unicode.org/reports/tr11/.
@NOTE=While in obsolete encodings ASC used to translate between 2-byte and 1-byte characters, this is not the case in UTF-8.
@EXCEL=For most strings, this function has the same effect as in Excel.
@ODF=This function is OpenFormula compatible.
@SEEALSO=JIS

@CATEGORY=String
@FUNCTION=CHAR
@SHORTDESC=the CP1252 (Windows-1252) character for the code point @{x}
@SYNTAX=CHAR(x)
@ARGUMENTDESCRIPTION=@{x}: code point
@DESCRIPTION=CHAR(@{x}) returns the CP1252 (Windows-1252) character with code @{x}.
@{x} must be in the range 1 to 255.
CP1252 (Windows-1252) is also known as the "ANSI code page", but it is not an ANSI standard.
CP1252 (Windows-1252) is based on an early draft of ISO-8859-1, and contains all of its printable characters. It also contains all of ISO-8859-15's printable characters (but partially at different positions.)
This function is Excel compatible.
@NOTE=In CP1252 (Windows-1252), 129, 141, 143, 144, and 157 do not have matching characters. For @{x} from 1 to 255 except 129, 141, 143, 144, and 157 we have CODE(CHAR(@{x}))=@{x}.
@SEEALSO=CODE

@CATEGORY=String
@FUNCTION=CLEAN
@SHORTDESC=@{text} with any non-printable characters removed
@SYNTAX=CLEAN(text)
@ARGUMENTDESCRIPTION=@{text}: string
@DESCRIPTION=CLEAN removes non-printable characters from its argument leaving only regular characters and white-space.
@EXCEL=This function is Excel compatible.

@CATEGORY=String
@FUNCTION=CODE
@SHORTDESC=the CP1252 (Windows-1252) code point for the character @{c}
@SYNTAX=CODE(c)
@ARGUMENTDESCRIPTION=@{c}: character
@DESCRIPTION=@{c} must be a valid CP1252 (Windows-1252) character.
CP1252 (Windows-1252) is also known as the "ANSI code page", but it is not an ANSI standard.
CP1252 (Windows-1252) is based on an early draft of ISO-8859-1, and contains all of its printable characters (but partially at different positions.)
This function is Excel compatible.
@NOTE=In CP1252 (Windows-1252), 129, 141, 143, 144, and 157 do not have matching characters. For @{x} from 1 to 255 except 129, 141, 143, 144, and 157 we have CODE(CHAR(@{x}))=@{x}.
@SEEALSO=CHAR

@CATEGORY=String
@FUNCTION=CONCATENATE
@SHORTDESC=the concatenation of the strings @{s1}, @{s2},…
@SYNTAX=CONCATENATE(s1,s2,…)
@ARGUMENTDESCRIPTION=@{s1}: first string
@{s2}: second string
@EXCEL=This function is Excel compatible.
@SEEALSO=LEFT,MID,RIGHT

@CATEGORY=String
@FUNCTION=DOLLAR
@SHORTDESC=@{num} formatted as currency
@SYNTAX=DOLLAR(num,decimals)
@ARGUMENTDESCRIPTION=@{num}: number
@{decimals}: decimals
@EXCEL=This function is Excel compatible.
@SEEALSO=FIXED,TEXT,VALUE

@CATEGORY=String
@FUNCTION=EXACT
@SHORTDESC=TRUE if @{string1} is exactly equal to @{string2}
@SYNTAX=EXACT(string1,string2)
@ARGUMENTDESCRIPTION=@{string1}: first string
@{string2}: second string
@EXCEL=This function is Excel compatible.
@SEEALSO=LEN,SEARCH,DELTA

@CATEGORY=String
@FUNCTION=FIND
@SHORTDESC=first position of @{string1} in @{string2} following position @{start}
@SYNTAX=FIND(string1,string2,start)
@ARGUMENTDESCRIPTION=@{string1}: search string
@{string2}: search field
@{start}: starting position, defaults to 1
@NOTE=This search is case-sensitive.
@EXCEL=This function is Excel compatible.
@SEEALSO=EXACT,LEN,MID,SEARCH

@CATEGORY=String
@FUNCTION=FINDB
@SHORTDESC=first byte position of @{string1} in @{string2} following byte position @{start}
@SYNTAX=FINDB(string1,string2,start)
@ARGUMENTDESCRIPTION=@{string1}: search string
@{string2}: search field
@{start}: starting byte position, defaults to 1
@NOTE=This search is case-sensitive.
@EXCEL=While this function is syntactically Excel compatible, the differences in the underlying text encoding will usually yield different results.
@ODF=While this function is OpenFormula compatible, most of its behavior is, at this time, implementation specific.
@SEEALSO=FIND,LEFTB,RIGHTB,LENB,LEFT,MID,RIGHT,LEN

@CATEGORY=String
@FUNCTION=FIXED
@SHORTDESC=formatted string representation of @{num}
@SYNTAX=FIXED(num,decimals,no_commas)
@ARGUMENTDESCRIPTION=@{num}: number
@{decimals}: number of decimals
@{no_commas}: TRUE if no thousand separators should be used, defaults to FALSE
@EXCEL=This function is Excel compatible.
@SEEALSO=TEXT,VALUE,DOLLAR

@CATEGORY=String
@FUNCTION=JIS
@SHORTDESC=text with half-width katakana and ASCII characters converted to full-width
@SYNTAX=JIS(text)
@ARGUMENTDESCRIPTION=@{text}: original text
@DESCRIPTION=JIS converts half-width katakana and ASCII characters to full-width equivalent characters, copying all others. 
The distinction between half-width and full-width characters is described in http://www.unicode.org/reports/tr11/.
@NOTE=While in obsolete encodings JIS used to translate between 1-byte and 2-byte characters, this is not the case in UTF-8.
@EXCEL=For most strings, this function has the same effect as in Excel.
@ODF=This function is OpenFormula compatible.
@SEEALSO=ASC

@CATEGORY=String
@FUNCTION=LEFT
@SHORTDESC=the first @{num_chars} characters of the string @{s}
@SYNTAX=LEFT(s,num_chars)
@ARGUMENTDESCRIPTION=@{s}: the string
@{num_chars}: the number of characters to return (defaults to 1)
@NOTE=If the string @{s} is in a right-to-left script, the returned first characters are from the right of the string.
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=MID,RIGHT,LEN,MIDB,RIGHTB,LENB

@CATEGORY=String
@FUNCTION=LEFTB
@SHORTDESC=the first characters  of the string @{s} comprising at most @{num_bytes} bytes
@SYNTAX=LEFTB(s,num_bytes)
@ARGUMENTDESCRIPTION=@{s}: the string
@{num_bytes}: the maximum number of bytes to return (defaults to 1)
@NOTE=The semantics of this function is subject to change as various applications implement it. If the string is in a right-to-left script, the returned first characters are from the right of the string.
@EXCEL=While this function is syntactically Excel compatible, the differences in the underlying text encoding will usually yield different results.
@ODF=While this function is OpenFormula compatible, most of its behavior is, at this time, implementation specific.
@SEEALSO=MIDB,RIGHTB,LENB,LEFT,MID,RIGHT,LEN

@CATEGORY=String
@FUNCTION=LEN
@SHORTDESC=the number of characters of the string @{s}
@SYNTAX=LEN(s)
@ARGUMENTDESCRIPTION=@{s}: the string
@EXCEL=This function is Excel compatible.
@SEEALSO=CHAR,CODE,LENB

@CATEGORY=String
@FUNCTION=LENB
@SHORTDESC=the number of bytes in the string @{s}
@SYNTAX=LENB(s)
@ARGUMENTDESCRIPTION=@{s}: the string
@EXCEL=This function is Excel compatible.
@SEEALSO=CHAR, CODE, LEN

@CATEGORY=String
@FUNCTION=LOWER
@SHORTDESC=a lower-case version of the string @{text}
@SYNTAX=LOWER(text)
@ARGUMENTDESCRIPTION=@{text}: string
@EXCEL=This function is Excel compatible.
@SEEALSO=UPPER

@CATEGORY=String
@FUNCTION=MID
@SHORTDESC=the substring of the string @{s} starting at position @{position} consisting of @{length} characters
@SYNTAX=MID(s,position,length)
@ARGUMENTDESCRIPTION=@{s}: the string
@{position}: the starting position
@{length}: the number of characters to return
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=LEFT,RIGHT,LEN,LEFTB,MIDB,RIGHTB,LENB

@CATEGORY=String
@FUNCTION=MIDB
@SHORTDESC=the characters following the first @{start_pos} bytes comprising at most @{num_bytes} bytes
@SYNTAX=MIDB(s,start_pos,num_bytes)
@ARGUMENTDESCRIPTION=@{s}: the string
@{start_pos}: the number of the byte with which to start (defaults to 1)
@{num_bytes}: the maximum number of bytes to return (defaults to 1)
@NOTE=The semantics of this function is subject to change as various applications implement it.
@EXCEL=While this function is syntactically Excel compatible, the differences in the underlying text encoding will usually yield different results.
@ODF=While this function is OpenFormula compatible, most of its behavior is, at this time, implementation specific.
@SEEALSO=LEFTB,RIGHTB,LENB,LEFT,MID,RIGHT,LEN

@CATEGORY=String
@FUNCTION=NUMBERVALUE
@SHORTDESC=numeric value of @{text}
@SYNTAX=NUMBERVALUE(text,separator)
@ARGUMENTDESCRIPTION=@{text}: string
@{separator}: decimal separator
@NOTE=If @{text} does not look like a decimal number, NUMBERVALUE returns the value VALUE would return (ignoring the given @{separator}).
@ODF=This function is OpenFormula compatible.
@SEEALSO=VALUE

@CATEGORY=String
@FUNCTION=PROPER
@SHORTDESC=@{text} with initial of each word capitalised
@SYNTAX=PROPER(text)
@ARGUMENTDESCRIPTION=@{text}: string
@EXCEL=This function is Excel compatible.
@SEEALSO=LOWER,UPPER

@CATEGORY=String
@FUNCTION=REPLACE
@SHORTDESC=string @{old} with @{num} characters starting at @{start} replaced by @{new}
@SYNTAX=REPLACE(old,start,num,new)
@ARGUMENTDESCRIPTION=@{old}: original text
@{start}: starting position
@{num}: number of characters to be replaced
@{new}: replacement string
@EXCEL=This function is Excel compatible.
@SEEALSO=MID,SEARCH,SUBSTITUTE,TRIM

@CATEGORY=String
@FUNCTION=REPLACEB
@SHORTDESC=string @{old} with up to @{num} bytes starting at @{start} replaced by @{new}
@SYNTAX=REPLACEB(old,start,num,new)
@ARGUMENTDESCRIPTION=@{old}: original text
@{start}: starting byte position
@{num}: number of bytes to be replaced
@{new}: replacement string
@DESCRIPTION=REPLACEB replaces the string of valid unicode characters starting at the byte @{start} and ending at @{start}+@{num}-1 with the string @{new}.
@NOTE=The semantics of this function is subject to change as various applications implement it.
@EXCEL=While this function is syntactically Excel compatible, the differences in the underlying text encoding will usually yield different results.
@ODF=While this function is OpenFormula compatible, most of its behavior is, at this time, implementation specific.
@SEEALSO=MID,SEARCH,SUBSTITUTE,TRIM

@CATEGORY=String
@FUNCTION=REPT
@SHORTDESC=@{num} repetitions of string @{text}
@SYNTAX=REPT(text,num)
@ARGUMENTDESCRIPTION=@{text}: string
@{num}: non-negative integer
@EXCEL=This function is Excel compatible.
@SEEALSO=CONCATENATE

@CATEGORY=String
@FUNCTION=RIGHT
@SHORTDESC=the last @{num_chars} characters of the string @{s}
@SYNTAX=RIGHT(s,num_chars)
@ARGUMENTDESCRIPTION=@{s}: the string
@{num_chars}: the number of characters to return (defaults to 1)
@NOTE=If the string @{s} is in a right-to-left script, the returned last characters are from the left of the string.
@EXCEL=This function is Excel compatible.
@ODF=This function is OpenFormula compatible.
@SEEALSO=LEFT,MID,LEN,LEFTB,MIDB,RIGHTB,LENB

@CATEGORY=String
@FUNCTION=RIGHTB
@SHORTDESC=the last characters of the string @{s} comprising at most @{num_bytes} bytes
@SYNTAX=RIGHTB(s,num_bytes)
@ARGUMENTDESCRIPTION=@{s}: the string
@{num_bytes}: the maximum number of bytes to return (defaults to 1)
@NOTE=The semantics of this function is subject to change as various applications implement it. If the string @{s} is in a right-to-left script, the returned last characters are from the left of the string.
@EXCEL=While this function is syntactically Excel compatible, the differences in the underlying text encoding will usually yield different results.
@ODF=While this function is OpenFormula compatible, most of its behavior is, at this time, implementation specific.
@SEEALSO=LEFTB,MIDB,LENB,LEFT,MID,RIGHT,LEN

@CATEGORY=String
@FUNCTION=SEARCH
@SHORTDESC=the location of the @{search} string within @{text} after position @{start}
@SYNTAX=SEARCH(search,text,start)
@ARGUMENTDESCRIPTION=@{search}: search string
@{text}: search field
@{start}: starting position, defaults to 1
@DESCRIPTION=@{search} may contain wildcard characters (*) and question marks (?). A question mark matches any single character, and a wildcard matches any string including the empty string. To search for * or ?, precede the symbol with ~.
@NOTE=This search is not case sensitive. If @{search} is not found, SEARCH returns #VALUE! If @{start} is less than one or it is greater than the length of @{text}, SEARCH returns #VALUE!
@EXCEL=This function is Excel compatible.
@SEEALSO=FIND,SEARCHB

@CATEGORY=String
@FUNCTION=SEARCHB
@SHORTDESC=the location of the @{search} string within @{text} after byte position @{start}
@SYNTAX=SEARCHB(search,text,start)
@ARGUMENTDESCRIPTION=@{search}: search string
@{text}: search field
@{start}: starting byte position, defaults to 1
@DESCRIPTION=@{search} may contain wildcard characters (*) and question marks (?). A question mark matches any single character, and a wildcard matches any string including the empty string. To search for * or ?, precede the symbol with ~.
@NOTE=This search is not case sensitive. If @{search} is not found, SEARCHB returns #VALUE! If @{start} is less than one or it is greater than the byte length of @{text}, SEARCHB returns #VALUE! The semantics of this function is subject to change as various applications implement it.
@EXCEL=While this function is syntactically Excel compatible, the differences in the underlying text encoding will usually yield different results.
@ODF=While this function is OpenFormula compatible, most of its behavior is, at this time, implementation specific.
@SEEALSO=FINDB,SEARCH

@CATEGORY=String
@FUNCTION=SUBSTITUTE
@SHORTDESC=@{text} with all occurrences of @{old} replaced by @{new}
@SYNTAX=SUBSTITUTE(text,old,new,num)
@ARGUMENTDESCRIPTION=@{text}: original text
@{old}: string to be replaced
@{new}: replacement string
@{num}: if @{num} is specified and a number only the @{num}th occurrence of @{old} is replaced
@EXCEL=This function is Excel compatible.
@SEEALSO=REPLACE,TRIM

@CATEGORY=String
@FUNCTION=T
@SHORTDESC=@{value} if and only if @{value} is text, otherwise empty
@SYNTAX=T(value)
@ARGUMENTDESCRIPTION=@{value}: original value
@EXCEL=This function is Excel compatible.
@SEEALSO=CELL,N,VALUE

@CATEGORY=String
@FUNCTION=TEXT
@SHORTDESC=@{value} as a string formatted as @{format}
@SYNTAX=TEXT(value,format)
@ARGUMENTDESCRIPTION=@{value}: value to be formatted
@{format}: desired format
@EXCEL=This function is Excel compatible.
@SEEALSO=DOLLAR,FIXED,VALUE

@CATEGORY=String
@FUNCTION=TRIM
@SHORTDESC=@{text} with only single spaces between words
@SYNTAX=TRIM(text)
@ARGUMENTDESCRIPTION=@{text}: string
@EXCEL=This function is Excel compatible.
@SEEALSO=CLEAN,MID,REPLACE,SUBSTITUTE

@CATEGORY=String
@FUNCTION=UNICHAR
@SHORTDESC=the Unicode character represented by the Unicode code point @{x}
@SYNTAX=UNICHAR(x)
@ARGUMENTDESCRIPTION=@{x}: Unicode code point
@SEEALSO=CHAR,UNICODE,CODE

@CATEGORY=String
@FUNCTION=UNICODE
@SHORTDESC=the Unicode code point for the character @{c}
@SYNTAX=UNICODE(c)
@ARGUMENTDESCRIPTION=@{c}: character
@SEEALSO=UNICHAR,CODE,CHAR

@CATEGORY=String
@FUNCTION=UPPER
@SHORTDESC=an upper-case version of the string @{text}
@SYNTAX=UPPER(text)
@ARGUMENTDESCRIPTION=@{text}: string
@EXCEL=This function is Excel compatible.
@SEEALSO=LOWER

@CATEGORY=String
@FUNCTION=VALUE
@SHORTDESC=numeric value of @{text}
@SYNTAX=VALUE(text)
@ARGUMENTDESCRIPTION=@{text}: string
@EXCEL=This function is Excel compatible.
@SEEALSO=DOLLAR,FIXED,TEXT

